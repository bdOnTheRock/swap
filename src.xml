<db path="C:\Bernard\db1\pdb4">
  <file path="\pdb.player\Model\ArtWorkManager.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Media.Imaging;
using pdb.db.obj;
using pdb.db;
using System.IO;
using pdb.util.list;
using pdb.util;

namespace pdb.player.model
{
    class Img
    {
        public readonly long size;
        public readonly BitmapImage img;
        public Img(BitmapImage img, long size)
        {
            this.img = img;
            this.size = size;
        }
    }
    class ArtWorkManager
    {
        private Dictionary<string, Img> dicttagLib = new Dictionary<string, Img>();
        private Dictionary<string, Img> dictDir = new Dictionary<string, Img>();
        private Dictionary<int, BitmapImage> dictPiece = new Dictionary<int, BitmapImage>();
        private static Logger log = Logger.getLogger("Img");


        public BitmapImage get(CPiece p)
        {


            if (p == null)
                return null;  
            if (dictPiece.ContainsKey(p.MasterId))
            {
                return dictPiece[p.MasterId];
               
            }

            dictPiece.Add(p.MasterId, null);
            Img max = null; 


            
            foreach (CFile f in p.Files)
            {
                var filename = f.Path;
                if (dicttagLib.ContainsKey(filename))
                {
                    var _l = dicttagLib[filename];
                    if (_l != null && ( max == null || _l.size > max.size))
                    {
                        max = _l; 
                    }
                    continue;
                }

                dicttagLib.Add(filename, null);
                try
                {
                    if (f.exists())
                    {

                        var file = TagLib.File.Create(filename);

                        foreach (var pict in file.Tag.Pictures)
                        {
                            try
                            {
                                var bin = pict.Data.Data;
                                using (var stream = new MemoryStream(bin))
                                {
                                    BitmapImage i = new BitmapImage();
                                    i.BeginInit();
                                    i.StreamSource = stream;
                                    i.CacheOption = BitmapCacheOption.OnLoad;
                                    i.EndInit();
                                    i.Freeze();
                                    var size = bin.LongLength;
                                    if (max == null || size > max.size)
                                    {
                                        var img = new Img(i, size);
                                        max = img;
                                        dicttagLib[filename] = max; 
                                   
                                    }

                                    log.log("load img from tagLib {0} {1}", filename, FileUtil.HumanReadableSize(size, -1));

                                }
                            }

                            catch (Exception ex)
                            {
                            }
                        }

                    }

                }
                catch (Exception ex)
                {
                }
            }


            foreach (CFile f in p.Files)
            {
                var dir = Path.GetDirectoryName(f.Path);

                if (dictDir.ContainsKey(dir))
                {
                    var _l = dictDir[dir];
                    if (_l != null && (max == null || _l.size > max.size))
                    {
                        max = _l; 
                    }
                    continue;
                }

                dictDir.Add(dir, null);
                try
                {
                    if (f.exists())
                    {
                        var fdir = FileRegister.CheckDir(f.Path);
                        foreach (FileValue fimg in fdir.imgs)
                        {
                            try
                            {
                                var bin = File.ReadAllBytes(fimg.FullName);


                                using (var stream = new MemoryStream(bin))
                                {
                                    BitmapImage i = new BitmapImage();
                                    i.BeginInit();
                                    i.StreamSource = stream;
                                    i.CacheOption = BitmapCacheOption.OnLoad;
                                    i.EndInit();
                                    i.Freeze();
                                    var size = bin.LongLength;
                                   
                                    var img = new Img(i, size);

                                    if (max == null || size > max.size)
                                    {
                                        max = img; 
                                    }

                                    var item = dictDir[dir];
                                    if (item == null || size > item.size)
                                    {
                                        dictDir[dir] = img; 
                                    }

                                  
                                    log.log("load img from src {0} {1}", fimg.FullName, FileUtil.HumanReadableSize(size, -1));

                                }
                            }

                            catch (Exception ex)
                            {
                            }
                        }
                    }



                }

                catch (Exception ex)
                {
                }

            }
            //if (list.Count > 0)
            //{
            //    list.Sort((x, y) => x.size.CompareTo(y.size));
            //    list.Reverse();
            //    var ll = new SimpleLinkedList<BitmapImage>();
            //    foreach (Img img in list)
            //    {
            //        ll.add(img.img);
            //        ret.Add(img.img);
            //    }
            //    dictPiece[p.MasterId] = ll;
            //}
            if (max == null)
                return null;
            dictPiece[p.MasterId] = max.img; 
            return max.img  ; 
        }
    }
}
]]></content>
  </file>
</db>
