<db path="C:\Bernard\db1\PieceDb3Ref">
   <file path="\pdb.ordo\BackGroundTaskMgr.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Threading;
using pdb.ordo.conf;
using pdb.util;
using pdb.obj;
using System.IO;
using System.Globalization;
using pdb.ordo.persistance;
using Math = System.Math; 

namespace pdb.ordo
{

    public class BackGroundTaskMgr
    {
        public const int NB_PROC = 5;
        private ThreadUtil th;
        private static ThreadUtil sTh;
        private bool async = true;
        private int nb;
        private bool classAbort;
        private double ms = 1;
        private double cms = 1;
        private double[] msProc = new double[NB_PROC];
        //private double msProc = 0;
        //private double msProc2 = 0;
        private double[] msProcStop = new double[NB_PROC];
        //private double msProcStop = 0;
        //private double msProcStop2 = 0; 
        private bool used;
        private static ConfOrdo conf = new ConfOrdo();
        private DateTime lastActivity = DateTime.Now;
        private static Logger log = Logger.getLogger("Bg");
        private static Logger logOrdo = Logger.getLogger("Ordo", log);
        private static bool playing;
        public static bool Playing
        {
            set
            {
                if (playing != value)
                {
                    log.log("changement status playing:=>{0}", value);
                    playing = value;
                }
            }
            get { return playing; }
        }
        // private static bool _abortSpecial = false; 

        #region obs
        private static List<Action> observersImportant = new List<Action>();
        public static void addObserverImportant(Action obs) { observersImportant.Add(obs); }
        private static void OnImportantTask()
        {
            foreach (Action obs in observersImportant)
                obs();
        }

        private static List<Action> observersClass = new List<Action>();
        public static void addObserverClass(Action obs) { observersClass.Add(obs); }
        private static void OnClassTask()
        {
            foreach (Action obs in observersClass)
                obs();
        }
        #endregion
        public static ConfOrdo Conf
        {
            set
            {
                conf = value;
                _ordonnancement = conf.Enable;
                taskDelayError = conf.TaskDelayError;
                gcCollect = conf.GcCollect;
                gcCollectLoop = conf.GcCollectLoop;
                gcCollectElu = conf.GcCollectElu;
                gcCollectReset = conf.GcCollectReset;
                lock (_lockS)
                {
                    foreach (BackGroundTaskMgr bg in persistList)
                    {
                        bg.classAbort = conf.getClassAbort(bg.name);
                        if (bg.name.StartsWith("scan"))
                        {
                            var p = conf.getScanPriority(scanPriority.low);
                            if (p != null)
                            {
                                bg.increasePriority(p.priority);
                                bg.coeff = p.coeff;
                            }
                        }
                        else
                        {
                            var p = conf.getPriority(bg.name);
                            if (p != null)
                            {
                                bg.increasePriority(p.priority);
                                bg.coeff = p.coeff;
                            }
                        }
                    }
                }

            }
        }
        // private bool _shutdown = true;
        //private int nbTh;
        //   private List<IBgtask> tasks = new List<IBgtask>(); 

        /// <summary>
        /// Empiler sans dépiler
        /// </summary>
        private bool _pause = true;
        private string name;
        //  public string Name { get { return name; } }

        private static bool _ordonnancement;
        public static bool Ordonnancement
        {
            //set
            //{
            //    _ordonnancement = value;
            //}
            get { return _ordonnancement; }
        }
        private int priority = 0;
        private float coeff = 1f;
        private bool persistent;

        private int Priority
        {
            set
            {
                //if (value != priority)
                //{
                //    log.logNoDate("+++++++++++++++++++++++++++++++++");
                //    log.log("{0} Changement de priorité de {1} à {2}", this, priority, value);
                //if (value == 0 && name != "Classement")
                //{
                //    int toto = 0; 
                //}
                priority = value;
                //}
            }
        }


        private void increasePriority(int p)
        {
            if (p == 0)
                return;
            if (p == int.MaxValue)
                return;
            if (p > priority)
                return;
            priority = p;
        }
        public void makePersistent() { persistent = true; }


        private Logger logger;
        private static PersistMgr persistMgr;
        static BackGroundTaskMgr()
        {
            try
            {
                persistMgr = new PersistMgr("..\\ordo.txt");
                var list = persistMgr.Deserialise();
                foreach (var p in list)
                {
                    int pr = 123456;
                    if (p.ID.Equals("Classement"))
                        pr = 0;
                    var bg = getMgr(p.ID, pr, false, true);
                    bg.msProc = p.msProc;
                    bg.ms = p.ms;

                    bg.msProcStop = p.msProcStop;

                }
            }
            catch (Exception ex)
            {
                log.log("impossible de récupérer la persistance " + ex.ToString());
                throw;
            }
        }
        public static void recordMsProc()
        {
            Console.WriteLine("début recordMsProc");
            var list = new List<PersistTaskMgr>();
            double[] total = new double[NB_PROC];
            double[] totalStop = new double[NB_PROC];
            lock (_lockS)
            {

                foreach (BackGroundTaskMgr bg in persistList)
                {
                    var val = calc0(bg);
                    var p = new PersistTaskMgr(bg.name, bg.ms, bg.msProc, bg.msProcStop, bg.nb, val);
                    for (int i = 0; i < BackGroundTaskMgr.NB_PROC; i++)
                    {
                        total[i] += bg.msProc[i];
                        totalStop[i] += bg.msProcStop[i];
                    }

                    list.Add(p);
                }
            }
            PersistTaskMgr.Total = total;

            PersistTaskMgr.TotalStop = totalStop;

            persistMgr.Serialize(list);
            Console.WriteLine("fin recordMsProc");
        }
        private BackGroundTaskMgr(string name, int priority, bool large, bool fromPersist)
        {
            ms = 1;
            msProc[0] = conf.Proc.ProcIni;
            if (conf.Duration >= 0)
            {
                ms = conf.Duration;
                // msProc = ms; 
            }
            this.name = name;
            string _path = name;
            bool foundSlash = false;
            char[] chars = name.ToCharArray();
            int count = chars.GetLength(0);
            var sb = new StringBuilder();

            for (int i = 0; i < count; i++)
            {
                char c = chars[i];
                if (Path.DirectorySeparatorChar == c)
                    foundSlash = true;
                if (c == ' ' && !foundSlash)
                {
                    sb = new StringBuilder();
                }
                else
                    sb.Append(c);
            }
            _path = sb.ToString();


            this.logger = Logger.getLogger(_path, log);
            this.large = large;
            this.priority = priority;
            list.Add(this);
            if (!large)
            {
                lock (_lockS)
                {
                    persistList.Add(this);
                    if (!fromPersist)
                        ordoList.Add(this);
                }
            }

        }
        public bool large;

        public static string Display()
        {
            var sb = new StringBuilder();
            Display(sb);
            return sb.ToString();
        }

        public static void Display(ITextWriter sb)
        {
            if (sAbort)
            {
                sb.Append(" Abort");
            }

            if (sTh != null)
            {
                sb.Append(" sTh=");
                sb.Append(sTh.State.ToString());

            }

            if (elu != null)
            {
                sb.Append(" elu=");
                sb.Append(elu.name);
            }

            sb.AppendLine();

            foreach (BackGroundTaskMgr mgr in new List<BackGroundTaskMgr>(list))
            {
                mgr.display(sb);
                sb.AppendLine();
            }
        }

        public void display(ITextWriter sb)
        {
            sb.Append(name);
            sb.Append(" nb="); sb.Append(nb);
            if (_abort)
                sb.Append(" abort");
            sb.Append(" persistent="); ; sb.Append(persistent);
            sb.Append(" priority="); sb.Append(priority);
            if (th != null)
            {
                sb.Append(" th=");

                sb.Append(th.Name);
                sb.Append(",");
                sb.Append(th.State.ToString());

            }

            if (first != null)
            {
                sb.Append(" first=");
                sb.Append(first.task.Desc);
            }

            if (last != null)
            {
                sb.Append(" last=");
                sb.Append(last.task.Desc);
            }


        }

        public void displayElts(ITextWriter sb)
        {
            try
            {
                sb.Append(" nb="); sb.Append(nb);
                //var current = first;

                //while (current != null)
                //{
                //    sb.AppendLine(current.task.ToString());
                //    current = current.Next;
                //}
            }
            catch (Exception ex)
            {
                log.log(ex.ToString());
            }
        }

        private static List<BackGroundTaskMgr> list = new List<BackGroundTaskMgr>();
        private static List<BackGroundTaskMgr> ordoList = new List<BackGroundTaskMgr>();
        private static List<BackGroundTaskMgr> persistList = new List<BackGroundTaskMgr>();
        public static int taskDelayError = 100;
        public static int TaskDelayError { set { taskDelayError = value; } }
        private static bool gcCollect;
        private static bool gcCollectLoop;
        private static bool gcCollectElu;
        private static bool gcCollectReset;
        public static void End()
        {
            List<BackGroundTaskMgr> aux = null;
            lock (_lockS)
            {
                aux = new List<BackGroundTaskMgr>(list);
                log.log(Display());
            }
            foreach (BackGroundTaskMgr mgr in aux)
            {
                while (!mgr.IsEnd)
                    Thread.Sleep(30);
            }

            lock (_lockS)
            {
                aux = new List<BackGroundTaskMgr>(list);
                log.log(Display());
            }

            foreach (BackGroundTaskMgr mgr in aux)
            {
                while (!mgr.IsEnd)
                    Thread.Sleep(30);
            }

        }

        public static void AbortSpecial()
        {

            sAbortSpecial = true;
            log.log("-----------------------------------------------");
            log.log("Abort Special");
            List<BackGroundTaskMgr> _list = null;

            lock (_lockS)
            {
                _list = new List<BackGroundTaskMgr>(ordoList);
            }

            foreach (BackGroundTaskMgr mgr in _list)
            {
                if (mgr.classAbort)
                    mgr.reset();
            }


            log.log("fin Abort Special");
            log.log("-----------------------------------------------");

        }


        public static void PauseSpecial()
        {
            log.log("-----------------------------------------------");
            log.log("Pause Special");
            List<BackGroundTaskMgr> _list = null;

            lock (_lockS)
            {
                _list = new List<BackGroundTaskMgr>(ordoList);
            }

            foreach (BackGroundTaskMgr mgr in _list)
            {
                if (mgr.classAbort)
                    mgr.pause();
            }


            log.log("fin Pause Special");
            log.log("-----------------------------------------------");

        }
        private static bool sPauseKeyBoard;
        public static void PlayPause()
        {
            lock (_lockS)
                sPauseKeyBoard = !sPauseKeyBoard;
        }
        public static bool PauseKeyBoard { get { return sPauseKeyBoard; } }

        public static void Reset()
        {
            List<BackGroundTaskMgr> _list = null;

            lock (_lockS)
            {
                _list = new List<BackGroundTaskMgr>(ordoList);


            }

            //  log.log(Display());
            autoStart = false;
            if (_ordonnancement)
                sReset();




            foreach (BackGroundTaskMgr mgr in _list)
            {

                mgr.reset();
            }

            //   log.log(Display());

            if (gcCollect && gcCollectReset)
                misc.gcCollect("Reset");

        }
        private static bool autoStart;
        public static void Start()
        {
            lock (_lockS)
            {
                sAbortSpecial = false;
                autoStart = true;
                sPause = false;
                sAbort = false;

                foreach (BackGroundTaskMgr mgr in list)
                    mgr.start();
            }
        }

        public static void Pause()
        {
            lock (_lockS)
            {
                sPause = true;
                foreach (BackGroundTaskMgr mgr in list)
                    mgr.pause();
            }
        }

        private static volatile object _lockS = new object();
        public static BackGroundTaskMgr getMgr(string name, int priority)
        {
            return getMgr(name, priority, false, false);
        }

        public static BackGroundTaskMgr getMgrlarge(string name)
        {
            return getMgr(name, 0, true, false);
        }

        public static BackGroundTaskMgr getMgr(string name, int priority, bool large, bool fromPersist)
        {
            lock (_lockS)
            {
                var found = list.Find(bg => bg.name == name);
                if (found == null)
                {
                    found = new BackGroundTaskMgr(name, priority, large, fromPersist);
                    found.classAbort = conf.getClassAbort(name);
                    if (!large && !fromPersist)
                    {
                        PriorityCoeff p = null;
                        if (!name.StartsWith("scan"))
                            p = conf.getPriority(name);
                        else
                            p = conf.getScanPriority(scanPriority.low);
                        if (p != null)
                        {
                            found.priority = p.priority;
                            found.coeff = p.coeff;
                        }
                    }
                }
                if (sAbortSpecial && found.classAbort)
                    found._abort = true;
                else if (autoStart) found._pause = false;

                return found;
            }
        }

        public static void checkScanPriority(BackGroundTaskMgr bg, scanPriority prior)
        {
            if (bg == null)
            {
                return;
                // throw new NullReferenceException("checkScanPriority"); 
            }
            var p = conf.getScanPriority(prior);
            bg.Priority = p.priority;
            bg.coeff = p.coeff;

        }

        public static void increaseScanPriority(BackGroundTaskMgr bg, scanPriority prior)
        {
            if (bg == null)
            {
                //  throw new NullReferenceException("checkScanPriority"); 
                return;
            }
            var p = conf.getScanPriority(prior);

            int newp = p.priority;
            float coeff = p.coeff;
            if (newp < bg.priority)
                bg.Priority = newp;
            if (coeff < bg.coeff)
                bg.coeff = coeff;
        }

        public static void increaseScanPriority(BackGroundTaskMgr bg, int priority)
        {
            if (bg == null)
            {
                //  throw new NullReferenceException("checkScanPriority"); 
                return;
            }
            //   var p = conf.getScanPriority(prior);
            if (priority < 0 || priority == int.MaxValue)
                return;

            if (priority < bg.priority)
                bg.priority = priority;

        }

        public static List<BackGroundTaskMgr> findMgr(string startName)
        {
            lock (_lockS)
            {
                var found = list.FindAll(bg => bg.name.ToLower().StartsWith(startName.ToLower()));

                return found;
            }
        }

        public static BackGroundTaskMgr FindMgr(string name)
        {

            var found = list.Find(bg => bg.name.Equals(name));
            return found;

        }

        public override string ToString()
        {
            return name;
        }

        public bool Async { set { async = value; } }
        private volatile object _lock = new object();

      //  private static bool _singleThread;
    //    public static bool SingleThread { set { _singleThread = value; } }
        private LinkedTask first;
        private LinkedTask last;
        private IBgTask current;

        //private bool _end;
        private bool _abort;

        public bool Stopped
        {
            get
            {
                if (_ordonnancement)
                {
                    if (sTh == null)
                    {
                        lock (_lockS)
                        {
                            if (sTh == null)
                                return true;
                        }
                    }
                    return false;
                }
                else
                    return th == null;
            }
        }

        //private bool isEnded;
        public bool IsEnd
        {
            get
            {
                if (_ordonnancement)
                {
                    if (nextTry > DateTime.MinValue)
                        return false;
                    if (first != null)
                        return false;
                    if (nb > 0)
                        return false;
                    lock (_lockS)
                    {
                        if (first == null && current == null && nextTry == DateTime.MinValue && nb == 0)
                            return true;
                        return false;
                    }

                }

                else
                    return th == null && nb == 0;
            }
        }

        public static bool ConfirmEnd(int msWait, int p)
        {
          //  int p = conf.getScanPriority(scanPriority.classement).priority;
            foreach (BackGroundTaskMgr bg in new List<BackGroundTaskMgr>(ordoList))
            {
                if (bg.priority <= p)
                {
                    if (!bg.confirmEnd(msWait))
                        return false;
                }
            }
            return true;
        }

        public bool confirmEnd(int msWait)
        {
            return IsEnd && DateTime.Now.AddMilliseconds(-msWait) > lastActivity;
        }

        //public bool Contains(string desc)
        //{
        //    var current = first;
        //    while (current != null)
        //    {
        //        if (current.task.Desc.Contains(desc))
        //            return true;
        //        current = current.Next;
        //    }
        //    return false;

        //}



        public void Abort()
        {
            if (persistent)
                return;
            log.log("{0}==> abort", this);
            _abort = true;
            reset();
        }

        public void start()
        {
            _pause = false;
            _abort = false;
            start_();
        }

        public void pause()
        {
            _pause = true;
        }

        private void start_()
        {
            try
            {
                if (_abort && !persistent)
                {
                   // log.log("start non effectué car abort");
                    return;
                }



                if (_pause && !persistent)
                    return;
                if (async && (large || !_ordonnancement))
                {
                    if (th != null)
                        return;
                    lock (_lock)
                    {
                        lastActivity = DateTime.MaxValue;
                        if (th != null)
                            return;

                        th = new ThreadUtil(loop, name);
                        _abort = false;

                        th.Start();
                    }
                }
                else if (_ordonnancement)
                {
                    if (sAbort || sPause || (sAbortSpecial && this.classAbort))
                    {
                        lock (_lockS)
                        {
                            if (sAbort || sPause || (sAbortSpecial && this.classAbort))
                            {
                              //  log.log("::::::::::::: {0} pas possible de démarrer sAbort {1} sPause {2} sAbortSpecial {3}", name, sAbort, sPause, sAbortSpecial);
                                return;
                            }
                        }
                    }

                    if (sTh != null)
                        return;
                    lock (_lockS)
                    {

                        if (sTh != null)
                            return;

                        if (sAbort || sPause || (sAbortSpecial && this.classAbort))
                            return;

                        sTh = new ThreadUtil(sLoop, "Bg");
                        sTh.Start();
                    }
                }
            }
            catch (Exception ex)
            {
                log.log(ex.ToString());
            }
        }



        private const int NB = 1000 * 10000;
        public void add(IBgTask task)
        {
            add_(task, true);
        }

        public void addAtFirst(IBgTask task)
        {
            add_(task, true, false);
        }

        public void reset()
        {
            try
            {
                if (persistent)
                {
                    //  checkScanPriority(this, scanPriority.low);
                    return;
                }
                lock (_lock)
                {
                    log.log("reset " + name);
                    _pause = true;
                    _abort = true;
                    //_end = false;
                    //isEnded = false; 
                    if (current != null)
                        current.abort();

                    //var _current = first;

                    //while (_current != null)
                    //{
                    //    _current.task.abort();
                    //    var aux = _current.Next;
                    //    _current.Next = null;
                    //    _current = aux;
                    //}

                    first = null;
                    last = null;
                    nb = 0;

                }

                DateTime dt = DateTime.Now.AddSeconds(30);
                while (th != null && DateTime.Now < dt)
                    Thread.Sleep(30);
                if (DateTime.Now > dt)
                {
                    log.log("abort attente reset {0}", name);
                    try
                    {
                        if (th != null)
                            th.Abort();
                    }
                    catch (Exception ex)
                    {
                        log.log(ex.ToString());
                    }
                    th = null;
                }

                lock (_lock)
                {

                    first = null;
                    last = null;
                    _abort = false;
                    _pause = false;
                    nb = 0;
                }
            }
            catch (Exception ex)
            {
                log.log(ex.ToString());
            }
            if (gcCollect && gcCollectReset)
                misc.gcCollect("reset");
        }

        private static void sReset()
        {
            try
            {
                lock (_lockS)
                {
                    log.log("reset ordonnancement");
                    sPause = true;
                    sAbort = true;


                }



                DateTime dt = DateTime.Now.AddSeconds(30);
                while (sTh != null && DateTime.Now < dt)
                {
                    sAbort = true;
                    sPause = true;
                    Thread.Sleep(30);
                }
                if (DateTime.Now > dt)
                {
                    log.log("abort attente reset Bg");
                    try
                    {
                        if (sTh != null)
                            sTh.Abort();

                    }
                    catch (Exception e)
                    {
                        log.log(e.ToString());
                    }
                    sTh = null;
                }

                //lock (_lockS)
                //{

                //    sAbort = false;
                //    sPause = false;

                //}
            }
            catch (Exception ex)
            {
                log.log(ex.ToString());
            }
        }



        private void add_(IBgTask task, bool withLimit)
        {
            add_(task, withLimit, true);
        }

        private void add_(IBgTask task, bool withLimit, bool atLast)
        {
            if (!used)
            {
                lock (_lockS)
                {
                    if (!ordoList.Contains(this))
                        ordoList.Add(this);
                }
                used = true;
            }

            try
            {
                //   log.log("add {0} {1} {2} {3}", name, nb, task, withLimit);  
                while (withLimit && nb > NB)
                    Thread.Sleep(30);
                object synchro = _lock;
                if (_ordonnancement && !large)
                    synchro = _lockS;


                //   log.log("add OK {0} {1} {2} {3}", name, nb, task, withLimit);  
                if (async)
                {
                    if (_abort && !persistent)
                    {
                        // log.log("tâche non ajoutée car abort " + task.Desc);
                        return;
                    }
                    if (task.Try >= NB)
                    {
                        log.log("{0} tache abandonnée après {1} essais", task, NB);
                        return;
                    }

                    lastActivity = DateTime.MaxValue;

                    var ll = new LinkedTask(task);
                    lock (synchro)
                    {
                        if (_abort && !persistent)
                        {
                            //    log.log("tâche non ajoutée car abort " + task.Desc);
                            return;
                        }

                        start_();
                        if (atLast)
                        {
                            if (last != null)
                            {
                                last.Next = ll;
                            }

                            last = ll;

                            if (first == null)
                                first = last;
                        }
                        else
                        {
                            var f = first;
                            ll.Next = first;
                            first = ll;

                            if (last == null)
                                last = first;
                        }

                        nb++;
                    }

                }
                else
                    task.exec();

            }
            catch (Exception ex)
            {
                log.log(ex.ToString());
            }
        }

        private DateTime lastExec;
        private void loop()
        {
            try
            {

                while (!_abort && !_pause)
                {
                    Thread.Sleep(30);

                    lock (_lock)
                    {
                        if (_abort) return;
                        if (first == null)
                        {
                            return;
                        }
                        var aux = first;
                        current = first.task;
                        first = first.Next;
                        aux.Next = null;
                        if (first == null)
                            last = null;
                        if (!large)
                            log.log("{0} {1}", nb, current);
                        nb--;

                    }

                    try
                    {
                        //if (_singleThread && !large)
                        //    Locker.Enter();

                        if (_abort) return;
                        lastExec = DateTime.Now;
                        current.exec();
                    }
                    catch (Exception ex)
                    {
                        log.log("erreur task {0} {1}", current, ex.ToString());
                    }
                    finally
                    {
                        //if (_singleThread && !large)
                        //    Locker.Release();
                    }


                    if (current.Abort)
                    {
                        log.log("{0} tâche interrompue ", name);
                        th = null;
                        return;
                    }

                    if (!current.Success)
                    {
                        lock (_lock)
                        {
                            if (_abort) return;
                        }
                        current.Try++;
                        if (taskDelayError >= 0)
                            Thread.Sleep(taskDelayError * current.Try);
                        add_(current, false, true);

                    }

                    lock (_lock)
                    {
                        current = null;
                    }



                }
            }
            catch (Exception e)
            {
                log.log(this.name + " loop " + e.ToString());
            }
            finally
            {
                lastActivity = DateTime.Now;
                th = null;
                nb = 0;
                if (gcCollectLoop)
                    misc.gcCollect("end loop");

            }
        }


        private static bool sPause;
        private static bool sAbort;
        private static bool sAbortSpecial;
        private static BackGroundTaskMgr elu = null;

        private static void decrementCms(BackGroundTaskMgr bg)
        {
            if (bg == null)
                return;
            // log.log("decrement {0} {1}", bg, bg.cms); 
            if (bg.cms <= 1) // || conf.Duration < 0)
                return;
            var nt = bg.cms / conf.Proc.Cms;
            if (nt < 1)
                nt = 1;
            bg.cms = nt;
        }

        private static void incrementCms(BackGroundTaskMgr bg)
        {
            if (bg == null)
                return;
            if (conf.Proc.Cms == 1)
                return;
            //  log.log("increment {0} {1}", bg, bg.cms); 
            bg.cms *= conf.Proc.Cms;
        }

        private static double calcP(BackGroundTaskMgr bg, double calc0)
        {
            if (conf.Duration < 0)
                return calc0;
            else
                return calc0 * bg.cms;
        }

        private static double calcVal(BackGroundTaskMgr bg)
        {
            double[] t = new double[NB_PROC];


            for (int i = 0; i < NB_PROC; i++)
            {
                if (playing)
                    t[i] = bg.msProc[i];
                else
                    t[i] = bg.msProcStop[i];
            }


            var _conf = conf.Proc;
            double duration1 = _conf.Duration[0];
            double duration2 = _conf.Duration[1];
            if (duration1 <= 0)
            {
                if (duration2 <= 0)
                {
                    return 1;
                }
                return calc1_(t[1]);
            }
            if (duration2 <= 0)
                return calc1_(t[0]);

            for (int i = 0; i < NB_PROC; i++)
            {
                t[i] = calc1_(t[i]);
            }

            var p = _conf.Proportion;
            switch (_conf.Mode)
            {
                case procMode.max:
                    double max = 0;
                    for (int i = 0; i < NB_PROC; i++)
                    {
                        if (t[i] > max)
                            max = t[i];
                    }
                    return max;
                case procMode.min:
                    double min = double.MaxValue;
                    for (int i = 0; i < NB_PROC; i++)
                    {
                        if (t[i] < min)
                            min = t[i];
                    }
                    return min;
                // case procMode.moy: return p * t[0] + (1 - p) * t[1];
                case procMode.somme:
                    double tot = 0;
                    for (int i = 0; i < NB_PROC; i++)
                        tot += p[i] * t[i];
                    return tot;
                case procMode.produit:
                    double prod = 1;
                    for (int i = 0; i < NB_PROC; i++)
                        prod *= Math.Pow(t[i], p[i]);
                    return prod;
                //case procMode.produitM:
                //    return Math.Pow(t[0], p) * Math.Pow(t[1], 1 - p);
            }

            return 1;

        }

        //public static double calcVal(BackGroundTaskMgr bg)
        //{
        //    return calc1_(calcVal_(bg)); 
        //}

        private static double calc0(BackGroundTaskMgr bg)
        {
            return bg.nb * bg.coeff * calcVal(bg);
        }


        private static double calc1(BackGroundTaskMgr bg)
        {
            return bg.nb * bg.coeff * bg.cms * calcVal(bg);
        }

        private static double calc1_(double msProc)
        {
            return -Math.Log(1 - msProc); // msProc / (1 - msProc);
        }
        private confrontationStatus confrontationState;



        private static BackGroundTaskMgr selection(DateTime now, bool withCms)
        {
            BackGroundTaskMgr _elu = BackGroundTaskMgr.elu;
            if (_elu != null && _elu.confrontationState == confrontationStatus.none)
                _elu = null;
            double elut = -1;
            //  bool compet = false;
            foreach (BackGroundTaskMgr bg in ordoList)
            {
                //  logOrdo.log(string.Format("{0} nb:{1} pr:{2} pau:{3} ca:{4} ab:{5} ", bg.name, bg.nb, bg.priority, bg.pause, bg.classAbort, bg._abort)); 
                if (bg.confrontationState == confrontationStatus.none)
                    continue;


                if (_elu == null)
                {
                    _elu = bg; continue;
                }

                if (_elu == bg)
                    continue;

                if (bg.priority < _elu.priority)
                {
                    _elu = bg;
                    elut = -1;
                    continue;
                }

                if (bg.priority > _elu.priority)
                    continue;

                bg.confrontationState = confrontationStatus.enCompet;
                double bgt = withCms ? calc1(bg) : calc0(bg);
                if (elut == -1)
                    elut = withCms ? calc1(_elu) : calc0(_elu);

                if (bgt < elut)
                {
                    _elu = bg;
                    elut = bgt;
                    continue;

                }
                if (bgt > elut)
                {
                    _elu.confrontationState = confrontationStatus.enCompet;
                    continue;
                }


                if (bg.lastExec > _elu.lastExec)
                {
                    _elu = bg;
                    elut = bgt;
                }

            }

            return _elu;
        }
        //private static void confrontation(BackGroundTaskMgr bg, BackGroundTaskMgr elu, bool withCms)
        //{
        //    if (elu == null)
        //    {
        //        elu = bg; return;
        //    }

        //    if (elu == bg)
        //        return;
        //    if (bg.priority < elu.priority)
        //    {
        //        elu = bg; return;
        //    }

        //    if (bg.priority > elu.priority)
        //        return;
        //    double bgt = withCms ? calc1(bg) : calc0(bg);
        //    double elut = withCms ? calc1(_el) : calc0(bg);

        //    var elut = calcP(elu, elut0);
        //    if (bgt < elut)
        //    {
        //        if (bgt0 >= elut0)
        //            decrementCms(elu);
        //        else
        //            incrementCms(bg);
        //        elu.cms /= conf.Cms;
        //        elu = bg;
        //        return;

        //    }
        //    if (bgt > elut)
        //    {
        //        if (bgt0 <= elut0)
        //            decrementCms(bg);
        //        else
        //            incrementCms(elu);
        //        return;
        //    }
        //    if (bg.lastExec > elu.lastExec)
        //    {
        //        elu = bg;
        //    }

        //}

        private static double calcMs(int nbStat, double ms, double ts)
        {
            return (ms * (nbStat - 1) + ts) / (double)nbStat;
        }
        const double EPSILON = 0.0000000000001;
        private static double calcMsProc(double ms, double ts, double pente, bool actif)
        {
            //pente = ts / nbstat ou si ts est grand ts / (nbStat + ts)
            // si on a rien fait : perte = ts / nbstat  (proportion)
            // ex : ms0 = 0.2 ts =300 nbstat = 1000
            //perte = 0.3 
            // ms1 =0.2 *0.7 = 0.14

            // si c'est moi qui bosse : asymptote dans l'autre sens : 
            //dalta = 0.8 augmentation = 0.8 * 0.3 = 0.24 ms1 = 0.44

            var delta = actif ? 1 - ms : -ms;

            var ret = ms + delta  * (1 - Math.Exp (-pente)); //* pente;
            if (1 - ret < EPSILON)
                ret = 1 - EPSILON;
            if (ret < 0)
                ret = 0;

            return ret;
            //  return (ms * (nbStat - 1) + ts) / (double)nbStat;

        }

        private static void sLoop()
        {
            var chrono = BgTask.chrono;
            try
            {

                while (!sAbort)
                {
                    Thread.Sleep(30);
                    //  elu = null;
                    DateTime now = DateTime.Now;
                    if (sAbort) return;
                    if (sPauseKeyBoard)
                        continue;
                    if (sPause)
                        continue; 
                    string strElu0 = "";
                    lock (_lockS)
                    {
                        if (sAbort) return;
                        //election
                        if (elu != null && elu.first == null)
                            elu = null;

                        foreach (BackGroundTaskMgr bg in ordoList)
                        {
                            bg.confrontationState = confrontationStatus.none;
                            //  logOrdo.log(string.Format("{0} nb:{1} pr:{2} pau:{3} ca:{4} ab:{5} ", bg.name, bg.nb, bg.priority, bg.pause, bg.classAbort, bg._abort)); 
                            if (bg._abort)
                                continue;
                            if (bg._pause)
                                continue; 
                            var ll = bg.first;
                            if (ll == null)
                                continue;
                            if (bg.nextTry > now)
                                continue;
                            if (bg.large)
                                continue;
                            bg.confrontationState = confrontationStatus.enCourse;


                        }

                        var elu0 = selection(now, false);
                        if (conf.Duration >= 0 && conf.Proc.Cms > 1)
                        {
                            elu = selection(now, true);

                            if (elu != null && elu.confrontationState > confrontationStatus.enCourse)
                            {

                                if (elu == elu0)
                                {
                                    // gagnerait de toutes façon  malgré le handicap 
                                    incrementCms(elu);
                                }
                                else
                                {
                                    // gagne à l'aide du handicap
                                    //if (elu0.cms > 1)
                                    decrementCms(elu0);
                                    //else
                                    //    incrementCms(elu);
                                    strElu0 = string.Format(" ({0}->{1,4:0.###}", elu0, elu0.cms);
                                }
                            }
                        }
                        else
                            elu = elu0;



                        if (elu == null)
                            continue;


                        var aux = elu.first;
                        if (aux != null)
                        {
                            elu.current = elu.first.task;
                            elu.first = elu.first.Next;
                        }
                        aux.Next = null;
                        if (elu.first == null)
                        {
                            elu.last = null;

                        }

                        if (sAbortSpecial && elu.classAbort)
                        {
                            elu.nb--;
                            continue;
                        }


                        // log.log("[{0}] {1} {2} {3}", elu.name, elu.priority, elu.nb, elu.current);
                        // var logger = elu.logger, Logger.getLogger(@"Task\" + elu.name, log);
                        //  var sb = new StringBuilder(); 
                        //  elu.logger.log("[{0}] {1} {2} {3}", elu.name, elu.priority, elu.nb, elu.current);

                        elu.nb--;
                    }

                    var current = elu.current;

                    try
                    {

                        if (sAbort) return;
                        DateTime _now = DateTime.Now;
                        chrono.reset(elu.name);
                        current.exec();
                        chrono.end();
                        var ts = chrono.Total.TotalMilliseconds;

                        lock (_lockS)
                        {
                            var ts0 = ts;

                            if (elu == null)
                                continue;
                            //   var min = conf.Duration;
                            string moy = "";
                            string cms = "";
                            string moyProc = "";
                            // string moyProc2 = ""; 
                            string valProc = "";
                            double val0 = 0;

                            double val1 = 0;
                            var confProc = conf.Proc;
                            var tsMin = confProc.TsMin;
                            if (ts < tsMin)
                                ts = tsMin;
                            var nbStat = confProc.NbDuration;
                            var nbProcDuration = confProc.Duration;
                            if (nbStat >= 0)
                            {
                                for (int i = NB_PROC - 1; i >= 0; i--)
                                    moyProc += string.Format(CultureInfo.InvariantCulture, " {0,6:##.000}", (100 * (playing ? elu.msProc[i] : elu.msProcStop[i])));
                                moyProc += string.Format(CultureInfo.InvariantCulture, " {0,6:##.000}", (100 * calcVal(elu)));
                                val0 = (elu.nb + 1) * elu.coeff * calcVal(elu);
                                double[] pente = new double[NB_PROC];

                                for (int i = 0; i < NB_PROC; i++)
                                {
                                    var _pente = nbProcDuration[i];
                                    if (_pente > 0)
                                        pente[i] = ts / _pente;
                                    else
                                        pente[i] = 0;
                                }



                                elu.ms = calcMs(nbStat, elu.ms, ts0); // (elu.ms * (nbStat - 1) + ts) / (double)nbStat;
                                moy = string.Format(" {0,4:####}", elu.ms);
                                var calcProcMin = conf.CalcProcMin;
                                if (elu.confrontationState >= calcProcMin || elu.msProc[0] < EPSILON)
                                {
                                    for (int i = 0; i < NB_PROC; i++)
                                    {
                                        if (playing)
                                        {

                                            elu.msProc[i] = calcMsProc(elu.msProc[i], ts, pente[i], true);
                                        }
                                        else
                                        {

                                            elu.msProcStop[i] = calcMsProc(elu.msProcStop[i], ts, pente[i], true);
                                        }
                                    }
                                    //  moyProc += string.Format(CultureInfo.InvariantCulture, " {0,6:##.000}", (100 * elu.msProc));
                                    val1 = calc1(elu);
                                    valProc = string.Format(CultureInfo.InvariantCulture, " {0,8:###.000} {1,8:###.000}", val0, val1);
                                }

                                int nbEnCompet = 2;
                                if (calcProcMin > confrontationStatus.none)
                                {
                                    nbEnCompet = 0;
                                    foreach (BackGroundTaskMgr bg in ordoList)
                                    {
                                        if (bg.used && bg.confrontationState >= calcProcMin)
                                            nbEnCompet++;
                                    }
                                }

                                if (nbEnCompet > 1)
                                {
                                    if (conf.CalcProcDiv)
                                    {
                                        for (int i = 0; i < NB_PROC; i++)
                                        {
                                            pente[i] /= ((double)nbEnCompet - 1);
                                        }
                                    }
                                    foreach (BackGroundTaskMgr bg in persistList)
                                    {
                                        if (bg == elu)
                                            continue;
                                        if (calcProcMin == confrontationStatus.none || (bg.used && bg.confrontationState >= calcProcMin))
                                        {
                                            for (int i = 0; i < NB_PROC; i++)
                                            {
                                                if (playing)
                                                {
                                                    bg.msProc[i] = calcMsProc(bg.msProc[i], ts, pente[i], false);
                                                }
                                                else
                                                {
                                                    bg.msProcStop[i] = calcMsProc(bg.msProcStop[i], ts, pente[i], false);
                                                }
                                            }
                                        }
                                    }
                                }



                                if (confProc.Cms != 1)
                                {
                                    cms = string.Format(" {0,4:0.###}", elu.cms);

                                }
                                //  elu.cms *= conf.Cms;
                            }
                            if (!current.Success)
                                ts0 *= -1;

                            var strMs = string.Format("{0,4:####}", ts0);
                            if (string.IsNullOrWhiteSpace(strMs))
                                strMs = string.Format("{0,4}", "-");
                            var chronoSeuil = conf.ChronoSeuil;
                            if (chronoSeuil >= 0)
                                strMs = string.Format(conf.FormatChrono, chrono.display(chronoSeuil, conf.FormatPhase)) + strMs;

                            //  elu.logger.log(string.Format("[{0}] {1} {2} {3,4:####}{4}{5}{6}{7}{8} {9}", elu.name, elu.priority, elu.nb + 1, ts, moy, moyProc, valProc, cms, strElu0, elu.current));
                            elu.logger.log(string.Format("{0} {1}{2}{3}{4}{5} {6,4:####} [{7}] {8} {9}",
                                                          strMs, moy, moyProc, valProc, cms, strElu0, (elu.nb + 1), elu.name, elu.priority, elu.current));

                        }
                    }
                    catch (Exception ex)
                    {
                        if (elu != null && elu.logger != null && elu.current != null)
                            //   var logger = Logger.getLogger(@"Task\" + elu.name, log);
                            elu.logger.log("erreur task {0} {1}", elu.current, ex.ToString());
                    }
                    finally
                    {

                    }


                    if (current.Abort)
                    {
                        elu.logger.log("{0} tâche interrompue ", elu.name);
                        continue;
                    }

                    bool collect = false;
                    lock (_lockS)
                    {
                        if (!current.Success)
                        {
                            if (sAbort) return;

                            current.Try++;
                            if (taskDelayError >= 0)
                            {
                                TimeSpan ts = TimeSpan.FromMilliseconds(taskDelayError * elu.current.Try);
                                elu.nextTry = DateTime.Now.Add(ts);

                            }

                            elu.add_(current, false, true);

                        }
                        else
                        {
                            elu.nextTry = DateTime.MinValue;
                            elu.lastExec = now;
                            elu.lastActivity = DateTime.Now;
                            if (elu.classAbort)
                                OnImportantTask();
                            if (elu.priority == 0)
                                OnClassTask(); 
                            if (elu.first == null)
                                collect = true;
                        }


                        elu.current = null;


                    }

                    if (collect && gcCollectElu)
                        misc.gcCollect("elu");



                }
            }
            catch (Exception e)
            {

                log.log("ordonnancement loop " + e.ToString());
            }
            finally
            {
                sTh = null;
                if (gcCollectLoop)
                    misc.gcCollect("end sloop");
            }
        }

        private DateTime nextTry;


        private class LinkedTask
        {
            public readonly IBgTask task;
            public LinkedTask Next;
            public LinkedTask(IBgTask task) { this.task = task; }
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\PieceViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using pdb.gen;
using pdb.db.obj;
using pdb.util;
using Math = System.Math; 

namespace pdb.player.ViewModel
{
    class PieceViewModel : ViewModelBase
    {
        private CPiece piece;
        private Piece gen;
        private PieceViewModel(CPiece piece, Piece gen)
        {
            this.piece = piece; //.Piece.Track as CPiece; 
            this.gen = gen;
        }
        private static BgDict<int, PieceViewModel> dict = new BgDict<int, PieceViewModel>();

        public static PieceViewModel getPiece(TrackList track)
        {
            Piece gen = track.Piece;
            CPiece piece = gen.Track as CPiece;
            int id = piece.PieceId;
            PieceViewModel pv = null;
            if (!dict.ContainsKey(id))
            {
                pv = new PieceViewModel(piece, gen);
                dict.Add(id, pv);
                return pv;
            }
            return dict[id];
        }
        public CPiece Piece { get { return piece; } }

        public bool Enabled
        {
            get
            {
                return piece.Enabled;
            }
            set
            {
                if (value != piece.Enabled)
                {
                    piece.Enabled = value;
                    OnPropertyChanged("Enabled");
                }
            }
        }

        public int Rating
        {
            get
            {
                return piece.Rating;
            }
            set
            {

                if (value != piece.Rating)
                {
                    piece.Rating = value;
                    OnPropertyChanged("Rating");
                }
            }
        }

        public String Classement
        {
            get
            {
                return piece.StrClassement;
            }
            set
            {
                if (value != piece.StrClassement)
                {
                    piece.StrClassement = value;
                    gen.invalidateCache(); 
                    OnPropertyChanged("Classement");


                }
            }
        }

        public int Year
        {
            get
            {
                return piece.Year;
            }
            set
            {
                if (value != piece.Year)
                {
                    piece.Year = value;
                    OnPropertyChanged("Year");
                }
            }
        }

        public void eraseCommentGrouping() { _commentGroupingOk = false; }
        private bool _commentGroupingOk;

        public string Comment
        {
            get
            {
                if (!_commentGroupingOk)
                {
                    _commentGroupingOk = true;
                    gen.writeCommentGrouping();

                }
                return gen.Comment;
            }
            set
            {
                if (value != piece.Comment)
                {
                    piece.Comment = value;
                    OnPropertyChanged("Comment");

                }
            }
        }

        public string Grouping
        {
            get
            {
                if (!_commentGroupingOk)
                {
                    _commentGroupingOk = true;
                    gen.writeCommentGrouping();
                }
                return gen.Grouping;
            }
            set
            {
                if (value != piece.Grouping)
                {
                    piece.setGrouping(value, true);
                    OnPropertyChanged("Grouping");
                }
            }
        }




        public bool isPodcast
        {
            get { return piece.isPodcast; }
        }

        public bool Exists { get { return piece.Exists; } }
        public TimeSpan Duration
        {
            get { return piece.Duration; }
            set
            {
                if (!Exists)
                    return;
                if (value != Duration)
                {
                    var deltaMs = Math.Abs(value.TotalMilliseconds - Duration.TotalMilliseconds);
                    if (deltaMs >= 1)
                    {
                        piece.Duration = value;
                        if (deltaMs >= 1000)
                            OnPropertyChanged("Duration");
                    }
                }
            }
        }

        public string Location
        {
            get { return piece.Location; }
        }

        public string Artist
        {
            get
            {
                return piece.Artist;
            }
            set
            {
                if (value != piece.Artist)
                {
                    piece.Artist = value;
                    OnPropertyChanged("Artist");
                }
            }
        }

        public string Album
        {
            get
            {
                return piece.Album;
            }
            set
            {
                if (value != piece.Album)
                {
                    piece.Album = value;
                    OnPropertyChanged("Album");
                }
            }
        }

        public string Name
        {
            get
            {
                return piece.Name;
            }
            set
            {
                if (value != piece.Name)
                {
                    piece.Name = value;
                    OnPropertyChanged("Name");
                }
            }
        }

        public int TrackNumber
        {
            get
            {
                return piece.TrackNumber;
            }
            set
            {
                if (value != piece.TrackNumber)
                {
                    piece.TrackNumber = value;
                    OnPropertyChanged("TrackNumber");
                }
            }
        }


    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\ConfAlbumSortW.xaml">
    <content><![CDATA[<Window x:Class="pdb.player.Vue.ConfAlbumSortW"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="ConfAlbumSortW" Height="265" Width="1301" Loaded="Window_Loaded">
    <Grid Height="211" Width="1257">
        
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid Grid.Row="0" Name="gfirst" />
       
        <Grid Grid.Row="1" Name="gsecond" />
        <!--<Grid Grid.ColumnSpan="2" Margin="0,0,-172,0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="236*" />
            </Grid.ColumnDefinitions>
            <CheckBox Grid.Row="0" Grid.Column="0" Name="cb_enabled" ToolTip="utilisé" Margin="5" Padding="2" />
            <ComboBox Grid.Row="0" Grid.Column="1" Name="cbxSort" Height="22" Padding="4" >
                <ComboBoxItem ToolTip="pas de conf" Name="none"></ComboBoxItem>
                <ComboBoxItem ToolTip="tri sur moyenne quand aucun des albums n'a défini sa médianne" Name="strict">strict</ComboBoxItem>
                <ComboBoxItem ToolTip="calcul Médianne moins strict" Name="light" >light</ComboBoxItem>
                <ComboBoxItem ToolTip="tri uniquement sur la moyenne" Name="moy" >moy</ComboBoxItem>
            </ComboBox>

            <TextBox  Grid.Row="0" Grid.Column="2" Name="tb_medianne" Width="30" ToolTip="medianne" Margin="5" />
            <CheckBox  Grid.Row="0" Grid.Column="3" Name="cb_quasi" ToolTip="quasi" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="4" Name="cb_lissage" ToolTip="lissage" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="5" Name="cb_removeEpsilon" ToolTip="removeEpsilon" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="6" Name="cb_reSort" ToolTip="reSort" Margin="5" Padding="2" />
            <TextBox  Grid.Row="0" Grid.Column="7" Name="tb_safe" Width="30" ToolTip="safe" Margin="5" KeyUp="tb_safe_KeyUp" />
            <TextBox  Grid.Row="0" Grid.Column="8" Name="tb_coeff" Width="40" ToolTip="coeff des morceaux virtuels" Margin="5" KeyUp="tb_safe_KeyUp" />
            <TextBox  Grid.Row="0" Grid.Column="9" Name="tb_coeffT" Width="40" ToolTip="coeff total des morceaux virtuels" Margin="5" KeyUp="tb_coeffT_KeyUp" />
            <CheckBox  Grid.Row="0" Grid.Column="10" Name="cb_removeFirst" ToolTip="mise à zero des premiers" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="11" Name="cb_deleteFirst" ToolTip="suppression des premiers" Margin="5" Padding="2" />
            <ComboBox ToolTip="removelast" Grid.Row="0" Grid.Column="12" Name="cbx1_removeLast" Height="22" Padding="4" >
                <ComboBoxItem>non</ComboBoxItem>
                <ComboBoxItem>unselected</ComboBoxItem>
                <ComboBoxItem>virtuels</ComboBoxItem>
                <ComboBoxItem>tous</ComboBoxItem>
            </ComboBox>
            <CheckBox  Grid.Row="0" Grid.Column="13" Name="cb_cumul" ToolTip="cumul" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="14" Name="cb_noAdd" ToolTip="pas d'ajout" Margin="5" Padding="2" />
            <TextBox  Grid.Row="0" Grid.Column="15" Name="tb_exp" Width="30" ToolTip="exposant proportion des morceaux gérés" Margin="5" />
            <CheckBox  Grid.Row="0" Grid.Column="16" Name="cb_removeEnabled" ToolTip="remove enabled" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="17" Name="cb_virtOnlyDisabled" ToolTip="virtuel: seulement les décochés" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="18" Name="cb_forceCoeffVirt" ToolTip="virtuel: coeff forcé" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="19" Name="cb_virtAlignSelected" ToolTip="virtuel: aligné sur le coché" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="20" Name="cb_virtAlignPrec" ToolTip="virtuel: aligné sur le précédent" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="21" Name="cb_coeffVirtAdjust" ToolTip="coeffvirt ajusté sur coeff selected" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="22" Name="cb_coeffVirtAuto" ToolTip="coeffvirt automatique" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="23" Name="cb_noaddEnd" ToolTip="en fin d'alum pas de virtuel" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="24" Name="cb_noaddAll" ToolTip="tout virtuel" Margin="5" Padding="2" />

            <ComboBox ToolTip="ajusté avec le plus mauvais coché si besoin" Grid.Row="0" Grid.Column="25" Name="cbx_cmpMinn" Height="22" Padding="4" >
                <ComboBoxItem ToolTip="pas géré" >non</ComboBoxItem>
                <ComboBoxItem ToolTip="ce qui reste dispo est plus grand que la médianne">orphelin</ComboBoxItem>
                <ComboBoxItem ToolTip="tou ce qui est noté et coché">toujours</ComboBoxItem>
            </ComboBox>
            <TextBox  Grid.Row="0" Grid.Column="26" Name="tb_zero" Width="120" ToolTip="zéro" Margin="5" />

            <CheckBox Grid.Row="1" Grid.Column="0"  Name="cb2_enabled" ToolTip="utilisé" Margin="5" Padding="2" />
            <ComboBox Grid.Row="1" Grid.Column="1" Name="cbx2Sort" Height="22" Padding="4" >
                <ComboBoxItem ToolTip="pas de conf" Name="none2"></ComboBoxItem>
                <ComboBoxItem ToolTip="tri sur moyenne quand aucun des albums n'a défini sa médianne" Name="strict2">strict</ComboBoxItem>
                <ComboBoxItem ToolTip="calcul Médianne moins strict" Name="light2" >light</ComboBoxItem>
                <ComboBoxItem ToolTip="tri uniquement sur la moyenne" Name="moy2" >moy</ComboBoxItem>
            </ComboBox>

            <TextBox Grid.Row="1" Grid.Column="2"  Name="tb2_medianne" Width="30" ToolTip="medianne" Margin="5" />
            <CheckBox Grid.Row="1" Grid.Column="3" Name="cb2_quasi" ToolTip="quasi" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="4" Name="cb2_lissage" ToolTip="lissage" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="5" Name="cb2_removeEpsilon" ToolTip="removeEpsilon" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="6" Name="cb2_reSort" ToolTip="reSort" Margin="5" Padding="2" />
            <TextBox  Grid.Row="1" Grid.Column="7" Name="tb2_safe" Width="30" ToolTip="safe" Margin="5" />
            <TextBox  Grid.Row="1" Grid.Column="8" Name="tb2_coeff" Width="40" ToolTip="coeff des morceaux virtuels" Margin="5" />
            <TextBox  Grid.Row="1" Grid.Column="9" Name="tb2_coeffT" Width="40" ToolTip="coeff total des morceaux virtuels" Margin="5"  />
            <CheckBox  Grid.Row="1" Grid.Column="10" Name="cb2_removeFirst" ToolTip="removeFirst" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="11" Name="cb2_deleteFirst" ToolTip="deleteFirst" Margin="5" Padding="2" />
            <ComboBox ToolTip="removelast" Grid.Row="1" Grid.Column="12" Name="cbx2_removeLast" Height="22" Padding="4" >
                <ComboBoxItem>non</ComboBoxItem>
                <ComboBoxItem>unselected</ComboBoxItem>
                <ComboBoxItem>virtuels</ComboBoxItem>
                <ComboBoxItem>tous</ComboBoxItem>
            </ComboBox>
            <CheckBox  Grid.Row="1" Grid.Column="13" Name="cb2_cumul" ToolTip="cumul" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="14" Name="cb2_noAdd" ToolTip="pas d'ajout" Margin="5" Padding="2" />
            <TextBox  Grid.Row="1" Grid.Column="15" Name="tb2_exp" Width="30" ToolTip="exposant proportion des morceaux gérés" Margin="5" />
            <CheckBox  Grid.Row="1" Grid.Column="16" Name="cb2_removeEnabled" ToolTip="remove enabled" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="17" Name="cb2_virtOnlyDisabled" ToolTip="virtuel: seulement les décochés" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="18" Name="cb2_forceCoeffVirt" ToolTip="virtuel: coeff forcé" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="19" Name="cb2_virtAlignSelected" ToolTip="virtuel: aligné sur le coché" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="20" Name="cb2_virtAlignPrec" ToolTip="virtuel: aligné sur le précédent" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="21" Name="cb2_coeffVirtAdjust" ToolTip="coeffvirt ajusté sur coeff selected" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="22" Name="cb2_coeffVirtAuto" ToolTip="coeffvirt automatique" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="23" Name="cb2_noaddEnd" ToolTip="en fin d'alum pas de virtuel" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="24" Name="cb2_noaddAll" ToolTip="tout virtuel" Margin="5" Padding="2" />
            <ComboBox ToolTip="ajusté avec le plus mauvais coché si besoin" Grid.Row="1" Grid.Column="25" Name="cbx2_cmpMinn" Height="22" Padding="4" >
                <ComboBoxItem ToolTip="pas géré" >non</ComboBoxItem>
                <ComboBoxItem ToolTip="ce qui reste dispo est plus grand que la médianne">orphelin</ComboBoxItem>
                <ComboBoxItem ToolTip="tou ce qui est noté et coché">toujours</ComboBoxItem>
            </ComboBox>
            <TextBox  Grid.Row="1" Grid.Column="26" Name="tb2_zero" Width="120" ToolTip="zéro" Margin="5" />
        </Grid>-->
        <Grid Grid.Row="2" Height="65" Margin="0,0,0,-30">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <StackPanel Grid.Row="2" Grid.Column="0" Orientation="Horizontal"  HorizontalAlignment="Left"  Margin="0,5" >
                <CheckBox Name="cb_createCourant" ToolTip="générer stats en cours (désactivés)"  Margin="5" Padding="2"></CheckBox>
                <CheckBox Name="cb_createInter" ToolTip="générer stats en cours + provisoire"  Margin="5" Padding="2"></CheckBox>
                <CheckBox Name="cb_createAll" ToolTip="générer stats de tout"  Margin="5" Padding="2"></CheckBox>
                <DatePicker Name="dp_date" ToolTip="Date seuil pour considérer un classement provisoire" />
            </StackPanel>
            <StackPanel Orientation="Horizontal"  HorizontalAlignment="Right" Margin="5,5,8,5"  Width="326">
                <TextBox Grid.Row="2" Name="tb_stackSize" Width="30"  VerticalAlignment="Center" Text="10" ToolTip="taille de la pile d'exclusion" Margin="5" Padding="2"/>
                <TextBox Grid.Row="2" Name="tb_coeffEnabled" Width="60"  VerticalAlignment="Center" Text="1" ToolTip="Coeff des morceaux cochés"  KeyUp="tb_safe_KeyUp" Margin="5" Padding="2"/>
                <CheckBox Grid.Row="2" Name="cb_idem" Width="30"  VerticalAlignment="Center" ToolTip="Lier les items" Margin="5" Padding="2" Click="cb_idem_Click" />
                <CheckBox Grid.Row="2" Name="cb_oldAsZero" Width="30"  VerticalAlignment="Center" ToolTip="Vieux comme null" Margin="5" Padding="2"  />
                <Button Grid.Row="2" Name="bt_cancel" IsCancel="true" Height="25" HorizontalAlignment="Right" Content="Cancel" Click="bt_cancel_Click"   Margin="5" Padding="2"/>
                <Button Grid.Row="2" Name="bt_ok" Height="25" HorizontalAlignment="Right" Content="Ok" Click="bt_ok_Click"   Margin="5" Padding="2"/>
                <Button Grid.Row="2" Name="bt_coul" Height="25" HorizontalAlignment="Right" Content="Couleurs" Click="bt_coul_Click"   Margin="5" Padding="2"/>
            </StackPanel>
        </Grid>
    </Grid>

</Window>
]]></content>
  </file>
  <file path="\pdb.player\Vue\ConfAlbumSortW.xaml.cs">
    <content><![CDATA[using System;
using System.Windows;
using pdb.gen.Tuning;
using pdb.gen;
using pdb.db.piece.type;
using pdb.player.Vue.Conf;
using System.Windows.Controls;

namespace pdb.player.Vue
{
    /// <summary>
    /// Interaction logic for ConfAlbumSortW.xaml
    /// </summary>
    public partial class ConfAlbumSortW : Window, IConfSort
    {
        private ConfAlbumSort conf;
        private ConfMedianneW first;
        private ConfMedianneW second;
        private static bool _idem;
        public ConfAlbumSortW()
        {
            InitializeComponent();
            this.Loaded += new RoutedEventHandler(ConfAlbumSortW_Loaded);
        }

        void ConfAlbumSortW_Loaded(object sender, RoutedEventArgs e)
        {
            bt_ok.IsDefault = true;

            display();
        }

        public ConfAlbumSortW(ConfAlbumSort conf)
            : this()
        {
            this.conf = conf;
            first = new ConfMedianneW(conf.Composants[0], this);
            gfirst.Children.Add(first);
            if (conf.Composants.Count > 1)
            {
                second = new ConfMedianneW(conf.Composants[1], this);
                gsecond.Children.Add(second);
            }

            InitializeComponent();
        }

        void display()
        {
            tb_coeffEnabled.Text = conf.coeffEnabled.ToString();
            tb_stackSize.Text = conf.stackSize.ToString();
            cb_createAll.IsChecked = conf.createAll;
            cb_createInter.IsChecked = conf.createInter;
            cb_createCourant.IsChecked = conf.createCourant;
            dp_date.SelectedDate = conf.lastModif;
            cb_idem.IsChecked = _idem;
            cb_oldAsZero.IsChecked = conf.oldAsZero; 

            first.display();
            if (second != null)
                second.display();


            //var list = conf.Composants;
            //var item1 = list[0];
            //cb_enabled.IsChecked = item1.enabled;
            //cbxSort.SelectedIndex = (int)item1.type;
            //tb_medianne.Text = item1.medianne.ToString();
            //cb_quasi.IsChecked = item1.quasi;
            //cb_lissage.IsChecked = item1.lissage;
            //cb_removeEpsilon.IsChecked = item1.removeEpsilon;
            //cb_reSort.IsChecked = item1.reSort;
            //cb_removeFirst.IsChecked = item1.removeFirst;
            //cb_deleteFirst.IsChecked = item1.deleteFirst;
            //cbx1_removeLast.SelectedIndex = (int)item1.removeLast;
            //cb_cumul.IsChecked = item1.cumul;
            //cb_noAdd.IsChecked = item1.noAdd;
            //tb_safe.Text = item1.safe.ToString();
            //tb_coeff.Text = item1.coeffVirt.ToString();
            //tb_exp.Text = item1.expEnabled.ToString();
            //tb_zero.Text = Piece.getClassementEquiv(item1.zero);
            //cb_removeEnabled.IsChecked = item1.removeEnabled;
            //cb_virtOnlyDisabled.IsChecked = item1.virtOnlyDisabled;
            //cb_forceCoeffVirt.IsChecked = item1.forceCoeffVirt;
            //cb_virtAlignPrec.IsChecked = item1.virtAlignPrec;
            //cb_virtAlignSelected.IsChecked = item1.virtAlignSelected;
            //cb_coeffVirtAdjust.IsChecked = item1.coeffVirtAdjust;
            //cb_coeffVirtAuto.IsChecked = item1.coeffVirtAuto;
            //cbx_cmpMinn.SelectedIndex = (int)item1.cmpMin;
            //cb_noaddEnd.IsChecked = item1.noAddEnd;
            //cb_noaddAll.IsChecked = item1.noAddAll; 





            //if (list.Count > 1)
            //{
            //    item1 = list[1];
            //    cb2_enabled.IsChecked = item1.enabled;
            //    cbx2Sort.SelectedIndex = (int)item1.type;
            //    tb2_medianne.Text = item1.medianne.ToString();
            //    cb2_quasi.IsChecked = item1.quasi;
            //    cb2_lissage.IsChecked = item1.lissage;
            //    cb2_removeEpsilon.IsChecked = item1.removeEpsilon;
            //    cb2_reSort.IsChecked = item1.reSort;
            //    cb2_removeFirst.IsChecked = item1.removeFirst;
            //    cb2_deleteFirst.IsChecked = item1.deleteFirst;
            //    cbx2_removeLast.SelectedIndex = (int)item1.removeLast;
            //    cb2_cumul.IsChecked = item1.cumul;
            //    cb2_noAdd.IsChecked = item1.noAdd;
            //    tb2_safe.Text = item1.safe.ToString();
            //    tb2_coeff.Text = item1.coeffVirt.ToString();
            //    tb2_exp.Text = item1.expEnabled.ToString();
            //    tb2_zero.Text = Piece.getClassementEquiv(item1.zero);
            //    cb2_removeEnabled.IsChecked = item1.removeEnabled;
            //    cb2_virtOnlyDisabled.IsChecked = item1.virtOnlyDisabled;
            //    cb2_forceCoeffVirt.IsChecked = item1.forceCoeffVirt;
            //    cb2_virtAlignPrec.IsChecked = item1.virtAlignPrec;
            //    cb2_virtAlignSelected.IsChecked = item1.virtAlignSelected;
            //    cb2_coeffVirtAdjust.IsChecked = item1.coeffVirtAdjust;
            //    cb2_coeffVirtAuto.IsChecked = item1.coeffVirtAuto;
            //    cbx2_cmpMinn.SelectedIndex = (int)item1.cmpMin;
            //    cb2_noaddEnd.IsChecked = item1.noAddEnd;
            //    cb2_noaddAll.IsChecked = item1.noAddAll; 
            //}
        }
        void record()
        {
            conf.coeffEnabled = Convert.ToDecimal(tb_coeffEnabled.Text);
            conf.stackSize = Convert.ToInt32(tb_stackSize.Text);
            conf.createCourant = cb_createCourant.IsChecked.Value;
            conf.createInter = cb_createInter.IsChecked.Value;
            conf.createAll = cb_createAll.IsChecked.Value;
            conf.lastModif = dp_date.SelectedDate.Value;
            conf.oldAsZero = cb_oldAsZero.IsChecked.Value; 

            first.record();
            if (second != null)
                second.record();

           


            //var list = conf.Composants;
            //var item1 = list[0];
            //item1.enabled = cb_enabled.IsChecked.Value;
            //item1.type = (util.medianneMode)cbxSort.SelectedIndex;
            //item1.medianne = Convert.ToDecimal(tb_medianne.Text);
            //item1.quasi = cb_quasi.IsChecked.Value;
            //item1.lissage = cb_lissage.IsChecked.Value;
            //item1.removeEpsilon = cb_removeEpsilon.IsChecked.Value;
            //item1.reSort = cb_reSort.IsChecked.Value;
            //item1.removeFirst = cb_removeFirst.IsChecked.Value;
            //item1.deleteFirst = cb_deleteFirst.IsChecked.Value;
            //item1.removeLast = (util.removeLast)cbx1_removeLast.SelectedIndex;
            //item1.cumul = cb_cumul.IsChecked.Value;
            //item1.noAdd = cb_noAdd.IsChecked.Value;
            //item1.safe = Convert.ToInt32(tb_safe.Text);
            //item1.coeffVirt = Convert.ToDecimal(tb_coeff.Text);
            //item1.expEnabled = Convert.ToDecimal(tb_exp.Text);
            //var cl = Classement.create(tb_zero.Text);
            //item1.zero = cl.RapportClassement;
            //item1.removeEnabled = cb_removeEnabled.IsChecked.Value;
            //item1.virtOnlyDisabled = cb_virtOnlyDisabled.IsChecked.Value;
            //item1.forceCoeffVirt = cb_forceCoeffVirt.IsChecked.Value;
            //item1.virtAlignPrec = cb_virtAlignPrec.IsChecked.Value;
            //item1.virtAlignSelected = cb_virtAlignSelected.IsChecked.Value;
            //item1.coeffVirtAuto = cb_coeffVirtAuto.IsChecked.Value;
            //item1.coeffVirtAdjust = cb_coeffVirtAdjust.IsChecked.Value;
            //item1.cmpMin = (util.modeMin)cbx_cmpMinn.SelectedIndex;
            //item1.noAddEnd = cb_noaddEnd.IsChecked.Value;
            //item1.noAddAll = cb_noaddAll.IsChecked.Value; 

            //if (list.Count > 1)
            //{
            //    if (cbx2Sort.SelectedIndex == 0)
            //    {
            //        list.RemoveAt(1);
            //        return;
            //    }
            //}
            //else
            //{
            //    if (cbx2Sort.SelectedIndex > 0)
            //    {
            //        item1 = new util.ConfMedianne();
            //        list.Add(item1);
            //    }
            //}

            //if (list.Count > 1)
            //{
            //    item1 = list[1];

            //    item1.enabled = cb2_enabled.IsChecked.Value;
            //    item1.type = (util.medianneMode)cbx2Sort.SelectedIndex;
            //    item1.medianne = Convert.ToDecimal(tb2_medianne.Text);
            //    item1.quasi = cb2_quasi.IsChecked.Value;
            //    item1.lissage = cb2_lissage.IsChecked.Value;
            //    item1.removeEpsilon = cb2_removeEpsilon.IsChecked.Value;
            //    item1.reSort = cb2_reSort.IsChecked.Value;
            //    item1.removeFirst = cb2_removeFirst.IsChecked.Value;
            //    item1.deleteFirst = cb2_deleteFirst.IsChecked.Value;
            //    item1.removeLast = (util.removeLast)cbx2_removeLast.SelectedIndex;
            //    item1.cumul = cb2_cumul.IsChecked.Value;
            //    item1.noAdd = cb2_noAdd.IsChecked.Value;
            //    item1.safe = Convert.ToInt32(tb2_safe.Text);
            //    item1.coeffVirt = Convert.ToDecimal(tb2_coeff.Text);
            //    item1.expEnabled = Convert.ToDecimal(tb2_exp.Text);
            //    item1.zero = Convert.ToDecimal(tb2_zero.Text);

            //    cl = Classement.create(tb2_zero.Text);
            //    item1.zero = cl.RapportClassement;
            //    item1.removeEnabled = cb2_removeEnabled.IsChecked.Value;
            //    item1.virtOnlyDisabled = cb2_virtOnlyDisabled.IsChecked.Value;
            //    item1.forceCoeffVirt = cb2_forceCoeffVirt.IsChecked.Value;
            //    item1.virtAlignPrec = cb2_virtAlignPrec.IsChecked.Value;
            //    item1.virtAlignSelected = cb2_virtAlignSelected.IsChecked.Value;
            //    item1.coeffVirtAuto = cb2_coeffVirtAuto.IsChecked.Value;
            //    item1.coeffVirtAdjust = cb2_coeffVirtAdjust.IsChecked.Value;
            //    item1.cmpMin = (util.modeMin)cbx2_cmpMinn.SelectedIndex;
            //    item1.noAddEnd = cb2_noaddEnd.IsChecked.Value;
            //    item1.noAddAll = cb2_noaddAll.IsChecked.Value; 
            //}
        }

        private void bt_cancel_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        private void bt_ok_Click(object sender, RoutedEventArgs e)
        {
            record();
            Close();
            conf.Calcul();
            App.go();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {

        }




        public string CoeffEnabled
        {
            get { return tb_coeffEnabled.Text; }
        }

        public bool DuplicateItem
        {
            get
            {
                bool ret = cb_idem.IsChecked.Value;
                _idem = ret;
                return ret;
            }
        }
        private void tb_safe_KeyUp(object sender, System.Windows.Input.KeyEventArgs e)
        {
            first.onchange();

            if (second != null)
                second.onchange();
        }

        private void bt_coul_Click(object sender, RoutedEventArgs e)
        {
            new ConfCouleurs().Show();
        }

        private void cb_idem_Click(object sender, RoutedEventArgs e)
        {
            first.checkIdem();
            if (second != null)
                second.checkIdem();
        }

    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\DataGridPlayList.xaml.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using pdb.gen.Tuning;
using pdb.player.ViewModel;
using pdb.player.ViewModel.Commande.PlayList;
using pdb.util;
using pdb.player.Vue.Util;
using System.Windows.Threading;
using System.Windows.Media;
using Math = System.Math; 

namespace pdb.player.Vue
{



    public partial class DataGridPlayList : UserControl, ItrackProvider, IRedraw, IExportTracks
    {
        private static int nb;
        private int ID;
        private Logger log;
        public static event EventHandler refreshOk;
        // private BgColorFormatConverter colorConvert = new BgColorFormatConverter();

        //  private BgDict<int, DataGridRow> dict = new BgDict<int, DataGridRow>(); 
        private TrackListViewModel currentTrack;

        public DataGridPlayList()
        {
            ID = nb;
            log = Logger.getLogger("DataGridPlayList" + ID);
            nb++;
            InitializeComponent();
            this.Loaded += DataGridPlayList_Loaded;
            App.refresh += new EventHandler(App_refresh);
            PlayListCommande.Provider = this;
        }

        void DataGridPlayList_Loaded(object sender, RoutedEventArgs e)
        {
            init(null);
            PlayListViewModel.selectedPlaylistChange += PlayListViewModel_selectedPlaylistChange;
            PlayListViewModel.addDrow(this);
            dg.PreviewKeyUp += new KeyEventHandler(dg_preview);
            TrackListViewModel.CurrentHumanSelectedChanged += new EventHandler(TrackListViewModel_CurrentHumanSelectedChanged);

            ExportCmd.Ihm = this;

        }

        void TrackListViewModel_CurrentHumanSelectedChanged(object sender, EventArgs e)
        {
            //if (currentTrack != null)
            //    currentTrack.refresh();

            var hs = TrackListViewModel.HumanSelected;
            if (hs == null)
                return;
            var pl = PlayListViewModel.SelectedPlayList;
            bool reset = pl != sender;

            TrackListViewModel t = null;
            try
            {
                checkItems(true);

                t = PlayListViewModel.findTrack(pl, hs.PieceId);
                if (t == null)
                    return;
                t.IsSelected = true;

            }
            finally
            {
                currentTrack = t;
                //if (currentTrack != null)
                //    currentTrack.refresh();
            }
        }

        Key key;
        void dg_preview(object sender, KeyEventArgs e)
        {
            // e.Handled = false; 
            key = e.Key;
            bool nav = false;

            switch (key)
            {
                case Key.Up:
                case Key.Down:
                case Key.PageDown:
                case Key.PageUp: nav = true; break;
                //case Key.LeftCtrl: case Key.RightCtrl : // TODO ajouter un élément
            }



            if (!nav)
                return;
            TrackListViewModel.setHumanSelected(PlayList, TrackListViewModel.CurrentSelected); //    .HumanSelected = TrackListViewModel.CurrentSelected;
        }


        void App_refresh(object sender, EventArgs e)
        {
            log.log("dg::App_refresh");
            redraw();
        }




        void PlayListViewModel_selectedPlaylistChange(object sender, EventArgs e)
        {
            if (ID == 0)
            {
                init(sender as PlayListViewModel);
            }
        }

        private void init(PlayListViewModel old)
        {
            if (!Dispatcher.CheckAccess())
            {
                Dispatcher.Invoke(new Action<PlayListViewModel>(init));
                return;
            }
            log.log("dg::init");
            SortDescriptionCollection sort = null;
            ICollectionView view = null;
            if (old != null)
            {
                view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
                if (view != null)
                    sort = view.SortDescriptions;
                if (sort != null)
                    old.Sort = sort;
            }


            var pl = PlayListViewModel.SelectedPlayList;
            var currentPlaying = TrackListViewModel.CurrentPlaying;
            if (pl == null)
                return;
            base.DataContext = null;

            var source = dg.ItemsSource;

            dg.ItemsSource = null;
            var items = pl.AlltracksVm;
            view = CollectionViewSource.GetDefaultView(items);
            using (var w = view.DeferRefresh())
            {
                // items.refresh();

                base.DataContext = items;
                int i = 0;
                if (pl.isSubList("gen"))
                {
                }
                else
                {
                    //foreach (TrackListViewModel track in items)
                    //{
                    //    i++;
                    //    track.Index = i;
                    //}
                }
                sort = pl.Sort;
                List<SortDescription> _sort = null;
                if (sort != null)
                    _sort = new List<SortDescription>(sort);
                dg.ItemsSource = items;

                TrackListViewModel.CurrentPlaying = currentPlaying;

                dg.ApplySort(_sort, w);
            }
            PlayerViewModel.Instance.set(this);

            //if (_sort != null && _sort.Count > 0)
            //{
            //    view.SortDescriptions.Clear();
            //    foreach (var _s in _sort)
            //    {
            //        view.SortDescriptions.Add(_s);
            //        foreach (DataGridColumn _c in dg.Columns)
            //        {
            //            if (_s.PropertyName == _c.SortMemberPath)
            //            {
            //                _c.SortDirection = _s.Direction;
            //                break;
            //            }
            //        }
            //        break;

            //    }
            //}

            //foreach (TrackListViewModel tv in items)
            //    tv.PropertyChanged += new PropertyChangedEventHandler(tv_PropertyChanged);

            if (currentTrack != null)
                currentTrack.refresh();

            putExportTracks(pl, CollectionViewSource.GetDefaultView(dg.ItemsSource));
            OnRefresh();


        }
        private void OnRefresh()
        {
            if (refreshOk != null)
                refreshOk(this, EventArgs.Empty);
        }

        private void dg_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                var r = sender as DataGridRow;
                var t = r.Item as TrackListViewModel;
                PlayerViewModel.reset(this, t);
            }
            catch
            {
            }
        }

        private void checkItems(bool reset)
        {
            var l = new List<TrackListViewModel>();

            foreach (TrackListViewModel track in selectedTracks)
            {
                track.IsSelected = false;
                track.refresh();
            }

            if (reset)
            {
                TrackListViewModel selected = null;
                if (TrackListViewModel.HumanSelected != null)
                {
                    selected = PlayListViewModel.findTrack(PlayList, TrackListViewModel.HumanSelected.PieceId);
                }
                if (selected != null)
                {
                    l.Add(selected);
                    if (!dg.SelectedItems.Contains(selected))
                        dg.SelectedItems.Add(selected);
                }
                foreach (TrackListViewModel track in selectedTracks)
                {
                    if (track != selected)
                    {
                        dg.SelectedItems.Remove(track);
                        track.IsSelected = false;
                        track.refresh();
                    }
                }
            }
            else
            {
                foreach (TrackListViewModel track in dg.SelectedItems)
                {
                    l.Add(track);
                    track.IsSelected = true;
                    track.refresh();
                }
            }
            lock (this)
                selectedTracks = l;
            PlayerViewModel.Instance.makeResume();
        }

        private void dg_MouseClick(object sender, MouseButtonEventArgs e)
        {
            //  e.Handled = true; 
            //var r = sender as DataGridRow;
            //var t = r.Item as TrackListViewModel;
            //TrackListViewModel.setHumanSelected(PlayList, t); //   .HumanSelected = t;
            //startPoint = e.GetPosition(null);
            checkItems(false);
        }



        private List<TrackListViewModel> selectedTracks = new List<TrackListViewModel>();

        private List<TrackListViewModel> SelectedTracks
        {
            get
            {
                lock (this)
                    return selectedTracks;
            }
        }
        ICollectionView ItrackProvider.PresentationTracks
        {
            get { return CollectionViewSource.GetDefaultView(dg.ItemsSource); }
        }
        void ItrackProvider.Focus(int index)
        {

            // dg.SelectedIndex = index;
            //var indexbas = Math.Min(index + 100, dg.Items.Count - 1);
            //scrol(indexbas);
            scrol(index);
        }

        List<TrackListViewModel> ISelectedTracks.SelectedTracks
        {
            get
            {
                return SelectedTracks;
            }
        }
        void scrol(int index)
        {
            if (!CheckAccess())
            {
                Dispatcher.Invoke(new Action<int>(this.scrol), index);
            }
            else
            {
                if (dg.Items.Count == 0)
                    return;
                if (index < 0)
                    index = 0;
                if (index >= dg.Items.Count)
                    index = dg.Items.Count - 1;

                dg.ScrollIntoView(dg.Items[index]);
            }
        }
        public PlayListViewModel PlayList
        {
            get { return PlayListViewModel.SelectedPlayList; }
        }
        public void doFilter(string filter)
        {
            PlayerViewModel.doFilter((this as ItrackProvider).PresentationTracks, filter);
        }
        private bool IsUserVisible(FrameworkElement element, FrameworkElement container)
        {
            if (!element.IsVisible)
                return false;
            Rect bounds = element.TransformToAncestor(container).TransformBounds(new Rect(0.0, 0.0, element.ActualWidth, element.ActualHeight));
            Rect rect = new Rect(0.0, 0.0, container.ActualWidth, container.ActualHeight);
            return rect.Contains(bounds.TopLeft) || rect.Contains(bounds.BottomRight);
        }

        private static T FindVisualParent<T>(UIElement element) where T : UIElement
        {
            var parent = element;
            while (parent != null)
            {
                var correctlyTyped = parent as T;
                if (correctlyTyped != null)
                {
                    return correctlyTyped;
                }

                parent = VisualTreeHelper.GetParent(parent) as UIElement;
            }
            return null;
        }

        public void redraw()
        {
            if (!CheckAccess())
            {
                Dispatcher.BeginInvoke(new Action(this.redraw), DispatcherPriority.DataBind);
                return;
            }
            try
            {
                var pl = PlayListViewModel.SelectedPlayList;

                bool isgen = false;
                if (pl != null && pl.isSubList("gen"))
                    isgen = true;

                var items = dg.ItemsSource as AllTracksViewModel;

                if (items == null)
                {
                    dg.Items.Refresh();
                }
                else
                {
                    ICollectionView view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
                    using (var w = view.DeferRefresh())
                    {
                        SortDescriptionCollection sort = view.SortDescriptions;

                        List<SortDescription> _sort = null;
                        if (sort != null)
                            _sort = new List<SortDescription>(sort);

                        int i = 0;
                        foreach (TrackListViewModel track in items)
                        {
                            i++;
                            if (!isgen)
                                track.Index = i;
                            //  track.refresh();
                        }

                        dg.ApplySort(_sort, w);
                        //if (_sort != null && _sort.Count > 0 && view.SortDescriptions.Count > 0)
                        //{
                        //    view.SortDescriptions.Clear();
                        //    foreach (var _s in _sort)
                        //    {
                        //        view.SortDescriptions.Add(_s);
                        //    }
                        //}
                        items.refresh();
                    }
                    putExportTracks(pl, view);

                }
                return;


                try
                {
                    isgen = false;

                    if (isgen)
                    {
                        log.log("dg::redraw::init");
                        init(pl);
                    }
                    else
                    {
                        log.log("dg::redraw::Refresh");
                        dg.Items.Refresh();
                    }
                }
                catch
                {
                    try
                    {
                        init(pl);
                    }
                    catch
                    {
                    }
                }
            }
            finally
            {
                OnRefresh();
            }

        }

        private void MenuItem_Click(object sender, RoutedEventArgs e)
        {
            var items = dg.SelectedItems;
            MessageBox.Show(items.Count.ToString());
        }

        public string folderDialog()
        {
            return App.Instance.folderDialog();
        }


        public System.ComponentModel.ICollectionView PresentationTracks
        {
            get
            {
                return ((ItrackProvider)this).PresentationTracks;
            }
        }






        public bool ModeAlbum
        {
            get { return MessageBox.Show("par albums complets", "export", MessageBoxButton.YesNo) == MessageBoxResult.Yes; }
        }

        public bool Continue
        {
            get { return MessageBox.Show("continuer le marché ?", "export", MessageBoxButton.YesNo) == MessageBoxResult.Yes; }
        }




        public void InfoIHm(string message, string caption)
        {
            App.Instance.InfoIHm(message, caption);
        }

        public bool Confirm(string question, string caption)
        {
            return App.Instance.Confirm(question, caption);
        }

        public bool? TriChoix(string question, string caption)
        {
            return App.Instance.TriChoix(question, caption);
        }

        public Export getConfExport(string question)
        {
            return App.Instance.getConfExport(question);
        }

        public Import getConfImport(string question)
        {
            return App.Instance.getConfImport(question);
        }

        public int getNb(string question)
        {
            return App.Instance.getNb(question);
        }

        public bool changeName(string title, IName data)
        {
            return App.Instance.changeName(title, data);
        }

        public PlayListViewModel selectPlayList(string title)
        {
            return App.Instance.selectPlayList(title);
        }



        //  private List<TrackListViewModel> list = new List<TrackListViewModel>(); 
        public List<TrackListViewModel> ListTrack
        {
            get { return null; }
        }

        private void putExportTracks(PlayListViewModel pl, ICollectionView view)
        {
            var list = new List<TrackListViewModel>();
            foreach (TrackListViewModel track in view)
                list.Add(track);
            pl.ExportTracks = list;
            //visibleItems = new List<TrackListViewModel>();

            //foreach (var item in view)
            //{
            //    var row = dg.ItemContainerGenerator.ContainerFromItem(item) as DataGridRow;
            //    if (row != null)
            //    {
            //        visibleItems.Add(item as TrackListViewModel); 
            //    }
            //}


        }
        //private List<TrackListViewModel> visibleItems = new List<TrackListViewModel>();
        //public List<TrackListViewModel> VisibleItems { get { return new List<TrackListViewModel>(visibleItems); } }

        Point startPoint;
        private void dg_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            startPoint = e.GetPosition(null);
        }

        private void dg_PreviewMouseMove(object sender, MouseEventArgs e)
        {
            var mousePos = e.GetPosition(null);
            var diff = startPoint - mousePos;

            if (Math.Abs(diff.X) > SystemParameters.MinimumHorizontalDragDistance
                || Math.Abs(diff.Y) > SystemParameters.MinimumVerticalDragDistance)
            {
                var treeView = sender as DataGrid;
                var treeViewItem = //(e.OriginalSource as DependencyObject).
                    Util.Util<DataGridRow>.FindAnchestor((DependencyObject)e.OriginalSource);
                //   FindAnchestor<TreeViewItem>((DependencyObject)e.OriginalSource);

                if (treeView == null || treeViewItem == null)
                    return;

                var folderViewModel = treeView.SelectedItem as TrackListViewModel;
                if (folderViewModel == null)
                    return;

                var dragData = new DataObject(folderViewModel);
                DragDrop.DoDragDrop(treeViewItem, dragData, DragDropEffects.Copy);
            }
        }
    }
}]]></content>
  </file>
  <file path="\pdb.player\Vue\Conf\ConfVirt.xaml.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using pdb.util;
using Math = System.Math; 
namespace pdb.player.Vue.Conf
{
    public interface IConfSort
    {
        string CoeffEnabled { get; }
        bool DuplicateItem { get; }
    }
    /// <summary>
    /// Interaction logic for ConfVirt.xaml
    /// </summary>
    public partial class ConfVirt : UserControl
    {
        private ConfMedianneVirt conf;
        private IConfSort parent;
    


        decimal coeffp;
        decimal prod;
        decimal conv; 
        

        public ConfVirt()
        {
            InitializeComponent();
        }

        public ConfVirt(ConfMedianneVirt conf, IConfSort parent)
            : this()
        {
            this.conf = conf;
            this.parent = parent;
            display();
            onchange();
        }

        public ConfMedianneVirt Conf
        {
            set
            {
                this.conf = value; 
            }
        }


        public void display()
        {

           
            cb_lissage.IsChecked = conf.lissage;
            cb_removeEpsilon.IsChecked = conf.removeEpsilon;
            cb_reSort.IsChecked = conf.reSort;


            cb_cumul.IsChecked = conf.cumul;
            cb_noAdd.IsChecked = conf.noAdd;
            tb_safe.Text = conf.safe.ToString();
            tb_coeff.Text = conf.coeffVirt.ToString();


            cb_virtOnlyDisabled.IsChecked = conf.virtOnlyDisabled;
            cb_forceCoeffVirt.IsChecked = conf.forceCoeffVirt;
            cb_virtAlignPrec.IsChecked = conf.virtAlignPrec;
            cb_virtAlignSelected.IsChecked = conf.virtAlignSelected;
            cb_coeffVirtAdjust.IsChecked = conf.coeffVirtAdjust;
            cb_coeffVirtAuto.IsChecked = conf.coeffVirtAuto;


            cb_noaddEnd.IsChecked = conf.noAddEnd;
            cb_noaddAll.IsChecked = conf.noAddAll;

            cb_auto.IsChecked = conf.auto;
            coeffp = conf.dcoeffp;
            tb_dcoeffp.Text = coeffp.ToString("0.#####");
            tb_dcoeffm.Text = conf.dcoeffm.ToString("0.#####");
            conv = conf.dconvergence; 
            tb_convergence.Text = conv.ToString("0.######");
            tb_dconvdeltap.Text = conf.dconvdeltap.ToString("0.######");
            tb_dconvdeltam.Text = conf.dconvdeltam.ToString("0.######");

            tb_anti.Text = conf.danticonvergence.ToString("0.#####");
            tb_antideltap.Text = conf.danticonvdeltap.ToString("0.######");
            tb_antideltam.Text = conf.danticonvdeltam.ToString("0.######");

            cb_link.IsChecked = conf.linkconv;

            prod = conf.LinkProduct;
            tb_prod.Text = prod.ToString("0.######");
            tb_prod.Visibility = conf.linkconv ? System.Windows.Visibility.Visible : System.Windows.Visibility.Collapsed; 
            l_prod.Text = conf.calcProduct(conf.dcoeffp, conf.dconvergence).ToString("0.######");
            tb_prod.IsEnabled = conf.linkconv;

            tb_serialp.Text = conf.serialp.ToString();
            tb_serialm.Text = conf.serialm.ToString();
            tb_serial.Text = conf.Serial.ToString();
           
          

        }

       

        public void record()
        {


            conf.lissage = cb_lissage.IsChecked.Value;
            conf.removeEpsilon = cb_removeEpsilon.IsChecked.Value;
            conf.reSort = cb_reSort.IsChecked.Value;

            conf.cumul = cb_cumul.IsChecked.Value;
            conf.noAdd = cb_noAdd.IsChecked.Value;
            conf.safe = Convert.ToInt32(tb_safe.Text);
            conf.coeffVirt = Convert.ToDecimal(tb_coeff.Text);

            conf.virtOnlyDisabled = cb_virtOnlyDisabled.IsChecked.Value;
            conf.forceCoeffVirt = cb_forceCoeffVirt.IsChecked.Value;
            conf.virtAlignPrec = cb_virtAlignPrec.IsChecked.Value;
            conf.virtAlignSelected = cb_virtAlignSelected.IsChecked.Value;
            conf.coeffVirtAuto = cb_coeffVirtAuto.IsChecked.Value;
            conf.coeffVirtAdjust = cb_coeffVirtAdjust.IsChecked.Value;

            conf.noAddEnd = cb_noaddEnd.IsChecked.Value;
            conf.noAddAll = cb_noaddAll.IsChecked.Value;

            conf.auto = cb_auto.IsChecked.Value;
            conf.dcoeffp = coeffp; // Convert.ToDecimal(tb_dcoeffp.Text);
            conf.dcoeffm = Convert.ToDecimal(tb_dcoeffm.Text);
            conf.dconvergence = conv; // Convert.ToDecimal(tb_convergence.Text);
            conf.dconvdeltap = Convert.ToDecimal(tb_dconvdeltap.Text);
            conf.dconvdeltam = Convert.ToDecimal(tb_dconvdeltam.Text);

            conf.danticonvergence = Convert.ToDecimal(tb_anti.Text);
            conf.danticonvdeltap = Convert.ToDecimal(tb_antideltap.Text);
            conf.danticonvdeltam = Convert.ToDecimal(tb_antideltam.Text);


            conf.linkconv = cb_link.IsChecked.Value;

            conf.serialp = Convert.ToInt32(tb_serialp.Text);
            conf.serialm = Convert.ToInt32(tb_serialm.Text);
            conf.Serial = Convert.ToInt32(tb_serial.Text); 



        }



        private void onchange2()
        {
            try
            {
                var safe = Convert.ToInt32(tb_safe.Text);
                var coeffT = Convert.ToDouble(tb_coeffT.Text);
                var coeff = Math.Pow(coeffT, (1.0 / (double)safe));
                tb_coeff.Text = coeff.ToString();
            }
            catch
            {
            }
        }

        private void tb_safe_KeyUp(object sender, System.Windows.Input.KeyEventArgs e)
        {
            onchange();
        }

        private void tb_coeffT_KeyUp(object sender, System.Windows.Input.KeyEventArgs e)
        {
            onchange2();
        }

        public void onchange()
        {



            if (true == cb_coeffVirtAdjust.IsChecked)
            {
                try
                {
                    var safe = Convert.ToInt32(tb_safe.Text);
                    var coeffEnabled = Convert.ToDecimal(parent.CoeffEnabled);
                    var coeffVirt = Math.Pow((double)coeffEnabled, 1.0 / (safe + 1.0));
                    tb_coeff.Text = coeffVirt.ToString();
                }
                catch
                {
                }
            }

            try
            {
                var safe = Convert.ToInt32(tb_safe.Text);
                var coeff = Convert.ToDouble(tb_coeff.Text);
                var coeffT = Math.Pow(coeff, (double)safe);
                tb_coeffT.Text = coeffT.ToString("0.#####");
            }
            catch
            {
            }

        }

        private void cb_link_Click(object sender, RoutedEventArgs e)
        {
            tb_prod.IsEnabled = cb_link.IsChecked.Value;
            tb_prod.Visibility = cb_link.IsChecked.Value ? System.Windows.Visibility.Visible : System.Windows.Visibility.Collapsed; 
          
        }


       
        private void tb_prod_KeyUp(object sender, KeyEventArgs e)
        {
            try
            {
                prod = Convert.ToDecimal(tb_prod.Text);
                conv = conf.calcConv(coeffp, prod); 
                tb_convergence.Text = conv.ToString("0.######");
            }
            catch 
            {
                
                
            }
        }

        private void tb_dcoeffp_KeyUp(object sender, KeyEventArgs e)
        {
            try
            {
                coeffp = Convert.ToDecimal(tb_dcoeffp.Text);
                prod = conf.calcProduct(coeffp, conv);
                tb_prod.Text = prod.ToString("0.######");


            }
            catch
            {
            }
            
        }

        private void tb_convergence_KeyUp(object sender, KeyEventArgs e)
        {
            try
            {
                conv = Convert.ToDecimal(tb_convergence.Text);
                prod = conf.calcProduct(coeffp, conv);
                tb_prod.Text = prod.ToString("0.######");
            }
            catch
            {
            }
        }

        //private void calcProduct()
        //{
        //    try
        //    {
        //        var coeffp = Convert.ToDecimal(tb_dcoeffp.Text);
        //        var convergence = Convert.ToDecimal(tb_convergence.Text);
        //        tb_prod.Text = conf.calcProduct(coeffp, convergence).ToString("0.###");
        //    }
        //    catch
        //    {
        //    }
        //}

    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Feed.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using pdb.util;
using pdb.podcast.Tuning;
using pdb.podcast.Report;
using Math = System.Math; 

namespace pdb.podcast
{
    /// <summary>
    /// Un flux podcast (Un album)
    /// </summary>
    public class Feed
    {
        /// <summary>
        /// Liste des morceaux d'un album de podcasts
        /// </summary>
        private List<TrackInfoItunes> tracks = new List<TrackInfoItunes>();

        /// <summary>
        /// Nom de l'album
        /// </summary>
        private string name;

        /// <summary>
        /// Album de type info
        /// </summary>
        private bool info;
        public bool Info { get { return info; } }

        /// <summary>
        /// Album rare
        /// </summary>
        private bool rare;
        public bool Rare { get { return rare; } }
        public Feed(string name)
        {
            this.name = name;
        }

        public string Name { get { return name; } }
        public int Count { get { return tracks.Count; } }

        /// <summary>
        /// D�finition du plus r�cent
        /// </summary>
        /// <param name="otrack"></param>
        public bool check(TrackInfoItunes otrack)
        {
            //if (otrack.Pub.DayOfYear !=1)
            //{
            //var found tracks.Find(t=>t.Pub == otrack.Pub))
            //{
            //}
            //}
            info = otrack.Info;
            rare = otrack.Rare;
            tracks.Add(otrack);
            return true;
        }




        public List<TrackInfoItunes> Tracks
        {
            get
            {
                var list = new List<TrackInfoItunes>(tracks);
                return list;
            }
        }


        //public ICollection<TrackInfoItunes> getTracks(int level, int nbMax, float feedDuration, bool histo)
        //{
        //    TimeSpan currentDuration = new TimeSpan();
        //    var DurationMax = TimeSpan.FromMinutes(feedDuration);
        //    int rating = level * 20;
        //    if (histo)
        //        tracks.Sort(new PodCastComparer());
        //    else
        //        tracks.Sort(new PodCastComparerInv());
        //    int count = tracks.Count;

        //    List<TrackInfoItunes> aux = new List<TrackInfoItunes>();
        //    int nb = 0;
        //    for (int i = 0; i < count; i++)
        //    {
        //        var track = tracks[i];
        //        if (track.Rating >= rating)
        //        {
        //            var auxD = currentDuration;
        //            currentDuration += track.Duration;
        //            if (currentDuration > DurationMax)
        //            {
        //                misc.log("{0} level:{1} nbMax:{2} feedDuration:{3} histo:{4} duration:{5}  -->  stop duration {6}", this, level, nbMax, feedDuration, histo, auxD.TotalMinutes.ToString("0"), feedDuration);
        //                break;
        //            }
        //            aux.Add(track);
        //            nb++;
        //            if (nb >= nbMax)
        //            {
        //                //  misc.log("{0} level:{1} nbMax:{2} feedDuration:{3} histo:{4} duration{5}   -->  stop nb {6}", this, level, nbMax, feedDuration, histo, currentDuration.TotalMinutes.ToString("0"), nb); 
        //                break;
        //            }
        //        }
        //    }


        //    return aux;
        //}

        public List<TrackInfoItunes> getSelectedTracks
        {
            get
            {
                var list = tracks.FindAll(t => t.Selected);
                list.Sort(new PodCastComparer());
                return list;

            }
        }

        public List<TrackInfoItunes> getPreSelectedTracks
        {
            get
            {
                var list = tracks.FindAll(t => t.isPreselected); // Providers1.Count > 0);
                list.Sort(new PodCastComparer());
                return list;

            }
        }

        public List<TrackInfoItunes> getSelectedTracksLevel(int level)
        {
            int rating = level * 20;

            var list = tracks.FindAll(t => t.Selected && t.Rating == rating);
            list.Sort(new PodCastComparer());
            return list;

        }

        public void buildLastSelectedTrack(List<TrackInfoItunes> depot)
        {
            var list = tracks.FindAll(t => t.Selected);
            if (list.Count > 0)
            {
                list.Sort(new PodCastComparerInv());
                var t = list[0];
                if (!depot.Contains(t))
                    depot.Add(t);
            }

        }

        /// <summary>
        /// Ajout les tracks pour le jour j du journal
        /// </summary>
        /// <param name="depot"></param>
        /// <param name="journal"></param>
        internal void getSelecTrackJournal(List<TrackInfoItunes> depot, Journal journal)
        {
            var list = tracks.FindAll(t => t.FreeInJournal);
            list.Sort(new PodCastComparer());
            timeSpan totalDurationMax = timeSpan.FromMinutes(journal.FeedDuration);
            timeSpan duration = new timeSpan();

            int nbMax = journal.Nb;
            int nb =0; 

            foreach (TrackInfoItunes track in list)
            {
                depot.Add(track);
                nb++;
                if (nb >= nbMax)
                    return;
                duration += track.Duree;
                if (duration >= totalDurationMax)
                    return; 
            }
        }

        const int SEMAINE = 7;
        private void getSelectedTrack(List<TrackInfoItunes> depot, List<TrackInfoItunes> list, IComparer<TrackInfoItunes> comparer, SelectParam param)
        {
           
            if (list == null)
                list = tracks.FindAll(t => t.Selected);
            if (list.Count > 0)
            {
                list.Sort(comparer);


                int _nb = 0;
                int _nbSerial = 0;
                int _nbHisto = 0;

                int nbSerial = param.nbSerial;
                int nbHisto = param.nbHisto;
                int nb = param.nb;
                int nb0 = nb;
                int nbSerial0 = nbSerial;
                int nbHisto0 = nbHisto;

                bool modeSemaine = param.modeSemaine;

                if (modeSemaine)
                {
                    nbSerial *= SEMAINE;
                    nbHisto *= SEMAINE;
                    nb *= SEMAINE;
                }

                DateTime? d0 = null;
                DateTime? dSerial = null;
                DateTime? dHisto = null;

                foreach (TrackInfoItunes track in list)
                {
                    DateTime pub = track.Pub.Date;
                    bool exempte = false;
                    if (nbSerial >= 0 && track.Serial)
                    {
                        _nbSerial++;
                        if (dSerial == null)
                            dSerial = pub;
                        if (_nbSerial > nbSerial0 && (_nbSerial > nbSerial || (int)Math.Abs((pub - dSerial.Value).TotalDays) >= nbSerial))
                        {

                        }
                        else
                            exempte = true;
                    }
                    if (nbHisto >= 0 && track.Histo)
                    {
                        _nbHisto++;
                        if (dHisto == null)
                            dHisto = pub;

                        if (_nbHisto > nbHisto0 && (_nbHisto > nbHisto || (int)Math.Abs((pub - dHisto.Value).TotalDays) >= nbHisto))
                        {
                           
                        }
                        else
                            exempte = true;

                    }
                    if (exempte)
                    {
                    }
                    else
                    {
                        _nb++;
                        if (d0 == null)
                            d0 = pub;
                        if (_nb > nb || (int)Math.Abs((pub - d0.Value).TotalDays) >= nb)
                        {
                            if (_nb > nb0)
                                continue;
                        }
                    }
                    if (!depot.Contains(track))
                        depot.Add(track);
                }

            }
        }

        public void buildFirstSelectedTrackLevel(List<TrackInfoItunes> depot, SelectParam param)
        {
            IComparer<TrackInfoItunes> comparer = null;

            int rating = 20 * param.level;

            var list = tracks.FindAll(t => t.Selected && t.Rating >= rating);

            if (param.dateCroissante)
                comparer = new PodCastComparer();
            else
                comparer = new PodCastComparerInv();

            getSelectedTrack(depot, list, comparer, param);

        }

        public void buildFirstSelectedTrack(List<TrackInfoItunes> depot, SelectParam param)
        {
            IComparer<TrackInfoItunes> comparer = null;

            if (param.dateCroissante)
                comparer = new FeedPodCastComparerHisto();
            else
                comparer = new FeedPodCastComparer();

            getSelectedTrack(depot, null, comparer, param);

        }

        public override string ToString()
        {
            return name + " " + tracks.Count;
        }

        //  private ITextWriter sb = new StringBuilder();

        private Stat stats = new Stat();
        public void recordTrack(TrackInfoItunes track, LimitItem provider)
        {
            stats.recordTrack(track);
            //sb.Append(provider.Dir.getPath());
            //sb.Append(" ");
            //sb.Append(provider.ToString());
            //sb.Append(" ");
            //sb.Append(track);

            //  sb.AppendLine();
        }

        public void rapport(ITextWriter sb)
        {
            sb.AppendLine();
            sb.AppendLine("feed -------------");
            sb.AppendLine(name);
            stats.rapport(sb);


            foreach (TrackInfoItunes track in getPreSelectedTracks)
            {
                sb.AppendLine();
                sb.AppendLine(track.ToString());
                sb.AppendLine("pre-selection");
                foreach (LimitItem provider in track.Providers1)
                {
                    sb.Append("\t");
                    //sb.Append(provider.Dir.getPath());
                    //sb.Append(" ");
                    sb.AppendLine(provider.ToString());
                }

                sb.AppendLine("selection");
                foreach (LimitItem provider in track.Providers)
                {
                    sb.Append("\t");
                    //sb.Append(provider.Dir.getPath());
                    //sb.Append(" ");
                    sb.AppendLine(provider.ToString());
                }
            }
        }


    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Loader.cs">
    <content><![CDATA[
using pdb.obj;
using System.Collections.Generic;
using pdb.it;
using pdb.util;
using System;
using pdb.podcast.DB;
namespace pdb.podcast
{
    public class Loader : pdb.it.Loader
    {
        private bool import;
        public Loader(Conf conf, bool useDetect) : base(conf, useDetect) { }
        public Loader(Conf conf, bool import, Db db, Action abortList) : base(conf, abortList) { this.db = db; this.import = import; }
        private Db db;
        protected override void afterCreate(it.PlayList playlist, it.TrackInfoItunes track, int id)
        {
            TrackInfoItunes _track = track as TrackInfoItunes;
            //  db.Check(_track); 
            if (playlist.isSubList("info"))
                _track.Info = true;
            if (playlist.isSubList("rare"))
                _track.Rare = true;
        }

        public override it.TrackInfoItunes create(string location)
        {
            TrackInfoItunes t = null;
            if (import)
            {
                t = new TrackInfoItunes() { Location = location };
            }
            else
            {
                t = db.get(location);
                if (t == null)
                    t = new TrackInfoItunes() { Location = location };
            }

            t.Present = true;
            return t;
        }



        public void check(TrackInfoItunes track)
        {
            if (!track.Present)
            {
                if (track.isPresent())
                {
                    track.Present = true;
                    createTrack(track);
                }
                else return;
            }
            track.import();
        }



        public void removeReadItems(PlayListComposite folder)
        {
            List<PlComponent> toDelete = new List<PlComponent>();
            foreach (PlComponent plc in folder)
            {
                if (plc is TrackInList)
                {
                    var t = plc as TrackInList;
                    var piece = t.Piece as TrackInfoItunes;
                    if (piece == null)
                    {
                        misc.log("plc pas un TrackInfoItunes {0}", plc);
                    }
                    else
                    {
                        if (piece.Played)
                            toDelete.Add(plc);
                    }
                }
                else if (plc is PlayListComposite)
                {
                    removeReadItems(plc as PlayListComposite);
                }
            }

            foreach (PlComponent plc in toDelete)
                plc.Delete();
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Program.cs">
    <content><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using System.Threading;
using System.Xml;
using iTunesLib;
using pdb.it;
using pdb.obj;
using pdb.ordo;
using pdb.podcast.Auto;
using pdb.podcast.Load;
using pdb.podcast.Report;
using pdb.podcast.Tuning;
using pdb.util;
using Conf = pdb.podcast.Tuning.Conf;
using pdb.podcast.Delta;
using System.Threading.Tasks;

namespace pdb.podcast
{
    /// <summary>
    /// crée des listes de lecture pour les Podcasts
    /// </summary>
    class Program : IAbortTask
    {
        //const char DIR_SEP = Path.DirectorySeparatorChar; 
        static Loader loader;
        //private Feeds feeds;
        public static Logger log;
        public static Logger logAuto;
        static int step = -1;
        static Program _instance = new Program();
        static bool calculRoots = false;

        private static AsyncFileWriter asyncFw = AsyncFileWriter.Instance;
        private static Chrono chrono = new Chrono();
        private static Logger logChrono;
        private static DB.Db db; 


        private static XmlWriter writer;
        //DirConf root;
        //DirConf oldRoot;

        private string _empreinte;

        static void Main(string[] args)
        {

            Logger.init(Environment.CurrentDirectory.Replace("\\", "_"));
            log = Logger.getLogger("Program");
            logChrono = Logger.getLogger("Chrono", true);
            logAuto = Logger.getLogger("Auto", true);
            logAuto.NoReset = true;

            FileRegister.init(new BgDictString0<FileValue>());
             _instance.go(args);
        }

       void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs e)
        {
            Console.WriteLine("\nThe read operation has been interrupted.");
            Console.WriteLine("  Key pressed: {0}", e.SpecialKey);
            Console.WriteLine("  Cancel property: {0}", e.Cancel);
            if (loader == null)
                return;
            e.Cancel = true;


            if (e.SpecialKey == ConsoleSpecialKey.ControlC)
            {
                _end = true;
                PlayList.AbortOpe();
                BackGroundTaskMgr.AbortSpecial();
                BackGroundTaskMgr.Reset();
                BackGroundTaskMgr.recordMsProc();
                loader.saveIds();
                Console.WriteLine("\nFin de l'opération d'enregistrement.");
                MemUtil.End();
                Logger.End();
                DisposableCounter.DisposeAll();
                Locker.releaseSingleProcess();
                AsyncFileWriter.End();
                Memory.End();
                Exporter.Abort();
                if (_writeDb!= null )
                {
                    misc.log("attente writeDb");
                    _writeDb.Wait(); 
                }
                Environment.Exit(0);
            }
            else
            {
                BackGroundTaskMgr.PlayPause();
                BackGroundTaskMgr.recordMsProc();
                loader.saveIds();
            }
        }

        //private void scandir(string dir)
        //{
        //    scanFiles(new DirectoryInfo(dir));
        //}

        //private void scanFiles(DirectoryInfo dir)
        //{
        //    log.log("scan " + dir.FullName);
        //    foreach (FileInfo file in dir.GetFiles())
        //    {
        //        //if (dict.ContainsKey(file.FullName))
        //        //    continue;

        //        // log.log("try to build track from " + file.FullName);

        //        try
        //        {
        //            var t = loader.createTrack(-1, file.FullName);
        //            if (t == null)
        //                continue;
        //            TrackInfoItunes track = t as TrackInfoItunes;

        //            if (track == null)
        //                continue;
        //            //if (!track.isPodcast)
        //            //    continue;

        //            log.log("\t==>track créé:" + track);
        //            feeds.checkAll(track);

        //        }
        //        catch (Exception ex)
        //        {
        //            log.log(ex.ToString());
        //        }
        //    }

        //    foreach (DirectoryInfo sub in dir.GetDirectories())
        //        scanFiles(sub);
        //}

        #region Task

        private Task _writeDb;
        private Task<List<ITrackInfoItunes>> _loadTracks;
        private async Task<List<ITrackInfoItunes>> loadTracks(bool firstStep, bool forceLoad)
        {
            List<ITrackInfoItunes> listTrack = new List<ITrackInfoItunes>();
            await Task.Run(() =>
              {
                  loader.init();
                  loader.reset(firstStep, forceLoad);
                  loader.loadTracks(listTrack);
                  loader.loadLists();
              });
            return listTrack;

        }
        #endregion

        public async Task go(string[] args)
        {
            int countArgs = args.GetLength(0);
            string confFile = "conf.xml";
            if (countArgs > 0)
                confFile = args[0];
            try
            {
                //BackGroundTaskMgr.Sens = - 1; 
                Thread.CurrentThread.Name = "Main";
                Console.CancelKeyPress += Console_CancelKeyPress;
                ThreadUtil.Log = false;
                misc.init(Logger.getLogger);
                MemUtil.Start(10);

                bool firstLoad = true;


                Conf.Instance.setConfFile(confFile);
                var xelt = Conf.Instance.load(false);
                TrackInfoItunes.Date0 = Conf.Date0; 
                if (Conf.Menage != menage.none)
                {
                    new Menage().go();
                    return;
                }
                BackGroundTaskMgr.Conf = Conf.Ordo;
                TrackInfoItunes.VolumeMin = Conf.VolumeMin;
                TrackInfoItunes.MaxPlayed = Conf.PlayedDates;
                var itConf = new pdb.it.Conf(xelt);

                // loader = new Loader(itConf, true);
                bool import = Conf.Import.enabled;
                db = new DB.Db(import);
                loader = new Loader(itConf, import, db, 
                    () =>
                    {
                        misc.Pre = "[Load " + step + "] ";

                        PlayList.AbortOpe();
                        BackGroundTaskMgr.AbortSpecial();
                        //   Thread.Sleep(1000); 
                        //  BackGroundTaskMgr.Start(); 
                    })

               ;
                // loader.init();
                TrackInfoItunes.DefaultFolder = loader.DefaultFolder;
               
                var tloadDb =  Task.Run(() => db.load());


                string ziqueOrg = loader.DefaultFolder;
                loader.PlayListFilter = new PlayListFilter(Conf.RootIt);

                BackGroundTaskMgr.Start();

                List<TrackInfoItunes> listIt = new List<TrackInfoItunes>();

                // var bgClass = BackGroundTaskMgr.getMgr("Classement", 0);

                do
                {
                    try
                    {
                        chrono.end();
                        logChrono.log(chrono.display(3, "{0}:{1:#}"));
                        chrono.reset("Program");

                        step++;
                        Logger.Pre = "[" + step + "] ";
                        Logger.CreateNullLoggers = false;
                        xelt = Conf.Instance.load(step > 0 && Conf.Simulation);
                        loader.Conf = new it.Conf(xelt);
                        // AutoBuilder.Log();
                        BackGroundTaskMgr.Conf = Conf.Ordo;
                        TrackInfoItunes.VolumeMin = Conf.VolumeMin;
                        ziqueOrg = loader.DefaultFolder;

#if vendee
                        listTrack = new List<ITrackInfoItunes>();
                        loader.reset(step == 0);

                        loader.ModeXml = false;
                        loader.loadTracks(listTrack);

                        var listV = new ArrayList();
                        loader.getNatives(listV);

                        new Vendee().go(listV);

                        return;

#endif

                        chrono.bip("debut");

                        if (step == 0 || !Conf.Simulation)
                        {
                            List<ITrackInfoItunes> listTrack = new List<ITrackInfoItunes>();

                            if (_loadTracks != null)
                                listTrack = await _loadTracks;
                            _loadTracks = loadTracks(step == 0, AutoBuilder.MustUpdate);
                            BackGroundTaskMgr.recordMsProc();
                            loader.Aborted = true;

                            PlayList.AbortOpe();
                            BackGroundTaskMgr.Reset();
                       
                            BackGroundTaskMgr.recordMsProc();
                            Logger.Reset();
                            BackGroundTaskMgr.Start();


                            misc.Pre = "[" + step + "] ";


                            // listTrack = new List<ITrackInfoItunes>();


                            xelt = Conf.Instance.load(false);
                            loader.Conf = new it.Conf(xelt);
                            //  AutoBuilder.Log();
                            BackGroundTaskMgr.Conf = Conf.Ordo;
                            TrackInfoItunes.VolumeMin = Conf.VolumeMin;

                            //xelt = Conf.Instance.load(step > 0 && Conf.Simulation);
                            //loader.Conf = new it.Conf(xelt);
                            //BackGroundTaskMgr.Conf = Conf.Ordo;
                            //TrackInfoItunes.VolumeMin = Conf.VolumeMin;

                            if (Conf.DeleteDoublon)
                            {

                                loader.ModeXml = false;
                                loader.loadTracks(listTrack);
                                return;
                            }

                            if (Conf.GetDescription)
                            {
                                loader.ModeXml = false;
                                loader.loadTracks(listTrack);
                                return;
                            }

                            string copyAll = Conf.CopyAll;
                            if (!string.IsNullOrEmpty(copyAll))
                            {
                                // loader.loadTracks(listTrack);
                                List<TrackInfoItunes> listToCopy = new List<TrackInfoItunes>();
                                foreach (ITrackInfoItunes _track in listTrack)
                                {

                                    if (_track.isPodcast)
                                    {
                                        var t = _track as TrackInfoItunes;
                                        listToCopy.Add(t);
                                    }


                                }
                                int count = listToCopy.Count;
                                int i = 0;
                                foreach (TrackInfoItunes track in listToCopy)
                                {
                                    i++;
                                    track.copy(copyAll, string.Format("{0}/{1}", i, count));
                                }
                                return;
                            }


                            //    loader.loadTracks(listTrack);

#if menage
                // var listC = new Dict<string, FileInfo>();
                var listD = new Dict<string, FileInfo>();

                Dict<string,ITrackInfoItunes> dict = new Dict<string, ITrackInfoItunes>();
                foreach (var track in listTrack)
                    dict[track.Location] = track;

               
                listFiles(listD, new DirectoryInfo(@"D:\zique\podcasts"));

                foreach (FileInfo file in listD)
                {
                    string location = file.FullName.Replace("D:", "C:");
                    FileInfo C = new FileInfo(location);
                    if (C.Exists)
                    {
                        //TrackInfoItunes track = dict[file.FullName] as TrackInfoItunes;
                        //if (track != null)
                        //{
                        //    log.log("suppression track" + track);
                        //    track.Delete();
                        //}
                        //else
                        //{
                            log.log("suppression simple de " + file.FullName);
                            file.Delete();
                        //}
                    }

                }

                return; 

#elif build

                            list = new List<TrackInfoItunes>();

                            foreach (ITrackInfoItunes _track in listTrack)
                            {
                                if (_track.isPodcast)
                                {
                                    var t = _track as TrackInfoItunes;
                                    string location = t.Location;
                                    if (string.IsNullOrEmpty(location) || !File.Exists(location))
                                    {
                                        log.log("phase load :: tres bizarre sans localisation " + t.Album + "/" + t.Name);
                                        //t.Delete();
                                        continue;
                                    }

                                    list.Add(t);
                                }

                            }
                            int nbIntegre = 0;
                            int nbSuppr = 0;
                            scanFiles(list, new DirectoryInfo(@"C:\zique\podcasts"), ref nbIntegre, ref nbSuppr);
                            log.log("fin scan : {0} intégrés, {1} supprimmés", nbIntegre, nbSuppr);
                            BackGroundTaskMgr.End();
                            return;
                        }
                    }


                    catch (Exception ex)
                    {
                        log.log(ex.ToString());
                    }
                }
                while (true);

#else
                            listIt = new List<TrackInfoItunes>();
                            Dict<string, TrackInfoItunes> dictLoc = new Dict<string, TrackInfoItunes>();
                            GroupStat trackStat = new GroupStat();
                          //  if (listTrack.Count == 0) listTrack = await _loadTracks; //TODO SUPPR !
                            loader.saveIds();
                            foreach (ITrackInfoItunes _track in listTrack)
                            {
                                if (_track.isPodcast)
                                {
                                    var t = _track as TrackInfoItunes;
                                    string location = t.Location;
                                    if (string.IsNullOrEmpty(location) || !FileRegister.Exist(location)) //  File.Exists(location))
                                    {
                                        //log.log("phase load :: suppression du track sans localisation " + t.Album + "/" + t.Name);
                                        //t.Delete();
                                        continue;
                                    }

                                    dictLoc[t.Location] = t;
                                    listIt.Add(t);
                                    if (!t.Played)
                                        trackStat.recordTrack(t, typeState.all);
                                    trackStat.recordTrack(t, typeState.all);
                                }
                            }

                            //if (firstLoad && Conf.Import.enabled)
                            //{
                            //    await tloadDb;
                            //    firstLoad = false;

                            //    foreach (TrackInfoItunes tdb in db.Tracks)
                            //    {
                            //        loader.check(tdb);
                            //    }
                            //}

                            await tloadDb;

                           // db.write(listIt);
                           

                     _writeDb = Task.Run(()=> db.write(listIt));

                            //var fileExport = Conf.Export.fOut;
                            //if (!string.IsNullOrEmpty(fileExport))
                            //{
                            //    ITextWriter sb = new StringBuilder();
                            //    foreach (TrackInfoItunes t in db.Tracks)
                            //    {
                            //        if (FileRegister.Exist(t.Location))
                            //            sb.AppendLine(t.DbId.ToString());
                            //    }

                            //    sb.Flush();
                            //    asyncFw.post(fileExport, sb.ToString());
                            //}

                            chrono.bip("loadTracks");

                            var descTrack = DescBuilder.create("Tracks");

                            LimitItem.includeDetail = true;
                            trackStat.report(descTrack);
                            log.log(descTrack.ToString());

                            var sbT = new StringBuilder();

                            //using (pdb.util.TextWriter tw = new util.TextWriter(File.OpenWrite(@"..\Logs\tracks.txt")))
                            //{
                            var trackFile = DescBuilder.create("Tracks", sbT);
                            trackStat.report(trackFile);
                            sbT.Flush();

                            asyncFw.post(@"..\Logs\tracks.txt", sbT.ToString());
                            //}
                            chrono.bip("desc tracks");
                            Logger.LogConsole = false;
                            //        loader.loadLists();
                            Logger.LogConsole = true;
                            chrono.bip("load list");

                        }

                        DirConf root = null;
                        while (true)
                        {

                            chrono.end();
                            logChrono.log(chrono.display(3, "{0}:{1:#}"));
                            chrono.reset("Program");

                            xelt = Conf.Instance.load(false);
                            loader.Conf = new it.Conf(xelt);
                            PlayList.StartOpe();
                            loader.Aborted = false;

                            Logger.CreateNullLoggers = !Conf.LogGen;


                            BackGroundTaskMgr.Conf = Conf.Ordo;
                            var list = db.Tracks;
                            var list2 = new List<TrackInfoItunes>(list.Count);
                            foreach (TrackInfoItunes track in list)
                            {
                                var copy = TrackInfoItunes.createCopy(track);
                                list2.Add(copy);
                                //track.clearLists(); // = selectMode.none;
                            }
                            chrono.bip("track.clearLists");
                            // Feeds.createInstance();
                            root = Conf.DirConf;
                            var feeds = root.Feeds;
                            if (Conf.GenFeed)
                            {
                                foreach (RootItItem rootItem in Conf.RootIt)
                                {
                                    var fAuto = loader.TreePlayList.getComposite(rootItem.name);
                                    var fFeeds = fAuto.getComposite("Feed");

                                    if (fFeeds != null)
                                    {
                                        scanFeedsForRecordEmptyLists(feeds, fFeeds);
                                    }

                                }
                            }

                            foreach (TrackInfoItunes track in list2)
                            {
                                feeds.check(track);
                            }
                            chrono.bip("feeds");

                            //if (Conf.Single)
                            //{
                            //    var listS = new List<TrackInfoItunes>();
                            //    for (int i = 0; i < Limits.NB; i++)
                            //    {
                            //        var list0 = feeds.getTracks(i, int.MaxValue, int.MaxValue, null, null, 1, null); //feeds.ListTrackSingle;
                            //        foreach (var t in list0)
                            //        {
                            //            if (!listS.Contains(t))
                            //                listS.Add(t);
                            //        }

                            //    }

                            //    string[] folder = new string[] { "Select", "tmp" };
                            //    buildList("_auto", listS, 0, folder);
                            //}

                            //var sb = DescBuilder.create();

                            //Création des listes
                            //  oldRoot = root;

                            Exporter.TopRecord();
                            //***************** Lancement "pour de vrai" ***************************************
                            LimitItemLoader.ModeSelection = true;
                            AutoBuilder.init(true);
                            loadCandidat(root);

                            AutoBuilder.test(); 
                            // standAlone(root); 
                            phase2(root);
                            Selection(root);
                            //**********************************************************************************
                            //***************** Lancement "pour de faux" ***************************************
                            AutoBuilder.Init3();
                            LimitItemLoader.ModeSelection = false;
                            phase2(root);
                            Selection(root);
                            LimitItemLoader.ModeSelection = true;
                            //**********************************************************************************
                            Exporter.TopCopy();
                            chrono.bip("selection");
                            foreach (TrackInfoItunes s in feeds.getSelectedTracks())
                            {
                                var items = s.Providers;
                                int count = items.Count;
                                foreach (LimitItem item in items)
                                {
                                    item.recordTrackMoy(s, count);
                                    if (count == 1)
                                        s.Exclu = item;
                                }
                            }
                            chrono.bip("selection exclu");


                            //****************************************
                            // lancement des sorties xml et html en asynchrone
                            postReport(root);
                            //****************************************



                            //mem0.load();
                            //var listSe = feeds.getSelectedTracks(); 
                            //if (mem0.FileExists)
                            //{
                            //    foreach (TrackInfoItunes s in listSe)
                            //    {
                            //        var key = s.Location;
                            //        if (!mem0.dict.ContainsKey(key))
                            //            log.log("delta virtuel ajouté {0} ==> {1}", s, s.GetProvider());
                            //    }

                            //    foreach (string key in mem0.dict.Keys)
                            //    {
                            //        if (!feeds.existSelected(key))
                            //            log.log("delta virtuel supprimé {0}",mem0.dict[key]);
                            //    }
                            //}
                            //mem0.save(listSe); 

                            //  AutoBuilder.Log();
                            AutoBuilder.init(false);
                            bool cangoAuto = AutoBuilder.Check(feeds);
                            chrono.bip("AutoBuilder");
                            AutoBuilder.Log();
                            if (!cangoAuto && Conf.AutoBlock)
                            {
                                logAuto.log("arret par auto");
                                //Thread.Sleep(1000);
                                continue;
                            }
                            else
                            {
                                string newEmpreinte = Conf.DirConf.getEmpreinte();
                                if (newEmpreinte == _empreinte && !AutoBuilder.Stable)
                                {
                                    logAuto.log("arret par empreinte");
                                    continue;
                                }

                                _empreinte = newEmpreinte;

                                Logger.LogAll("****************************************************************************************");
                                Logger.LogAll("arret");
                                Logger.LogAll("****************************************************************************************");



                                // BackGroundTaskMgr.End();

                                Logger.Pre = "";

                                //   log.log(sb.ToString());
                                var sb2 = DescBuilder.create();

                                if (Conf.Simulation)
                                {
                                    Logger.LogAll("****************************************************************************************");
                                    Logger.LogAll("TEST");
                                    Logger.LogAll("****************************************************************************************");
                                }

                                var feedsRapport = new StringBuilder();
                                feeds.rapport(feedsRapport);
                                Logger.LogConsole = false;
                                log.log(feedsRapport.ToString());
                                Logger.LogConsole = true;
                                var tw = new StringBuilder();
                                //using (pdb.util.TextWriter tw = new util.TextWriter(File.OpenWrite(@"..\Logs\history.txt")))
                                //{
                                feeds.rapportSelected(tw);
                                asyncFw.post(@"..\Logs\history.txt", tw.ToString());
                                // }

                                //using (pdb.util.TextWriter tw = new util.TextWriter(File.OpenWrite(@"..\Logs\historyPre.txt")))
                                //{
                                tw = new StringBuilder();
                                feeds.rapportPreSelected(tw);
                                asyncFw.post(@"..\Logs\historyPre.txt", tw.ToString());
                                //}

                                // rapport détaillé
                                LimitItem.includeDetail = true;
                                Conf.DirConf.rapport(sb2);
                                Logger.LogConsole = false;
                                log.log(sb2.ToString());
                                Logger.LogConsole = true;


                                // rapport plus concis
                                var sb3 = DescBuilder.create();
                                LimitItem.includeDetail = false;
                                Conf.DirConf.rapport(sb3);
                                Logger.LogConsole = false;
                                log.log(sb3.ToString());
                                Logger.LogConsole = true;
                                chrono.bip("rapport");
                                break;
                            }
                        }

                        //mem1.load();

                        //if (mem1.FileExists)
                        //{
                        //    foreach (TrackInfoItunes s in listSe)
                        //    {
                        //        var key = s.Location;
                        //        if (!mem1.dict.ContainsKey(key))
                        //            log.log("delta reel ajouté {0} ==> {1}", s, s.GetProvider());
                        //    }

                        //    foreach (string key in mem1.dict.Keys)
                        //    {
                        //        if (!feeds.existSelected(key))
                        //            log.log("delta reel supprimé {0}", mem1.dict[key]);
                        //    }
                        //}
                        //mem1.save(listSe); 


                        Logger.CreateNullLoggers = false;


                        calculRoots = false;
                        WritePlayList(root);




                        // Sélection du dernier podcast de chaque album
                        if (!Conf.Single)
                        {
                            var feeds = root.Feeds;
                            int prior = 2;
                            var listP = Conf.SelectParams;

                            var listS = new List<TrackInfoItunes>();
                            string[] folder = null;
                            foreach (SelectParam p in listP)
                            {
                                if (p.etendue.Contains("s"))
                                {
                                    listS = new List<TrackInfoItunes>();
                                    folder = new string[] { "select", "tmp", p.name };
                                    feeds.getFirstSelectedTracks(listS, p);
                                    buildList("_select", listS, prior, folder);
                                }
                            }

                            for (int level = 0; level < Limits.NB; level++)
                            {
                                foreach (SelectParam p in listP)
                                {
                                    if (p.etendue.Contains(level.ToString()))
                                    {
                                        p.level = level;
                                        folder = new string[] { "select", "tmp", p.name };
                                        listS = new List<TrackInfoItunes>();
                                        feeds.buildFirstSelectedTrackLevel(listS, p);  //true, true, false, false);
                                        buildList("_" + level, listS, prior, folder);
                                    }
                                }
                            }

                        }

                        var journal = Conf.Journal;
                        if (journal != null)
                        {
                            var feeds = root.Feeds;
                            for (int j = 1; j <= Journal.NB_JOUR_MAX; j++)
                            {
                                List<TrackInfoItunes> listJ = null;
                                if (journal.NbJour >= j)
                                {
                                    listJ = feeds.buildJournal(journal);
                                }
                                else
                                    listJ = new List<TrackInfoItunes>();

                                var name = j.ToString();
                                if (j < 10)
                                    name = "0" + name;
                                buildList(name, listJ, 3, "journal");

                            }
                        }

                        if (Conf.GenFeed)
                        {
                            var feeds = root.Feeds;
                            var prior = Conf.GenFeedPrior;
                            foreach (Feed feed in feeds.List)
                            {
                                var list0 = feed.getSelectedTracks;
                                buildList(feed.Name, list0, prior, "Feed");
                            }
                        }

                        string zique = Conf.Move.Zique;



                        BackGroundTaskMgr trackMgr = BackGroundTaskMgr.getMgr("Track", 12);
                        var trackList = BackGroundTaskMgr.getMgr("TrackList", 0);

                        foreach (TrackInfoItunes s in root.Feeds.getSelectedTracks())
                        {
                            s.updateNative();
                        }

                        int ii = 0;
                        while (!BackGroundTaskMgr.ConfirmEnd(20000, 10))
                        {
                            ii++;
                            if (ii == 60)
                                ii = 0;
                            if (ii == 0)
                            {
                                ITextWriter sb = new StringBuilder();

                                log.log("Attente Classement " + sb.ToString());
                            }
                            Thread.Sleep(100);
                        }

                        // BackGroundTaskMgr.End();


                        misc.Pre = "[ OK " + step + "] ";
                        Logger.LogAll("*****************************************************************************************************");
                        Logger.LogAll("Pile Classement finie, attente nouvelle version");
                        Logger.LogAll("*****************************************************************************************************");



                        Logger.LogAll("****************************************************************************************");
                        Logger.LogAll("arret 2");
                        Logger.LogAll("****************************************************************************************");

                        DateTime limit = DateTime.Now.AddDays(-Conf.Move.Delta);

                        if (!string.IsNullOrEmpty(zique))
                        {
                            foreach (TrackInfoItunes track in db.Tracks)
                            {
                                track.move(ziqueOrg, zique, limit);
                            }
                            return;
                        }
                        if (!Conf.Simulation)
                        {

                            Logger.Pre = "[ OK " + step + "] ";
                            Logger.LogAll("*****************************************************************************************************");
                            Logger.LogAll("attente nouvelle version");
                            Logger.LogAll("*****************************************************************************************************");
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.LogAll(ex.ToString());
                        misc.log(ex.ToString());
                        log.log(ex.ToString());
                        Thread.Sleep(1000);
                    }


                }
                while (true);




#endif

                //while (!BackGroundTaskMgr.Finished)
                //    Thread.Sleep(30);
                //log.log("****************************************************************************************");
                //loader.SynchronizePodcast(); 
                //log.log("fin");
                //log.log("****************************************************************************************");
            }

            catch (Exception ex)
            {
                log.log(ex.ToString());
            }


        }

        #region report asynchrone

        private DirConf _attenteWriteHtml;
        private volatile object _lockReportHtml = new object();
        private bool _end;
        ThreadUtil thReport;

        private void postReport(DirConf dir)
        {
            if (thReport == null)
            {
                lock (_lockReportHtml)
                {
                    if (thReport == null)
                    {
                        thReport = new ThreadUtil(loopReportHtml, "ReportHtml");
                        thReport.Start();
                    }
                }
            }

            lock (_lockReportHtml)
                _attenteWriteHtml = dir;
        }

        private void loopReportHtml()
        {
            DirConf traite = null;
            while (!_end)
            {
                Thread.Sleep(30);
                if (_attenteWriteHtml == null)
                    continue;
                lock (_lockReportHtml)
                {
                    if (_attenteWriteHtml == null)
                        continue;
                    traite = _attenteWriteHtml;
                    _attenteWriteHtml = null;
                }
                reportHtml(traite);
            }
        }


        private void reportHtml(DirConf root)
        {
            try
            {

                var settings = new XmlWriterSettings();
                settings.Indent = true;
                settings.Encoding = System.Text.Encoding.UTF8;
                var _sb = new System.Text.StringBuilder();
                using (writer = XmlWriter.Create(_sb, settings))
                {
                    LimitsLoader.Writer = new WriterXml(writer);
                    DoubleStat.ModeHtml = false;
                    writer.WriteStartElement("tracks");
                    WriteTracks(root);
                    writer.WriteEndDocument();
                    writer.Flush();
                }

                asyncFw.post(@"..\tracks.xml", _sb.ToString());
                //   chrono.bip("xml");

                string html = @"..\tracks.html";
                //if (File.Exists(html))
                //    File.Delete(html);
                var sbHtml = new StringBuilder();
                //using (pdb.util.TextWriter sbHtml = new pdb.util.TextWriter(new StreamWriter(File.OpenWrite(html), System.Text.Encoding.UTF8)))
                //{
                LimitsLoader.Writer = new WriterHtml(sbHtml);
                DoubleStat.ModeHtml = true;
                sbHtml.Append(@"<!DOCTYPE html>
<html>
<head>
	<title>"
+ Environment.CurrentDirectory + @"</title>
	
	<style type='text/css'>
		body{
			margin:10px 30px;
			font-family:verdana;
			font-size:12px;
		}
		h1{
			font-family:verdana;
			font-size:14px;
			font-weight:bold;
			text-decoration:underline;
		}
        .low {
			color: rgb(0,125,255);
		}

        .med {
			font-weight:bold;
			color: rgb(0,140,0);
		}

        .high {
			font-weight:bold;
			font-size:14px;
			color: rgb(240,155,0);
		}
        
		.big {
			font-weight:bold;
			font-size:14px;
			text-decoration:underline;
			color: rgb(255,32,0);
		}

        .album {
			color: rgb(0,125,255);
		}
        .track {
            font-weight:bold;
			color: rgb(0,40,80);
		}
		div.tree div {
			padding-left:16px;
		}
		div.tree div.parent div {
			 display:none;
			 cursor:default;
		}
		div.tree div.parent {
			 cursor:pointer !important;
			 background:transparent url(plus.gif) no-repeat top left;
		}
		div.tree div.expanded {
			background:transparent url(moins.gif) no-repeat top left;
		}
	</style>
	<link rel='stylesheet' type='text/css' href='treeview.css' media='screen' /> 
	<script type='text/javascript' src='jquery.js'></script>
	<script type='text/javascript'>
	$(function() {
		$('div.tree div:has(div)').addClass('parent');
		$('div.tree div').click(function() {
			var o = $(this);
			o.children('div').toggle();
			o.filter('.parent').toggleClass('expanded');
			return false;
		});
	});
	</script>
</head>
<body>");
                WriteTracks(root);
                sbHtml.Append(@"</body>
</html>");

                sbHtml.Flush();

                //}
                asyncFw.post(html, sbHtml.ToString());
                //  chrono.bip("html");
            }
            catch (Exception ex)
            {
                log.log(ex.ToString());
            }
        }

        #endregion


        public static void buildList(string name, List<TrackInfoItunes> list_, List<string> folders)
        {
            buildList(name, list_, int.MaxValue, folders);
        }

        public static void buildListPrior(string name, List<TrackInfoItunes> list_, List<string> folders, int prior)
        {
            buildList(name, list_, prior, folders);
        }


        /// <summary>
        /// création ou mise à jour d'une liste
        /// </summary>
        /// <param name="name"></param>
        /// <param name="list_"></param>
        /// <param name="folders"></param>
        public static void buildList(string name, List<TrackInfoItunes> list_, int prior, params string[] folders)
        {
            var lfolders = new List<string>(folders);
            buildList(name, list_, prior, lfolders);
        }

        /// <summary>
        /// création ou mise à jour d'une liste
        /// </summary>
        /// <param name="name"></param>
        /// <param name="list_"></param>
        /// <param name="folders"></param>
        public static void buildList(string name, List<TrackInfoItunes> list_, int prior, List<string> folders)
        {
            try
            {
                if (Conf.Simulation)
                    return;
                var rootIt = Conf.RootIt;
                RootItItem currentRoot = rootIt.roots[0];
                int count = rootIt.roots.Count;
                //   log.log("build list {0}",name);
                //  var list = new List<IFile>(list_);
                if (!calculRoots)
                {
                    calculRoots = true;
                    var list__ = new List<TrackInfoItunes>(list_);
                    list__.Sort(new PodCastComparer());



                    int countTrack = list_.Count;

                    long size = 0;
                    int j = 0;
                    int indexRoot = 0;



                    while (true)
                    {
                        if (j >= countTrack)
                            break;
                        TrackInfoItunes track = list__[j];
                        size += track.Size;
                        if (size <= currentRoot.size)
                        {
                            track.IndexRoot = indexRoot;
                        }
                        else
                        {
                            size = 0;
                            size += track.Size;
                            indexRoot++;
                            if (indexRoot >= count)
                                break;
                            currentRoot = rootIt.roots[indexRoot];
                            track.IndexRoot = indexRoot;
                        }
                        j++;
                    }

                }

                for (int r = 0; r < count; r++)
                {
                    currentRoot = rootIt.roots[r];
                    var folder = loader.TreePlayList.getComposite(currentRoot.name);
                    if (folder == null)
                        folder = loader.getOrCreateFolder(currentRoot.name);
                    folders = new List<string>(folders);

                    var nname = name;
                    if (name.Contains(Path.DirectorySeparatorChar.ToString()))
                    {
                        var tab = name.Split(Path.DirectorySeparatorChar);
                        string str = null;
                        for (int i = 0; i < tab.GetLength(0); i++)
                        {
                            if (str != null)
                                folders.Add(str);
                            if (!string.IsNullOrEmpty(tab[i]))
                                str = tab[i];
                        }
                        if (!string.IsNullOrEmpty(str))
                            nname = str;
                    }
                    var list = list_.FindAll(t => t.IndexRoot == r);
                    var l = new List<IFile>(list);

                    for (int i = 0; i < folders.Count; i++)
                    {
                        var aux = folder;
                        folder = folder.getComposite(folders[i]);
                        if (folder == null)
                            folder = loader.getOrCreateFolder(aux, folders[i], l.Count > 0);
                        if (folder == null)
                            return;
                    }

                    //  var folder = loader.root.getComposite("auto").getComposite("PODUtil"); 
                    var playlist = loader.getPlayList(folder, nname, l.Count > 0);
                    if (playlist != null)
                    {
                        if (prior < int.MaxValue && prior >= 0)
                            playlist.setPrior(prior);
                        //if (list.Count > 0)
                        loader.mergeList(playlist, l, false, _instance, null);
                        //else
                        //    loader.removeList(folder, name);
                    }



                    //log.log("clear list {0}", name); 
                    //loader.ClearList(playlist);
                    //log.log("add items {0}", name); 
                    //foreach (TrackInfoItunes track in list)
                    //    loader.addItemToList(playlist, track); 

                }
            }
            catch (Exception ex)
            {
                misc.log(ex.ToString());
            }


        }



        delegate void actionList(DirConf dir);
        private void recursif(DirConf dir, action pre, action post)
        {
            var fLoader = dir.Loader;
            //if (pre > action.none && pre < action.writeTracksPre)
            //    log.log("{0} {1}", pre, dir.getPath());
            fLoader.Action(pre);

            //Construction récursive sur l'arbre
            foreach (DirConf child in dir)
            {
                // DescBuilder sub = sb.createChild(child.getPath());
                recursif(child, pre, post);
            }
            //if (post > action.none && post < action.writeTracksPre)
            //    log.log("{0} {1}", post, dir.getPath());
            fLoader.Action(post);


        }

        private void loadCandidat(DirConf dir)
        {
            recursif(dir, action.loadCandidat, action.none);
        }


        //private void standAlone(DirConf dir)
        //{
        //    recursif(dir, action.standAlone, action.none); 
        //}

        private void phase2(DirConf dir)
        {
            recursif(dir, action.none, action.phase2);
        }



        /// <summary>
        /// Constitution d'un répertoire
        /// </summary>
        /// <param name="dir"></param>
        /// <param name="sb"></param>
        private void Selection(DirConf dir)
        {
            recursif(dir, action.selectionPre, action.selectionPost);

            // ne sert pas
            //dir.TransmissionListToParent();

        }

        private void WritePlayList(DirConf dir)
        {
            recursif(dir, action.writeLists, action.none);
        }

        private void WriteTracks(DirConf dir)
        {
            recursif(dir, action.writeTracksPre, action.writeTracksPost);
        }
#if build
        public void scanFiles(List<TrackInfoItunes> list, DirectoryInfo dir, ref int nbIntegre, ref int nbSuppr)
        {
            string album = dir.Name;
            var files = dir.GetFiles();
            if (files.GetLength(0) > 0)
            {
                foreach (FileInfo file in dir.GetFiles())
                {
                    string location = file.FullName.ToLower();
                    var trackByLocation = list.Find(t => t.Location != null && t.Location.ToLower().Equals(location));

                    if (trackByLocation != null)
                        continue;
                    var filePub = new FilePub(file.FullName);
                    new PubLoader(filePub).setPub();

                    TrackInfoItunes track = null;

                    foreach (TrackInfoItunes t in list)
                    {
                        if (album.Equals(t.Album))
                        {
                            if (filePub.Pub.Date == t.Pub.Date)
                            {
                                track = t;
                                break;
                            }
                        }
                    }
                    //  var track = list.Find(t => album.Equals(t) && filePub.Pub.Date.Equals(t.Pub.Date));
                    if (track == null)
                    {
                       
                        log.log("création Track à partir de " + file.FullName);
                        track = loader.createTrack(file.FullName) as TrackInfoItunes;

                        if (track == null)
                            continue;

                        // verif pub; 
                        TrackInfoItunes track2Verif = null;

                        if (track.Pub > TrackInfoItunes.MIN)
                        {
                            foreach (TrackInfoItunes t in list)
                            {
                                if (album.Equals(t.Album))
                                {
                                    if (track.Pub.Date == t.Pub.Date)
                                    {
                                        track2Verif = t;
                                        break;
                                    }
                                }
                            }
                        }

                        if (track2Verif != null)
                        {
                            log.log("Track créé {0} {1} {2} {3} MAIS doublon avec  {4} {5} {7} {8} {9} intégrés {10} supprimés", track.Name, track.Album, track.Pub, track.Location, 
                                track2Verif.Name, track2Verif.Album, track2Verif.Pub, track2Verif.Location, nbIntegre, nbSuppr);
                            track2Verif.Delete();
                            file.moveTree(file.FullName.ToLower().Replace(@"c:\zique\podcasts", @"C:\zique\poubelle"), false);
                            nbSuppr++;
                            continue; 

                        }
                        log.log("Track créé {0} {1} {2} {3} {4} intégrés {5} supprimés", track.Name, track.Album, track.Pub, track.Location,nbIntegre,nbSuppr );
                        nbIntegre++;
                        list.Add(track);
                    }
                    else
                    {
                        if (track.Pub.DayOfYear > 1)
                        {
                            nbSuppr++;
                            log.log("suppression du track sur {0} en doublon avec {1} {2} {3} {4} {5} int�gr�s {6} supprim�s", file.FullName, track.Name, track.Album, track.Pub, track.Location, nbIntegre, nbSuppr);
                            file.moveTree(file.FullName.ToLower().Replace(@"c:\zique\podcasts", @"C:\zique\poubelle"), false);
                        }
                    }

                }
                log.log("fin scan {0}: {1} intégrés, {2} supprimmés", album, nbIntegre, nbSuppr);
            }

            foreach (DirectoryInfo subDir in dir.GetDirectories())
            {
                scanFiles(list, subDir, ref nbIntegre, ref nbSuppr);
            }
        }
#endif

#if menage

        private void listFiles(Dict<string, FileInfo> dict, DirectoryInfo dir)
        {
           
            foreach (FileInfo file in dir.GetFiles())
            {
                dict[file.FullName] = file;
            }

            foreach (DirectoryInfo subDir in dir.GetDirectories())
            {
                listFiles(dict, subDir);
            }
        }
#endif

        /// <summary>
        /// A checkquer
        /// </summary>
        /// <param name="feeds"></param>
        /// <param name="current"></param>
        private void scanFeedsForRecordEmptyLists(Feeds feeds, PlayListComposite current)
        {
            foreach (PlComponent pl in current)
            {
                var plC = pl as PlayListComposite;
                if (plC == null)
                {
                    // log.log("{0} {1} pas un PlayListComposite", pl, pl.GetType());
                    continue;
                }

                if (plC.LeafsCount > 0)
                {
                    string album = plC.Name;
                    feeds.check(album);
                }

                scanFeedsForRecordEmptyLists(feeds, plC);

            }
        }




        #region IAbortTask Members

        public bool Aborted
        {
            get
            {
                return false;
            }
            set
            {

            }
        }

        #endregion


        private class Vendee
        {
            //  "Emission du 02/11/2008"
            private static Regex regex1 = new Regex(@".*(\d\d\/\d\d\/\d\d\d\d).*");
            private static Regex regex2 = new Regex(@".*(\d\d\/\d\d\/\d\d).*");
            private static Regex regex3 = new Regex(@".*(\d\d\/\d\d).*");
            private enum vendeeType
            {
                none,
                vacation,
                hebdo,
                chronique,
                ponton

            }
            public void go(ArrayList list)
            {
                var listV = new ArrayList();
                string VENDEE = "vendee ";
                foreach (IITFileOrCDTrack t in list)
                {
                    if (t.Album.Contains("Vendée Globe") || t.Album.Contains(VENDEE))
                        listV.Add(t);
                }

                // listTrack.FindAll(t => t.Album.Contains("Vendee Globe"));



                foreach (IITFileOrCDTrack track in listV)
                {
                    string name = track.Name.ToLower();
                    vendeeType _type = vendeeType.none;
                    foreach (vendeeType type in Enum.GetValues(typeof(vendeeType)))
                    {
                        if (name.Contains(type.ToString()))
                        {
                            track.Album = VENDEE + type.ToString();
                            _type = type;
                            break;
                        }
                    }

                    DateTime? dt = null;
                    dt = getDate(track.Name);

                    if (!dt.HasValue)
                        dt = getDate(track.Description);

                    if (!dt.HasValue)
                        dt = getDate(track.LongDescription);

                    if (dt.HasValue)
                    {
                        string _comment = dt.Value.ToString("yyyy/MM/dd");
                        string plus = "";
                        switch (_type)
                        {
                            case vendeeType.none:
                                break;
                            case vendeeType.vacation:
                            case vendeeType.ponton: plus = " 11:00"; break;
                            case vendeeType.hebdo: plus = " 14:00"; break;
                            case vendeeType.chronique: plus = " 12:00"; break;

                        }
                        track.Comment = _comment + plus;
                        track.Year = dt.Value.Year;
                    }



                }
            }

            private DateTime? getDate(string input)
            {
                if (string.IsNullOrEmpty(input))
                    return null;
                string[] words = input.Split(' '); int count = words.GetLength(0);

                DateTime? ret = null;
                StringBuilder sb = null;
                int word = 0;
                for (int i = 0; i < count; i++)
                {
                    string w = words[i];
                    if (string.IsNullOrEmpty(w))
                        continue;
                    if (sb == null)
                    {
                        if (w.ToLower().Equals("du"))
                            sb = new StringBuilder();
                    }

                    else
                    {
                        sb.Append(w);
                        sb.Append(" ");
                        word++;

                        try
                        {
                            ret = Convert.ToDateTime(sb.ToString());
                        }
                        catch
                        {
                        }

                        if (ret.HasValue)
                        {
                            int month = ret.Value.Month;
                            int year = 2008;
                            if (month < 6)
                                year = 2009;
                            return new DateTime(year, month, ret.Value.Day);
                        }
                    }
                }
                try
                {
                    DateTime dt = Convert.ToDateTime(sb.ToString());
                    if (dt.Year < 2008 || dt.Year > 2009)
                        dt = new DateTime(2008, dt.Month, dt.Day);
                    return dt;
                }
                catch
                {
                    return null;
                }
                //if (regex1.IsMatch(_input))
                //    return Convert.ToDateTime(regex1.Match(_input).Groups[1].Value); 
                //else if (regex2.IsMatch(_input))
                //    return Convert.ToDateTime(regex2.Match(_input).Groups[1].Value); 
                //else if (regex3.IsMatch(_input))
                //    return Convert.ToDateTime(regex1.Match(_input).Groups[1].Value); 
                //return null; 
            }

            private string getDateString(string input)
            {
                if (string.IsNullOrEmpty(input))
                    return "";
                string[] words = input.Split(' '); int count = words.GetLength(0);


                StringBuilder sb = null;
                for (int i = 0; i < count; i++)
                {
                    string w = words[i];
                    if (string.IsNullOrEmpty(w))
                        continue;
                    if (sb == null)
                    {
                        if (w.ToLower().Equals("du"))
                            sb = new StringBuilder();
                    }

                    else
                    {
                        sb.Append(w);
                        sb.Append(" ");
                    }
                }

                if (sb == null)
                    return input;

                return sb.ToString().Replace(".", "");
            }


        }
    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Auto\AutoBuilderItem.cs">
    <content><![CDATA[using pdb.podcast.Tuning;
using pdb.util;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using pdb.podcast.Delta;
using TimeSpan = pdb.util.timeSpan;
using pdb.podcast.Selection;
using pdb.podcast.Report;
using Math = System.Math; 

namespace pdb.podcast.Auto
{
    class AutoBuilderItem //: IBorder
    {


        /// <summary>
        /// Valeur initiale de la valeur gérée
        /// </summary>
        public double org;
        private double pertinentOrg = -1;
        private timeSpan tpertinentOrg;
        public TimeSpan torg;
        private TimeSpan tmin;
        private TimeSpan tmax;
        /// <summary>
        /// Valeur modifiée
        /// </summary>
        private double newv;
        private double evolSize;
        public double NewV { get { return newv; } }
        internal TrackBorderItem rejected(bool real) { return real ? _rejected : _rejectedLight; }
        internal TrackBorderItem selected(bool real) { return real ? _selected : _selectedLight; }
        internal void makePertinent() { pertinentOrg = org; }

        public void checkAjout(IEnumerable<TrackInfoItunes> list)
        {
            if (pertinentOrg == org)
                return;

            var lcauses = _causes;


            foreach (Causes causes in lcauses)
            {
                foreach (TrackInfoItunes t in list)
                {
                    if (causes.candidat.Location == t.Location)
                    {
                        pertinentOrg = org;
                        return;
                    }
                }

            }


        }

        private string name;

        /// <summary>
        /// Attribut concerné
        /// </summary>
        XmlAttribute att;
        XmlElement xml;
        public double dd;
        public double d;
        private bool lastStrict;
        private bool lastUp;
        private double lastDelta;

        private double lastOrg;

        private pdb.podcast.Tuning.Auto conf;
        public readonly borderType type;
        private AutoBuilder parent;
        public AutoBuilderItem(AutoBuilder parent, pdb.podcast.Tuning.Auto conf)
        {
            this.parent = parent;
            this.conf = conf;
            this.type = conf.type;
            this.name = string.Format("{0}:{1}", conf.name, type);
            if (conf.pente == 0)
                d = conf.max - conf.min;
            else
                d = conf.pente - conf.min;
            dd = d * d;
        }

        private bool _toSave;
        public bool ToSave { get { return _toSave; } }

        public double Org { get { return org; } }

        public void setConf(pdb.podcast.Tuning.Auto conf) { this.conf = conf; }

        #region border
        private TrackBorderItem _selected;
        private TrackBorderItem _selectedLight;
        private TrackBorderItem _rejected;
        private TrackBorderItem _rejectedLight;

        //private bool verify(TrackBorderItem tb)
        //{
        //    return true;
        //    double sourceValue = -1;
        //    var source = tb.source;
        //    switch (type)
        //    {
        //        case borderType.d: sourceValue = source.Duration; break;
        //        case borderType.fd: sourceValue = source.FeedDuration; break;
        //        case borderType.maxdate: sourceValue = (source.DateMax - Conf.Date0).TotalDays; break;
        //        default: return false;
        //    }

        //    if (Math.Abs(org - sourceValue) > 2.0E-7)
        //        return false;
        //    return true;
        //}
        private void setSelect(TrackBorderItem tb)
        {
            // pour down mémo des track sélectionnés

            _selected = tb;

        }

        private void setRejec(TrackBorderItem tb)
        {
            // A REVOIR

            //// pour up mémo des tracks rejetés
            ////1. S'il est par ailleurs déjà intégré, pas pertinent
            //if (parent.Source.contains(tb.candidat))
            //{
            //    return;
            //    if (_rejected != null)
            //    {
            //        if (_rejected.status > borderStatus.rejectedXtraLight)
            //            return;
            //        if (tb.val >= _rejected.val)
            //            return; 
            //    }

            //    tb.status = borderStatus.rejectedXtraLight; 
            //}


            ////2. On est en cours de construction donc il se peut que ce candidat soit in fine ajouté par d'autres
            //// intéret en up . S'il est dans la mémoire pas pertinent en up
            //if (parent.Mem.dict.ContainsKey(tb.candidat.Location))
            //    return;
            _rejected = tb;
        }


        public void signal(TrackBorderItem tb)
        {

            if (tb.Virtual && !Conf.BorderVirtual)
                return;
            if (tb.Selected)
            {
                if (tb.val >= torg)
                    return;
                if (tb.val <= tmin)
                    return;

                if (!tb.Virtual)
                {
                    if (_selected == null)
                        _selected = tb;
                    else if (tb.val > _selected.val)
                        _selected = tb;
                }

                if (_selectedLight == null)
                    _selectedLight = tb;
                else if (tb.val > _selectedLight.val)
                    _selectedLight = tb;

                //if (_selected == null)
                //    setSelect(tb);
                //else
                //{
                //    if (tb.status > _selected.status && !Conf.BorderIdem)
                //        setSelect(tb);
                //    else if (tb.status == _selected.status || Conf.BorderIdem)
                //    {
                //        if (tb.val > _selected.val)
                //            setSelect(tb);
                //    }
                //}

            }
            else
            {

                if (tb.val <= torg)
                    return;
                if (tb.val >= tmax)
                    return;

                if (!tb.Virtual)
                {
                    if (_rejected == null)
                        _rejected = tb;
                    else if (tb.val < _rejected.val)
                        _rejected = tb;
                }

                if (_rejectedLight == null)
                    _rejectedLight = tb;
                else if (tb.val < _rejectedLight.val)
                    _rejectedLight = tb;


                //if (_rejected == null)
                //    setRejec(tb);
                //else
                //{
                //    if (tb.status > _rejected.status && !Conf.BorderIdem)
                //        setRejec(tb);
                //    else if (tb.status == _rejected.status || Conf.BorderIdem)
                //    {
                //        if (tb.val < _rejected.val)
                //            setRejec(tb);
                //    }
                //}

            }
        }
        #endregion

        public void setOrg(XmlElement xml)
        {
            // Program.logAuto.log(ToString());
            _rejected = null;
            _selected = null;
            _toSave = false;
            this.xml = xml;
            att = this.xml.Attributes[type.ToString()];
            lastOrg = org;
            if (att == null)
                org = -1;
            else
                org = Convert.ToDouble(att.Value);

            if (org < conf.min)
            {
                org = conf.min;
                newv = org;
                save();
            }
            else if (org > conf.max)
            {
                org = conf.max;
                newv = org;
                save();
            }
            torg = getValue(org);
            tmin = getValue(conf.min);
            tmax = getValue(conf.max);
            if (pertinentOrg < 0)
                pertinentOrg = org;
            tpertinentOrg = getValue(pertinentOrg);
            //  misc.log(ToString());
        }
        private double dt = -1; public double Dt { get { return dt; } set { dt = value; } }
        private double tension; public double Tension { get { return tension; } }
        private int _stop = AutoBuilder.STOP_MAX;
        public bool Stop(int level) { return _stop < level; }

        public void stop(int level)
        {
            newv = lastOrg;
            org = lastOrg;
            if (_stop > level)
                _stop = level;
            save();
        }
        public void reset()
        {
            _stop = AutoBuilder.STOP_MAX;
        }
        public void setTension(bool up, bool real, bool checkSelect)
        {

            dt = getDt(up, real, checkSelect);
        }

        public void setTension()
        {
            tension = _getTension(org);
        }

        private double getDt(bool up, bool real, bool checkSelect)
        {
            double t0 = _getTension(pertinentOrg);
            tension = _getTension(up, real, checkSelect);
            return (tension - t0) / conf.coeff;

        }

        private double getTension(bool up, bool real, bool selected)
        {
            return _getTension(up, real, selected) / conf.coeff;
        }

        public double getValue(TimeSpan val)
        {
            switch (type)
            {

                case borderType.d:
                case borderType.fd:
                case borderType.nb:
                case borderType.c:
                    return val.TotalMinute;
                case borderType.maxdate: return val.TotalDay;
                default: return -1;

            }

        }

        private TimeSpan getValue(double val)
        {
            switch (type)
            {
                case borderType.d:
                case borderType.fd:
                case borderType.nb:
                case borderType.c:
                    return TimeSpan.FromMinutes(val);
                case borderType.maxdate: return TimeSpan.FromDays(val);
                default: return new TimeSpan();

            }
        }
        public double EvolSize { get { return evolSize; } }

        public List<Causes> getCauses()
        {
            return _causes;
        }

        //public List<Causes> getcauses(bool up, bool strict)
        //{
        //    List<Causes> list = null;
        //    if (up)
        //    {
        //        if (strict)
        //            list = _causesRejetStrict;
        //        else
        //            list = _causesRejet;
        //    }
        //    else
        //    {
        //        if (strict)
        //            list = _causesSelectStrict;
        //        else
        //            list = _causesSelect;
        //    }
        //    return list;
        //}

        public void gap(bool up, bool fix, double _gap)
        {
            _gap = Math.Abs(_gap);
            if (fix)
            {
                newv = Math.Abs(_gap);
            }
            else
            {
                if (up)
                    newv = org + _gap;
                else
                    newv = org - _gap;
            }
            save();
        }

        private double _getTension(bool up, bool strict, bool checkSelect)
        {
            lastStrict = strict;
            lastUp = up;
            // double t0 = getTension(org, dd);
            newv = org;
            evolSize = 0;
            var list = _causes;


            if (list.Count > 0)
            {
                int ifin = 2;
                bool bselect = !up;
                if (checkSelect)
                {
                    ifin = 1;
                }

                CauseItem cause = null;

                for (int i = 0; i < ifin; i++)
                {
                    var _cause = list[0].getCause(type, strict, !up, bselect);
                    bselect = !bselect;
                    if (_cause == null)
                        continue;
                    if (cause == null)
                        cause = _cause;
                    else
                    {
                        if (up)
                        {
                            if (_cause.val < cause.val)
                                cause = _cause;
                        }
                        else
                        {
                            if (_cause.val > cause.val)
                                cause = _cause;
                        }
                    }
                }
                if (cause == null)
                    return int.MaxValue;
                newv = Math.Round(getValue(cause.val), 8);
                foreach (var c in list)
                {
                    var cand = c.candidat;
                    evolSize += Stat.getSizeinMo(cand);
                }
            }
            else
                return int.MaxValue;


            //if (false)
            //{

            //    if (up)
            //    {
            //        var _rejected = strict ? this._rejected : this._rejectedLight;
            //        if (_rejected == null)
            //            return int.MaxValue;
            //        newv = Math.Abs(Math.Round(getValue(_rejected.val), 8));
            //        evolSize = Stat.getSizeinMo(_rejected.candidat);

            //    }
            //    else
            //    {
            //        var _selected = strict ? this._selected : this._selectedLight;
            //        if (_selected == null)
            //            return int.MaxValue;
            //        newv = Math.Round(getValue(_selected.val), 8);
            //    }
            //}

            return _getTension(newv);
        }

        public void save()
        {
            //  xml.SetAttribute(type.ToString(), newv.ToString()); 
            att.Value = newv.ToString();
            _toSave = true;
        }

        public void save(timeSpan val)
        {
            this.newv = Math.Round(getValue(val), 8);
            save();
        }



        private List<Causes> _causes = new List<Causes>();
        //private List<Causes> _causesRejet = new List<Causes>();
        //private List<Causes> _causesSelect = new List<Causes>();

        //private List<Causes> _causesRejetStrict = new List<Causes>();
        //private List<Causes> _causesSelectStrict = new List<Causes>();



        //public void after()
        //{            
        //    _causesRejet = new List<Causes>();
        //    _causesSelect = new List<Causes>();
        //    _causesRejetStrict = new List<Causes>();
        //    _causesSelectStrict = new List<Causes>();
        //    after(true, true);
        //    after(true, false);
        //    after(false, true);
        //    after(false, false);
        //}
        public void after(bool up, bool strict, bool checkSelection)
        {
            _causes = new List<Causes>();
            var list = parent.CauseRegister.getList(false);
            int min = int.MaxValue;
            //  int minStrict = int.MaxValue;
            if (!up)
            {
                min = 0;
                //   minStrict = 0; 
            }
            int orgValue = torg.Value;
            foreach (Causes causes in list)
            {
                var candidat = causes.candidat;
                if (checkSelection)
                {
                    if (up && candidat.Selected)
                        continue;
                    if (!up && !candidat.Selected)
                        continue;
                }
                int ifin = 2;
                bool bselect = !up;
                if (checkSelection)
                {
                    ifin = 1;
                }

                for (int i = 0; i < ifin; i++)
                {


                    var cause = causes.getCause(type, strict, !up, bselect);
                    bselect = !bselect;
                    if (cause == null)
                        continue;
                    if (up && cause.Ok)
                        continue;
                    if (!up && !cause.Ok)
                        continue;
                    //if (value < 0)
                    //    value = -value;
                    int value = cause.val.Value;

                    if (up)
                    {

                        if (value == min)
                        {
                            _causes.Add(causes);

                        }
                        else if (value < min)
                        {
                            _causes.Clear();
                            _causes.Add(causes);
                            min = value;
                        }

                    }
                    else
                    {
                        if (value >= orgValue)
                            continue;

                        if (value == min)
                        {
                            _causes.Add(causes);
                        }
                        else if (value > min)
                        {
                            _causes.Clear();
                            _causes.Add(causes);
                            min = value;
                        }


                    }
                }

            }
        }


        private double _getTension(double org)
        {
            var d2 = org - conf.min;
            if (conf.pente > 0)
                return (d2 / d);

            var d1 = org - conf.max;

            return -1 + 2 * (d1 * d1 + d2 * d2) / dd;
        }

        public double getTension(timeSpan org)
        {
           var _org = getValue(org);
            var t = _getTension(_org);
           // dt = t - _getTension(pertinentOrg); 

            return t; 
        }





        public override string ToString()
        {
            var sb = new System.Text.StringBuilder();
            sb.AppendLine();
            sb.Append(name); sb.Append(" ");
            sb.Append(org); sb.Append(" ");

            if (newv != 0 && newv != org)
            {
                sb.Append("==>");
                sb.Append(newv);
                sb.Append(" ");
            }

            sb.Append("stop="); sb.Append(_stop); sb.Append(" ");

            sb.Append("pertinent="); sb.Append(pertinentOrg); sb.Append(" ");
            sb.Append("tension="); sb.Append(tension); sb.Append(" ");
            if (dt != -1)
            {
                sb.Append("dt="); sb.Append(dt); sb.Append(" ");
            }


            if (newv != 0 && newv != org)
            {
                sb.Append("<==");
            }
            var causes = _causes; // getcauses(lastUp, lastStrict);
            foreach (Causes cause in causes)
            {
                sb.AppendLine();
                var strStrict = lastStrict ? "strict " : "light ";
                var strselect = lastUp ? "rejet " : "select ";
                sb.Append(strselect);
                sb.Append(strStrict);
                sb.Append(cause.getCause(type, lastStrict, !lastUp, !lastUp));
                sb.Append(" "); sb.Append(cause.candidat);
            }

            //if (_causesRejetStrict.Count > 0)
            //{


            //    foreach (Causes cause in _causesRejetStrict)
            //    {
            //        sb.AppendLine();
            //        sb.Append("rejet strict "); sb.Append(cause.getCause(type,true,false));                     
            //    }
            //}

            //else if (_causesRejet.Count > 0)
            //{

            //    foreach (Causes cause in _causesRejet)
            //    {
            //        sb.AppendLine();
            //        sb.Append("rejet light "); sb.Append(cause.getCause(type,false, false));      
            //    }
            //}

            //if (_causesSelectStrict.Count > 0)
            //{

            //    foreach (Causes cause in _causesSelectStrict)
            //    {
            //        sb.AppendLine();
            //        sb.Append("select strict "); sb.Append(cause.getCause(type,true,true));      
            //    }
            //}

            //else if (_causesSelect.Count > 0)
            //{              
            //    foreach (Causes cause in _causesSelectStrict)
            //    {
            //        sb.AppendLine();
            //        sb.Append("select light "); sb.Append(cause.getCause(type,false,true));      
            //    }
            //}



            if (_selected != null)
            {
                sb.AppendLine();
                sb.Append(_selected);
            }

            if (_rejected != null)
            {
                sb.AppendLine();
                sb.Append(_rejected);
            }
            sb.AppendLine();
            return sb.ToString();
        }


        public void signal(CauseDatas cd)
        {
            throw new NotImplementedException();
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Load\FeedLimitItemLoader.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using pdb.podcast.Tuning;
using pdb.util;
using pdb.util.list;
using pdb.podcast.Auto;
using timeSpan = pdb.util.timeSpan;

namespace pdb.podcast.Load
{
  
    public enum loadState
    {
        loadCandidat,
        standAlone,
        selection,
        end
    }
    //public enum depotType
    //{
    //    load,
    //    rapporte
    //}
    /// <summary>
    /// Chargeur des pistes associées à un item de limite sur un dossier
    /// </summary>
    class FeedLimitItemLoader
    {
        private loadState state;
        /// <summary>
        /// Répertoire
        /// </summary>
        private DirConf dir;
        /// <summary>
        /// Limite
        /// </summary>
        public readonly LimitItem limit;
        /// <summary>
        /// Album
        /// </summary>
        private string album;
        /// <summary>
        /// Chargeur de limite
        /// </summary>
        private LimitsLoader parent;


        /// <summary>
        /// Nombre de piste max
        /// </summary>
        int nbMax;
        int loadNbMax;
        /// <summary>
        /// Durée cumulée max
        /// </summary>
        timeSpan durationMax;
        timeSpan loadDurationMax;

        ///// <summary>
        ///// Date de publication min
        ///// </summary>
        //DateTime dateMin;

        // private Logger logger;
        private Logger logLimit;
        private Logger logItem;

        /// <summary>
        /// Durée cumulée
        /// </summary>
        timeSpan currentDuration = new timeSpan();
        timeSpan currentDurationVirtuel = new timeSpan();
        timeSpan durationStop = new timeSpan();

        /// <summary>
        /// Nombre total
        /// </summary>
        int nb = 0;
        int nbVirtuel = 0;
        int nbStop = 0;

        private bool? endByFd;
        public bool EndByFd { get { if (endByFd == null) return false; return endByFd.Value; } }

        private bool _okFd; public bool OkFd { get { return _okFd; } }
        private bool _okNb; public bool OkNb { get { return _okNb; } }


        private int _indexv = -1;
        private int _index = -1;

        public int Index { get { return _index;  } }
        public int IndexV { get { return _indexv; } }
        public List<TrackInfoItunes> Candidats { get { return candidats;  } }

        #region refonte
        Contribution virt = new Contribution();
        Contribution current = new Contribution(); 
      
        int count;
        private TrackInfoItunes _nextCandidat;
        private List<TrackInfoItunes> candidats = new List<TrackInfoItunes>();
        private Contribution dict = new Contribution(); 
        public void AddCandidat(TrackInfoItunes track)
        {
            candidats.Add(track);
            count++;
        }
        public int NbV { get { return virt.Nb; } }
        public timeSpan FdV { get { return virt.Duree;  } }
        /// <summary>
        /// Donne les valeurs min pour ajouter un track à partir de valeurs de base
        /// </summary>
        /// <param name="nb"></param>
        /// <param name="fd"></param>
        public void checkV(int nb, timeSpan fd)
        {
            //nb > _nbv && fd > _fdv
            // 1-> je sors nb=1 fd=5 > retenu par exemple nb=0 fd = 5 ridicule mais c'est comme ça
            // step fait un check(0,5) qui ne renvoie rien
            // 2-> check (0,5 ) ? je fais pas indev++ car j'ai déja 5
            //0/0   1/5    2/11    3/16
            // |-----|------|-------|-->
            // debut

            while (true)
            {
                if (virt.Nb > nb)
                    break;
                if (virt.Duree > fd)
                    break; 
                _indexv++;
                if (_indexv >= count)
                    break;
                _nextCandidat = candidats[_indexv];
                virt.add(_nextCandidat); 
            }

        }

        public void reservation(int nb, timeSpan fd)
        {
            while (true)
            {
                
            }
        }

        #endregion
        //public FeedLimitLoaderState getNext(FeedLimitLoaderState current)
        //{
        //    int i = index + 1;
        //    if (i >= candidats.Count)
        //        return null;
        //    var track = candidats[i]; 
        //    var _nb = nb + 1;
        //    var _fd = currentDuration + track.Duree;

        //    var ret = new FeedLimitLoaderState() { track = track }(); 
        //    if (_nb > current.nb)
        //        ret.
        //}

        public void phase2()
        {
            currentDuration = new timeSpan();
            currentDurationVirtuel = new timeSpan();
            durationStop = new timeSpan();
            nb = 0;
            nbVirtuel = 0;
            nbStop = 0;
            state = loadState.selection;
            endByFd = null;
        }


        //private bool loadEqSel;
        //public bool LoadEqSel { get { return loadEqSel; } }

        public FeedLimitItemLoader(LimitItem limit, string album, LimitsLoader parent)
        {
            this.dir = limit.Dir;
            this.limit = limit;

            this.parent = parent;
            this.album = album;


            nbMax = limit.Nb;


            var feedDuration = limit.FeedDuration;
            int rating = limit.Rating;
            durationMax = timeSpan.FromMinutes(feedDuration);


            loadDurationMax = durationMax;
            loadNbMax = nbMax;

            bool loadEqSeld = true;
            bool loadEqSeln = true;

            //if (limit.Dir.Cascading)
            //{
            if (limit.LoadNb > nbMax)
            {
                loadNbMax = limit.LoadNb;
                loadEqSeln = false;
            }
            if (limit.LoadFeedDuration > feedDuration)
            {
                loadDurationMax = timeSpan.FromMinutes(limit.LoadFeedDuration);
                loadEqSeld = false;
            }

            //}
            if (loadEqSeln)
                loadNbMax++;
            if (loadEqSeld)
                loadDurationMax = timeSpan.FromMinutes(loadDurationMax.TotalMinute + 200);

            logItem = Logger.getLogger(limit.ID + "\\" + album, null, false);
            logLimit = limit.Logger;
        }

        private void log(string txt)
        {
            logLimit.log(txt);
            logItem.log(txt);
        }

        private void log(string txt, params object[] other)
        {

            logLimit.log(txt, other);
            logItem.log(txt, other);
        }




        public timeSpan getCurrentDuration(bool real)
        {
            if (real)
                return currentDuration;
            return currentDurationVirtuel;
        }

        public timeSpan getDurationStop(bool real)
        {
            if (durationStop.Value == 0)
                return getCurrentDuration(real);
            return durationStop;
        }

        public int getNb(bool real)
        {

            if (real)
                return nb;
            return nbVirtuel;
        }
        public int getNbStop(bool real)
        {
            if (nbStop == 0)
                return getNb(real);
            return nbStop;
        }

        public int Nb { get { return nb; } }

        public bool control(TrackInfoItunes track, bool select, bool load, bool real, bool increment)
        {
            //if (state == loadState.end)
            //    return false;


            string location = track.Location;
            if (string.IsNullOrEmpty(location))
                return false;



            //     string str = string.Format("{0} {1} {2} {3}", limit, nb, currentDuration.TotalMinutes.ToString("0"), track.ToString());
            string phase = select ? "ctl" : "load";

            if (!Logger.CreateNullLoggers)
            {
                string str = string.Format("{0} {1} {2} {3}", limit, nb, currentDuration, track.ToString());

                log("-->  {0} ok {1} ", phase, str);
            }

            var ok = checkStatus(string.Format("-->  {0}", phase), load, track, limit, real, increment);

            if (!ok)
                return false;

            if (select && real && LimitItemLoader.ModeSelection)
            {
                var selected = selectMode.simple;
                if (dir.Histo)
                {
                    selected = selectMode.serial;
                    if (dir.HistoAll.HasValue && dir.HistoAll.Value)
                        selected = selectMode.histo;
                    if (dir.Serial)
                        selected = selectMode.serial;
                }
                else
                {
                    //if (!candidat.Serial && !candidat.Histo)
                    selected = selectMode.simple;
                }

                track.select(selected, limit);
                limit.Dir.Feeds.recordTrack(track, limit);
            }

            //report aux niveaux inférieurs
            if (real)
                parent.recordLimitItemCandidat(track, limit);
            return true;
        }




        private bool checkStatus(string phase, bool load, TrackInfoItunes track, LimitItem itemSource, bool real, bool increment)
        {
            endByFd = null;
            _okFd = true;
            _okNb = true;
            bool ret = true;
            //        string str = string.Format("{0} {1} {2} {3} {4}", limit, itemSource, (nb), currentDuration.TotalMinutes.ToString("0"), track.ToString());
            nbVirtuel = nb;
            currentDurationVirtuel = currentDuration;
            var nbBase = real ? nb : nbVirtuel;

            var _nb = nbBase + 1;
            var durationBase = real ? currentDuration : currentDurationVirtuel;
            var dur = durationBase + track.Duree;

            int _nbMax = load ? this.loadNbMax : this.nbMax;
            var _durationMax = load ? this.loadDurationMax : this.durationMax;

            if (_nb > _nbMax)
            {
                _okNb = false;
                if (real)
                {
                    if (LimitItemLoader.ModeSelection)
                        limit.NbFeedLimit = true;
                    if (!Logger.CreateNullLoggers)
                    {
                        string str = string.Format("{0} {1} {2} {3} {4}", limit, itemSource, (nb), currentDuration, track.ToString());
                        log("{0} stop nb {1} ", phase, str);
                    }
                    if (state != loadState.end)
                    {
                        state = loadState.end;
                        nbStop = _nb;
                    }
                }

                endByFd = false;
                ret = false;
            }



            // vérification des valeurs cumulées
            if (dur > _durationMax)
            {
                _okFd = false;
                if (real)
                {

                    if (!limit.DurationFeedLimit)
                    {
                        if (!Logger.CreateNullLoggers)
                        {
                            string str = string.Format("{0} {1} {2} {3} {4}", limit, itemSource, (nb), currentDuration, track.ToString());
                            log("{0} stop d. {1} ", phase, str);
                        }
                    }
                    if (LimitItemLoader.ModeSelection)
                        limit.DurationFeedLimit = true;
                    if (state != loadState.end)
                    {
                        state = loadState.end;
                        durationStop = dur;
                    }

                }

                //if (select || durationMax == loadDurationMax)
                //{
                //    if (ret)
                //    {
                //        var tb = new TrackBorderItem(limit, track, borderType.fd, dur, false);
                //        limit.signal(tb);
                //    }
                //    //limit.checkBorderFd(track, dur, false);
                //}

                if (endByFd == null)
                    endByFd = true;
                ret = false;
            }
            else
            {
                // endByFd = null;
                //if (select || durationMax == loadDurationMax)
                //{
                //    if (ret)
                //    {
                //        var tb = new TrackBorderItem(limit, track, borderType.fd, dur, true);
                //        limit.signal(tb);
                //    }
                //}
            }






            if (increment)
            {
                if (real)
                {
                    nb += 1;
                    currentDuration += track.Duree;
                }

                currentDurationVirtuel += track.Duree;
                nbVirtuel += 1;
            }
            return ret;

        }

        public override string ToString()
        {
            return string.Format("{0} {1}", album, limit); 
        }

    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Load\LimitItemLoader.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using pdb.podcast.Tuning;
using pdb.util;
using pdb.util.list;
using pdb.podcast.Auto;
using pdb.podcast.Selection;

//using TimeSpan = pdb.util.timeSpan; 

namespace pdb.podcast.Load
{
    public class LimitItemLoader
    {
        private static bool _selection;
        public static bool ModeSelection { get { return _selection; } set { _selection = value; } }
        private LimitItem limit;
        private LimitsLoader parent;
        private IDictionary<string, FeedLimitItemLoader> loaders = new BgDictString0<FeedLimitItemLoader>();
        //  public SequentialDictString<TrackInfoItunes> preloaded = new SequentialDictString<TrackInfoItunes>();
        public SequentialDictString<TrackInfoItunes> standAlone = new SequentialDictString<TrackInfoItunes>();
        public SequentialDictString<TrackInfoItunes> legacy = new SequentialDictString<TrackInfoItunes>();
        public SequentialDictString<TrackInfoItunes> legacyRelax = new SequentialDictString<TrackInfoItunes>();
        private SequentialDictString<TrackInfoItunes> selected = new SequentialDictString<TrackInfoItunes>();
        public SequentialDictString<TrackInfoItunes> exclu = new SequentialDictString<TrackInfoItunes>();
        /// <summary>
        /// Ensemble des tracks chargés en premier par la limite
        /// </summary>
        public List<TrackInfoItunes> use = new List<TrackInfoItunes>();
        private Logger log;
        timeSpan currentDuration = new timeSpan();
        // timeSpan currentDurationVirtual = new timeSpan();
        timeSpan durationStop = new timeSpan();
        timeSpan currentContrib = new timeSpan();
        timeSpan trackDurationMax;
        timeSpan trackDurationMin;



        // List<TrackInfoItunes> list = new List<TrackInfoItunes>();
        BgDictString0<TrackInfoItunes> selectedByFd = new BgDictString0<TrackInfoItunes>();
        BgDictString0<TrackInfoItunes> manageByFd = new BgDictString0<TrackInfoItunes>();
        bool loadEqSel;

        public LimitItemLoader(LimitsLoader parent, LimitItem limit)
        {
            this.parent = parent;
            this.limit = limit;
            log = limit.Logger;

            trackDurationMax = timeSpan.FromMinutes(limit.Td);
            trackDurationMin = timeSpan.FromMinutes(limit.TdMin);
        }


        public timeSpan _durationv;
        public timeSpan _datev;
        public timeSpan _fd;

        public int _nb;

        public void checkV(AutoBuilder auto, int nb, timeSpan fd, timeSpan d, timeSpan date)
        {
            BgDictString0<TrackInfoItunes> dict = new BgDictString0<TrackInfoItunes>();

            int nbMin = int.MaxValue;
            timeSpan fdMin = timeSpan.MaxValue;
            timeSpan dMin = timeSpan.MaxValue;
            timeSpan dateMin = timeSpan.MaxValue;
            foreach (FeedLimitItemLoader loader in loaders.Values)
            {
                loader.checkV(nb, fd);
                var _nb = loader.NbV;
                var _fd = loader.FdV;
                if (_nb > nb && _nb < nbMin)
                    nbMin = _nb;
                if (_fd > fd && fd < fdMin)
                    fdMin = _fd;
                for (int i = 0; i <= loader.IndexV; i++)
                {
                    var track = loader.Candidats[i];
                    if (dict.ContainsKey(track.Location))
                        continue;
                    var _d = currentDuration + track.Duree;
                    if (_d > d && d < dMin)
                        dMin = _d;
                    var _date = track.Ts;
                    if (_date > date && _date < dateMin)
                        dateMin = _date;
                    break;
                }



            }

           this._durationv = dMin;
            this._datev = dateMin;
            this._nb = nbMin;
            this._fd = fdMin;
        }

        public void loadCandidats(List<TrackInfoItunes> _loaded)
        {
            if (limit.Nb == 0 || limit.FeedDuration == 0 || limit.Duration == 0)
                return;

            var duration = limit.Duration;
            //var _loadDuration = limit.LoadDuration; 
            loadEqSel = true;
            //if (limit.Dir.Cascading)
            //{
            var dd = limit.LoadDuration;
            if (dd > duration)
            {
                loadEqSel = false;
                duration = dd;
            }
            //}

            if (loadEqSel)
                duration += 200;


            //var duration = limit.LoadDuration;
            var durationMax = timeSpan.FromMinutes(duration);
            var dateMin = limit.DateMin;
            var dateMax = limit.DateMax;

            foreach (TrackInfoItunes candidat in _loaded)
            {
                var location = candidat.Location;
                if (string.IsNullOrEmpty(location))
                    continue;

                if (standAlone.ContainsKey(location))
                    continue;

                var d = candidat.Pub;
                if (d < dateMin)
                    continue;

                var duree = candidat.Duree;
                if (duree > trackDurationMax)
                    continue;
                if (duree < trackDurationMin)
                    continue;
                standAlone.Add(location, candidat);
                Exporter.Record(candidat);

                var loader = getLoader(candidat.Album);
                loader.AddCandidat(candidat);
                continue;

                //bool okDate = d <= dateMax;
                ////if (Conf.BorderVirtual)
                ////    limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, okDate, false));
                ////if (!okDate)
                ////    continue;
                ////  var tb = new TrackBorderItem(limit, candidat, borderType.m    axdate, candidat.Pub, okDate);
                ////  limit.signal(tb);

                ////if (Conf.BorderVirtual)
                ////{
                ////     var tb = new TrackBorderItem(limit, candidat, borderType.maxdate, candidat.Pub, border.);
                ////      limit.signal(tb);
                ////}

                ////if (!okDate && !Conf.BorderVirtual)
                ////    continue;


                //var loader = getLoader(candidat.Album);
                //bool _control = loader.control(candidat, false, okDate);

                ////if (!_control && !Conf.BorderVirtual)
                ////    continue;

                //var currentDurationBase = (okDate && _control) ? currentDuration : currentDurationVirtual;
                //var newDuration = currentDurationBase + candidat.Duree;
                //bool okTotalDuration = newDuration <= durationMax;
                //bool selected = _control && okTotalDuration; //
                //bool okNb = loader.OkNb;

                //////question fd
                ////if (loader.LoadEqSel)
                ////{
                ////    var dataRoot = new CauseDatas(okDate, new timeSpan(d - Conf.Date0),
                ////        loader.OkFd, loader.getDurationStop(okDate)
                ////        , okNb, loader.getNbStop(okDate)
                ////        , okTotalDuration, durationStop.Value == 0 ? newDuration : durationStop, candidat, limit);

                ////    Program.CauseRegister.signal(dataRoot); 

                ////    var dataAuto =  new CauseDatas(okDate, new timeSpan(d - Conf.Date0),
                ////        loader.OkFd, loader.getCurrentDuration(okDate)
                ////        , okNb, loader.getNbStop(okDate)
                ////        , okTotalDuration, newDuration, candidat, limit);

                ////    limit.signal(dataAuto); 

                ////    //Program.CauseRegister.Get(candidat).check(okDate, new timeSpan(d - Conf.Date0),
                ////    //    loader.OkFd, loader.getDurationStop(okDate)
                ////    //    , okNb, loader.getNbStop(okDate)
                ////    //    , okTotalDuration, durationStop.Value == 0 ? newDuration : durationStop, limit);

                ////    //limit.signal(new CauseData(okDate, borderType.maxdate, new timeSpan(d - Conf.Date0), limit, candidat));
                ////    //limit.signal(new CauseData(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit, candidat));
                ////    //limit.signal(new CauseData(okTotalDuration, borderType.d, newDuration, limit, candidat));



                ////    if (okDate && _control && okTotalDuration)
                ////        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.selectedStrict));
                ////    else if (okDate && okTotalDuration)
                ////    {
                ////        if (loader.EndByFd)
                ////            limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.rejectedStrict));
                ////    }
                ////    else if (Conf.BorderVirtual)
                ////    {
                ////        if (_control)
                ////            limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.selectedLight));
                ////        else if (loader.EndByFd)
                ////            limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.rejectedLight));
                ////    }


                ////    //if (!_control)
                ////    //{
                ////    //    if (okDate && okTotalDuration && loader.EndByFd)
                ////    //    {
                ////    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.rejectedStrict);
                ////    //        limit.signal(tb);
                ////    //    }
                ////    //    else if (Conf.BorderVirtual)
                ////    //    {
                ////    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.rejectedLight);
                ////    //        limit.signal(tb);
                ////    //    }
                ////    //}
                ////}

                ////if (loadEqSel)
                ////{
                ////    // question d
                ////    if (okDate && _control && okTotalDuration)
                ////        limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.selectedStrict));
                ////    else if (okDate && _control)
                ////        limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.rejectedStrict));
                ////    else if (Conf.BorderVirtual)
                ////    {
                ////        if (okTotalDuration)
                ////            limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.selectedLight));
                ////        else
                ////            limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.rejectedLight));
                ////    }
                ////    //if (!okTotalDuration)
                ////    //{
                ////    //    if (okDate && _control)
                ////    //    {
                ////    //        var tb = new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.rejectedStrict);
                ////    //        limit.signal(tb);
                ////    //    }
                ////    //    else if (Conf.BorderVirtual)
                ////    //    {
                ////    //        var tb = new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.rejectedLight);
                ////    //        limit.signal(tb);
                ////    //    }
                ////    //}

                ////    // question date
                ////    if (okDate && _control && okTotalDuration)
                ////        limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.selectedStrict));
                ////    else if (_control && okTotalDuration)
                ////        limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.rejectedStrict));
                ////    else if (Conf.BorderVirtual)
                ////    {
                ////        if (okDate)
                ////            limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.selectedLight));
                ////        else
                ////            limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.rejectedLight));
                ////    }

                ////}



                ////if (loadEqSel)
                ////{
                ////    if ((okDate && _control) || Conf.BorderVirtual)
                ////    {
                ////       var tb = new TrackBorderItem(limit, candidat, borderType.d, newDuration, okTotalDuration);
                ////        limit.signal(tb);
                ////    }
                ////}

                ////if ((okDate && _control))
                ////{                   
                ////    var tb = new TrackBorderItem(limit, candidat, borderType.d, newDuration, okTotalDuration,true);
                ////    limit.signal(tb);
                ////}

                ////if (_control && okTotalDuration)
                ////{
                ////    var tb = new TrackBorderItem(limit, candidat, borderType.maxdate, candidat.Pub, okDate);
                ////    limit.signal(tb);
                ////}

                ////if (okDate && okTotalDuration)
                ////{
                ////    if (!loader.limit.NbFeedLimit)
                ////    {
                ////        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.CurrentDuration, _control);
                ////        limit.signal(tb); 
                ////    }
                ////}

                //// limit.checkBorderDates(candidat, selected);

                //if (okDate && _control)
                //    currentDuration += candidat.Duree; // newDuration; //
                //currentDurationVirtual += candidat.Duree;

                //// preloaded.Add(location, candidat);
                //if (selected)
                //{
                //    //   standAlone.Add(location, candidat);
                //    candidat.select(selectMode.standAlone, limit);

                //}
                //else if (okDate && _control && !okTotalDuration)
                //{
                //    //if (!limit.LoadDurationLimitAtteinte)
                //    //    log.log("loadCandidats duréée limite atteinte {0}", (currentDuration)); //.TotalMinutes.ToString("0"));
                //    //limit.LoadDurationLimitAtteinte = true;
                //    if (durationStop.Value == 0)
                //    {
                //        durationStop = currentDuration;
                //    }
                //    // break;
                //}

                ////if (okDate && _control)
                ////    currentDuration = newDuration; // += candidat.Duree;
                ////   currentDurationVirtual += candidat.Duree;

            }

        }



        //private bool control(TrackInfoItunes track, bool select, bool real)
        //{
        //    var loader = getLoader(track.Album);
        //    return loader.control(track, select, real);
        //}

        private FeedLimitItemLoader getLoader(string album)
        {

            FeedLimitItemLoader loader = null;
            if (!loaders.ContainsKey(album))
            {
                loader = new FeedLimitItemLoader(limit, album, parent);
                loaders.Add(album, loader);
                if (parent.state == loadState.selection)
                    loader.phase2();
            }
            else
                loader = loaders[album];
            return loader;
        }

        public void phase2()
        {
            currentDuration = new timeSpan();
            //  currentDurationVirtual = new timeSpan();
            selectedByFd = new BgDictString0<TrackInfoItunes>();
            manageByFd = new BgDictString0<TrackInfoItunes>();

            if (_selection)
            {
                currentContrib = new timeSpan();
                limit.DurationLimitAtteinte = false;
                limit.ContributionLimitAtteinte = false;
                limit.DurationFeedLimit = false;
                limit.NbFeedLimit = false;
            }
            foreach (FeedLimitItemLoader loader in loaders.Values)
                loader.phase2();
        }

        public void recordGuest(TrackInfoItunes track, LimitItem itemSource)
        {
            if (itemSource == limit)
                return;
            var location = track.Location;
            if (string.IsNullOrEmpty(location))
                return;
            //if (standAlone.ContainsKey(location))
            //    return;
            bool transmitTotal = limit.Dir.TransmitTotalGuest;
            if (transmitTotal && legacy.ContainsKey(location))
                return;
            if (!transmitTotal && legacyRelax.ContainsKey(location))
                return;


            if (track.Duree <= trackDurationMax && track.Duree >= trackDurationMin) // && track.Pub >= dateMin)
            {

                if (transmitTotal)
                    legacy.Add(location, track);
                else
                    legacyRelax.Add(location, track);
            }
        }

        public void recordTrackFromChild(TrackInfoItunes track, LimitItem itemSource, bool transmitTotal)
        {
            var location = track.Location;
            if (string.IsNullOrEmpty(location))
                return;
            //if (standAlone.ContainsKey(location))
            //    return;
            if (transmitTotal && legacy.ContainsKey(location))
                return;
            if (!transmitTotal && legacyRelax.ContainsKey(location))
                return;
            if (track.Duree <= trackDurationMax && track.Duree >= trackDurationMin) // && track.Pub >= dateMin)
            {
                if (transmitTotal)
                    legacy.Add(location, track);
                else
                    legacyRelax.Add(location, track);

            }
        }



        //private timeSpan getDuration(int nb, timeSpan minfd)
        //{
        //    timeSpan tot = new timeSpan();
        //    foreach (FeedLimitItemLoader feed in loaders.Values)
        //    {
        //        tot += feed.getTotalDurationFor(nb, minfd);
        //    }
        //    return tot;
        //}

        public void Selection()
        {

            if (limit.Nb == 0 || limit.FeedDuration == 0 || limit.Duration == 0)
                return;

            var histo = limit.Dir.Histo;

            var relax = legacyRelax.List;
            if (relax.Count > 0)
            {
            }

            if (histo)
                relax.Sort(new PodCastComparer());
            else
                relax.Sort(new PodCastComparerInv());
            selection(relax, false, false);

            var list = legacy.List;
            if (histo)
                list.Sort(new PodCastComparer());
            else
                list.Sort(new PodCastComparerInv());

            selection(list, false, true);



            var list2 = standAlone.List;
            if (histo)
                list2.Sort(new PodCastComparer());
            else
                list2.Sort(new PodCastComparerInv());

            selection(list2, true, true);

        }


        private void selection(List<TrackInfoItunes> list, bool select, bool increment)
        {
            var duration = limit.Duration;
            var durationMax = timeSpan.FromMinutes(duration);
            var contributionMax = timeSpan.FromMinutes(limit.Contribution);

            int count = list.Count;
            for (int index = 0; index < count; index++)
            {
                TrackInfoItunes candidat = list[index];
                //foreach (TrackInfoItunes candidat in list)
                //{

                //if (candidat.Album == "Géopolitique")
                //{
                //}

                //if (candidat.Name == "Le monde selon Etienne Klein 17.01.13")
                //{
                //}
                var location = candidat.Location;
                if (string.IsNullOrEmpty(location))
                    continue;

                //if (_selection && selected.ContainsKey(location))
                //    continue;
                // vérification à postériori par rapports aux différents niveaux
                bool newContribut = candidat.Selected;

                var d = candidat.Pub;
                bool okDate = d <= limit.DateMax && d <= limit.DateMax2;
                var loader = getLoader(candidat.Album);
                bool okTotalDuration = false;
                bool _control = false;

                //tester uniquement fd et nb
                // _control = loader.control(candidat, select, false, false);

                // var _newDuration = currentDuration;
                //if (increment)
                //    _newDuration = currentDuration + candidat.Duree;

                // savoir si ça passe uniquement avec le critère d
                okTotalDuration = currentDuration <= durationMax;

                bool okprovi = okDate && okTotalDuration;
                bool ok = okDate && okTotalDuration && _control;

                // rejouer le controle pour incrémenter nb et fd      
                if (!increment) // données venant de sous-dossier (histo, voisins....)
                {
                    _control = loader.control(candidat, select, false, okDate && okTotalDuration, true);
                    if (_control && !selectedByFd.ContainsKey(location))
                        selectedByFd.Add(location, candidat);
                    if (!manageByFd.ContainsKey(location))
                        manageByFd.Add(location, candidat);
                }



                //if (!loader.LoadEqSel)
                //{

                //    if (_control)
                //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.selectedLight));
                //    else if (loader.EndByFd)
                //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.rejectedLight));

                //}

                //if (!increment && !_selection) //!loader.LoadEqSel &&
                //{
                //    //  if (!loader.OkNb)
                //    //  Program.CauseRegister.Get(candidat).check(loader.OkNb, borderType.nb, timeSpan.FromMinutes(loader.getNb(okDate)), limit);
                //    // if (!loader.OkFd)
                //    // Program.CauseRegister.Get(candidat).check(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit);

                //    limit.Dir.CauseRegister.signal(new CauseDatas(loader.OkNb, borderType.nb, timeSpan.FromMinutes(loader.getNbStop(okDate)), limit, candidat));
                //    limit.Dir.CauseRegister.signal(new CauseDatas(loader.OkFd, borderType.fd, loader.getDurationStop(okDate), limit, candidat));

                //    limit.signal(new CauseDatas(okDate, borderType.maxdate, new timeSpan(d - Conf.Date0), limit, candidat));
                //    limit.signal(new CauseDatas(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit, candidat));
                //}

                //if (!control(candidat, select, okDuration))
                //    continue;

                if (increment)
                {
                    var newDuration = currentDuration + candidat.Duree;
                    okTotalDuration = newDuration <= durationMax;
                    if (manageByFd.ContainsKey(location))
                    {
                        _control = false;
                        if (selectedByFd.ContainsKey(location))
                            _control = true;
                    }
                    else
                    {
                        _control = loader.control(candidat, select, false, okDate && okTotalDuration, true);

                    }

                    if (_control)
                    {
                        //currentDurationVirtual += candidat.Duree;
                        if (okDate)
                            currentDuration += candidat.Duree;
                    }


                    // newDuration = currentDuration;
                    if (_control && !selectedByFd.ContainsKey(location))
                        selectedByFd.Add(location, candidat);
                    if (!manageByFd.ContainsKey(location))
                        manageByFd.Add(location, candidat);
                    //  okTotalDuration = newDuration <= durationMax;



                    //okTotalDuration = newDuration <= durationMax;
                    //_control = loader.control(candidat, select, okDate && okTotalDuration, true,true);

                    //if (okDate && _control)
                    //    currentDuration += candidat.Duree;
                    //currentDurationVirtual = currentDuration; // += candidat.Duree;

                    //var newDuration = okDate && _control ? currentDuration : currentDurationVirtual;

                    //  bool okTotalDuration = newDuration <= durationMax;

                    if (!_selection)
                    {


                        var _fd = loader.getCurrentDuration(false);

                        if (_fd > newDuration)
                        {
                            newDuration = _fd;
                            okTotalDuration = newDuration <= durationMax;
                        }
                        if (_control)
                        {
                        }
                        else
                        {
                            //var fd = loader.getCurrentDuration(true);
                            //var nb = loader.getNb(true);

                            //newDuration = new timeSpan();
                            //foreach (FeedLimitItemLoader l in loaders.Values)
                            //    l.phaseTest();
                            //for (int j = 0; j <= index; j++)
                            //{
                            //    TrackInfoItunes t = list[j];
                            //    var subloader = getLoader(t.Album);
                            //    var subok = subloader.test(nb, fd, t);
                            //    if (j >= subloader.IndexBase)
                            //    {
                            //        if (subok || selectedByFd.ContainsKey(location))
                            //            newDuration += t.Duree;
                            //    }

                            //}
                            //// newDuration += getDuration(nb, fd);

                            //if (newDuration < currentDuration)
                            //{
                            //}
                            //else if (newDuration > currentDurationVirtual)
                            //{
                            //}
                            //okTotalDuration = newDuration <= durationMax;
                        }


                        //question fd
                        //if (!loader.LoadEqSel)
                        //{
                        var dataRoot = new CauseDatas(okDate, new timeSpan(d - Conf.Date0),
                      loader.OkFd, loader.getDurationStop(okDate)
                      , loader.OkNb, loader.getNbStop(okDate)
                      , okTotalDuration, durationStop.Value == 0 ? newDuration : durationStop, candidat, limit);

                        limit.Dir.CauseRegister.signal(dataRoot);

                        var dataAuto = new CauseDatas(okDate, new timeSpan(d - Conf.Date0),
                            //loader.OkFd, loader.getCurrentDuration(okDate && okTotalDuration)
                            //, loader.OkNb, loader.getNb(okDate && okTotalDuration)
                            //, okTotalDuration, newDuration, candidat, limit);
                                loader.OkFd, _fd// loader.getCurrentDuration (false)
                        , loader.OkNb, loader.getNb(false)
                        , okTotalDuration, newDuration, candidat, limit);

                        limit.signal(dataAuto);
                    }




                    //   Program.CauseRegister.Get(candidat).check(okDate, new timeSpan(d - Conf.Date0),
                    //loader.OkFd, loader.getDurationStop(okDate)
                    //, loader.OkNb, loader.getNbStop(okDate)
                    //, okTotalDuration, durationStop.Value == 0 ? newDuration : durationStop, limit);

                    //   limit.signal(new CauseData(okDate, borderType.maxdate, new timeSpan(d - Conf.Date0), limit, candidat));
                    //   limit.signal(new CauseData(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit, candidat));
                    //   limit.signal(new CauseData(okTotalDuration, borderType.d, newDuration, limit, candidat));

                    if (Conf.BorderTb)
                    {
                        if (okDate && _control && okTotalDuration)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.selectedStrict));
                        else if (okDate && okTotalDuration)
                        {
                            if (loader.EndByFd)
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.rejectedStrict));
                        }
                        //else if (Conf.BorderVirtual)
                        //{
                        //    if (_control)
                        //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.selectedLight));
                        //    else if (loader.EndByFd)
                        //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.rejectedLight));
                        //}


                        //}

                        //if (!loadEqSel)
                        //{
                        // question d
                        if (okDate && _control && okTotalDuration)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.selectedStrict));
                        else if (okDate && _control)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.rejectedStrict));
                        else if (Conf.BorderVirtual)
                        {
                            if (okTotalDuration)
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.selectedLight));
                            else
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.rejectedLight));
                        }


                        // question date
                        if (okDate && _control && okTotalDuration)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.selectedStrict));
                        else if (_control && okTotalDuration)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.rejectedStrict));
                        else if (Conf.BorderVirtual)
                        {
                            if (okDate)
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.selectedLight));
                            else
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.rejectedLight));
                        }

                        //}

                    }


                    ////question duree
                    //if (okDate && _control) // || Conf.BorderVirtual)
                    //{
                    //    var tb = new TrackBorderItem(limit, candidat, borderType.d, newDuration, okDuration, true); limit.signal(tb);
                    //}
                    //else if (Conf.BorderVirtual)
                    //{
                    //    var tb = new TrackBorderItem(limit, candidat, borderType.d, newDuration, okDuration, false); limit.signal(tb);
                    //}

                    ////question fd

                    //if (_control)
                    //{
                    //    if (okDate && okDuration)
                    //    {
                    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.selectedStrict); limit.signal(tb);
                    //    }
                    //    else if (Conf.BorderVirtual)
                    //    {
                    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.selectedLight); limit.signal(tb);

                    //    }
                    //}
                    //else //if (!loader.limit.NbFeedLimit)
                    //{
                    //    if (okDate && okDuration)
                    //    {
                    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.rejectedStrict);
                    //        limit.signal(tb);
                    //    }
                    //    else if (Conf.BorderVirtual)
                    //    {
                    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.rejectedLight);
                    //        limit.signal(tb);
                    //    }
                    //}
                    ////question date
                    //if (_control && okDuration)
                    //{
                    //    var tb = new TrackBorderItem(limit, candidat, borderType.maxdate, candidat.Pub, okDate, true);
                    //    limit.signal(tb);
                    //}
                    //else if (Conf.BorderVirtual)
                    //{
                    //    var tb = new TrackBorderItem(limit, candidat, borderType.maxdate, candidat.Pub, okDate, false);
                    //    limit.signal(tb);
                    //}



                    //if (!_control && !Conf.BorderVirtual)
                    //    continue;
                    if (!okDate)
                        continue;

                    if (!_control)
                        continue;
                    newDuration = currentDuration;
                    okTotalDuration = newDuration <= durationMax;
                    if (!okTotalDuration)
                    {
                        if (!Logger.CreateNullLoggers)
                            log.log("duration {0}", (newDuration)); //.TotalMinutes.ToString("0"));

                        if (_selection)
                            limit.DurationLimitAtteinte = true;
                        if (durationStop.Value == 0)
                        {
                            // currentDuration = newDuration;
                            durationStop = currentDuration;
                        }

                    }

                    if (!okTotalDuration)
                        continue;


                    if (_selection && !newContribut)
                    {
                        // pour l'instant ? on ne gère pas la contribtion en mode rejeu

                        currentContrib += candidat.Duree;
                        if (currentContrib > contributionMax)
                        {
                            log.log("contribution {0}", (currentContrib)); //.TotalMinutes.ToString("0"));
                            limit.ContributionLimitAtteinte = true;
                            break;
                        }

                        use.Add(candidat);
                    }

                    //   currentDuration = newDuration;




                    if (_selection)
                    {
                        // enregistrement pour stockage et stats // et NON ! en plus gestion de la propagation des sous-répertoires vers les répertoires parent
                        limit.Dir.recordTrack(candidat, limit);
                        // enregistrement pour stockage et stats // et NON ! en plus gestion de la propagation des sous-répertoires vers les répertoires parent
                        //  limit.Dir.recordTrack(candidat, limit);

                        selected.Add(location, candidat);

                        if (select)
                            exclu.Add(location, candidat);
                    }





                }

            }
        }


        private void selection0(List<TrackInfoItunes> list, bool select, bool increment)
        {
            var duration = limit.Duration;
            var durationMax = timeSpan.FromMinutes(duration);
            var contributionMax = timeSpan.FromMinutes(limit.Contribution);

            int count = list.Count;
            for (int index = 0; index < count; index++)
            {
                TrackInfoItunes candidat = list[index];
                //foreach (TrackInfoItunes candidat in list)
                //{

                //if (candidat.Album == "Géopolitique")
                //{
                //}

                //if (candidat.Name == "Le monde selon Etienne Klein 17.01.13")
                //{
                //}
                var location = candidat.Location;
                if (string.IsNullOrEmpty(location))
                    continue;

                //if (_selection && selected.ContainsKey(location))
                //    continue;
                // vérification à postériori par rapports aux différents niveaux
                bool newContribut = candidat.Selected;

                var d = candidat.Pub;
                bool okDate = d <= limit.DateMax && d <= limit.DateMax2;
                var loader = getLoader(candidat.Album);
                bool okTotalDuration = false;
                bool _control = false;

                //tester uniquement fd et nb
                // _control = loader.control(candidat, select, false, false);

                // var _newDuration = currentDuration;
                //if (increment)
                //    _newDuration = currentDuration + candidat.Duree;

                // savoir si ça passe uniquement avec le critère d
                okTotalDuration = currentDuration <= durationMax;

                bool okprovi = okDate && okTotalDuration;
                bool ok = okDate && okTotalDuration && _control;

                // rejouer le controle pour incrémenter nb et fd      
                if (!increment) // données venant de sous-dossier (histo, voisins....)
                {
                    _control = loader.control(candidat, select, false, okDate && okTotalDuration, true);
                    if (_control && !selectedByFd.ContainsKey(location))
                        selectedByFd.Add(location, candidat);
                    if (!manageByFd.ContainsKey(location))
                        manageByFd.Add(location, candidat);
                }



                //if (!loader.LoadEqSel)
                //{

                //    if (_control)
                //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.selectedLight));
                //    else if (loader.EndByFd)
                //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.rejectedLight));

                //}

                //if (!increment && !_selection) //!loader.LoadEqSel &&
                //{
                //    //  if (!loader.OkNb)
                //    //  Program.CauseRegister.Get(candidat).check(loader.OkNb, borderType.nb, timeSpan.FromMinutes(loader.getNb(okDate)), limit);
                //    // if (!loader.OkFd)
                //    // Program.CauseRegister.Get(candidat).check(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit);

                //    limit.Dir.CauseRegister.signal(new CauseDatas(loader.OkNb, borderType.nb, timeSpan.FromMinutes(loader.getNbStop(okDate)), limit, candidat));
                //    limit.Dir.CauseRegister.signal(new CauseDatas(loader.OkFd, borderType.fd, loader.getDurationStop(okDate), limit, candidat));

                //    limit.signal(new CauseDatas(okDate, borderType.maxdate, new timeSpan(d - Conf.Date0), limit, candidat));
                //    limit.signal(new CauseDatas(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit, candidat));
                //}

                //if (!control(candidat, select, okDuration))
                //    continue;

                if (increment)
                {
                    var newDuration = currentDuration + candidat.Duree;
                    okTotalDuration = newDuration <= durationMax;
                    if (manageByFd.ContainsKey(location))
                    {
                        _control = false;
                        if (selectedByFd.ContainsKey(location))
                            _control = true;
                    }
                    else
                    {
                        _control = loader.control(candidat, select, false, okDate && okTotalDuration, true);

                    }

                    if (_control)
                    {
                        //currentDurationVirtual += candidat.Duree;
                        if (okDate)
                            currentDuration += candidat.Duree;
                    }


                    // newDuration = currentDuration;
                    if (_control && !selectedByFd.ContainsKey(location))
                        selectedByFd.Add(location, candidat);
                    if (!manageByFd.ContainsKey(location))
                        manageByFd.Add(location, candidat);
                    //  okTotalDuration = newDuration <= durationMax;



                    //okTotalDuration = newDuration <= durationMax;
                    //_control = loader.control(candidat, select, okDate && okTotalDuration, true,true);

                    //if (okDate && _control)
                    //    currentDuration += candidat.Duree;
                    //currentDurationVirtual = currentDuration; // += candidat.Duree;

                    //var newDuration = okDate && _control ? currentDuration : currentDurationVirtual;

                    //  bool okTotalDuration = newDuration <= durationMax;

                    if (!_selection)
                    {


                        var _fd = loader.getCurrentDuration(false);

                        if (_fd > newDuration)
                        {
                            newDuration = _fd;
                            okTotalDuration = newDuration <= durationMax;
                        }
                        if (_control)
                        {
                        }
                        else
                        {
                            //var fd = loader.getCurrentDuration(true);
                            //var nb = loader.getNb(true);

                            //newDuration = new timeSpan();
                            //foreach (FeedLimitItemLoader l in loaders.Values)
                            //    l.phaseTest();
                            //for (int j = 0; j <= index; j++)
                            //{
                            //    TrackInfoItunes t = list[j];
                            //    var subloader = getLoader(t.Album);
                            //    var subok = subloader.test(nb, fd, t);
                            //    if (j >= subloader.IndexBase)
                            //    {
                            //        if (subok || selectedByFd.ContainsKey(location))
                            //            newDuration += t.Duree;
                            //    }

                            //}
                            //// newDuration += getDuration(nb, fd);

                            //if (newDuration < currentDuration)
                            //{
                            //}
                            //else if (newDuration > currentDurationVirtual)
                            //{
                            //}
                            //okTotalDuration = newDuration <= durationMax;
                        }


                        //question fd
                        //if (!loader.LoadEqSel)
                        //{
                        var dataRoot = new CauseDatas(okDate, new timeSpan(d - Conf.Date0),
                      loader.OkFd, loader.getDurationStop(okDate)
                      , loader.OkNb, loader.getNbStop(okDate)
                      , okTotalDuration, durationStop.Value == 0 ? newDuration : durationStop, candidat, limit);

                        limit.Dir.CauseRegister.signal(dataRoot);

                        var dataAuto = new CauseDatas(okDate, new timeSpan(d - Conf.Date0),
                            //loader.OkFd, loader.getCurrentDuration(okDate && okTotalDuration)
                            //, loader.OkNb, loader.getNb(okDate && okTotalDuration)
                            //, okTotalDuration, newDuration, candidat, limit);
                                loader.OkFd, _fd// loader.getCurrentDuration (false)
                        , loader.OkNb, loader.getNb(false)
                        , okTotalDuration, newDuration, candidat, limit);

                        limit.signal(dataAuto);
                    }




                    //   Program.CauseRegister.Get(candidat).check(okDate, new timeSpan(d - Conf.Date0),
                    //loader.OkFd, loader.getDurationStop(okDate)
                    //, loader.OkNb, loader.getNbStop(okDate)
                    //, okTotalDuration, durationStop.Value == 0 ? newDuration : durationStop, limit);

                    //   limit.signal(new CauseData(okDate, borderType.maxdate, new timeSpan(d - Conf.Date0), limit, candidat));
                    //   limit.signal(new CauseData(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit, candidat));
                    //   limit.signal(new CauseData(okTotalDuration, borderType.d, newDuration, limit, candidat));

                    if (Conf.BorderTb)
                    {
                        if (okDate && _control && okTotalDuration)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.selectedStrict));
                        else if (okDate && okTotalDuration)
                        {
                            if (loader.EndByFd)
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.rejectedStrict));
                        }
                        //else if (Conf.BorderVirtual)
                        //{
                        //    if (_control)
                        //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.selectedLight));
                        //    else if (loader.EndByFd)
                        //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.rejectedLight));
                        //}


                        //}

                        //if (!loadEqSel)
                        //{
                        // question d
                        if (okDate && _control && okTotalDuration)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.selectedStrict));
                        else if (okDate && _control)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.rejectedStrict));
                        else if (Conf.BorderVirtual)
                        {
                            if (okTotalDuration)
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.selectedLight));
                            else
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.rejectedLight));
                        }


                        // question date
                        if (okDate && _control && okTotalDuration)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.selectedStrict));
                        else if (_control && okTotalDuration)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.rejectedStrict));
                        else if (Conf.BorderVirtual)
                        {
                            if (okDate)
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.selectedLight));
                            else
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.rejectedLight));
                        }

                        //}

                    }


                    ////question duree
                    //if (okDate && _control) // || Conf.BorderVirtual)
                    //{
                    //    var tb = new TrackBorderItem(limit, candidat, borderType.d, newDuration, okDuration, true); limit.signal(tb);
                    //}
                    //else if (Conf.BorderVirtual)
                    //{
                    //    var tb = new TrackBorderItem(limit, candidat, borderType.d, newDuration, okDuration, false); limit.signal(tb);
                    //}

                    ////question fd

                    //if (_control)
                    //{
                    //    if (okDate && okDuration)
                    //    {
                    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.selectedStrict); limit.signal(tb);
                    //    }
                    //    else if (Conf.BorderVirtual)
                    //    {
                    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.selectedLight); limit.signal(tb);

                    //    }
                    //}
                    //else //if (!loader.limit.NbFeedLimit)
                    //{
                    //    if (okDate && okDuration)
                    //    {
                    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.rejectedStrict);
                    //        limit.signal(tb);
                    //    }
                    //    else if (Conf.BorderVirtual)
                    //    {
                    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.rejectedLight);
                    //        limit.signal(tb);
                    //    }
                    //}
                    ////question date
                    //if (_control && okDuration)
                    //{
                    //    var tb = new TrackBorderItem(limit, candidat, borderType.maxdate, candidat.Pub, okDate, true);
                    //    limit.signal(tb);
                    //}
                    //else if (Conf.BorderVirtual)
                    //{
                    //    var tb = new TrackBorderItem(limit, candidat, borderType.maxdate, candidat.Pub, okDate, false);
                    //    limit.signal(tb);
                    //}



                    //if (!_control && !Conf.BorderVirtual)
                    //    continue;
                    if (!okDate)
                        continue;

                    if (!_control)
                        continue;
                    newDuration = currentDuration;
                    okTotalDuration = newDuration <= durationMax;
                    if (!okTotalDuration)
                    {
                        if (!Logger.CreateNullLoggers)
                            log.log("duration {0}", (newDuration)); //.TotalMinutes.ToString("0"));

                        if (_selection)
                            limit.DurationLimitAtteinte = true;
                        if (durationStop.Value == 0)
                        {
                            // currentDuration = newDuration;
                            durationStop = currentDuration;
                        }

                    }

                    if (!okTotalDuration)
                        continue;


                    if (_selection && !newContribut)
                    {
                        // pour l'instant ? on ne gère pas la contribtion en mode rejeu

                        currentContrib += candidat.Duree;
                        if (currentContrib > contributionMax)
                        {
                            log.log("contribution {0}", (currentContrib)); //.TotalMinutes.ToString("0"));
                            limit.ContributionLimitAtteinte = true;
                            break;
                        }

                        use.Add(candidat);
                    }

                    //   currentDuration = newDuration;




                    if (_selection)
                    {
                        // enregistrement pour stockage et stats // et NON ! en plus gestion de la propagation des sous-répertoires vers les répertoires parent
                        limit.Dir.recordTrack(candidat, limit);
                        // enregistrement pour stockage et stats // et NON ! en plus gestion de la propagation des sous-répertoires vers les répertoires parent
                        //  limit.Dir.recordTrack(candidat, limit);

                        selected.Add(location, candidat);

                        if (select)
                            exclu.Add(location, candidat);
                    }





                }

            }
        }

        public LimitItem Item { get { return limit; } }
        public override string ToString()
        {
            return limit.ToString();
        }

    }
}
]]></content>
  </file>
  <file path="\pdb.util\CustomFormat.cs">
    <content><![CDATA[using System;
using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;

namespace pdb.util
{
    public static class CustomFormat
    {
        const char infini = '\u221E';
        private static CultureInfo cu = new CultureInfo("en-US");
        //4.9E+02
        private static Regex reg = new Regex(@"([0-9\.]+)E\+([0-9]+)");


        public static string FormatCustom(this decimal value, int nb)
        {
            return value.FormatCustom(nb, nb, nb);
        }

        public static string FormatCustom(this double value, int nb)
        {
            return value.FormatCustom(nb, nb,nb); 
        }

       

        public static string FormatCustom(this double value, int nb, int nbMax)
        {
            return value.FormatCustom(nb, nb, nbMax);
        }

        public static string FormatCustom(this decimal value, int nb, int nbMax)
        {
            return value.FormatCustom(nb, nb, nbMax);
        }
        public static string FormatCustom(this double value, int nb, int nbMin, int nbMax)
        {
            if (value.Equals(double.MinValue))
                return "-" + infini;
            if (value.Equals(double.MaxValue))
                return infini.ToString();

            if (nbMin< nb)
            {
                if (Math.Abs(value)< Math.PowD(10, nbMin-1))
                {
                    return FormatCustom(value, nbMin, nbMin, nbMax); 
                }
            }

            string ret = value.ToString("G" + nb, cu);
            if (ret.StartsWith("0."))
            {
                ret = ret.Remove(0, 1);
                return ret;
            }

            Match m = reg.Match(ret);
            if (m.Success)
            {
                string strNumber = m.Groups[1].Value;
                string strExp = m.Groups[2].Value;
                if (strExp.StartsWith("0"))
                    strExp = strExp.Remove(0, 1);
                int exp = Convert.ToInt16(strExp);
                var sb = new StringBuilder();
                if (exp <= 3)
                {
                    if (exp < nbMax)
                    {
                        ret = value.ToString("#");
                        return ret;
                    }
                    double dNumber = Convert.ToDouble(strNumber, cu);

                    if (strNumber.Contains("."))
                    {
                        dNumber *= 10;
                        exp--;
                    }

                    int iNumber = Convert.ToInt16(dNumber);
                    sb.Append(iNumber);

                    for (int i = 0; i < exp; i++)
                    {
                        sb.Append("0");
                    }

                    ret = sb.ToString();
                    return ret;

                }

                sb.Append(strNumber);
                sb.Append("e");
                sb.Append(strExp);

                ret = sb.ToString();
                return ret;
            }


            return ret;
        }

        public static string FormatCustom(this decimal value, int nb, int nbMin, int nbMax)
        {
            if (value.Equals(double.MinValue))
                return "-" + infini;
            if (value.Equals(double.MaxValue))
                return infini.ToString();

            return FormatCustom(Convert.ToDouble(value), nb, nbMin, nbMax); 
          
        }

        public static string FormatCustom(this TimeSpan value, int nb)
        {
            return value.FormatCustom(nb, nb, nb); 
         
        }

        public static string FormatCustom(this TimeSpan value, int nb, int nbMin, int nbMax)
        {
            if (value.Equals(TimeSpan.MinValue)) return "-" + infini;
            if (value.Equals(TimeSpan.MaxValue)) return infini.ToString();
            return value.TotalDays.FormatCustom(nb,nbMin, nbMax);
        }

        public static string FormatCustomTs(this double value, int nb)
        {
            return value.FormatCustomTs(nb, nb, nb);          
        }
        public static string FormatCustomTs(this decimal value, int nb)
        {
            return value.FormatCustomTs(nb, nb, nb);
        }

        public static string FormatCustomTs(this double value, int nb, int nbMin, int nbMax)
        {
            if (value.Equals(double.MinValue) || double.IsNegativeInfinity(value))
                return "-" + infini;
            if (value.Equals(double.MaxValue) || double.IsInfinity(value) || double.IsNaN(value))
                return infini.ToString();
            TimeSpan ts = TimeSpan.FromMilliseconds(value);
            return ts.TotalDays.FormatCustom(nb, nbMin, nbMax); 
        }

        public static string FormatCustomTs(this decimal value, int nb, int nbMin, int nbMax)
        {
            if (value.Equals(decimal.MinValue))
                return "-" + infini;
            if (value.Equals(decimal.MaxValue)) // || double.IsInfinity(value) || double.IsNaN(value))
                return infini.ToString();
            TimeSpan ts = TimeSpan.FromMilliseconds(Convert.ToDouble( value));
            return ts.TotalDays.FormatCustom(nb, nbMin, nbMax);
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.util\Math.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Math0 = System.Math;

namespace pdb.util
{
    public static class Math
    {
        static readonly double max;
        static readonly double min;
        static Math()
        {
            max = Convert.ToDouble(decimal.MaxValue);
            min = -max;
        }
        public static decimal TotalMilliseconds(this TimeSpan ts)
        {
            return ts.TotalMilliseconds.toDecimal();
        }

        public static decimal TotalDays(this TimeSpan ts)
        {
            return ts.TotalDays.toDecimal();
        }
        public static double toDouble(this decimal x)
        {
            return Convert.ToDouble(x);
        }

        public static decimal toDecimal(this double x)
        {
            try
            {
                return Convert.ToDecimal(x);
            }
            catch
            {
                if (x >= max)
                    return decimal.MaxValue;
                if (x <= min)
                    return decimal.MinValue;
                return decimal.Zero;
            }
        }
        public static decimal toDecimal(this long x)
        {
            return Convert.ToDecimal(x);
        }
        public static decimal Abs(decimal x)
        {
            return Math0.Abs(x);
        }
        public static double Abs(double x)
        {
            return Math0.Abs(x);
        }

        public static int Abs(int x)
        {
            return Math0.Abs(x);
        }

        public static decimal Exp(decimal d)
        {
            return Math0.Exp(d.toDouble()).toDecimal();
        }

        public static decimal Log(decimal d)
        {
            return Math0.Log(d.toDouble()).toDecimal();
        }

        public static decimal Log10(decimal d)
        {
            return Math0.Log10(d.toDouble()).toDecimal();
        }

        public static decimal Log(decimal x, decimal y)
        {
            return Math0.Log(x.toDouble(), y.toDouble()).toDecimal();
        }

        public static decimal Pow(decimal x, decimal y)
        {
            return Math0.Pow(x.toDouble(), y.toDouble()).toDecimal();
        }

        public static double PowD(double x, double y)
        {
            return Math0.Pow(x, y);
        }


        //  public static int Pow(int x, int y)
        //{
        //    return (int)Math0.Pow(x,y); 
        //}

      
     

       

        public static decimal Round(decimal x, int nbDec)
        {
            return Math0.Round(x, nbDec);
        }
        public static double Round(double x, int nbDec, MidpointRounding mode)
        {
            return Math0.Round(x, nbDec, mode); 
        }
        public static double Round(double x)
        {
            return Math0.Round(x); 
        }

        public static int Min(int x, int y)
        {
            return Math0.Min(x, y);
        }

        public static double Floor(double x)
        {
            return Math0.Floor(x); 
        }


    }
}
]]></content>
  </file>
  <file path="\pdb.util\Medianne.cs">
    <content><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.IO;

namespace pdb.util
{ 
    public enum selectedCoeff
    {
        none,
        noCoeff,
        main,
        min
    }

    public enum medianneMode
    {
        none = 0,
        strict = 1,
        light = 2,
        moy = 3

    }
    public enum removeLast
    {
        non = 0,
        unselected = 1,
        virtuel = 2,
        tous = 3
    }

    public enum modeMin
    {
        /// <summary>
        /// On ne gère pas
        /// </summary>
        non = 0,
        /// <summary>
        /// Morceaux supérieurs à la limite ( pas d'influence sur le résultat)
        /// </summary>
        orphelin = 1,
        /// <summary>
        /// Morceaux cochés et notés
        /// </summary>
        toujours = 2

    }

    public class HistoStat
    {
        public HistoStatItem min;
        public HistoStatItem max;

        public HistoStat()
        {
            min = new HistoStatItem(int.MaxValue);
            max = new HistoStatItem(-1);
        }
        public HistoStat(decimal val)
        {
            min = new HistoStatItem(val);
            max = new HistoStatItem(val);
        }

        //private string desc(decimal d)
        //{
        //    if (d < 0)
        //        return "";
        //    if (d >= int.MaxValue)
        //        return "";
        //    return d.ToString("0.000", System.Globalization.CultureInfo.InvariantCulture);
        //}

        public override string ToString()
        {
            //return string.Format("{0}({1}) {2}({3})", desc(min.absolute), desc(min.relative), desc(max.absolute), desc(max.relative)); 
            return string.Format("{0} {1}", min, max);
        }
    }

    public class HistoStatItem
    {
        public decimal relative;
        public decimal absolute;
        public HistoStatItem()
        {
            relative = -1;
            absolute = -1;
        }
        public HistoStatItem(decimal val)
        {
            relative = val;
            absolute = val;
        }

        public static string desc(decimal d)
        {
            if (d < 0)
                return "";
            if (d >= int.MaxValue)
                return "";
            return d.ToString("0.000", System.Globalization.CultureInfo.InvariantCulture);
        }

        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append(desc(absolute));
            if (absolute != relative)
            {
                sb.Append("(");
                sb.Append(desc(relative));
                sb.Append(")");
            }
            return sb.ToString();
        }


    }

    [Serializable]
    public class ConfMedianne : TuningBase
    {
        public medianneMode type;
        public decimal medianne = 0.5m;
        public bool quasi;

        public bool enabled;



        public bool removeFirst;
        public bool deleteFirst;
        public removeLast removeLast;

        public decimal expEnabled = 0m;

        public decimal zero = 0m;
        /// <summary>
        /// 
        /// </summary>
        public bool removeEnabled;




        public modeMin cmpMin;

        private ConfMedianneVirt _main;
        private ConfMedianneVirt _min;

        public ConfMedianneVirt Main { get { return _main; } }
        public ConfMedianneVirt Min { get { return _min; } }
        public ConfMedianne()
        {
            _main = new ConfMedianneVirt();
            _min = new ConfMedianneVirt();

        }

        public void makeIdem()
        {
            _min = _main;
        }

        public void duplicateMainIf()
        {
            if (_min == _main)
                _min = new ConfMedianneVirt(_main);
        }
        public ConfMedianne(ConfMedianne o)
        {
            type = o.type;
            medianne = o.medianne;
            quasi = o.quasi;

            enabled = o.enabled;



            removeFirst = o.removeFirst;
            deleteFirst = o.deleteFirst;
            removeLast = o.removeLast;

            expEnabled = o.expEnabled;

            zero = o.zero;
            removeEnabled = o.removeEnabled;



            cmpMin = o.cmpMin;

            _main = new ConfMedianneVirt(o._main);
            _min = new ConfMedianneVirt(o._min);

        }

        public ConfMedianne(XmlElement parent, XmlElement child)
            : base(parent, child)
        {
            var strType = "";
            builds("type", v => strType = v);
            type = (medianneMode)Enum.Parse(typeof(medianneMode), strType, true);
            builddec("medianne", v => medianne = v);
            buildb("quasi", v => quasi = v);
            buildb("enabled", v => enabled = v);
            buildb("removeFirst", v => removeFirst = v);
            buildb("deleteFirst", v => deleteFirst = v);
            builddec("expEnabled", v => expEnabled = v);
            builddec("zero", v => zero = v);
            buildb("removeEnabled", v => removeEnabled = v);
            string _modeMin = "";
            builds("cmpMin", v => _modeMin = v);
            if (!string.IsNullOrEmpty(_modeMin))
                cmpMin = (modeMin)Enum.Parse(typeof(modeMin), _modeMin, true);

            string _removeLast = null;
            builds("removeLast", v => _removeLast = v);
            removeLast = (removeLast)Enum.Parse(typeof(removeLast), _removeLast, true);

            _main = null;
            _min = null;
            var subs = XMLTool.NodeLookUp(child, "virts");
            if (subs != null)
            {
                foreach (XmlNode _n in subs.ChildNodes)
                {
                    if (_n is XmlElement)
                    {
                        if (_main == null)
                        {
                            _main = new ConfMedianneVirt(child, _n as XmlElement);

                        }
                        else if (_min == null)
                        {
                            _min = new ConfMedianneVirt(child, _n as XmlElement);
                        }
                    }
                }
                if (_min == null && _main != null)
                    _min = new ConfMedianneVirt(_main);
            }
        }

        public override void save(XmlWriter w)
        {
            base.save(w);
            writeStart("cmp");
            write("type", type);
            write("medianne", medianne);
            write("quasi", quasi);
            write("enabled", enabled);
            write("removeFirst", removeFirst);
            write("deleteFirst", deleteFirst);
            write("expEnabled", expEnabled);
            write("zero", zero);
            write("removeEnabled", removeEnabled);
            write("cmpMin", cmpMin);
            write("removeLast", removeLast);

            writeStart("virts");
            _main.save(w);
            _min.save(w);
            writeEnd();

            writeEnd();



        }


        public void auto(selectedCoeff motif)
        {
            if (!enabled)
                return;
            if (motif == selectedCoeff.none)
                return;
            var coeffPrisEncompte = motif > selectedCoeff.noCoeff;
            if (_min == _main || _min.coeffVirt == 1m)
            {
                _main.calcAuto(coeffPrisEncompte, 1);
            }
            else
            {
                if (coeffPrisEncompte)
                {
                    if (motif == selectedCoeff.main)
                        _main.calcAuto(true, 1);
                    if (motif == selectedCoeff.min)
                        _min.calcAuto(true, 1);
                }
                else
                {
                    _main.calcAuto(false, 1);
                    _min.calcAuto(false, 1);
                }
            }
        }
    }

    [Serializable]
    public class ConfMedianneVirt : TuningBase
    {
        [NonSerialized]
        const string PATH_DYN = "..\\dynamic";
        private string Path { get { return string.Format("{0}{1}", DIR_CONF, fdata); } }
        private string PathDiff { get { return string.Format("{0}{1}", DIR_CONF, fdiff); } }
        private string PathDiffTmp { get { return string.Format("{0}{1}", DIR_CONF, fdiffTmp); } }
        // private string PathLastFull { get { return string.Format("{0}{1}", DIR_CONF, flast); } }
        const string PATH_DYN_DIFF = "..\\dynamic_diff";

        const decimal EPSILON = 0.001m;
        const int NB_HISTO = 1000000;
        public int safe;
        public decimal coeffVirt = 1m;

        //private bool firstSave = true;
        //private static bool modeDiff;
        //public static bool ModeDiff
        //{
        //    get { return modeDiff; }
        //    set
        //    {
        //        modeDiff = value;
        //    }
        //}

        public string name;


        /// <summary>
        /// lié au mode db
        /// </summary>
        public dbMode mode;
        /// <summary>
        /// fichier ou est consigné l'historique courant
        /// </summary>
        public string fdata;
        /// <summary>
        /// fichier ou est consigné l'incrémental de l'historique
        /// </summary>
        public string fdiff;
        /// <summary>
        /// fichier ou est consigné l'incrémental de l'historique en mode full en vue de la sauvegarfe
        /// </summary>
        public string fdiffTmp;
        ///// <summary>
        ///// fichier ou est consigné la dernière sauvegarde full de l'historique
        ///// </summary>
        //public string flast;

        public int indexDiff = 0;

        public bool virtOnlyDisabled;
        public bool noAddEnd;
        public bool noAddAll;
        public bool virtAlignSelected;
        public bool virtAlignPrec;
        public bool coeffVirtAuto;
        public bool coeffVirtAdjust;

        public bool removeEpsilon;

        public bool forceCoeffVirt;
        public bool lissage;
        public bool cumul;

        public bool reSort;
        public bool noAdd;


        public bool auto;
        public decimal dcoeffp;
        public decimal dcoeffm;

        public int serialp = 1;
        public int serialm = 1;
        /// <summary>
        /// atténuation progressive des coeffs
        /// </summary>
        public decimal dconvergence;

        public decimal dconvdeltap = 1m;
        public decimal dconvdeltam = 1m;

        /// <summary>
        /// anti atténuation
        /// </summary>
        public decimal danticonvergence = 1m;
        public decimal danticonvdeltap = 1m;
        public decimal danticonvdeltam = 1m;
        private bool _linkconv;
        private decimal linkProduct;
        private List<decimal> histo = new List<decimal>();
        //  private List<decimal> histoDiff = new List<decimal>();
        public bool linkconv { get { return _linkconv; } set { _linkconv = value; calcProduct(); } }

        private void calcProduct()
        {
            this.linkProduct = calcProduct(this.dcoeffp, this.dconvergence);
        }

        public decimal calcProduct(decimal dcoeffp, decimal dconvergence)
        {
            var linkProduct = this.linkProduct;
            try
            {
                linkProduct = dcoeffp / dconvergence;
                // 1 0,9 -> 10
                // 0.1 0,99 
            }
            catch
            {
            }

            return linkProduct;
        }

        private void calcConv()
        {
            this.dconvergence = calcConv(this.dcoeffp, this.linkProduct);
        }

        public decimal LinkProduct
        {
            get
            {
                if (linkProduct == 0m)
                    calcProduct();
                return linkProduct;
            }
            set
            {
                linkProduct = value;
                calcConv();

            }
        }

        public decimal calcConv(decimal dcoeffp, decimal linkProduct)
        {
            var dconvergence = this.dconvergence;
            try
            {
                // 1- conv = coeff / prod
                dconvergence = dcoeffp / linkProduct; //1/10
            }
            catch
            {

            }
            return dconvergence;
        }

        private bool? lastAutoDirection;
        private int _nbSameDirection;

        public ConfMedianneVirt()
        { }
        public ConfMedianneVirt(ConfMedianneVirt o)
        {
            name = o.name;
            mode = o.mode;
            fdata = o.fdata;
            fdiff = o.fdiff;
            fdiffTmp = o.fdiffTmp;
            //  flast = o.flast;
            safe = o.safe;
            coeffVirt = o.coeffVirt;
            virtOnlyDisabled = o.virtOnlyDisabled;
            noAddEnd = o.noAddEnd;
            noAddAll = o.noAddAll;
            virtAlignSelected = o.virtAlignSelected;
            virtAlignPrec = o.virtAlignPrec;
            coeffVirtAuto = o.coeffVirtAuto;
            coeffVirtAdjust = o.coeffVirtAdjust;
            removeEpsilon = o.removeEpsilon;
            forceCoeffVirt = o.forceCoeffVirt;
            lissage = o.lissage;
            cumul = o.cumul;
            reSort = o.reSort;
            noAdd = o.noAdd;
            auto = o.auto;
            dcoeffp = o.dcoeffp;
            dcoeffm = o.dcoeffm;
            dconvergence = o.dconvergence;
            dconvdeltap = o.dconvdeltap;
            dconvdeltam = o.dconvdeltam;
            danticonvergence = o.danticonvergence;
            danticonvdeltap = o.danticonvdeltap;
            danticonvdeltam = o.danticonvdeltam;
            _linkconv = o._linkconv;
            serialp = o.serialp;
            serialm = o.serialm;
            _nbSameDirection = o._nbSameDirection;
            histo = new List<decimal>(o.histo);
        }
        public ConfMedianneVirt(XmlElement parent, XmlElement child)
            : base(parent, child)
        {
            var str = "";
            builds("mode", v => str = v);
            if (!string.IsNullOrEmpty(str))
                mode = (dbMode)Enum.Parse(typeof(dbMode), str);
            builds("name", v => name = v);
            builds("fdata", v => fdata = v);
            builds("fdiff", v => fdiff = v);
            builds("fdiffTmp", v => fdiffTmp = v);
            // builds("flast", v => flast = v);
            builddec("coeffVirt", v => coeffVirt = v);
            buildi("safe", v => safe = v);

            buildb("virtOnlyDisabled", v => virtOnlyDisabled = v);
            buildb("noAddEnd", v => noAddEnd = v);
            buildb("noAddAll", v => noAddAll = v);
            buildb("virtAlignSelected", v => virtAlignSelected = v);
            buildb("virtAlignPrec", v => virtAlignPrec = v);
            buildb("coeffVirtAuto", v => coeffVirtAuto = v);
            buildb("coeffVirtAdjust", v => coeffVirtAdjust = v);

            buildb("removeEpsilon", v => removeEpsilon = v);
            buildb("forceCoeffVirt", v => forceCoeffVirt = v);
            buildb("lissage", v => lissage = v);
            buildb("cumul", v => cumul = v);
            buildb("reSort", v => reSort = v);
            buildb("noAdd", v => noAdd = v);
            buildb("auto", v => auto = v);
            builddec("dcoeffp", v => dcoeffp = v);
            builddec("dcoeffm", v => dcoeffm = v);
            builddec("dconvergence", v => dconvergence = v);
            builddec("dconvdeltap", v => dconvdeltap = v);
            builddec("dconvdeltam", v => dconvdeltam = v);

            builddec("danticonvergence", v => danticonvergence = v);
            builddec("danticonvdeltap", v => danticonvdeltap = v);
            builddec("danticonvdeltam", v => danticonvdeltam = v);
            buildb("linkconv", v => _linkconv = v);
            buildi("serialp", v => serialp = v);
            buildi("serialm", v => serialm = v);
            buildi("serial", v => _nbSameDirection = v);

            var xhisto = XMLTool.NodeLookUp(child, "histo");
            if (xhisto != null)
            {
                foreach (XmlElement sub in xhisto.ChildNodes)
                {
                    histo.Add(Convert.ToDecimal(sub.InnerText));
                }
            }
            else
            {
                if (File.Exists(Path))
                {
                    foreach (var line in File.ReadAllLines(Path))
                    {
                        if (string.IsNullOrEmpty(line))
                            continue;
                        histo.Add(Convert.ToDecimal(line));
                    }
                    indexDiff = histo.Count;

                    //if (histo.Count >0 )
                    //    coeffVirt = getCoeff(histo[histo.Count -1]);


                }

                if (File.Exists(PathDiff))
                {
                    var histoDiff = new List<decimal>();

                    foreach (var line in File.ReadAllLines(PathDiff))
                    {
                        if (string.IsNullOrEmpty(line))
                            continue;
                        histoDiff.Add(Convert.ToDecimal(line));
                    }

                    if (mode == dbMode.full)
                    {
                        histo.AddRange(histoDiff);
                        indexDiff = histo.Count;
                    }
                    else
                    {
                        indexDiff = histo.Count - histoDiff.Count;
                    }

                }



                if (mode == dbMode.full && File.Exists(PathDiff))
                    File.Delete(PathDiff);

                if (histo.Count > 0)
                {
                    int index = histo.Count - 1;
                    decimal current = histo[index];
                    coeffVirt = getCoeff(current);
                    bool? sens = null;
                    int nbSerie = 0;
                    decimal delta = 0m;

                    var rr = 0m;
                    if (dcoeffp > 0)
                        rr = dcoeffm / dcoeffp;
                    if (rr > 0)
                    {
                        while (true)
                        {
                            index--;
                            if (index < 0)
                                break;
                            var aux = histo[index];
                            var _sens = current > aux;
                            if (sens == null)
                            {
                                sens = _sens;
                                lastAutoDirection = !_sens; 
                                delta = current - aux;
                            }
                            

                            if (sens != _sens)
                                break;
                            current = aux;
                            nbSerie++;

                        }

                        _nbSameDirection = nbSerie;
                        dcoeffp = Math.Abs(delta); dcoeffm = dcoeffp * rr; 

                    }
                }
            }

           
            //if (histoDiff.Count > 0)
            //    coeffVirt = getCoeff(histo[histo.Count - 1]); 

        }

        public override void save(XmlWriter w)
        {
            base.save(w);
            writeStart("v");
            write("name", name);
            write("mode", mode);
            write("fdata", fdata);
            write("fdiff", fdiff);
            write("fdiffTmp", fdiffTmp); 

            write("coeffVirt", coeffVirt);
            write("safe", safe);

            write("virtOnlyDisabled", virtOnlyDisabled);
            write("noAddEnd", noAddEnd);
            write("noAddAll", noAddAll);
            write("virtAlignSelected", virtAlignSelected);
            write("virtAlignPrec", virtAlignPrec);
            write("coeffVirtAuto", coeffVirtAuto);
            write("coeffVirtAdjust", coeffVirtAdjust);

            write("removeEpsilon", removeEpsilon);
            write("forceCoeffVirt", forceCoeffVirt);
            write("lissage", lissage);
            write("cumul", cumul);
            write("reSort", reSort);
            write("noAdd", noAdd);
            write("auto", auto);
            write("dcoeffp", dcoeffp);
            write("dcoeffm", dcoeffm);
            write("dconvergence", dconvergence);
            write("dconvdeltap", dconvdeltap);
            write("dconvdeltam", dconvdeltam);

            write("danticonvergence", danticonvergence);
            write("danticonvdeltap", danticonvdeltap);
            write("danticonvdeltam", danticonvdeltam);
            write("linkconv", linkconv);
            write("serialp", serialp);
            write("serialm", serialm);
            write("serial", _nbSameDirection);
            //writeStart("histo");
            //foreach (decimal h in histo)
            //{
            //    w.WriteStartElement("h");
            //    w.WriteString(h.ToString("0.###"));
            //    w.WriteEndElement();
            //}
            //writeEnd();

            var sb = new StringBuilder();
            var sbDiff = new StringBuilder();




            //if (modeDiff)
            //{
            //    histoDiff = null;
            //}
            //else
            //{
            //    if (histoDiff != null)
            //    {
            //        histo.AddRange(histoDiff);
            //        histoDiff = null;
            //    }

            //    if (File.Exists(PathDiff))
            //        File.Delete(PathDiff);
            //}

            int count = histo.Count;
            for (int i = 0; i < count; i++)
            {
                var line = histo[i].ToString("0.######");
                sb.AppendLine(line);
                if (i >= indexDiff)
                    sbDiff.AppendLine(line);
            }


            if (!string.IsNullOrEmpty(fdata))
            {
                AsyncFileWriter.Instance.post(Path, sb.ToString());
                if (mode == dbMode.diff)
                    AsyncFileWriter.Instance.post(PathDiff, sbDiff.ToString());
                else
                    AsyncFileWriter.Instance.post(PathDiffTmp, sbDiff.ToString());


                if (mode == dbMode.full && File.Exists(PathDiff))
                    File.Delete(PathDiff);
            }


            writeEnd();
        }

        public int Serial { get { return _nbSameDirection; } set { _nbSameDirection = value; } }

        public void calcAuto(bool selectedByCoeff, int nb)
        {
            if (!auto)
                return;
            var last = lastAutoDirection;
            lastAutoDirection = selectedByCoeff;

            if (last.HasValue && last != selectedByCoeff)
                _nbSameDirection = 0;

            if (selectedByCoeff)
                _nbSameDirection--;
            else
                _nbSameDirection++;
            var lastProduct = linkProduct;
            var rr = 0m;
            if (dcoeffp > 0)
                rr = dcoeffm / dcoeffp;

            var c0 = dcoeffp;
            /// au debut dconvergence à effet  fort 0.9 doit arriver à 0.999
            /// // quand j'applique la convergence, je fait baisser son effet

            if (dconvergence > 0 && last.HasValue)
            {
                var aux = dconvergence;
                if (last != selectedByCoeff)
                {
                    //if (selectedByCoeff)
                    //{

                    //dcoeffp *= dconvergence;
                    //dcoeffm *= dconvergence;
                    //if (dcoeffp < EPSILON) dcoeffp = EPSILON;
                    //if (dcoeffm < EPSILON) dcoeffm = EPSILON;

                    // la convergence est maintenant directement le % de baisse
                    //0.1 -> 0.9  ==> 1.1
                    var r = 1 + dconvergence; 
                    dcoeffp /= r;
                    dcoeffm /= r;

                    if (dcoeffp < EPSILON)
                    { dcoeffp = EPSILON; if (rr > 0m) dcoeffm = rr * dcoeffp; }
                    if (dcoeffm < EPSILON)
                    { dcoeffm = EPSILON; if (rr > 0m) dcoeffp = dcoeffm / rr; }


                    //   _nbSameDirection = 0;
                    //  lastAutoDirection = null;



                    if (_linkconv)
                        calcConv();
                    else
                    {

                        //  var delta = 1 - dconvergence; // 1- 0.9 = 0.1 // 1-0.1 = 0.9
                        dconvergence /= (1+ dconvdeltam); // 0.09 // 0.81
                        //  dconvergence = 1 - delta; // 0.9 -> 0.91 // 0.1-> 0.19
                    }


                    danticonvergence /= (1 + danticonvdeltam); 
                    //var delta = 1 - danticonvergence; 
                    //delta *= (1- danticonvdeltam) ;
                    //danticonvergence = delta - 1; 
                   // if (danticonvergence < 1m) danticonvergence = 1;

                    //delta = danticonvergence - 1; // 0.1
                    //delta *= danticonvdeltam;  //0.09; 
                    //    danticonvergence = 1+delta; // 1.1 -> 1.09
                    // }



                }
                else
                {
                    bool applyanti = false;
                    if (selectedByCoeff && -_nbSameDirection > serialm)
                        applyanti = true;
                    else if (!selectedByCoeff && _nbSameDirection > serialp)
                        applyanti = true;
                    if (applyanti)
                    {
                        var limit = dcoeffp + EPSILON;
                        dcoeffp *= (1 +danticonvergence) ;
                        dcoeffm *= (1+danticonvergence) ;
                        danticonvergence *= (1+ danticonvdeltap);
                       


                        if (danticonvergence > 0 && limit > dcoeffp)
                        {
                            dcoeffp = limit;
                        }
                        
                        if (rr > 0)
                            dcoeffm = rr * dcoeffp;

                    }
                    if (_linkconv)
                        calcConv();
                    else if (applyanti)
                    {
                        dconvergence *= (1 + dconvdeltap); 
                        //   var delta = 1 - dconvergence; // 1- 0.9 = 0.1 // 1-0.1 = 0.9
                        //var delta = 1 - dconvergence; //0.1 -> 0.9  0.5->0.5
                        //delta /= (1+ dconvdeltap); // 0.81 0.25
                        //dconvergence = 1 - delta;  // 0.18 0.75
                        // dconvergence *= dconvdeltap; // 0.11 // 0.99
                        //    dconvergence = 1 - delta; // 0.9 -> 0.89 // 0.01
                        if (dconvergence > 1 - EPSILON)
                            dconvergence = 1 - EPSILON;
                        if (dconvergence < EPSILON)
                            dconvergence = EPSILON;
                    }





                }
                misc.log("convergence {0:0.##}->{1:0.######}", c0, dcoeffp);
                misc.log("evol convergence {0:0.######}->{1:0.######}", aux, dconvergence);
            }

            if (selectedByCoeff)
                makeDelta(false, dcoeffm, nb);
            else
                makeDelta(true, dcoeffp, nb);



        }

        public decimal CoeffT { get { return (decimal)Math.Pow(coeffVirt, safe); } }
        private decimal getCoeff(decimal coeffT) { return Math.Pow(coeffT, (1.0m / safe)); }

        private void makeDelta(bool sens, decimal delta, int nb)
        {
            try
            {
                decimal coeffT = CoeffT;
                while (histo.Count >= NB_HISTO)
                    histo.RemoveAt(0);


                string montee = sens ? "up" : "down";
                var c0 = coeffT;
                if (sens)
                {
                    for (int i = 0; i < nb; i++)
                        coeffT += delta;
                }
                else
                {
                    for (int i = 0; i < nb; i++)
                        coeffT -= delta;
                }
                if (coeffT < 1)
                    coeffT = 1;

                var coeff = getCoeff(coeffT); // (decimal)Math.Pow((double)coeffT, (1.0 / (double)safe));

                misc.log("{0} {1:0.######} {2:0.######}->{3:0.######}", montee, delta, c0, coeffT);

                coeffVirt = coeff;
                histo.Add(coeffT);
            }
            catch
            {
            }


        }

        public HistoStat calcStat(selectedCoeff motif, int nb)
        {
            var stat = new HistoStat();
            int _nb = 0;
            int count = histo.Count;
            for (int i = count - 1; i >= 0; i--)
            {
                var h = histo[i];

                // min 
                if (h < stat.min.absolute)
                    stat.min.absolute = h;
                // calcul du plus faible qui n'a pas fonctionné

                if (h < stat.min.relative)
                {
                    if (i + 1 < count)
                    {
                        var suivant = histo[i + 1];
                        if (suivant < h)
                            stat.min.relative = h;
                    }
                    else
                    {
                        if (motif > selectedCoeff.noCoeff || motif == selectedCoeff.none)
                            stat.min.relative = h;
                    }
                }

                //max
                if (h > stat.max.absolute)
                    stat.max.absolute = h;
                // calcul du max qui fonctionne
                if (h > stat.max.relative)
                {
                    if (i + 1 < count)
                    {
                        var suivant = histo[i + 1];
                        if (suivant > h)
                            stat.max.relative = h;
                    }
                    else
                    {
                        if (motif <= selectedCoeff.noCoeff)
                            stat.max.relative = h;
                    }
                }

                _nb++;
                if (_nb >= nb)
                    break;
            }

            return stat;
        }

        private decimal calcMin(int nb, bool sens)
        {
            decimal min = CoeffT;
            int _nb = 0;
            int count = histo.Count;
            for (int i = count - 1; i >= 0; i--)
            {
                var h = histo[i];

                if ((sens && h > min) || (!sens && h < min))
                {
                    // calcul du max qui fonctionne
                    if (sens)
                    {
                        if (i + 1 < count)
                        {
                            var suivant = histo[i + 1];
                            if (suivant > h)
                                min = h;
                        }
                    }
                    // calcul du plus faible qui n'a pas fonctionné
                    else
                        if (i + 1 < count)
                        {
                            var suivant = histo[i + 1];
                            if (suivant < h)
                                min = h;
                        }
                }

                _nb++;
                if (_nb >= nb)
                    break;
            }
            return min;
        }

        public decimal coeffTMin(int nb)
        {
            return calcMin(nb, false);
        }

        public decimal coeffTMax(int nb)
        {
            return calcMin(nb, true);
        }



    }
    public class CalcMedianne
    {

        const decimal PRECISION = 0.0000001m;
        const decimal EPSILON = 0.0000000000001m;
        const decimal EPSILON_LOG = EPSILON;
        private static int index;
        public static int Index { get { return index; } }


   
        public static DecimalIndex getMedianne(IList<decimal> list, decimal coeffMedianne)
        {
            return new DecimalIndex() { d = getMedianne_(list, coeffMedianne), index = index };
        }

        
 
        private static decimal getLn(decimal rapport)
        {
            if (rapport <= 0)
                return 0m;
            return Convert.ToDecimal(10 + Math.Log10(rapport));
        }
        private static decimal getRapport(decimal ln)
        {
            return Convert.ToDecimal(Math.Pow(10, ln - 10));
        }

        private static DecimalIndex calcmedianneVirt(IList<decimal> _list, decimal coeffMedianne, bool quasi)
        {

            int count = _list.Count;

            DecimalIndex ret = new DecimalIndex() { d = 0m, index = 0 }; // 0m; // decimal ret = int.MinValue;
            for (int i = 0; i < count; i++)
            {
                if (i > 0)
                {

                    _list.RemoveAt(count - i);
                }

                var aux = getMedianne_(_list, coeffMedianne);
                if (aux == 0m)
                    continue;
                // aux = getLn(aux);
                //decimal coeff = 1; 
                //if (count >2)
                //coeff = (decimal)(count - 2 - i) / (decimal)(count - 2); 
                decimal coeff = 1 - (decimal)i / (decimal)count; // (decimal)count - i / (decimal)count;
                if (quasi)
                    coeff *= coeff;
                aux = aux * coeff;
                if (aux > ret.d)
                {
                    ret.d = aux;
                    ret.index = index;
                }

                if (_list[count - i - 1] > 0m)
                    break;


            }

            //     if (ret == int.MinValue)
            //         return 0m;
            return ret;
        }


        public static decimal getMedianneLight0(IList<decimal> list, decimal coeffMedianne, bool quasi)
        {
            if (list.Count == 1)
                return getMedianne_(list, coeffMedianne);
            decimal ret = 0m;
            int count = list.Count;

            List<decimal> _list = new List<decimal>(list);
            // ret = getMedianne_(_list, coeffMedianne);
            decimal nb = 0m;
            for (int i = 0; i < count - 1; i++)
            {
                if (i > 0)
                    _list.RemoveAt(count - i);
                var aux = getMedianne_(_list, coeffMedianne);
                decimal coeff = count - 1 - i;
                if (quasi)
                    coeff *= coeff;
                ret += aux * coeff;
                nb += coeff;


            }
            ret /= nb;


            return ret;
        }
        private static decimal getMedianne_(IList<decimal> list, decimal coeffMedianne)
        {
            index = 0;
            if (list == null)
                throw new ArgumentException("liste nulle");
            int count = list.Count;
            if (count == 0)
                throw new ArgumentException("liste vide");
            if (coeffMedianne < 0 || coeffMedianne > 1)
                throw new ArgumentException("coeffMedianne doit être compris entre 0 et 1, valeur:" + coeffMedianne);
            if (count == 1)
                return list[0];
            if (coeffMedianne == 0)
                return list[0];
            if (coeffMedianne == 1)
            {
                index = count - 1;
                return list[count - 1];
            }

            var medianne = coeffMedianne * (count - 1);

            index = (int)medianne;
            int i1 = index + 1;
            var val0 = list[index];
            var val1 = list[i1];
            if (Math.Abs(medianne - Convert.ToDecimal(index)) < PRECISION)
                return val0;
            if (Math.Abs(medianne - i1) < PRECISION)
            {
                index = i1;
                return val1;
            }

            var dx = medianne - index;

          
            // var ret = val0 + pente * dx;


            // moyenne avec calcul de log
            var log0 = Math.Log(val0 + EPSILON_LOG);
            var log1 = Math.Log(val1 + EPSILON_LOG);
            // pente = log1 - log0;
            var log = log0 + (log1 - log0) * dx;
            return Math.Exp(log) - EPSILON_LOG;
          

        }

        //public static int getEquiv(IList<double> listRef, double target, int i0, int i1)
        //{
        //    var val0 = listRef[i0]; 
        //     var val1 = listRef[i1]; 
        //    if (i1 - i0 == 1)
        //    {
        //        // on prend le plus proche
        //        var delta0 = target - val0;
        //        var delta1 = val1 - target; 

        //        if (delta0 <= delta1)
        //            return i0;
        //        return i1; 
        //    }

        //    int imiddle = (i0 + i1) / 2;
        //    if (imiddle == i0)
        //        imiddle++; 
        //    var vmiddle = listRef[imiddle];

        //    if (vmiddle == target)
        //        return imiddle;
        //    if (Math.Abs(vmiddle - target) < PRECISION)
        //        return imiddle;

        //    if (vmiddle < target)
        //        return getEquiv(listRef, target, imiddle, i1);
        //    return getEquiv(listRef, target, i0, imiddle); 


        //}
    }
}]]></content>
  </file>
  <file path="\pdb.util\pdb.util.csproj">
    <content><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{C2B34CA9-3BB2-464F-8691-5F5B7CB2B997}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>pdb.util</RootNamespace>
    <AssemblyName>pdb.util</AssemblyName>
    <TargetFrameworkVersion>v4.5.1</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug|x64'">
    <DebugSymbols>true</DebugSymbols>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DebugType>full</DebugType>
    <PlatformTarget>x64</PlatformTarget>
    <CodeAnalysisLogFile>bin\Debug\pdb.util.dll.CodeAnalysisLog.xml</CodeAnalysisLogFile>
    <CodeAnalysisUseTypeNameInSuppression>true</CodeAnalysisUseTypeNameInSuppression>
    <CodeAnalysisModuleSuppressionsFile>GlobalSuppressions.cs</CodeAnalysisModuleSuppressionsFile>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSetDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\\Rule Sets</CodeAnalysisRuleSetDirectories>
    <CodeAnalysisRuleDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\FxCop\\Rules</CodeAnalysisRuleDirectories>
    <CodeAnalysisIgnoreBuiltInRules>false</CodeAnalysisIgnoreBuiltInRules>
    <CodeAnalysisFailOnMissingRules>false</CodeAnalysisFailOnMissingRules>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|x64'">
    <OutputPath>bin\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <Optimize>true</Optimize>
    <DebugType>pdbonly</DebugType>
    <PlatformTarget>x64</PlatformTarget>
    <CodeAnalysisLogFile>bin\Release\pdb.util.dll.CodeAnalysisLog.xml</CodeAnalysisLogFile>
    <CodeAnalysisUseTypeNameInSuppression>true</CodeAnalysisUseTypeNameInSuppression>
    <CodeAnalysisModuleSuppressionsFile>GlobalSuppressions.cs</CodeAnalysisModuleSuppressionsFile>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSetDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\\Rule Sets</CodeAnalysisRuleSetDirectories>
    <CodeAnalysisIgnoreBuiltInRuleSets>false</CodeAnalysisIgnoreBuiltInRuleSets>
    <CodeAnalysisRuleDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\FxCop\\Rules</CodeAnalysisRuleDirectories>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug|x86'">
    <PlatformTarget>x86</PlatformTarget>
    <OutputPath>bin\</OutputPath>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|x86'">
    <PlatformTarget>x86</PlatformTarget>
    <OutputPath>bin\</OutputPath>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="AsyncFileWriter.cs" />
    <Compile Include="BgDict.cs" />
    <Compile Include="Chrono.cs" />
    <Compile Include="CustomFormat.cs" />
    <Compile Include="CUtil.cs" />
    <Compile Include="DateUtil.cs" />
    <Compile Include="DecimalIndex.cs" />
    <Compile Include="DescBuilder.cs" />
    <Compile Include="Dict.cs" />
    <Compile Include="FileRegister.cs" />
    <Compile Include="Generic\Attributs\AttributeHelper.cs" />
    <Compile Include="Generic\Attributs\CustomAttribute.cs" />
    <Compile Include="Generic\Attributs\Db\DbAttributes.cs" />
    <Compile Include="Generic\Attributs\Db\SbAttributes.cs" />
    <Compile Include="Generic\Attributs\GlobalAttributes.cs" />
    <Compile Include="Generic\Attributs\Json\GlobalAttributes.cs" />
    <Compile Include="Generic\Attributs\NameAttributeBase.cs" />
    <Compile Include="Generic\Attributs\Sp\GlobalAttributes.cs" />
    <Compile Include="Generic\Attributs\Xml\XmlAttributes.cs" />
    <Compile Include="Generic\Encode\Getters.cs" />
    <Compile Include="Generic\Encode\JSON.cs" />
    <Compile Include="Generic\Encode\JsonEncoder.cs" />
    <Compile Include="Generic\Encode\JsonParser.cs" />
    <Compile Include="Generic\Encode\JsonSerializer.cs" />
    <Compile Include="Generic\Encode\JsonXmlEncoder.cs" />
    <Compile Include="Generic\Encode\SafeDictionary.cs" />
    <Compile Include="Generic\INode.cs" />
    <Compile Include="Generic\MappingException.cs" />
    <Compile Include="Generic\Parse\DbParser.cs" />
    <Compile Include="Generic\Parse\DbWrapper.cs" />
    <Compile Include="Generic\Parse\JsonParser.cs" />
    <Compile Include="Generic\Parse\Json\JsonBuilder.cs" />
    <Compile Include="Generic\Parse\Json\JsonParseException.cs" />
    <Compile Include="Generic\Parse\Json\JsonState.cs" />
    <Compile Include="Generic\Parse\Json\JsonStateDeuxPoints.cs" />
    <Compile Include="Generic\Parse\Json\JsonStateFinal.cs" />
    <Compile Include="Generic\Parse\Json\JsonStateIni.cs" />
    <Compile Include="Generic\Parse\Json\JsonStateName.cs" />
    <Compile Include="Generic\Parse\Json\JsonStateValue.cs" />
    <Compile Include="Generic\Parse\Json\JsonStateValueIni.cs" />
    <Compile Include="Generic\Parse\Json\JsonWrapper.cs" />
    <Compile Include="Generic\Parse\Node.cs" />
    <Compile Include="Generic\Parse\Parser.cs" />
    <Compile Include="Generic\Parse\ParserBase.cs" />
    <Compile Include="Generic\Parse\XmlParser.cs" />
    <Compile Include="Generic\Parse\XmlSerializer.cs" />
    <Compile Include="Generic\Parse\XmlWrapper.cs" />
    <Compile Include="Generic\TypeInfo.cs" />
    <Compile Include="Generic\Utils.cs" />
    <Compile Include="Generic\XmlParser.cs" />
    <Compile Include="Generic\XmlSerializer.cs" />
    <Compile Include="list\DictList.cs" />
    <Compile Include="DictLocation.cs" />
    <Compile Include="DisposableCounter.cs" />
    <Compile Include="FileUtil.cs" />
    <Compile Include="HashList.cs" />
    <Compile Include="ILogger.cs" />
    <Compile Include="list\LinkedList.cs" />
    <Compile Include="list\SequentialDict.cs" />
    <Compile Include="list\SequentialDictString.cs" />
    <Compile Include="Locker.cs" />
    <Compile Include="Logger.cs" />
    <Compile Include="LoggerConsole.cs" />
    <Compile Include="Math.cs" />
    <Compile Include="Medianne.cs" />
    <Compile Include="MemUtil.cs" />
    <Compile Include="misc.cs" />
    <Compile Include="OutputRecorder.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Queue.cs" />
    <Compile Include="serialize\Serializer.cs" />
    <Compile Include="serialize\TextSerializer.cs" />
    <Compile Include="StringUtil.cs" />
    <Compile Include="TextWriter.cs" />
    <Compile Include="ThreadUtil.cs" />
    <Compile Include="TimeSpan.cs" />
    <Compile Include="TuningBase.cs" />
    <Compile Include="XMLTool.cs" />
    <Compile Include="ZipUtil.cs" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>]]></content>
  </file>
  <file path="\PieceDb.Consolid\CalcDate.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using pdb.gen.conf;
using pdb.gen.Tuning;
using pdb.util;
using Math = pdb.util.Math; 

namespace pdb.gen
{

    /// <summary>
    /// Effectue les calculs de dates pour la sélection des pistes
    /// </summary>
    class CalcDate
    {
        public static int Period = 30;
        private static DateTime now = DateTime.Now;
        public static void refreshDate(DateTime now) { CalcDate.now = now; }
        // public static DateTime Now { get { return now; } }

        private static CDateComparer c_comparer = new CDateComparer();
        public static bool canPlay(List<DateTime> dates, DateTime now, TimeSpan a_ts, int a_rotBase)
        {
            if (dates.Count == 0)
                return true;
            bool l_bRet = true;
            for (int i = 1; i <= Period; i++)
            {
                l_bRet = canPlay(dates, now, i, a_rotBase, a_ts);
                if (!l_bRet)
                    return false;
            }
            return true;

        }

        public static void setRest(List<DateTime> dates, CRank rank)
        {
            rank.TimeRest = getRest(dates, rank);
            // return ret; 
        }

        public static decimal getRest(List<DateTime> dates, CRank rank)
        {
            ConfGen conf = CConf.ConfGen;
            decimal dt0 = Convert.ToDecimal(conf.Vie.TotalMilliseconds);
            decimal exp = conf.Exp;
            decimal coeff = CTuning.Calc(rank, CConf.Select);

            rank.TimeCoeff = coeff;
            decimal ret = 0;

            foreach (DateTime date in dates)
            {
                decimal _dt = (now - date).TotalMilliseconds();
                ret += getRest(_dt, dt0, coeff, exp);
                //TimeSpan _dt = now - date;
                //if (_dt.TotalDays < 0)
                //    continue;
                //double dt = _dt.TotalMilliseconds / dt0.TotalMilliseconds;
                //// CTuning.RapportNorm(rank, CConf.ConfGen.Quality);

                //dt *= coeff;

                //double val = CTuning.getRest(dt, CConf.ConfGen.Courbe);


                //if (val < 0)
                //    continue;
                //val = Math.Pow(val, exp);
                //ret += val;

            }

            //  return Math.Round(ret,3);
            return ret;
        }

        public static decimal getRest(List<DateTime> dates, decimal dt0, decimal coeff, decimal exp)
        {
            decimal ret = 0;
            foreach (DateTime date in dates)
            {
                var _ts = (now - date).TotalMilliseconds.toDecimal();
                ret += getRest(_ts, dt0, coeff, exp);
            }
            return ret;
        }

        public static decimal getRest(decimal _dt, decimal dt0, decimal coeff, decimal exp)
        {
            // TimeSpan _dt = now - date;
            //if (_dt.TotalDays < 0)
            //    return 0; 
            var dt = _dt / dt0;
            // CTuning.RapportNorm(rank, CConf.ConfGen.Quality);

            dt *= coeff;

            var val = CTuning.getRest(dt, CConf.ConfGen.Courbe);


            if (val < 0)
                return 0;
            if (exp != 1m)
                val = Convert.ToDecimal(Math.Pow(val, exp));

            return val;
        }

        public static decimal getRest(decimal dt0, decimal coeff, decimal exp)
        {
            return getRest(0, dt0, coeff, exp);
        }

        public static decimal getEquiv(List<DateTime> dates, Piece piece, timeMode timeMode)
        {
            sort(dates);
            int count = dates.Count;
            if (count == 0)
                return decimal.MaxValue;
            decimal virt = 0;
            if (count == 1 || timeMode == timeMode.last)
            {
                virt = (now - dates[0]).TotalMilliseconds.toDecimal();
            }
            else
            {

                var calc = new CalcEquiv(dates, piece, now);
                virt = calc.getEquiv();
            }

            if (timeMode == Tuning.timeMode.equivNorm || timeMode == Tuning.timeMode.deltaNorm)
            {
                var coeff = CTuning.Calc(piece.Rank, CConf.Select);
                virt = virt * coeff;
            }



            return virt;

            //ConfGen conf = CConf.ConfGen;
            //TimeSpan dt0 = conf.Vie;
            //double exp = conf.Exp;
            //double coeff = CTuning.Calc(rank, CConf.Select);

            //rank.TimeCoeff = coeff;
            //double ret = 0;

            //foreach (DateTime date in dates)
            //{
            //    ret += getRest(date, dt0, coeff, exp);
            //}

            //// on repasse en arriere

            //return now - dates[0];
        }

        public static DateTime getLastModif(List<DateTime> dates)
        {
            if (dates.Count == 0)
                return System.DateTime.MaxValue;
            sort(dates);
            return dates[0];

        }


        private static bool canPlay(List<DateTime> dates, DateTime now, int a_base, int a_rotBase, TimeSpan a_ts)
        {

            sort(dates);
            var l_tot = 0m;


            TimeSpan l_t = getTimeSpan(a_base, a_rotBase, a_ts);



            foreach (System.DateTime l_date in dates)
            {
                l_tot += Rest(now, l_date, l_t);

            }
            if (l_tot <= getMin(a_base))
            {
                return true;
            }
            else
            {
                // Console.Write(a_base.ToString() + " " + l_t.ToString() + " " + l_tot.ToString(".##") + "/" + getMin(a_base));
                return false;
            }

        }



        private static decimal getMin(int a_base)
        {
            return (a_base - 1) / 2.0m;
        }

        public static decimal Rest(DateTime a_dateFinal, DateTime a_dateOrg, TimeSpan a_ts)
        {
            TimeSpan l_age = a_dateFinal.Subtract(a_dateOrg);
            if (l_age > a_ts)
                return 0;
            return (a_ts.Ticks - l_age.Ticks).toDecimal() / a_ts.Ticks.toDecimal();
        }

        public static TimeSpan getTimeSpan(int a_serial, int a_base, TimeSpan a_ts0)
        {
            try
            {
                return new TimeSpan(a_ts0.Ticks * a_serial * a_serial * a_base);
            }
            catch
            {
                return new TimeSpan(long.MaxValue);
            }
        }



        private static void sort(List<DateTime> dates)
        {
            dates.Sort(c_comparer);
        }

        private class CDateComparer : IComparer<System.DateTime>
        {

            public int Compare(System.DateTime x, System.DateTime y)
            {
                return -1 * System.DateTime.Compare(x, y);
            }
        }
    }
}
]]></content>
  </file>
  <file path="\PieceDb.Consolid\CalcEquiv.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using pdb.gen.Tuning;
using pdb.gen.conf;
using pdb.util;
using pdb.obj;
using Math = System.Math; 

namespace pdb.gen
{
    class CalcEquiv
    {
        private decimal r0;
        private decimal r1;
        private decimal r2;

        private decimal r;
        //private DateTime t0;
        //private DateTime t1;
        //private DateTime t2;

        private decimal ts0;
        private decimal ts1;
        private decimal ts2;
        // private TimeSpan ts1; 

        private List<DateTime> dates;
        private Piece piece;
        private static decimal dt0;
        private static decimal exp;
        private static DateTime now;
        private decimal coeff;
        public static decimal coeffDelta = 0.0001m;
        public static int MAX_STEP = 30000; 
      

        public CalcEquiv(List<DateTime> dates, Piece piece, DateTime now)
        {
            this.dates = dates;
            this.piece = piece;
            ConfGen conf = CConf.ConfGen;
            dt0 = Convert.ToDecimal(conf.Vie.TotalMilliseconds);
            exp = conf.Exp;
            coeff = CTuning.Calc(piece.Rank, CConf.Select);
            CalcEquiv.now = now;
        }

        public decimal getEquiv()
        {
            if (dates.Count == 0)
                return decimal.MinValue; 
            if (dates.Count == 1)
                return Convert.ToDecimal((now - dates[0]).TotalMilliseconds);
            r = CalcDate.getRest(dates, dt0, coeff, exp);

            // calcul t=0 normalement => 1
            var _r = CalcDate.getRest(dt0, coeff, exp);


            if (r > _r)
            {
                // on est en négatif
                //t0 = now;
                ts0 = 0;
                r0 = _r;
                var mode = CConf.ConfGen.Courbe.Mode;
                if (mode == listMode.rapport)
                    ts2 = -(CConf.ConfGen.Vie.TotalMilliseconds() - 6000.0m) / coeff;
                else
                    ts2 = -10m * CConf.ConfGen.Vie.TotalMilliseconds() / coeff;
                r2 = CalcDate.getRest(ts2, dt0, coeff, exp);
            }
            else
            {
                // ok genre 0.8 ça correspondrait à quel temps écoulé ? 

                ts0 = (now - dates[0]).TotalMilliseconds();
                r0 = CalcDate.getRest(ts0, dt0, coeff, exp);


                ts2 = 0;
                r2 = _r;
            }
            int i = 0;
            while (true)
            {
                i++; 
                var ms0 = ts0;
                var ms2 = ts2;
                var delta = Math.Abs(ms2 - ms0); 

                ts1 = 0.5m * (ms0 + ms2);

                if (delta < coeffDelta * Math.Abs(ms0))
                    return ts1;
                if (delta < coeffDelta * Math.Abs(ms2))
                    return ts1;

               
                if (i > MAX_STEP)
                {
                    misc.log("{0} {1} {2} {3} {4}", i,piece,delta, ms0,ms2);
                    return ts1;
                }




                //if (ts0.FormatCustom(3).Equals(ts2.FormatCustom(3)))
                //    return ts1;

                r1 = CalcDate.getRest(ts1, dt0, coeff, exp);

                if (r1 > r)
                {
                    ts2 = ts1;
                    r2 = r1;
                }
                else
                {
                    ts0 = ts1;
                    r0 = r1;
                }
              
            }

        }


    }
}
]]></content>
  </file>
  <file path="\PieceDb.Consolid\pdb.gen.csproj">
    <content><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{DFC524F3-50BB-40E3-BAC0-CA56950BBB5A}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>pdb.gen</RootNamespace>
    <AssemblyName>pdb.gen</AssemblyName>
    <TargetFrameworkVersion>v4.5.1</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug|x64'">
    <DebugSymbols>true</DebugSymbols>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DebugType>full</DebugType>
    <PlatformTarget>x64</PlatformTarget>
    <CodeAnalysisLogFile>bin\pdb.gen.dll.CodeAnalysisLog.xml</CodeAnalysisLogFile>
    <CodeAnalysisUseTypeNameInSuppression>true</CodeAnalysisUseTypeNameInSuppression>
    <CodeAnalysisModuleSuppressionsFile>GlobalSuppressions.cs</CodeAnalysisModuleSuppressionsFile>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSetDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\\Rule Sets</CodeAnalysisRuleSetDirectories>
    <CodeAnalysisRuleDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\FxCop\\Rules</CodeAnalysisRuleDirectories>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|x64'">
    <OutputPath>bin\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <Optimize>true</Optimize>
    <DebugType>pdbonly</DebugType>
    <PlatformTarget>x64</PlatformTarget>
    <CodeAnalysisLogFile>bin\Release\pdb.gen.dll.CodeAnalysisLog.xml</CodeAnalysisLogFile>
    <CodeAnalysisUseTypeNameInSuppression>true</CodeAnalysisUseTypeNameInSuppression>
    <CodeAnalysisModuleSuppressionsFile>GlobalSuppressions.cs</CodeAnalysisModuleSuppressionsFile>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSetDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\\Rule Sets</CodeAnalysisRuleSetDirectories>
    <CodeAnalysisIgnoreBuiltInRuleSets>false</CodeAnalysisIgnoreBuiltInRuleSets>
    <CodeAnalysisRuleDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\FxCop\\Rules</CodeAnalysisRuleDirectories>
    <CodeAnalysisIgnoreBuiltInRules>false</CodeAnalysisIgnoreBuiltInRules>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug|x86'">
    <DebugSymbols>true</DebugSymbols>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DebugType>full</DebugType>
    <PlatformTarget>x86</PlatformTarget>
    <CodeAnalysisLogFile>bin\pdb.gen.dll.CodeAnalysisLog.xml</CodeAnalysisLogFile>
    <CodeAnalysisUseTypeNameInSuppression>true</CodeAnalysisUseTypeNameInSuppression>
    <CodeAnalysisModuleSuppressionsFile>GlobalSuppressions.cs</CodeAnalysisModuleSuppressionsFile>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSetDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\\Rule Sets</CodeAnalysisRuleSetDirectories>
    <CodeAnalysisIgnoreBuiltInRuleSets>false</CodeAnalysisIgnoreBuiltInRuleSets>
    <CodeAnalysisRuleDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\FxCop\\Rules</CodeAnalysisRuleDirectories>
    <CodeAnalysisIgnoreBuiltInRules>false</CodeAnalysisIgnoreBuiltInRules>
    <CodeAnalysisFailOnMissingRules>false</CodeAnalysisFailOnMissingRules>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|x86'">
    <OutputPath>bin\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <Optimize>true</Optimize>
    <DebugType>pdbonly</DebugType>
    <PlatformTarget>x86</PlatformTarget>
    <CodeAnalysisLogFile>bin\Release\pdb.gen.dll.CodeAnalysisLog.xml</CodeAnalysisLogFile>
    <CodeAnalysisUseTypeNameInSuppression>true</CodeAnalysisUseTypeNameInSuppression>
    <CodeAnalysisModuleSuppressionsFile>GlobalSuppressions.cs</CodeAnalysisModuleSuppressionsFile>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSetDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\\Rule Sets</CodeAnalysisRuleSetDirectories>
    <CodeAnalysisRuleDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\FxCop\\Rules</CodeAnalysisRuleDirectories>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="albums\Album.cs" />
    <Compile Include="albums\AlbumComparer.cs" />
    <Compile Include="albums\AlbumMedianne.cs" />
    <Compile Include="albums\Albums.cs" />
    <Compile Include="albums\StackAlbum.cs" />
    <Compile Include="albums\VirtualAlbumPiece.cs" />
    <Compile Include="CalcEquiv.cs" />
    <Compile Include="Consolid.cs" />
    <Compile Include="CLegacyListWriter.cs" />
    <Compile Include="CRank.cs" />
    <Compile Include="IListWriter.cs" />
    <Compile Include="ListPiece.cs" />
    <Compile Include="CPieceComparer.cs" />
    <Compile Include="ListSelection.cs" />
    <Compile Include="ListWriterMgr.cs" />
    <Compile Include="pertinence\TrackBuilder.cs" />
    <Compile Include="Piece.cs" />
    <Compile Include="CalcDate.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="stat\ClassStruct.cs" />
    <Compile Include="stat\Condenseur.cs" />
    <Compile Include="stat\DynamicStatBuilder.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="stat\MedianneValue.cs" />
    <Compile Include="stat\NewClassement.cs" />
    <Compile Include="stat\StatBuilder.cs" />
    <Compile Include="stat\StatConteneur.cs" />
    <Compile Include="TrackList.cs" />
    <Compile Include="Tuning\CConf.cs" />
    <Compile Include="Tuning\CConfQL.cs" />
    <Compile Include="Tuning\CConfSort.cs" />
    <Compile Include="Tuning\ConfAlbumSort.cs" />
    <Compile Include="Tuning\ConfGen.cs" />
    <Compile Include="Tuning\CTuning.cs" />
    <Compile Include="Tuning\Export.cs" />
    <Compile Include="Tuning\GroupingDisplay.cs" />
    <Compile Include="Tuning\Import.cs" />
    <Compile Include="Virtuel\VirtualPiece.cs" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\pdb.ordo\pdb.ordo.csproj">
      <Project>{30823D1D-851C-456B-AC4C-B0BEEC173361}</Project>
      <Name>pdb.ordo</Name>
    </ProjectReference>
    <ProjectReference Include="..\pdb.util\pdb.util.csproj">
      <Project>{C2B34CA9-3BB2-464F-8691-5F5B7CB2B997}</Project>
      <Name>pdb.util</Name>
    </ProjectReference>
    <ProjectReference Include="..\PieceDb.obj\pdb.obj.csproj">
      <Project>{9B849072-2B8E-4CE4-8AD7-D173724A9644}</Project>
      <Name>pdb.obj</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup />
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>]]></content>
  </file>
  <file path="\PieceDb.Consolid\albums\Album.cs">
    <content><![CDATA[using System.Collections.Generic;
using pdb.util;
using System;
using System.Globalization;
using pdb.gen.Tuning;
using pdb.gen.conf;
using System.Linq;

namespace pdb.gen.albums
{


    public class Album
    {

        private string name;
        private static decimal medianne = 0.5m;
        private static decimal medianneRest = 0.5m;
        // public static decimal Medianne { get { return medianne; } set { medianne = value; } }
        private decimal classementValue;
        private decimal classementValueLight;
        private decimal classMoy; public decimal ClassementMoy { get { return classMoy; } }
        public decimal ClassementValue { get { return classementValue; } }
        public decimal ClassementValueLight { get { return classementValueLight; } }
        private decimal durationValue = 0;
        public decimal DurationValue { get { return durationValue; } }
        private static ConfGen conf = CConf.ConfGen;
        private bool _virtual;
        public bool Virtual { get { return _virtual; } set { _virtual = value; } }
        private int stackValue;
        public int StackValue { get { return stackValue; } set { stackValue = value; } }
        public int StackIndex { get; set; }
        //  private int rankCorrig; public int Rank2 { get { return rankCorrig; } set { rankCorrig = value; } }
        private Piece next;

        public Piece Next
        {
            get { return next; }
            set
            {
                next = value;
            }
        }




        private List<Piece> list = new List<Piece>();
        private static int _sID = 0;
        private int _dID;


        public Album(string name)
        {
            _sID++;
            _dID = _sID;
            this.name = name;
            m_rank.init();
        }

        public string Name { get { return name; } }

        public override string ToString()
        {
            return name;
        }

        private string equiv = "";
        public string Equiv { get { return equiv; } }

        private string equivLight = "";
        public string EquivLight { get { return equivLight; } }

        private string equivLight0 = "";
        public string EquivLight0 { get { return equivLight0; } }

        private string moyenne = "";
        public string Moyenne { get { return moyenne; } }

        public bool Moved { get; set; }

        //private Piece equiv;



        public bool add(Piece piece)
        {
            if (list.Contains(piece))
                return false;
            if (piece.Enabled)
                atLeastOneEnabled = true;
            list.Add(piece);
            piece.PieceAlbum = this;
            return true;
        }

        private HashList<Piece> _tracksSortByClassement;
        public HashList<Piece> Tracks
        {
            get
            {
                if (_tracksSortByClassement == null)
                {
                    var l = new List<Piece>(list);
                    l.Sort(new PieceClassementComparer());
                    _tracksSortByClassement = new HashList<Piece>(l);
                }
                return _tracksSortByClassement;
            }
        }

        public int IndexClass(Piece p)
        {
            return Tracks.IndexOf(p);
        }

        //public List<Piece> TracksReverse
        //{
        //    get
        //    {
        //        var l = new List<Piece>(list);
        //        l.Sort(new PieceClassementComparerInv());
        //        return l;
        //    }
        //}
        HashList<Piece> trackSortedByExportPriority;
        private class PieceExportComparer : IComparer<Piece>
        {
            private HashList<Piece> source;
            private Piece next;
            private int inext = -1;
            private bool sortlasts;
            private bool sortFirsts;
            private Album album;
            public PieceExportComparer(Album album, HashList<Piece> source, Piece next)
            {
                this.album = album;
                this.source = source;
                this.next = next;
                if (next != null)
                    inext = source.IndexOf(next);
                sortlasts = CConf.Export.sortLasts;
                sortFirsts = CConf.Export.sortFirsts;

            }
            public int Compare(Piece x, Piece y)
            {
                //    t = 1.CompareTo(2) -> -1              
                //  t = true.CompareTo(false) ->1
                if (x == y)
                    return 0;
                if (x == next)
                    return -1;
                if (y == next)
                    return 1;
                int ix = source.IndexOf(x);
                int iy = source.IndexOf(y);
                if (ix == iy)
                    return 0;

                if (next != null)
                {
                    int cmp = 0; ;
                    int dx = ix - inext;
                    int dy = iy - inext;

                    cmp = (x.Enabled.CompareTo(y.Enabled));
                    if (cmp != 0)
                    {
                        if (sortFirsts)
                        {
                            //true puis false;
                            return -cmp;
                        }
                        if (sortlasts)
                        {
                            if (!x.Enabled && x.RapportClassement < album.ClassementValueLight)
                                return 1;
                            if (!y.Enabled && y.RapportClassement < album.ClassementValueLight)
                                return -1;
                        }
                    }

                    //if (dx * dy < 0)
                    //{
                    //    if (sortlasts)
                    //    {
                    //        if (dx > 0 && !x.Enabled)
                    //            return 1;
                    //        if (dy > 0 && !y.Enabled)
                    //            return -1;
                    //    }
                    //    if (sortFirsts)
                    //    {
                    //        if (dx < 0 && !x.Enabled)
                    //            return 1;
                    //        if (dy < 0 && !y.Enabled)
                    //            return -1;
                    //    }
                    //}

                    cmp = System.Math.Abs(dx).CompareTo(System.Math.Abs(dy));
                    if (cmp != 0)
                        return cmp;
                    //ici même distance
                    cmp = x.Enabled.CompareTo(y.Enabled);
                    if (cmp != 0) return -cmp;

                    cmp = ix.CompareTo(iy);
                    return cmp;
                }

                return source.IndexOf(x).CompareTo(source.IndexOf(y));
            }
        }
        public HashList<Piece> TrackSortedByExportPriority
        {
            get
            {
                if (trackSortedByExportPriority == null)
                {

                    var source = new HashList<Piece>(Tracks);
                    if (next == null)
                        trackSortedByExportPriority = source;
                    else
                    {
                        var cmp = new PieceExportComparer(this, source, next);
                        var l = source.List;
                        l.Sort(cmp);
                        trackSortedByExportPriority = new HashList<Piece>(l);


                    }



                    //var source = Tracks;
                    //if (next == null)
                    //    trackSortedByExportPriority = new HashList<Piece>(source);
                    //else
                    //{
                    //    trackSortedByExportPriority = new HashList<Piece>();
                    //    int indexNext = source.IndexOf(next);
                    //    trackSortedByExportPriority.Add(next);

                    //    int count = source.Count;
                    //    int offset = 0;
                    //    while (true)
                    //    {
                    //        offset++;
                    //        bool _continue = false;
                    //        // on prend le précédent et le suivant
                    //        var index = indexNext - offset;

                    //        if (index >= 0 && index < count)
                    //        {
                    //            trackSortedByExportPriority.Add(source[index]); _continue = true;
                    //        }
                    //        index = indexNext + offset;
                    //        if (index >= 0 && index < count)
                    //        {
                    //            trackSortedByExportPriority.Add(source[index]); _continue = true;
                    //        }

                    //        if (!_continue)
                    //            break;
                    //  }

                    //}
                }
                return trackSortedByExportPriority;
            }

        }



        public int IndexExport(Piece p)
        {
            return TrackSortedByExportPriority.IndexOf(p);
        }
        public List<Piece> TrackByNumber
        {
            get
            {
                var l = new List<Piece>(list);
                l.Sort(new PieceTrackNumberComparer());
                return l;
            }
        }
        /// <summary>
        /// Au moins un track est classé
        /// </summary>
        private bool classed;
        /// <summary>
        /// Au moins un track est classé
        /// </summary>
        public bool Classed { get { return classed; } }

        /// <summary>
        /// Le track Selectionné est malheureusement absent
        /// </summary>
        public bool Absent
        {
            get
            {
                if (next == null)
                    return true;
                if (FileRegister.Exist(next.Location))
                    return false;
                return true;
            }
        }

        private bool atLeastOneEnabled;
        public bool AtLeastOneEnabled { get { return atLeastOneEnabled; } }

        private selectedCoeff selectedCoeff;
        public selectedCoeff SelectedCoeff { get { return selectedCoeff; } }



        public void makeSort(ConfAlbumSort conf, ConfMedianne mode, ConfMedianne mode0) //IList<double> reference, IList<Piece> pieces)
        {
            try
            {
                selectedCoeff = util.selectedCoeff.noCoeff;
                //if (name == "The College Dropout")
                //{
                //}
                decimal offset = Album.conf.AlbumMoyOffset;
                int count = list.Count;
                if (count == 0)
                    return;
                list.Sort(new PieceSortComparer());
                var listSortedValues = new List<decimal>();
                for (int i = 0; i < count; i++)
                {
                    listSortedValues.Add(list[i].Rank.SortValue);
                    if (!classed && list[i].isClassListNumeric) // && FileRegister.Exist(list[i].Location))
                        classed = true;
                }

                m_rank.SortValue = CalcMedianne.getMedianne(listSortedValues, medianne).d;

                listSortedValues = new List<decimal>();
                list.Sort(new PieceDurationValueComparer());
                for (int i = 0; i < count; i++)
                    listSortedValues.Add(list[i].Duration.TotalMilliseconds());
                durationValue = CalcMedianne.getMedianne(listSortedValues, medianne).d;
                decimal moy = 0m;
                #region calcul brut
                #region init
                for (int i = 0; i < count; i++)
                {
                    var p = list[i];
                    var rapportClassement = p.RapportClassement;
                    //if (coeffEnabled != 1m && p.Enabled)
                    //{
                    //    rapportClassement /= coeffEnabled;
                    //}
                    p.setClassementVirtuel(list[i].RapportClassement);

                    list[i].eraseInfoMedianne();

                    moy += rapportClassement;
                    if (offset > 0m && rapportClassement > 0.0m)
                        moy += offset;
                }

                list.Sort(new PieceClassementComparer());
                //listSortedValues = new List<decimal>();
                //for (int i = 0; i < count; i++)
                //    listSortedValues.Add(list[i].VirtualClassement);

                #endregion

                if (count > 0)
                    moy /= count;
                classMoy = moy;



                var med = AlbumMedianne.getMedianne(new List<Piece>(list), medianne);
                classementValue = med.d;
                if (classementValue > 0m)
                    list[med.index].Medianne = true;

                var _med0 = AlbumMedianne.getMedianneLight(new List<Piece>(list), conf, mode0, false);




                equivLight0 = Piece.getClassementEquiv(_med0.d);

                #endregion
                #region calcul virtuel
                #region init (prise en compte coeff des enabled)
                var coeffEnabled = conf.coeffEnabled;
                for (int i = 0; i < count; i++)
                {
                    var p = list[i];
                    var rapportClassement = p.RapportClassement;
                    if (coeffEnabled != 1m && p.Enabled)
                    {
                        rapportClassement /= coeffEnabled;
                    }
                    p.setClassementVirtuel(rapportClassement);
                    p.setClassementVirtuel2(rapportClassement);
                }
                list.Sort(new PieceClassementComparer());
                #endregion
                int i0 = 0;
                AlbumMedianne.buildVirtual(new List<Piece>(list), mode, mode.Min, conf, false, ref i0);

                med = AlbumMedianne.getMedianneLight(new List<Piece>(list), conf, mode, true);
                classementValueLight = med.d;

                #endregion

                equiv = Piece.getClassementEquiv(classementValue); // (10000 * m_rank.SortValue).ToString("00000.0", cu); 


                moyenne = Piece.getClassementEquiv(classMoy);
                var modeMin = mode.cmpMin;


                if (modeMin == util.modeMin.orphelin)
                {
                    Piece min = null;
                    decimal _min = int.MaxValue;
                    foreach (Piece p in list)
                    {
                        var v = p.RapportClassement;

                        if (p.Enabled) // && FileRegister.Exist(p.Location))
                        {
                            if (v < _min)
                            {
                                _min = v;
                                min = p;
                            }
                        }
                    }

                    if (min != null)
                    {
                        Next = min;
                        _min = min.VirtualClassement2;
                        if (_min > classementValueLight)
                            classementValueLight = _min;
                    }
                }
                else if (modeMin == util.modeMin.toujours)
                {
                    Piece nextZero = null;

                    Piece min1 = null;
                    Piece min2 = null;
                    Piece min = null;
                    decimal _min1 = int.MaxValue;
                    decimal _min2 = int.MaxValue;
                    foreach (Piece p in list)
                    {
                        var v1 = p.VirtualClassement;
                        var v2 = p.VirtualClassement2;

                        if (p.Enabled) // && FileRegister.Exist(p.Location))
                        {
                            if (v1 == 0 || v2 == 0 || (conf.oldAsZero && !p.LastClassementRecent)) // || !p.LastClassementRecent)
                            {
                                if (nextZero == null)
                                    nextZero = p;
                            }

                            if (v1 > 0 && v1 < _min1)
                            {
                                _min1 = v1;
                                min1 = p;
                            }

                            if (v2 > 0 && v2 < _min2)
                            {
                                _min2 = v2;
                                min2 = p;
                            }
                        }
                    }
                    decimal _min = 0;
                    if (_min1 <= _min2)
                    {
                        min = min1;
                        _min = _min1;
                    }
                    else
                    {
                        min = min2;
                        _min = _min2;
                    }

                    if (nextZero != null)
                    {
                        // le min trouvé est éventuellement tres élevé (pas prise en compte des éléments non encore notés
                        // j'applique le seuil que s'il est inférieur à la médiane
                        if (_min < classementValueLight)
                        {
                            Next = min;
                            classementValueLight = _min;

                            if (_min < _min1)
                                selectedCoeff = selectedCoeff.min; // selectedByCoeff2 = true;
                        }
                        else
                        {
                            var p = list[med.index];
                            if (_med0.d > med.d) // if (p.CoeffVirtuel > 1)
                                selectedCoeff = selectedCoeff.main; // selectedByCoeff = true; 
                            Next = nextZero;
                        }
                    }
                    else
                    {
                        // tous notés => on prend le plus faible
                        if (min != null)
                        {
                            classementValueLight = _min;
                            // if (min.CoeffVirtuel2 > 1) // if (min.CoeffVirtuel2 > 1)
                            if (_min < _min1)
                                selectedCoeff = selectedCoeff.min; //selectedByCoeff2 = true;
                        }
                        Next = min;
                    }

                }

                //if (modeMin > modeMin.non)
                //{
                //    int nb = 0;
                //    Piece min = null;
                //    decimal _min = int.MaxValue;
                //    foreach (Piece p in list)
                //    {
                //        var v = p.RapportClassement;
                //        if (v > 0 && !p.Enabled)
                //            nb++;
                //        if (modeMin == util.modeMin.orphelin || v > 0)
                //        {
                //            if (p.Enabled && FileRegister.Exist(p.Location))
                //            {

                //                if (v < _min)
                //                {
                //                    _min = v;
                //                    min = p;
                //                }
                //            }
                //        }
                //    }

                //    if (min != null)
                //    {
                //        _min = min.VirtualClassement;
                //        if (nb > 0)
                //            _min *= (decimal)nb / (decimal)count;
                //        if (modeMin == modeMin.toujours || _min > classementValueLight)
                //            classementValueLight = _min;
                //    }


                //}
                equivLight = Piece.getClassementEquiv(classementValueLight);


            }
            catch (Exception ex)
            {
                misc.log("impossible de faire le makeSort de l'album " + name + " " + ex.ToString());
            }



        }



        public decimal getTrackSortValue(int index)
        {
            if (index < 0 || index >= list.Count)
                return 0;
            return list[index].RapportClassement;
        }

        decimal firstTrackSortValue = -1;
        public decimal getFirstTrackSortValue()
        {
            if (firstTrackSortValue == -1)
            {
                int count = list.Count;
                if (count == 0)
                    return -1;
                var _list = new List<Piece>(list);
                _list.Sort(new PieceSortComparer());
                firstTrackSortValue = _list[count - 1].Rank.SortValue;
            }
            return firstTrackSortValue;
        }

        public void makeSelection()
        {
            list.Sort(new PieceRestComparer());
            var listSortedValues = new List<decimal>();
            for (int i = 0; i < list.Count; i++)
                listSortedValues.Add(list[i].Rank.TimeRest);
            m_rank.TimeRest = CalcMedianne.getMedianne(listSortedValues, medianneRest).d;
        }

        public List<Piece> Sort()
        {
            var _list = new List<Piece>(list);
            _list.Sort(new PieceInAlbumComparer());
            return _list;
        }

        public TimeSpan Duration
        {
            get
            {
                TimeSpan d = new TimeSpan();
                foreach (Piece piece in list)
                    d += piece.Duration;
                return d;
            }
        }


        #region Rank
        private CRank m_rank = new CRank();

        public CRank Rank { get { return m_rank; } }

        private void initRank()
        {
            m_rank.init();
        }

        public int QRank
        {
            get { return m_rank.Quality; }
            set { m_rank.Quality = value; }
        }

        public int LRank
        {
            get { return m_rank.Lenght; }
            set { m_rank.Lenght = value; }
        }

        public int QLRank
        {
            get { return m_rank.Twice; }
            set { m_rank.Twice = value; }
        }


        #endregion

        #region tri



        #endregion

        public void sortVirtual()
        {
            list.Sort(new PieceInVirtualAlbumComparer());
            int nb = 0;
            foreach (var piece in list)
            {
                nb++;
                piece.TrackNumber = nb;
            }
        }

        public override bool Equals(object obj)
        {
            var o = obj as Album;
            if (o == null)
                return false;
            return name.Equals(o.name);
        }
        public override int GetHashCode()
        {
            return name.GetHashCode();
        }

        public DateTime? UpdateClassement
        {
            get
            {
                DateTime? dt = null;
                foreach (Piece p in new List<Piece>(list))
                {
                    var _dt = p.UpdateClassement; // CalcDate.getLastModif(p.DatesClassement);
                    if (_dt != null && (dt == null || _dt > dt))
                        dt = _dt;
                }
                return dt;
            }
        }

        public DateTime? LastRead
        {
            get
            {
                DateTime? dt = null;
                foreach (Piece p in list)
                {
                    var _dt = p.LastRead; // CalcDate.getLastModif(p.DatesClassement);
                    if (_dt != null && (dt == null || _dt > dt))
                        dt = _dt;
                }
                return dt;
            }
        }
    }
}
]]></content>
  </file>
  <file path="\PieceDb.Consolid\albums\AlbumComparer.cs">
    <content><![CDATA[using System.Collections.Generic;
using System.IO;
using System;
using pdb.gen.conf;
using pdb.gen.Tuning;
using pdb.util;

namespace pdb.gen.albums
{
    //public enum albumSortMode
    //{
    //    /// <summary>
    //    /// tri sur moyenne quand aucun des albums n'a défini sa médianne
    //    /// </summary>
    //    strict,
    //    /// <summary>
    //    /// tri sur medianne quand les deux albums ont défini leur médianne, sinon tri sur moyenne
    //    /// </summary>
    //    mix,
    //    /// <summary>
    //    /// Tri sur medianne quand les deux albums ont défini leur médianne, sinon tri sur medianne light
    //    /// </summary>
    //    mixLight,
    //    /// <summary>
    //    /// Tri sur medianne light quand les deux albums ont défini leur médianne, sinon tri sur moyenne
    //    /// </summary>
    //    mixLight2,
    //    /// <summary>
    //    /// Calcul médianne quasi strict, qq miettes pour éviter le zero
    //    /// </summary>
    //    medQuasi,
    //    /// <summary>
    //    /// Calcul Médianne moins strict
    //    /// </summary>
    //    medLight,
    //    /// <summary>
    //    /// Calcul medLight, on virtualise un morceau au plus pour avoir une estimation basse
    //    /// </summary>
    //    medLightSafe,
    //    /// <summary>
    //    /// Calcul medLight, on virtualise jusqu'à deux morceaux pour avoir une estimation basse
    //    /// </summary>
    //    medLightSafe2,
    //    /// <summary>
    //    /// Calcul medLight, on virtualise jusqu'à trois morceaux pour avoir une estimation basse
    //    /// </summary>
    //    medLightSafe3,
    //    /// <summary>
    //    /// Calcul medLight, on virtualise jusqu'à 4 morceaux pour avoir une estimation basse
    //    /// </summary>
    //    medLightSafe4,
    //    /// <summary>
    //    /// Calcul medLight, on virtualise jusqu'à 5 morceaux pour avoir une estimation basse
    //    /// </summary>
    //    medLightSafe5,
    //    /// <summary>
    //    /// Calcul medLight, on virtualise jusqu'à 6 morceaux pour avoir une estimation basse
    //    /// </summary>
    //    medLightSafe6,
    //    /// <summary>
    //    /// Calcul medLight, on virtualise jusqu'à 10 morceaux pour avoir une estimation basse
    //    /// </summary>
    //    medLightSafe10,
    //    /// <summary>
    //    /// tri uniquement sur la moyenne
    //    /// </summary>
    //    light

    //}
    class AlbumClassComparer : IComparer<Album>
    {
        private ConfAlbumSort mode;
        public AlbumClassComparer(ConfAlbumSort mode)
        {
            this.mode = mode;
        }
        private void calc(ref decimal xx, ref decimal yy, Album x, Album y, ConfMedianne cmpt)
        {
            switch (cmpt.type)
            {
                case medianneMode.none:
                    break;
                case medianneMode.strict: xx = x.ClassementValue; yy = y.ClassementValue;
                    break;
                case medianneMode.light: xx = x.ClassementValueLight; yy = y.ClassementValueLight;
                    break;
                case medianneMode.moy: xx = x.ClassementMoy; yy = y.ClassementMoy;
                    break;
                default:
                    break;
            }
        }

        public int Compare(Album x, Album y)
        {
            if (x == y)
                return 0;

            if (x == null)
                return 1;

            if (y == null)
                return -1;


            int cmp = 0;




            decimal xx = 0;
            decimal yy = 0;

            var composants = mode.ComposantsUtiles;
            if (composants.Count > 1)
            {
                if (x.ClassementValue == 0m || y.ClassementValue == 0m)
                {
                    var cmpt2 = composants[1];
                    calc(ref xx, ref yy, x, y, cmpt2);
                    cmp = xx.CompareTo(yy);
                    if (cmp != 0)
                        return cmp;
                }

            }

            var cmpt = composants[0];
            calc(ref xx, ref yy, x, y, cmpt);

            cmp = xx.CompareTo(yy);
            if (cmp != 0)
                return cmp;

            //if (mode == albumSortMode.light)
            //{
            //    cmp = x.ClassementMoy.CompareTo(y.ClassementMoy);
            //    if (cmp != 0)
            //        return cmp;
            //}
            //else if (mode == albumSortMode.mix)
            //{
            //    if (x.ClassementValue == 0m || y.ClassementValue == 0m)
            //    {
            //        cmp = x.ClassementMoy.CompareTo(y.ClassementMoy);
            //        if (cmp != 0)
            //            return cmp;
            //    }
            //}

            //else if (mode == albumSortMode.mixLight)
            //{
            //    if (x.ClassementValue == 0m || y.ClassementValue == 0m)
            //    {
            //        cmp = x.ClassementValueLight.CompareTo(y.ClassementValueLight);
            //        if (cmp != 0)
            //            return cmp;
            //    }
            //}

            //else if (mode == albumSortMode.mixLight2)
            //{
            //    if (x.ClassementValue == 0m || y.ClassementValue == 0m)
            //    {
            //        cmp = x.ClassementMoy.CompareTo(y.ClassementMoy);
            //        if (cmp != 0)
            //            return cmp;
            //    }
            //    else
            //    {
            //        cmp = x.ClassementValueLight.CompareTo(y.ClassementValueLight);
            //        if (cmp != 0)
            //            return cmp;
            //    }
            //}

            //else if (mode == albumSortMode.medLight
            //    || mode == albumSortMode.medQuasi
            //    || mode == albumSortMode.medLightSafe
            //    || mode == albumSortMode.medLightSafe2
            //    || mode == albumSortMode.medLightSafe3
            //    || mode == albumSortMode.medLightSafe4
            //    || mode == albumSortMode.medLightSafe5
            //    || mode == albumSortMode.medLightSafe6
            //    || mode == albumSortMode.medLightSafe10
            //    )
            //{
            //    cmp = x.ClassementValueLight.CompareTo(y.ClassementValueLight);
            //    if (cmp != 0)
            //        return cmp;
            //}



            cmp = x.ClassementValue.CompareTo(y.ClassementValue);
            if (cmp != 0)
                return cmp;

            cmp = x.ClassementValueLight.CompareTo(y.ClassementValueLight);
            if (cmp != 0)
                return cmp;

            cmp = x.ClassementMoy.CompareTo(y.ClassementMoy);
            if (cmp != 0)
                return cmp;

            int i = 0;
            var t1 = -2m;
            var t2 = -2m;
            while (true)
            {
                t1 = x.getTrackSortValue(i);
                t2 = y.getTrackSortValue(i);

                cmp = t1.CompareTo(t2);
                if (cmp != 0)
                    return cmp;



                if (t1 == 0)
                    break;

                i++;

            }
            cmp = x.DurationValue.CompareTo(y.DurationValue);
            if (cmp != 0)
                return cmp;
            return -x.Name.CompareTo(y.Name);

        }
    }

    //class AlbumClassComparerStack : IComparer<Album>
    //{
    //    public int Compare(Album x, Album y)
    //    {
    //        //int cmp = x.StackIndex.CompareTo(y.StackIndex);
    //        //if (cmp != 0)
    //        //    return cmp;
    //        return x.Rank.Sort.CompareTo(y.Rank.Sort);
    //    }
    //}

    class AlbumClassComparer2 : IComparer<Album>
    {
        public int Compare(Album x, Album y)
        {
            if (x == y)
                return 0;

            if (x == null)
                return 1;

            if (y == null)
                return -1;

            return x.Rank.Sort.CompareTo(y.Rank.Sort);
        }
    }


    class AlbumSortComparer : IComparer<Album>
    {
        public int Compare(Album x, Album y)
        {
            if (x == y)
                return 0;

            if (x == null)
                return 1;

            if (y == null)
                return -1;

            int cmp = x.Rank.SortValue.CompareTo(y.Rank.SortValue);
            if (cmp != 0)
                return cmp;

            if (x.Rank.SortValue == 0)
            {

            }

            var xx = x.getFirstTrackSortValue();
            var yy = y.getFirstTrackSortValue();

            return xx.CompareTo(yy);

        }
    }

    class AlbumRestComparer : IComparer<Album>
    {
        static AlbumSortComparer subCmp = new AlbumSortComparer();
        const decimal EPSILON = 0.00001m;
        public int Compare(Album x, Album y)
        {
            var xx = x.Rank.TimeRest;
            var yy = y.Rank.TimeRest;
            int cmp = 0;
            if (System.Math.Abs(xx - yy) >= EPSILON)
                cmp = xx.CompareTo(yy);
            if (cmp == 0)
                return subCmp.Compare(x, y);
            return cmp;
        }
    }

    class PieceInVirtualAlbumComparer : IComparer<Piece>
    {
        public int Compare(Piece x, Piece y)
        {
            return x.Location.CompareTo(y.Location);
        }
    }

    class PieceInAlbumComparer : IComparer<Piece>
    {
        private bool debile(int trackNumber)
        {
            return trackNumber <= 0 || trackNumber > 10000;
        }

        private bool debile(Piece piece)
        {
            return debile(piece.TrackNumber);
        }
        public int Compare(Piece x, Piece y)
        {
            if (debile(x))
            {
                if (debile(y))
                {
                    var f1 = Path.GetFileName(x.Location);
                    var f2 = Path.GetFileName(y.Location);
                    return f1.CompareTo(f2);
                }
                return -1;
            }
            if (debile(y))
                return 1;
            var cmp = x.TrackNumber.CompareTo(y.TrackNumber);
            if (cmp != 0)
                return cmp;
            return x.Location.CompareTo(y.Location);
        }
    }

    class AllPieceComparer : IComparer<Piece>
    {
        PieceInAlbumComparer pieceComp = new PieceInAlbumComparer();
        IComparer<Album> albumcomp = new AlbumClassComparer2();

        public int Compare(Piece x, Piece y)
        {
            int cmp = albumcomp.Compare(x.PieceAlbum, y.PieceAlbum);
            if (cmp != 0)
                return cmp;
            return -pieceComp.Compare(x, y);
        }
    }

    class AllPieceComparer2 : IComparer<Piece>
    {
        public int Compare(Piece x, Piece y)
        {
            return -x.RankAllAlbum.CompareTo(y.RankAllAlbum);
        }
    }

    class AlbumNameComparer : IComparer<Album>
    {
        public int Compare(Album x, Album y)
        {
            return x.Name.CompareTo(y.Name);
        }
    }

    class AlbumLastModifClassementComparer : IComparer<Album>
    {
        public int Compare(Album x, Album y)
        {

          
            var dtx = x.UpdateClassement;
            var dty = y.UpdateClassement;
            int cmp =0;
            if (dtx == null)
            {
                if (dty == null)
                {
                }
                else
                    cmp = -1;
            }
            else if (dty == null)
                cmp = 1;
            else
                cmp = dtx.Value.CompareTo(dty.Value); 

         
            if (cmp != 0)
                return cmp;
            return x.Name.CompareTo(y.Name);
        }
    }


}
]]></content>
  </file>
  <file path="\PieceDb.Consolid\albums\AlbumMedianne.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using pdb.util;
using System.Collections;
using pdb.gen.Tuning;
using Math = pdb.util.Math; 

namespace pdb.gen.albums
{
    class AlbumMedianne
    {
        const decimal PRECISION = 0.0000001m;
        const decimal EPSILON = 0.0000000000001m;
        const decimal EPSILON_LOG = EPSILON;
        private static int index;
        public static int Index { get { return index; } }


        public static DecimalIndex getMedianne(IList<Piece> list, decimal coeffMedianne)
        {
            return new DecimalIndex() { d = getMedianne_(list, coeffMedianne), index = index };
        }

        //public static DecimalIndex getMedianne(IEnumerable list, decimal coeffMedianne)
        //{
        //    var _list = new List<decimal>();
        //    foreach (object o in list)
        //    {
        //        _list.Add(Convert.ToDecimal(o));
        //    }
        //    return getMedianne(_list, coeffMedianne);
        //}

        //public static DecimalIndex getMedianne(List<decimal> list, decimal coeffMedianne)
        //{
        //    return new DecimalIndex() { d = getMedianne_(list, coeffMedianne), index = index };
        //}

        //public static DecimalIndex getMedianneLight(List<decimal> list, List<Piece> pieces, ConfMedianne mode, bool signal)
        //{
        //    DecimalIndex ret0 = new DecimalIndex();
        //    DecimalIndex ret = ret0;
        //    try
        //    {


        //        var _zero = mode.zero;
        //        var medianne = getMedianne_(list, mode.medianne);
        //        ret0.d = medianne;
        //        ret0.index = index;

        //        if (list.Count == 1)
        //            return ret0;

        //        if (mode.safe == 0)
        //        {
        //            return calcmedianneVirt(list, mode, 0, 0);
        //        }

        //        int indexV = 0;
        //        int nbAdd = 0;

        //        int count = list.Count;

        //        if (mode.safe > 0)
        //        {

        //            int i0 = count - 1;
        //            int _nbNoAdd = 0;

        //            for (int i = 0; i < count; i++)
        //            {
        //                if (list[i] <= _zero)
        //                {
        //                    i0 = i;
        //                    _nbNoAdd = count - i0;
        //                    break;
        //                }
        //            }
        //            if (i0 == 0)
        //                return ret0;

        //            //for (int i00 = 1; i00 <= i0; i00++)
        //            //{
        //            //    decimal coeff = (decimal)i00 / (decimal)i0;
        //            List<decimal> _list = new List<decimal>(list);
        //            //for (int i = i00; i < count; i++)
        //            //    _list[i] = 0m;
        //            //liste partielle originale
        //            //  List<decimal> _list0 = new List<decimal>(_list);
        //            int _count = System.Math.Min(count, i0 + mode.safe);
        //            decimal[] virt = new decimal[_count];
        //            _nbNoAdd = System.Math.Min(mode.safe, _nbNoAdd);
        //            if (mode.noAdd)
        //            {

        //                decimal _coeff = 1m;
        //                for (int j = _nbNoAdd - 1; j >= 0; j--)
        //                {
        //                    if (j < count)
        //                    {
        //                        _coeff /= mode.coeffVirt;
        //                        _list[j] = _list[j] * _coeff;
        //                    }
        //                }
        //            }
        //            else if (mode.lissage || mode.removeEpsilon || mode.cumul)
        //            {
        //                for (int i = 0; i < i0; i++)
        //                {
        //                    decimal _coeff = 1m;
        //                    decimal _base = _list[i];
        //                    for (int j = i + 1; j < _count; j++)
        //                    {
        //                        _coeff /= mode.coeffVirt;
        //                        virt[j] = System.Math.Max(virt[j], _base * _coeff); //     += _base * _coeff;
        //                    }
        //                }
        //            }
        //            else
        //            {
        //                decimal courant = _list[0];
        //                for (int i = 1; i < _count; i++)
        //                {
        //                    if (_list[i] <= _zero)
        //                    {
        //                        courant /= mode.coeffVirt;
        //                        virt[i] = courant;
        //                    }
        //                    else
        //                        courant = _list[i];
        //                }
        //            }

        //            decimal value = int.MaxValue;
        //            int ii = 0;
        //            if (mode.noAdd)
        //            {
        //                //for (ii = 1; ii < count && ii < _count; ii++)
        //                //{
        //                //    var calc = virt[ii];
        //                //    if (calc > 0m)
        //                //        list[ii] = calc;
        //                //}
        //            }
        //            else
        //            {
        //                for (ii = 1; ii < count && ii < _count; ii++)
        //                {
        //                    value = _list[ii];
        //                    var calc = virt[ii];
        //                    if (value < calc)
        //                    {
        //                        if (mode.lissage || value <= _zero)
        //                        {
        //                            if (value <= _zero)
        //                                nbAdd++;
        //                            value = calc;
        //                            _list[ii] = value;
        //                        }

        //                    }
        //                    else
        //                        indexV = ii;
        //                }
        //                if (mode.removeEpsilon)
        //                {
        //                    // j'ai 5 virtuel alors que j'ai deux safe
        //                    ///xx---
        //                    int nb = 0;
        //                    for (int i = indexV + 1; i < _count; i++)
        //                    {
        //                        nb++;
        //                        if (nb <= mode.safe)
        //                            continue;
        //                        _list[i] = 0m;
        //                    }

        //                }
        //                if (mode.removeFirst)
        //                {
        //                    for (int i = 0; i < nbAdd; i++)
        //                    {
        //                        _list[i] = 0m;
        //                    }
        //                }
        //            }

        //            for (int i = 0; i < _list.Count && i < pieces.Count; i++)
        //                pieces[i].setClassementVirtuel(_list[i]);

        //            if (mode.deleteFirst)
        //            {
        //                for (int i = 0; i < nbAdd; i++)
        //                {
        //                    _list.RemoveAt(0);
        //                }
        //            }

        //            if (mode.reSort || mode.removeFirst || mode.noAdd)
        //            {
        //                _list.Sort();
        //                _list.Reverse();
        //                pieces.Sort(new PieceCmp());
        //            }



        //            if (mode.noAdd)
        //                nbAdd = _nbNoAdd;

        //            ret = calcmedianneVirt(_list, mode, nbAdd, System.Math.Min(i0, mode.safe));
        //            if (mode.expEnabled != 0)
        //            {
        //                int _nb = pieces.Count<Piece>(p => !p.Enabled);
        //                decimal _c = (decimal)_nb / (decimal)count;
        //                _c = Math.Pow(_c, mode.expEnabled);
        //                ret.d *= _c;
        //            }


        //        }
        //        else
        //            ret = calcmedianneVirt(list, mode, 0, 0);

        //        //if (ret < ret0)
        //        //    ret = ret0; 



        //    }
        //    finally
        //    {
        //        if (signal)
        //        {
        //            try
        //            {
        //                pieces[ret.index].MedianneLight = true;
        //                pieces[ret.indexBorder].Border = true;
        //                pieces[ret.indexBorderEffect].BorderEffect = true;
        //                pieces[ret.indexBorderMin].BorderMin = true;

        //            }
        //            catch { }
        //        }
        //    }

        //    return ret;
        //}

        public static int buildVirtual(List<Piece> pieces, ConfMedianne mode, ConfMedianneVirt modeVirt, ConfAlbumSort conf, bool main, ref int i0)
        {


            int indexV = 0;
            int nbAdd = 0;

            int count = pieces.Count;
            List<Piece> _pieces = pieces;
            var _zero = mode.zero;


            if (modeVirt.safe > 0)
            {
                i0 = count - 1;
                int _nbNoAdd = 0;


                for (int i = 0; i < count; i++)
                {
                    var pp = pieces[i];
                    if (pp.VirtualClassement == 0m)
                    {
                        i0 = i;
                        _nbNoAdd = count - i0;
                        break;
                    }
                }

                if (modeVirt.virtOnlyDisabled || mode.removeLast == removeLast.unselected)
                    _nbNoAdd = pieces.Count<Piece>(p => p.Enabled);  // || p.VirtualClassement == 0m);
                if (modeVirt.noAddAll)
                    _nbNoAdd = pieces.Count;
                if (modeVirt.noAddEnd)
                {
                    // var nb1 = pieces.Count<Piece>(p => p.Enabled);
                    // morceaux déjà notés
                    var nb2 = pieces.Count<Piece>(p => !p.Enabled && p.RapportClassement > 0);
                    _nbNoAdd = _nbNoAdd - nb2;
                    if (_nbNoAdd < 0)
                        _nbNoAdd = 0;
                }
                if (i0 == 0)
                    return 0;
                //}

                //for (int i00 = 1; i00 <= i0; i00++)
                //{
                //    decimal coeff = (decimal)i00 / (decimal)i0;
                List<decimal> _list = new List<decimal>();
                for (int i = 0; i < _pieces.Count; i++)
                    _list.Add(_pieces[i].VirtualClassement);
                //for (int i = i00; i < count; i++)
                //    _list[i] = 0m;
                //liste partielle originale
                //  List<decimal> _list0 = new List<decimal>(_list);
                int _count = System.Math.Min(count, i0 + modeVirt.safe);
                decimal[] virt = new decimal[_count];
                _nbNoAdd = System.Math.Min(modeVirt.safe, _nbNoAdd);
                if (modeVirt.noAdd)
                {
                    var coeffEnabled = conf.coeffEnabled; 
                    var _coeffVirt = modeVirt.coeffVirt;
                    if (count < modeVirt.safe && modeVirt.coeffVirtAuto)
                    {
                        if (modeVirt.coeffVirtAdjust)
                            _coeffVirt = Math.Pow(coeffEnabled, 1.0m / (count + 1.0m));
                        else
                        {
                            // ex 2^10 = 1024
                            // je veux obtenir 1024 avec 3
                            _coeffVirt = Math.Pow(_coeffVirt, (decimal)modeVirt.safe / (decimal)count);
                        }
                    }

                    decimal _coeff = 1m;
                    decimal prec = 0m;
                    if (modeVirt.virtAlignPrec)
                    {
                        if (_nbNoAdd < _list.Count)
                            prec = _list[_nbNoAdd];
                    }

                    for (int j = _nbNoAdd - 1; j >= 0; j--)
                    {
                        if (j < _pieces.Count)
                        {

                            if (!modeVirt.virtOnlyDisabled || !_pieces[j].Enabled)
                            {
                                _coeff /= _coeffVirt;
                                var cand = _list[j] * _coeff;
                                if (modeVirt.virtAlignPrec)
                                {
                                    if (cand < prec)
                                        cand = prec + EPSILON;
                                }

                                if (modeVirt.virtAlignSelected && modeVirt.virtOnlyDisabled)
                                {
                                    // quel serait le score s'il était coché
                                    var vu = _list[j] / coeffEnabled;
                                    // en plus une petite marge
                                    //  vu *= mode.coeffVirt; 
                                    if (cand < vu)
                                        cand = vu;
                                }
                                _list[j] = cand;
                            }
                            else if (modeVirt.forceCoeffVirt)
                                _coeff /= _coeffVirt;
                            prec = _list[j];
                        }
                    }

                }
                else if (modeVirt.lissage || modeVirt.removeEpsilon || modeVirt.cumul)
                {
                    for (int i = 0; i < i0; i++)
                    {
                        decimal _coeff = 1m;
                        decimal _base = _list[i];
                        for (int j = i + 1; j < _count; j++)
                        {
                            _coeff /= modeVirt.coeffVirt;
                            virt[j] = System.Math.Max(virt[j], _base * _coeff); //     += _base * _coeff;
                        }
                    }
                }
                else
                {
                    decimal courant = _list[0];
                    for (int i = 1; i < _count; i++)
                    {
                        if (_list[i] <= _zero)
                        {
                            courant /= modeVirt.coeffVirt;
                            virt[i] = courant;
                        }
                        else
                            courant = _list[i];
                    }
                }

                decimal value = int.MaxValue;
                int ii = 0;
                if (modeVirt.noAdd)
                {
                    //for (ii = 1; ii < count && ii < _count; ii++)
                    //{
                    //    var calc = virt[ii];
                    //    if (calc > 0m)
                    //        list[ii] = calc;
                    //}
                }
                else
                {
                    for (ii = 1; ii < count && ii < _count; ii++)
                    {
                        value = _list[ii];
                        var calc = virt[ii];
                        if (value < calc)
                        {
                            if (modeVirt.lissage || value <= _zero)
                            {
                                if (value <= _zero)
                                    nbAdd++;
                                value = calc;
                                _list[ii] = value;
                            }

                        }
                        else
                            indexV = ii;
                    }
                    if (modeVirt.removeEpsilon)
                    {
                        // j'ai 5 virtuel alors que j'ai deux safe
                        ///xx---
                        int nb = 0;
                        for (int i = indexV + 1; i < _count; i++)
                        {
                            nb++;
                            if (nb <= modeVirt.safe)
                                continue;
                            _list[i] = 0m;
                        }

                    }
                    if (mode.removeFirst)
                    {
                        for (int i = 0; i < nbAdd; i++)
                        {
                            _list[i] = 0m;
                        }
                    }
                }

                for (int i = 0; i < _list.Count && i < _pieces.Count; i++)
                {
                    if (main)
                        _pieces[i].setClassementVirtuel(_list[i]);
                    else
                        _pieces[i].setClassementVirtuel2(_list[i]);
                }

                if (mode.deleteFirst)
                {
                    for (int i = 0; i < nbAdd; i++)
                    {
                        pieces.RemoveAt(0);
                    }
                }

                if (modeVirt.reSort || mode.removeFirst || modeVirt.noAdd)
                {
                    //_list.Sort();
                    //_list.Reverse();
                    if (main)
                        pieces.Sort(new PieceCmp());
                    else
                        pieces.Sort(new PieceCmp2());
                }



                if (modeVirt.noAdd)
                    nbAdd = _nbNoAdd;
            }
            return nbAdd;
        }

        public static DecimalIndex getMedianneLight(List<Piece> pieces, ConfAlbumSort conf, ConfMedianne mode, bool signal)
        {

            DecimalIndex ret0 = new DecimalIndex();
            DecimalIndex ret = ret0;
            try
            {
                var _zero = mode.zero;
                var medianne = getMedianne_(pieces, mode.medianne);
                ret0.d = medianne;
                ret0.index = index;
                ret = ret0;
                if (pieces.Count == 1)
                    return ret0;

                //if (mode.safe == 0)
                //{
                //    return calcmedianneVirt(pieces, mode, 0, 0);
                //}

                //int indexV = 0;
                //int nbAdd = 0;

                //int count = pieces.Count;
                //List<Piece> _pieces = pieces;
                ////if (mode.virtOnlyDisabled)
                ////{
                ////    _pieces = pieces.FindAll(p => !p.Enabled && p.VirtualClassement > 0m);
                ////    _pieces.Sort(new PieceCmp());
                ////}


                //if (mode.safe > 0)
                //{
                //    int i0 = count - 1;
                //    int _nbNoAdd = 0;
                //    //if (mode.virtOnlyDisabled)
                //    //{
                //    //    _nbNoAdd = pieces.Count<Piece>(p => p.Enabled);
                //    //}
                //    //else
                //    //{

                //    for (int i = 0; i < count; i++)
                //    {
                //        var pp = pieces[i];
                //        if (pp.VirtualClassement == 0m)
                //        {
                //            i0 = i;
                //            _nbNoAdd = count - i0;
                //            break;
                //        }
                //    }

                //    if (mode.virtOnlyDisabled || mode.removeLast == removeLast.unselected)
                //        _nbNoAdd = pieces.Count<Piece>(p => p.Enabled);  // || p.VirtualClassement == 0m);
                //    if (mode.noAddAll)
                //        _nbNoAdd = pieces.Count;
                //    if (mode.noAddEnd)
                //    {
                //        // var nb1 = pieces.Count<Piece>(p => p.Enabled);
                //        // morceaux déjà notés
                //        var nb2 = pieces.Count<Piece>(p => !p.Enabled && p.RapportClassement > 0);
                //        _nbNoAdd = _nbNoAdd - nb2;
                //        if (_nbNoAdd < 0)
                //            _nbNoAdd = 0;
                //    }
                //    if (i0 == 0)
                //        return ret0;
                //    //}

                //    //for (int i00 = 1; i00 <= i0; i00++)
                //    //{
                //    //    decimal coeff = (decimal)i00 / (decimal)i0;
                //    List<decimal> _list = new List<decimal>();
                //    for (int i = 0; i < _pieces.Count; i++)
                //        _list.Add(_pieces[i].VirtualClassement);
                //    //for (int i = i00; i < count; i++)
                //    //    _list[i] = 0m;
                //    //liste partielle originale
                //    //  List<decimal> _list0 = new List<decimal>(_list);
                //    int _count = System.Math.Min(count, i0 + mode.safe);
                //    decimal[] virt = new decimal[_count];
                //    _nbNoAdd = System.Math.Min(mode.safe, _nbNoAdd);
                //    if (mode.noAdd)
                //    {
                //        var _coeffVirt = mode.coeffVirt;
                //        if (count < mode.safe && mode.coeffVirtAuto)
                //        {
                //            if (mode.coeffVirtAdjust)
                //                _coeffVirt = Math.Pow(coeffEnabled, 1.0m / (count + 1.0m));
                //            else
                //            {
                //                // ex 2^10 = 1024
                //                // je veux obtenir 1024 avec 3
                //                _coeffVirt = Math.Pow(_coeffVirt, (decimal)mode.safe / (decimal)count);
                //            }
                //        }

                //        decimal _coeff = 1m;
                //        decimal prec = 0m;
                //        if (mode.virtAlignPrec)
                //        {
                //            if (_nbNoAdd < _list.Count)
                //                prec = _list[_nbNoAdd];
                //        }

                //        for (int j = _nbNoAdd - 1; j >= 0; j--)
                //        {
                //            if (j < _pieces.Count)
                //            {

                //                if (!mode.virtOnlyDisabled || !_pieces[j].Enabled)
                //                {
                //                    _coeff /= _coeffVirt;
                //                    var cand = _list[j] * _coeff;
                //                    if (mode.virtAlignPrec)
                //                    {
                //                        if (cand < prec)
                //                            cand = prec + EPSILON;
                //                    }

                //                    if (mode.virtAlignSelected && mode.virtOnlyDisabled)
                //                    {
                //                        // quel serait le score s'il était coché
                //                        var vu = _list[j] / coeffEnabled;
                //                        // en plus une petite marge
                //                        //  vu *= mode.coeffVirt; 
                //                        if (cand < vu)
                //                            cand = vu;
                //                    }
                //                    _list[j] = cand;
                //                }
                //                else if (mode.forceCoeffVirt)
                //                    _coeff /= _coeffVirt;
                //                prec = _list[j];
                //            }
                //        }

                //    }
                //    else if (mode.lissage || mode.removeEpsilon || mode.cumul)
                //    {
                //        for (int i = 0; i < i0; i++)
                //        {
                //            decimal _coeff = 1m;
                //            decimal _base = _list[i];
                //            for (int j = i + 1; j < _count; j++)
                //            {
                //                _coeff /= mode.coeffVirt;
                //                virt[j] = System.Math.Max(virt[j], _base * _coeff); //     += _base * _coeff;
                //            }
                //        }
                //    }
                //    else
                //    {
                //        decimal courant = _list[0];
                //        for (int i = 1; i < _count; i++)
                //        {
                //            if (_list[i] <= _zero)
                //            {
                //                courant /= mode.coeffVirt;
                //                virt[i] = courant;
                //            }
                //            else
                //                courant = _list[i];
                //        }
                //    }

                //    decimal value = int.MaxValue;
                //    int ii = 0;
                //    if (mode.noAdd)
                //    {
                //        //for (ii = 1; ii < count && ii < _count; ii++)
                //        //{
                //        //    var calc = virt[ii];
                //        //    if (calc > 0m)
                //        //        list[ii] = calc;
                //        //}
                //    }
                //    else
                //    {
                //        for (ii = 1; ii < count && ii < _count; ii++)
                //        {
                //            value = _list[ii];
                //            var calc = virt[ii];
                //            if (value < calc)
                //            {
                //                if (mode.lissage || value <= _zero)
                //                {
                //                    if (value <= _zero)
                //                        nbAdd++;
                //                    value = calc;
                //                    _list[ii] = value;
                //                }

                //            }
                //            else
                //                indexV = ii;
                //        }
                //        if (mode.removeEpsilon)
                //        {
                //            // j'ai 5 virtuel alors que j'ai deux safe
                //            ///xx---
                //            int nb = 0;
                //            for (int i = indexV + 1; i < _count; i++)
                //            {
                //                nb++;
                //                if (nb <= mode.safe)
                //                    continue;
                //                _list[i] = 0m;
                //            }

                //        }
                //        if (mode.removeFirst)
                //        {
                //            for (int i = 0; i < nbAdd; i++)
                //            {
                //                _list[i] = 0m;
                //            }
                //        }
                //    }

                //    for (int i = 0; i < _list.Count && i < _pieces.Count; i++)
                //        _pieces[i].setClassementVirtuel(_list[i]);

                //    if (mode.deleteFirst)
                //    {
                //        for (int i = 0; i < nbAdd; i++)
                //        {
                //            pieces.RemoveAt(0);
                //        }
                //    }

                //    if (mode.reSort || mode.removeFirst || mode.noAdd)
                //    {
                //        //_list.Sort();
                //        //_list.Reverse();
                //        pieces.Sort(new PieceCmp());
                //    }



                //    if (mode.noAdd)
                //        nbAdd = _nbNoAdd;
                int i0 = 0;
                int count = pieces.Count;
                int nbAdd = buildVirtual(pieces, mode, mode.Main, conf, true, ref i0);
                ret = calcmedianneVirt(pieces, mode, nbAdd, System.Math.Min(i0, mode.Main.safe));
                if (mode.expEnabled != 0)
                {
                    int _nb = pieces.Count<Piece>(p => !p.Enabled);
                    decimal _c = (decimal)_nb / (decimal)count;
                    _c = Math.Pow(_c, mode.expEnabled);
                    ret.d *= _c;
                }


                //}
                //else
                //    ret = calcmedianneVirt(pieces, mode, 0, 0);

                //if (ret < ret0)
                //    ret = ret0; 

            }
            finally
            {

                if (signal)
                {
                    try
                    {
                        pieces[ret.index].MedianneLight = true;
                        pieces[ret.indexBorder].Border = true;
                        pieces[ret.indexBorderEffect].BorderEffect = true;
                        pieces[ret.indexBorderMin].BorderMin = true;

                    }
                    catch { }
                }
            }

            return ret;
        }




        private class PieceCmp : IComparer<Piece>
        {
            private static PieceTrackNumberComparer tn = new PieceTrackNumberComparer();
            public int Compare(Piece x, Piece y)
            {
                int cmp = x.VirtualClassement.CompareTo(y.VirtualClassement);
                if (cmp != 0)
                    return -cmp;
                return tn.Compare(x, y);
            }
        }

        private class PieceCmp2 : IComparer<Piece>
        {
            private static PieceTrackNumberComparer tn = new PieceTrackNumberComparer();
            public int Compare(Piece x, Piece y)
            {
                int cmp = x.VirtualClassement2.CompareTo(y.VirtualClassement2);
                if (cmp != 0)
                    return -cmp;
                return tn.Compare(x, y);
            }
        }




        //private static DecimalIndex calcmedianneVirt(IList<decimal> list, ConfMedianne conf, int nbAdd, int nbDel)
        //{
        //    var _list = new List<decimal>(list);
        //    int count = _list.Count;

        //    DecimalIndex ret = new DecimalIndex() { d = 0m, index = 0 }; // 0m; // decimal ret = int.MinValue;
        //    int _nbSupp = 0;
        //    bool beginBorder = false;
        //    for (int i = 0; i < count; i++)
        //    {

        //        if (i > 0)
        //        {

        //            _list.RemoveAt(count - i);

        //        }

        //        var aux = getMedianne_(_list, conf.medianne);
        //        if (aux == 0m)
        //            continue;
        //        if (!beginBorder)
        //        {
        //            beginBorder = true;
        //            ret.indexBorder = count - i - 1;
        //        }
        //        // aux = getLn(aux);
        //        //decimal coeff = 1; 
        //        //if (count >2)
        //        //coeff = (decimal)(count - 2 - i) / (decimal)(count - 2); 
        //        decimal coeff = 1 - (decimal)i / (decimal)count; // (decimal)count - i / (decimal)count;
        //        if (conf.removeFirst && !conf.deleteFirst && i > nbDel)
        //        {
        //            coeff = 1 - (decimal)(i - nbDel) / (decimal)count;
        //        }
        //        if (conf.quasi)
        //            coeff *= coeff;
        //        aux = aux * coeff;
        //        if (aux > ret.d)
        //        {
        //            ret.d = aux;
        //            ret.index = index;
        //            ret.indexBorderEffect = count - i - 1;
        //        }

        //        if (_list[count - i - 1] > conf.zero)
        //        {

        //            if (conf.removeLast == removeLast.non)
        //                break;
        //            _nbSupp++;
        //            if (conf.removeLast == removeLast.virtuel && _nbSupp >= nbAdd)
        //                break;
        //        }


        //    }

        //    //     if (ret == int.MinValue)
        //    //         return 0m;
        //    return ret;
        //}



        private static DecimalIndex calcmedianneVirt(IList<Piece> list, ConfMedianne conf, int nbAdd, int nbDel)
        {
            var _list = new List<Piece>(list);
            var classes = _list.FindAll(p => p.VirtualClassement > conf.zero);
            int count = _list.Count;

            int nbEnabled = classes.Count<Piece>(p => p.Enabled);
            int nbDisabled = classes.Count<Piece>(p => !p.Enabled);
            int nbdispo = System.Math.Min(nbEnabled, nbDisabled);


            DecimalIndex ret = new DecimalIndex() { d = 0m, index = 0 }; // 0m; // decimal ret = int.MinValue;
            int _nbSupp = 0;
            //int _nbSuppDisabled = 0;
            //int _nbSuppEnabled = 0;
            bool beginBorder = false;
            for (int i = 0; i < count; i++)
            {

                if (i > 0)
                {
                    //var d = _list[count - i];
                    //if (d.Enabled)
                    //    nbEnabled--;
                    //else
                    //    nbDisabled--;

                    _list.RemoveAt(count - i);

                }

                var aux = getMedianne_(_list, conf.medianne);
                if (aux == 0m)
                    continue;
                if (!beginBorder)
                {
                    beginBorder = true;
                    ret.indexBorder = count - i - 1;
                }
                // aux = getLn(aux);
                //decimal coeff = 1; 
                //if (count >2)
                //coeff = (decimal)(count - 2 - i) / (decimal)(count - 2); 
                decimal coeff = 1 - (decimal)i / (decimal)count; // (decimal)count - i / (decimal)count;
                if (conf.removeFirst && !conf.deleteFirst && i > nbDel)
                {
                    coeff = 1 - (decimal)(i - nbDel) / (decimal)count;
                }
                if (conf.quasi)
                    coeff *= coeff;
                aux = aux * coeff;
                if (aux > ret.d)
                {
                    ret.d = aux;
                    ret.index = index;
                    ret.indexBorderEffect = count - i - 1;
                }

                ret.indexBorderMin = count - i - 1;
                var p = _list[count - i - 1];

                if (p.VirtualClassement > conf.zero)
                {
                    // je regarde si le morceau est désactivé
                    // si c'est coché, je ne regarde pas quand je considère qu'on peut supprimmer les morceaux activé
                    if (p.Enabled)
                        nbEnabled--;
                    else
                        nbDisabled--;
                    nbdispo--;

                    if (!p.Enabled || !conf.removeEnabled || conf.removeLast == removeLast.unselected)
                    {
                        //bool priseEncompte = true || nbEnabled <= 0 || !conf.removeEnabled || conf.removeLast == removeLast.unselected;
                        //if (priseEncompte)
                        //{
                        if ((conf.removeLast == removeLast.non || conf.removeLast == removeLast.unselected) && nbEnabled < 0)
                            break;

                        if (conf.removeLast == removeLast.unselected) //&& (nbEnabled <= 0 ||  nbDisabled <=0))
                        {
                            if (nbdispo < 0)
                                break;
                        }

                        _nbSupp++;
                        if (conf.removeLast == removeLast.virtuel && _nbSupp >= nbAdd)
                            break;
                        // }


                    }
                }


            }

            //     if (ret == int.MinValue)
            //         return 0m;
            return ret;
        }

        //public static decimal getMedianneLight0(IList<decimal> list, decimal coeffMedianne, bool quasi)
        //{
        //    if (list.Count == 1)
        //        return getMedianne_(list, coeffMedianne);
        //    decimal ret = 0m;
        //    int count = list.Count;

        //    List<decimal> _list = new List<decimal>(list);
        //    // ret = getMedianne_(_list, coeffMedianne);
        //    decimal nb = 0m;
        //    for (int i = 0; i < count - 1; i++)
        //    {
        //        if (i > 0)
        //            _list.RemoveAt(count - i);
        //        var aux = getMedianne_(_list, coeffMedianne);
        //        decimal coeff = count - 1 - i;
        //        if (quasi)
        //            coeff *= coeff;
        //        ret += aux * coeff;
        //        nb += coeff;


        //    }
        //    ret /= nb;


        //    return ret;
        //}
        //private static decimal getMedianne_(IList<decimal> list, decimal coeffMedianne)
        //{
        //    index = 0;
        //    if (list == null)
        //        throw new ArgumentException("liste nulle");
        //    int count = list.Count;
        //    if (count == 0)
        //        throw new ArgumentException("liste vide");
        //    if (coeffMedianne < 0 || coeffMedianne > 1)
        //        throw new ArgumentException("coeffMedianne doit être compris entre 0 et 1, valeur:" + coeffMedianne);
        //    if (count == 1)
        //        return list[0];
        //    if (coeffMedianne == 0)
        //        return list[0];
        //    if (coeffMedianne == 1)
        //    {
        //        index = count - 1;
        //        return list[count - 1];
        //    }

        //    var medianne = coeffMedianne * (count - 1);

        //    index = (int)medianne;
        //    int i1 = index + 1;
        //    var val0 = list[index];
        //    var val1 = list[i1];
        //    if (Math.Abs(medianne - Convert.ToDecimal(index)) < PRECISION)
        //        return val0;
        //    if (Math.Abs(medianne - i1) < PRECISION)
        //    {
        //        index = i1;
        //        return val1;
        //    }

        //    var pente = (val1 - val0);
        //    var dx = medianne - index;
        //    var dy = pente * dx;
        //    return val0 + dy;

        //}

        private static decimal getMedianne_(IList<Piece> list, decimal coeffMedianne)
        {
            index = 0;
            if (list == null)
                throw new ArgumentException("liste nulle");
            int count = list.Count;
            if (count == 0)
                throw new ArgumentException("liste vide");
            if (coeffMedianne < 0 || coeffMedianne > 1)
                throw new ArgumentException("coeffMedianne doit être compris entre 0 et 1, valeur:" + coeffMedianne);
            if (count == 1)
                return list[0].VirtualClassement;
            if (coeffMedianne == 0)
                return list[0].VirtualClassement;
            if (coeffMedianne == 1)
            {
                index = count - 1;
                return list[count - 1].VirtualClassement;
            }

            var medianne = coeffMedianne * (count - 1);

            index = (int)medianne;
            int i1 = index + 1;
            var val0 = list[index].VirtualClassement;
            var val1 = list[i1].VirtualClassement;
            if (Math.Abs(medianne - Convert.ToDecimal(index)) < PRECISION)
                return val0;
            if (Math.Abs(medianne - i1) < PRECISION)
            {
                index = i1;
                return val1;
            }

            if (val1 < PRECISION)
            {
                index = i1;
                return val1;
            }

            //         var pente = (val1 - val0);
            var dx = medianne - index;

            // var ret = val0 + pente * dx;


            // moyenne avec calcul de log
            var log0 = Math.Log(val0 + EPSILON_LOG);
            var log1 = Math.Log(val1 + EPSILON_LOG);
            // pente = log1 - log0;
            var log = log0 + (log1 - log0) * dx;
            return Math.Exp(log) - EPSILON_LOG;
          

        }

        //public static int getEquiv(IList<double> listRef, double target, int i0, int i1)
        //{
        //    var val0 = listRef[i0]; 
        //     var val1 = listRef[i1]; 
        //    if (i1 - i0 == 1)
        //    {
        //        // on prend le plus proche
        //        var delta0 = target - val0;
        //        var delta1 = val1 - target; 

        //        if (delta0 <= delta1)
        //            return i0;
        //        return i1; 
        //    }

        //    int imiddle = (i0 + i1) / 2;
        //    if (imiddle == i0)
        //        imiddle++; 
        //    var vmiddle = listRef[imiddle];

        //    if (vmiddle == target)
        //        return imiddle;
        //    if (Math.Abs(vmiddle - target) < PRECISION)
        //        return imiddle;

        //    if (vmiddle < target)
        //        return getEquiv(listRef, target, imiddle, i1);
        //    return getEquiv(listRef, target, i0, imiddle); 


        //}
    }
}
]]></content>
  </file>
  <file path="\PieceDb.Consolid\albums\Albums.cs">
    <content><![CDATA[using pdb.util;
using System.Collections.Generic;
using System;
using pdb.obj;
using pdb.gen.conf;

namespace pdb.gen.albums
{
    public class Albums : IAlbumInit
    {
        public Albums(Consolid consolid)
        {
            this.consolid = consolid;
        }
        private BgDictString<Album> dict = new BgDictString<Album>();
        private Consolid consolid;
        private StackAlbum stack = StackAlbum.Instance;
        private void check_(Piece piece)
        {
            string __album = "-";
            var _album = piece.Album;
            if (!string.IsNullOrEmpty(_album))
            {
                __album = _album.Trim();
                var album = dict[__album];
                if (album == null)
                {
                    album = new Album(__album);
                    album.Virtual = piece.Virtual;
                    dict.Add(__album, album);
                }
                album.add(piece);

            }


        }

        public int Count { get { return dict.Count; } }

        private string getKey(string _album)
        {
            string str = "-";
            if (!string.IsNullOrEmpty(_album))
            {
                str = _album.Trim();
            }
            return str;
        }

        public void sortVirtual()
        {
            foreach (Album album in dict.Values)
            {
                if (album.Virtual)
                    album.sortVirtual();
            }
        }

        public void check(Piece piece)
        {
            check_(piece);
            foreach (Piece child in piece.Childs)
                check_(child);
        }

        public Album getAlbum(TrackList piece)
        {
            return piece.Piece.PieceAlbum;
            string __album = "-";
            var _album = piece.Album;
            if (!string.IsNullOrEmpty(_album))
            {
                __album = _album.Trim();
                return dict[__album];
            }
            return null;
        }

        public void makeSort()
        {

            var confSort = consolid.SortAlbumMode;
            stack.Capacity = confSort.stackSize;
            ///check to find first light
            ConfMedianne confMedianne = null;
            foreach (var cmp in confSort.ComposantsUtiles)
            {
                if (cmp.type == medianneMode.light || confMedianne == null)
                    confMedianne = cmp;
            }

            var conf0 = new ConfMedianne(confMedianne);
            conf0.Main.safe = 0;
            conf0.Min.safe = 0;

          

            var list = new List<Album>(dict.Values);
            foreach (Album album in list)
            {
                album.makeSort(confSort, confMedianne, conf0); //listRef, reference); 
            }

            list.Sort(new AlbumClassComparer(consolid.SortAlbumMode));
            list.Reverse();
            for (int i = 0; i < list.Count; i++)
            {
                list[i].Rank.Sort = i + 1;
            }
            // prise en compte de la stack
            stack.build();
            var listStack = stack.Albums;
            foreach (Album s in listStack)
            {
                string key = getKey(s.Name);
                var alb = dict[key];
                stack.merge(s, alb);
            }
            //list.Sort(new AlbumClassComparerStack());
            //for (int i = 0; i < list.Count; i++)
            //{
            //    list[i].Rank2 = i + 1; 
            //}
        }

        public List<Album> makeSelection()
        {
            var list = new List<Album>(dict.Values);
            foreach (Album album in list)
            {
                album.makeSelection();
            }
            list.Sort(new AlbumRestComparer());
            for (int i = 0; i < list.Count; i++)
            {
                list[i].Rank.RankRest = i + 1;
            }
            return list;
        }


        public List<Album> List
        {
            get
            {
                var list = new List<Album>();
                foreach (Album album in dict.Values)
                    list.Add(album);
                list.Sort(new AlbumNameComparer());
                return list;
            }
        }
        public List<Album> ListByUpdate
        {
            get
            {
                var list = new List<Album>();
                foreach (Album album in dict.Values)
                    list.Add(album);
                list.Sort(new AlbumLastModifClassementComparer());

                return list;
            }
        }

        public void signalClassChange(TrackList track)
        {
            var album = getAlbum(track);
            if (album == null)
                return;
            stack.Add(album);
        }



    }
}
]]></content>
  </file>
  <file path="\PieceDb.Consolid\stat\StatBuilder.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using pdb.util;
using Math = pdb.util.Math; 

namespace pdb.gen.stat
{
    class StatBuilder
    {


        private List<Piece> list;
        private StreamWriter st;
        private int level;
        private int sub;
        private int delta;

        private decimal coeff;

        public const int VAL_MAX = 6000;
        private int min;
        private int nbCurrent;
        private Regex reg = new Regex("[6789]");
        public const int NB_MEDIANE = 36;
        private StatConteneur conteneur = new StatConteneur();
        public StatBuilder(IEnumerable<Piece> list)
        {
            this.list = new List<Piece>(list);
            this.list.Reverse();
        }

        private void record()
        {
            st.Write((double)min / 1000);
            st.Write("\t");
            st.WriteLine(nbCurrent);
        }
        private void record3()
        {
            st.Write((double)min / 10000);
            st.Write("\t");
            double v = (double)nbCurrent / (double)coeff;
            st.WriteLine(v.ToString("0.#####"));
        }

        private void record4()
        {
            st.Write((decimal)min /( 10000 * loupeCoeff));
            st.Write("\t");
            double v = (double)nbCurrent / (double)coeff;
            st.WriteLine(v.ToString("0.#####"));
        }

        private void record2()
        {
            conteneur.record(level, sub, min, nbCurrent);
        }

        public void gener()
        {
            gener("stats.txt");
        }

        public void gener0()
        {
            gener0("stats.txt");
        }


        public void gener0(string file)
        {
            decimal EPSILON = 0.00000001m;
            int count = list.Count;
            if (count == 0)
                return;
            using (Stream stream = new FileStream(@"..\" + file, FileMode.Create))
            {
                using (st = new StreamWriter(stream, Encoding.ASCII))
                {
                    try
                    {
                        int deltaBase = 10000;
                        for (level = 0; level < 4; level++)
                        {
                            deltaBase /= 10;
                            int nb = VAL_MAX / deltaBase;
                            //  var tab = new int[nb]; 
                            for (sub = 3; sub >= 1; sub--)
                            {
                                // level 0 > 0,1,2,3,4,5 puis 01, 23,45, puis 0,3
                                delta = sub * deltaBase;
                                //   nb =(int)( 6 / sub * Math.Pow(10, 4 - level)); 
                                // level = 1 =>600

                                // parcourir la liste triée
                                // pour chaque pièce comparer classNameAndRating
                                int index = 0;
                                st.WriteLine();
                                st.Write("\t\t\tlevel:"); st.Write(level); st.Write(" sub:"); st.WriteLine(sub);

                                min = 0;
                                int max = delta;


                                var current = list[index].ClassementValueDecimal;
                                nbCurrent = 0;

                                bool _end = false;
                                while (true)
                                {
                                    if (min >= VAL_MAX)
                                        break;

                                    if (current * 1000 + EPSILON >= max || _end)
                                    {
                                        //if (!reg.IsMatch(min.ToString()))
                                        record();

                                        min = max;
                                        while (reg.IsMatch(min.ToString()))
                                            min += deltaBase;

                                        max = min + delta;
                                        nbCurrent = 0;

                                    }
                                    else
                                    {
                                        nbCurrent++;
                                        index++;
                                        if (index >= list.Count)
                                        {

                                            _end = true;
                                            continue;
                                        }
                                        current = list[index].ClassementValueDecimal;
                                    }
                                }

                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex);
                    }
                    st.WriteLine();

                    try
                    {
                        //phase deux déterminer les tantièmes
                        //1,2,3..10,20,30..100,
                        double nbTot = count;
                        double portion = nbTot;
                        int K = 1;
                        decimal valueFrom = 0;

                        decimal classTo = 6.0m;
                        decimal classFrom = 0.0m;

                        List<Tranche> tranches = new List<Tranche>();
                        const int DETAIL = 1000;

                        for (int i = 0; i < 6 * DETAIL; i++)
                        {
                            if (reg.IsMatch(i.ToString()))
                                continue;
                            tranches.Add(new Tranche(i));
                        }
                        for (level = 1; level < 2; level++)
                        {



                            for (int div = 2; div <= NB_MEDIANE; div++)
                            {


                                //  st.Write("\t\t\tlevel:"); st.Write(level); st.Write(" div:"); st.WriteLine(div);
                                valueFrom = 0;
                                int iFrom = 0;
                                int iTo = count - 1;
                                portion = nbTot / div;
                                classFrom = 0;
                                for (sub = 1; sub <= div; sub++)
                                {

                                    double to = sub * portion;
                                    iTo = 0;
                                    if (to > 0)
                                        iTo = (int)to - 1;
                                    if (iTo >= list.Count)
                                        iTo = list.Count - 1;
                                    if (iTo < 0)
                                        iTo = 0;
                                    decimal rapport = list[iTo].RapportClassementDecimal;
                                    classTo = list[iTo].ClassementValueDecimal;


                                    //st.Write(classFrom);
                                    ////st.Write("\t");
                                    //st.Write(classTo);
                                    //st.Write("\t");
                                    ////st.Write(valueFrom);
                                    ////
                                    //st.Write(rapport);
                                    //st.Write("\t");


                                    //int nb = (iTo - iFrom + 1);                          
                                    //st.Write(nb);
                                    //st.Write("\t");
                                    decimal densite = 0;
                                    if (rapport != valueFrom)
                                        densite = 1.0m / ((rapport - valueFrom) * (decimal)div);
                                    //st.Write("\t");
                                    //st.Write(densite);
                                    //st.WriteLine(); 

                                    for (int i = 0; i < 6 * DETAIL; i++)
                                    {
                                        if (i < classFrom * DETAIL)
                                            continue;
                                        if (i > classTo * DETAIL)
                                            continue;
                                        if (reg.IsMatch(i.ToString()))
                                            continue;
                                        Tranche tranche = tranches.Find(t => t.index == i);
                                        tranche.densites[div - 1] = densite;
                                    }

                                    valueFrom = rapport;
                                    iFrom = iTo;
                                    classFrom = classTo;
                                }
                            }
                            K *= 10;
                        }

                        st.WriteLine();
                        st.Write("\t");
                        st.Write("\t");
                        st.Write("\t");

                        for (int i = 0; i < NB_MEDIANE; i++)
                        {
                            st.Write(i + 2);
                            st.Write("\t");
                            st.Write(i + 2);
                            st.Write("\t");
                        }
                        Tranche last = null;
                        foreach (Tranche tranche in tranches)
                        {
                            st.WriteLine();
                            st.Write((double)tranche.index / DETAIL);
                            st.Write("\t");

                            for (int i = 0; i < NB_MEDIANE; i++)
                            {
                                var densite = tranche.densites[i];
                                st.Write(densite);
                                st.Write("\t");
                                if (last == null || last.densites[i] != densite)
                                {
                                    st.Write(densite);
                                }
                                else
                                    st.Write(0);
                                st.Write("\t");
                            }
                            last = tranche;
                        }

                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e);
                    }
                }
            }
        }


        //public void gener3(bool generDistrib)
        //{
        //    gener3("stats3.txt", generDistrib);
        //}
        public void gener3(string file, bool generDistrib)
        {
            decimal EPSILON = 0.00000001m;
            int VAL_MAX = StatBuilder.VAL_MAX * 10;
            int count = list.Count;
            if (count == 0)
                return;
            misc.log("gener " + file);


            var filename = Path.GetFileNameWithoutExtension(file);
            var ext = Path.GetExtension(file);
            string _file = @"..\" + filename + "_med" + ext;
            string f0 = @"..\" + file;
            string f0tmp = f0 + ".tmp";
            string f1tmp = _file + ".tmp";
            using (Stream stream = new FileStream(f0tmp, FileMode.Create))
            {
                using (st = new StreamWriter(stream, Encoding.ASCII))
                {
                    try
                    {
                        int deltaBase = 100000;
                        for (level = 4; level >= 0; level--)
                        {
                            deltaBase /= 10;
                            int nb = VAL_MAX / deltaBase;

                            for (sub = 3; sub >= 1; sub--)
                            {
                                coeff = (int)Math.Pow(6, level) * sub;
                                // level 0 > 0,1,2,3,4,5 puis 01, 23,45, puis 0,3
                                delta = sub * deltaBase;
                                int index = 0;
                                st.WriteLine();
                                st.Write("\t\t\tlevel:"); st.Write(level); st.Write(" sub:"); st.WriteLine(sub);

                                min = 0;
                                int max = delta;


                                decimal current = list[index].ClassementValueDecimal;
                                nbCurrent = 0;

                                bool _end = false;
                                while (true)
                                {
                                    if (min >= VAL_MAX)
                                        break;

                                    if (current * 10000 + EPSILON >= max || _end)
                                    {

                                        record3();

                                        min = max;
                                        while (reg.IsMatch(min.ToString()))
                                            min += deltaBase;

                                        max = min + delta;
                                        nbCurrent = 0;

                                    }
                                    else
                                    {
                                        nbCurrent++;
                                        index++;
                                        if (index >= list.Count)
                                        {

                                            _end = true;
                                            continue;
                                        }
                                        current = list[index].ClassementValueDecimal;
                                    }
                                }

                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex);
                    }

                }
            }

            File.Copy(f0tmp, f0, true);
            File.Delete(f0tmp);

            misc.log("fin gener " + file);

            if (!generDistrib)
                return;

            misc.log("gener distrib " + _file);

            using (FileStream stream2 = new FileStream(f1tmp, FileMode.Create))
            {
                using (st = new StreamWriter(stream2, Encoding.UTF8))
                {

                    try
                    {
                        //phase deux déterminer les tantièmes
                        //1,2,3..10,20,30..100,
                        double nbTot = count;
                        double portion = nbTot;
                        int K = 1;
                        decimal valueFrom = 0;

                        decimal classTo = 6.0m;
                        decimal classFrom = 0.0m;

                        List<Tranche> tranches = new List<Tranche>();
                        Dict<int, Tranche> dict = new Dict<int, Tranche>();
                        const int DETAIL = 10000;

                        for (int i = 0; i < 6 * DETAIL; i++)
                        {
                            if (reg.IsMatch(i.ToString()))
                                continue;
                            var tranche = new Tranche(i);
                            tranches.Add(tranche);
                            dict[i] = tranche;
                        }
                        for (level = 1; level < 2; level++)
                        {



                            for (int div = 2; div <= NB_MEDIANE; div++)
                            {


                                //  st.Write("\t\t\tlevel:"); st.Write(level); st.Write(" div:"); st.WriteLine(div);
                                valueFrom = 0;
                                int iFrom = 0;
                                int iTo = count - 1;
                                portion = nbTot / div;
                                classFrom = 0;
                                for (sub = 1; sub <= div; sub++)
                                {

                                    double to = sub * portion;
                                    iTo = 0;
                                    if (to > 0)
                                        iTo = (int)to - 1;
                                    if (iTo >= list.Count)
                                        iTo = list.Count - 1;
                                    if (iTo < 0)
                                        iTo = 0;
                                    decimal rapport = list[iTo].RapportClassementDecimal;
                                    classTo = list[iTo].ClassementValueDecimal;


                                    //st.Write(classFrom);
                                    ////st.Write("\t");
                                    //st.Write(classTo);
                                    //st.Write("\t");
                                    ////st.Write(valueFrom);
                                    ////
                                    //st.Write(rapport);
                                    //st.Write("\t");


                                    //int nb = (iTo - iFrom + 1);                          
                                    //st.Write(nb);
                                    //st.Write("\t");
                                    decimal densite = 0m;
                                    if (rapport != valueFrom)
                                        densite = 1.0m / ((rapport - valueFrom) * div);
                                    //st.Write("\t");
                                    //st.Write(densite);
                                    //st.WriteLine(); 

                                    for (int i = 0; i < 6 * DETAIL; i++)
                                    {
                                        if (i < classFrom * DETAIL)
                                            continue;
                                        if (i > classTo * DETAIL)
                                            continue;
                                        if (reg.IsMatch(i.ToString()))
                                            continue;
                                        Tranche tranche = dict[i];
                                        //  Tranche tranche = tranches.Find(t => t.index == i);
                                        tranche.densites[div - 1] = densite;
                                    }

                                    valueFrom = rapport;
                                    iFrom = iTo;
                                    classFrom = classTo;
                                }
                            }
                            K *= 10;
                        }

                        st.WriteLine();
                        st.Write("\t");
                        st.Write("\t");
                        st.Write("\t");

                        for (int i = 0; i < NB_MEDIANE; i++)
                        {
                            st.Write(i + 2);
                            st.Write("\t");
                            st.Write(i + 2);
                            st.Write("\t");
                        }
                        Tranche last = null;
                        foreach (Tranche tranche in tranches)
                        {
                            st.WriteLine();
                            st.Write((double)tranche.index / DETAIL);
                            st.Write("\t");

                            for (int i = 0; i < NB_MEDIANE; i++)
                            {
                                var densite = tranche.densites[i];
                                st.Write(densite);
                                st.Write("\t");
                                if (last == null || last.densites[i] != densite)
                                {
                                    st.Write(densite);
                                }
                                else
                                    st.Write(0);
                                st.Write("\t");
                            }
                            last = tranche;
                        }

                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e);
                    }
                }

            }

            File.Copy(f1tmp, _file, true);
            File.Delete(f1tmp);

            misc.log("fin gener distrib " + _file);
        }

        private int loupe;
        private decimal loupeCoeff;
        public int Loupe { set { loupe = value; loupeCoeff =  pdb.util.Math.Pow(1000, loupe); } }
        public void gener4(string file)
        {
            decimal EPSILON = 0.00000001m / loupeCoeff;
            decimal VAL_MAX = StatBuilder.VAL_MAX * 10; // on laisse inchangé pour faire seulement une partie
            int count = list.Count;
            if (count == 0)
                return;
           // misc.log("gener " + file + loupe);


            var filename = Path.GetFileNameWithoutExtension(file);
            var ext = Path.GetExtension(file);
            var str = "";
            if (loupe > 0)
                str = loupe.ToString();
            string _file = @"..\" + filename + "_med" + str + ext;
            string f0 = @"..\" + filename + str + ext;

            misc.log("gener " + f0);

            string f0tmp = f0 + ".tmp";
         //   string f1tmp = _file + ".tmp";
            using (Stream stream = new FileStream(f0tmp, FileMode.Create))
            {
                using (st = new StreamWriter(stream, Encoding.ASCII))
                {
                    try
                    {
                        int deltaBase = (int)(100000);
                        for (level = 4; level >= 0; level--)
                        {
                            deltaBase /= 10;
                            //int nb = VAL_MAX / deltaBase;

                            for (sub = 3; sub >= 1; sub--)
                            {
                                coeff = Math.Pow(6, level - 3* loupe) * sub ; /// loupeCoeff;
                                // level 0 > 0,1,2,3,4,5 puis 01, 23,45, puis 0,3
                                int delta = (int)(sub * deltaBase);
                                int index = 0;
                                st.WriteLine();
                                st.Write("\t\t\tlevel:"); st.Write(level); st.Write(" sub:"); st.WriteLine(sub);

                                min = 0;
                                var max = delta;


                                decimal current = list[index].ClassementValueDecimal;
                                nbCurrent = 0;

                                bool _end = false;
                                while (true)
                                {
                                    if (min >= VAL_MAX)
                                        break;

                                    if (current * 10000 * loupeCoeff + EPSILON >= max || _end)
                                    {

                                        record4();

                                        min = max;
                                        while (reg.IsMatch(min.ToString()))
                                            min += (int)deltaBase;

                                        max = min + delta;
                                        nbCurrent = 0;

                                    }
                                    else
                                    {
                                        nbCurrent++;
                                        index++;
                                        if (index >= list.Count)
                                        {

                                            _end = true;
                                            continue;
                                        }
                                        current = list[index].ClassementValueDecimal;
                                    }
                                }

                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex);
                    }

                }
            }

            File.Copy(f0tmp, f0, true);
            File.Delete(f0tmp);

            misc.log("fin gener " +f0);
            /*
            if (!generDistrib)
                return;

            misc.log("gener distrib " + _file);

            using (FileStream stream2 = new FileStream(f1tmp, FileMode.Create))
            {
                using (st = new StreamWriter(stream2, Encoding.UTF8))
                {

                    try
                    {
                        //phase deux déterminer les tantièmes
                        //1,2,3..10,20,30..100,
                        double nbTot = count;
                        double portion = nbTot;
                        int K = 1;
                        decimal valueFrom = 0;

                        decimal classTo = 6.0m;
                        decimal classFrom = 0.0m;

                        List<Tranche> tranches = new List<Tranche>();
                        Dict<int, Tranche> dict = new Dict<int, Tranche>();
                        const int DETAIL = 10000;

                        for (int i = 0; i < 6 * DETAIL; i++)
                        {
                            if (reg.IsMatch(i.ToString()))
                                continue;
                            var tranche = new Tranche(i);
                            tranches.Add(tranche);
                            dict[i] = tranche;
                        }
                        for (level = 1; level < 2; level++)
                        {



                            for (int div = 2; div <= NB_MEDIANE; div++)
                            {


                                //  st.Write("\t\t\tlevel:"); st.Write(level); st.Write(" div:"); st.WriteLine(div);
                                valueFrom = 0;
                                int iFrom = 0;
                                int iTo = count - 1;
                                portion = nbTot / div;
                                classFrom = 0;
                                for (sub = 1; sub <= div; sub++)
                                {

                                    double to = sub * portion;
                                    iTo = 0;
                                    if (to > 0)
                                        iTo = (int)to - 1;
                                    if (iTo >= list.Count)
                                        iTo = list.Count - 1;
                                    if (iTo < 0)
                                        iTo = 0;
                                    decimal rapport = list[iTo].RapportClassementDecimal;
                                    classTo = list[iTo].ClassementValueDecimal;


                                    //st.Write(classFrom);
                                    ////st.Write("\t");
                                    //st.Write(classTo);
                                    //st.Write("\t");
                                    ////st.Write(valueFrom);
                                    ////
                                    //st.Write(rapport);
                                    //st.Write("\t");


                                    //int nb = (iTo - iFrom + 1);                          
                                    //st.Write(nb);
                                    //st.Write("\t");
                                    decimal densite = 0m;
                                    if (rapport != valueFrom)
                                        densite = 1.0m / ((rapport - valueFrom) * div);
                                    //st.Write("\t");
                                    //st.Write(densite);
                                    //st.WriteLine(); 

                                    for (int i = 0; i < 6 * DETAIL; i++)
                                    {
                                        if (i < classFrom * DETAIL)
                                            continue;
                                        if (i > classTo * DETAIL)
                                            continue;
                                        if (reg.IsMatch(i.ToString()))
                                            continue;
                                        Tranche tranche = dict[i];
                                        //  Tranche tranche = tranches.Find(t => t.index == i);
                                        tranche.densites[div - 1] = densite;
                                    }

                                    valueFrom = rapport;
                                    iFrom = iTo;
                                    classFrom = classTo;
                                }
                            }
                            K *= 10;
                        }

                        st.WriteLine();
                        st.Write("\t");
                        st.Write("\t");
                        st.Write("\t");

                        for (int i = 0; i < NB_MEDIANE; i++)
                        {
                            st.Write(i + 2);
                            st.Write("\t");
                            st.Write(i + 2);
                            st.Write("\t");
                        }
                        Tranche last = null;
                        foreach (Tranche tranche in tranches)
                        {
                            st.WriteLine();
                            st.Write((double)tranche.index / DETAIL);
                            st.Write("\t");

                            for (int i = 0; i < NB_MEDIANE; i++)
                            {
                                var densite = tranche.densites[i];
                                st.Write(densite);
                                st.Write("\t");
                                if (last == null || last.densites[i] != densite)
                                {
                                    st.Write(densite);
                                }
                                else
                                    st.Write(0);
                                st.Write("\t");
                            }
                            last = tranche;
                        }

                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e);
                    }
                }

            }

            File.Copy(f1tmp, _file, true);
            File.Delete(f1tmp);

            misc.log("fin gener distrib " + _file);
             * */
        }

        public void gener(string file)
        {
            int count = list.Count;
            if (count == 0)
                return;
            decimal EPSILON = 0.00000001m;

            var filename = Path.GetFileNameWithoutExtension(file);
            var ext = Path.GetExtension(file);
            string _file = @"..\" + filename + "2" + ext;
            using (Stream stream = new FileStream(_file, FileMode.Create))
            {
                using (pdb.util.TextWriter st = new pdb.util.TextWriter(stream, Encoding.ASCII))
                {
                    try
                    {
                        int deltaBase = 10000;
                        for (level = 3; level >= 0; level--)
                        {
                            deltaBase /= 10;
                            int nb = VAL_MAX / deltaBase;
                            //  var tab = new int[nb]; 
                            for (sub = 3; sub >= 1; sub--)
                            {
                                // level 0 > 0,1,2,3,4,5 puis 01, 23,45, puis 0,3
                                delta = sub * deltaBase;
                                int index = 0;


                                min = 0;
                                int max = delta;


                                var current = list[index].ClassementValueDecimal;
                                nbCurrent = 0;

                                bool _end = false;
                                while (true)
                                {
                                    if (min >= VAL_MAX)
                                        break;

                                    if (current * 1000 + EPSILON >= max || _end)
                                    {
                                        record2();

                                        min = max;
                                        while (reg.IsMatch(min.ToString()))
                                            min += deltaBase;

                                        max = min + delta;
                                        nbCurrent = 0;

                                    }
                                    else
                                    {
                                        nbCurrent++;
                                        index++;
                                        if (index >= list.Count)
                                        {

                                            _end = true;
                                            continue;
                                        }
                                        current = list[index].ClassementValueDecimal;
                                    }
                                }

                            }
                        }

                        var datas = conteneur.Datas;

                        var results = new List<ResultLine>();

                        min = 0;
                        while (true)
                        {
                            while (reg.IsMatch(min.ToString()))
                                min++;
                            if (min >= VAL_MAX)
                                break;
                            results.Add(new ResultLine(min));
                            min++;
                        }

                        foreach (StatItem item in datas)
                        {
                            var level = item.level;
                            var sub = item.sub;
                            var _min = item.min;
                            var nb = item.nb;
                            // Détermination de la colonne
                            int col = 3 * level + sub - 1;

                            // Détermination du coeff d'expansion / moyenne
                            int coeff = (int)Math.Pow(6, level) * sub;

                            ResultLine res0 = results.Find(r => r.min == _min);
                            int index0 = results.IndexOf(res0);

                            for (int i = 0; i < coeff; i++)
                            {
                                results[index0 + i][col] = (double)nb / (double)coeff;
                            }

                        }


                        st.Append("min"); st.Append("\t");
                        for (int l = 0; l < 4; l++)
                        {
                            for (int s = 1; s <= 3; s++)
                            {
                                st.Append(l); st.Append(" ");
                                st.Append(s); st.Append("\t");
                            }

                        }
                        st.AppendLine();
                        st.AppendLine();


                        foreach (ResultLine line in results)
                        {
                            line.getLine(st); st.AppendLine();
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex);
                    }

                    try
                    {

                        st.AppendLine();
                        st.AppendLine();
                        //phase deux déterminer les tantièmes
                        //1,2,3..10,20,30..100,
                        double nbTot = count;
                        double portion = nbTot;
                        int K = 1;
                        decimal valueFrom = 0m;

                        decimal classTo = 6.0m;
                        decimal classFrom = 0.0m;

                        List<Tranche> tranches = new List<Tranche>();
                        const int DETAIL = 1000;
                        for (int i = 0; i < 6 * DETAIL; i++)
                        {
                            if (reg.IsMatch(i.ToString()))
                                continue;
                            tranches.Add(new Tranche(i));
                        }
                        for (level = 1; level < 2; level++)
                        {



                            for (int div = 2; div <= NB_MEDIANE; div++)
                            {


                                //  st.Write("\t\t\tlevel:"); st.Write(level); st.Write(" div:"); st.WriteLine(div);
                                valueFrom = 0;
                                int iFrom = 0;
                                int iTo = count - 1;
                                portion = nbTot / div;
                                classFrom = 0;
                                for (sub = 1; sub <= div; sub++)
                                {

                                    double to = sub * portion;
                                    iTo = 0;
                                    if (to > 0)
                                        iTo = (int)to - 1;
                                    if (iTo >= list.Count)
                                        iTo = list.Count - 1;
                                    if (iTo < 0)
                                        iTo = 0;
                                    var rapport = list[iTo].RapportClassementDecimal;
                                    classTo = list[iTo].ClassementValueDecimal;


                                    //st.Write(classFrom);
                                    ////st.Write("\t");
                                    //st.Write(classTo);
                                    //st.Write("\t");
                                    ////st.Write(valueFrom);
                                    ////
                                    //st.Write(rapport);
                                    //st.Write("\t");


                                    //int nb = (iTo - iFrom + 1);                          
                                    //st.Write(nb);
                                    //st.Write("\t");
                                    decimal densite = 0m;
                                    if (rapport != valueFrom)
                                        densite = 1.0m / ((rapport - valueFrom) * div);
                                    //st.Write("\t");
                                    //st.Write(densite);
                                    //st.WriteLine(); 

                                    for (int i = 0; i < 6 * DETAIL; i++)
                                    {
                                        if (i < classFrom * DETAIL)
                                            continue;
                                        if (i > classTo * DETAIL)
                                            continue;
                                        if (reg.IsMatch(i.ToString()))
                                            continue;
                                        Tranche tranche = tranches.Find(t => t.index == i);
                                        tranche.densites[div - 1] = densite;
                                    }

                                    valueFrom = rapport;
                                    iFrom = iTo;
                                    classFrom = classTo;
                                }
                            }
                            K *= 10;
                        }

                        st.AppendLine();
                        st.Append("\t");
                        st.Append("\t");
                        st.Append("\t");

                        for (int i = 0; i < NB_MEDIANE; i++)
                        {
                            st.Append(i + 2);
                            st.Append("\t");
                            st.Append(i + 2);
                            st.Append("\t");
                        }
                        Tranche last = null;
                        foreach (Tranche tranche in tranches)
                        {
                            st.AppendLine();
                            st.Append((double)tranche.index / DETAIL);
                            st.Append("\t");


                            for (int i = 0; i < NB_MEDIANE; i++)
                            {
                                var densite = tranche.densites[i];
                                st.Append(densite);
                                st.Append("\t");
                                if (last == null || last.densites[i] != densite)
                                {
                                    st.Append(densite);
                                }
                                else
                                    st.Append(0);
                                st.Append("\t");
                            }
                            last = tranche;
                        }

                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex);
                    }
                }
            }
        }


    }
}
]]></content>
  </file>
  <file path="\PieceDb.Consolid\Tuning\ConfAlbumSort.cs">
    <content><![CDATA[using System.Collections.Generic;
using System.Xml;
using pdb.util;
using System;
using pdb.gen.albums;

namespace pdb.gen.Tuning
{
    [Serializable]
    /// <summary>
    /// Configuration sort Albums
    /// </summary>
    public class ConfAlbumSort : TuningBase
    {
      
        private List<ConfMedianne> composants = new List<ConfMedianne>();
        private List<ConfMedianne> composantsUtiles = new List<ConfMedianne>();
        public List<ConfMedianne> Composants { get { return composants; } }
        public List<ConfMedianne> ComposantsUtiles { get { return composantsUtiles; } }
        public decimal coeffEnabled = 1m;
        public int stackSize = 0;
        public DateTime lastModif;
        public bool createCourant = true;
        public bool createInter = true;
        public bool createAll;
        public bool oldAsZero; 
        public void Calcul()
        {
            composantsUtiles = new List<ConfMedianne>();
            foreach (var cmp in composants)
            {
                if (cmp.enabled)
                    composantsUtiles.Add(cmp);
            }
            if (composantsUtiles.Count == 0)
                composantsUtiles.Add(composants[0]);
        }
        public ConfAlbumSort()
        {
        }

        public ConfAlbumSort(XmlElement node)
            : base(node)
        {

            composants.Clear();
            foreach (XmlNode sub in node.ChildNodes)
            {
                if (sub is XmlElement)
                {
                    var cmp = new ConfMedianne(node, sub as XmlElement);
                    composants.Add(cmp);
                }
            }

            builddec("coeffEnabled", v => coeffEnabled = v);
            buildi("stackSize", v => stackSize = v);
            buildDate("lastModif", v => lastModif = v);
            buildb("createCourant", v => createCourant = v);
            buildb("createInter", v => createInter = v);
            buildb("createAll", v => createAll = v);
            buildb("oldAsZero", v => oldAsZero = v); 
            Calcul();

        }

        public override void save(XmlWriter w)
        {
            base.save(w); 
            writeStart("albumSort");
                write("coeffEnabled", coeffEnabled);
                write("stackSize",stackSize);
                write("lastModif", lastModif); 
                write("createCourant", createCourant);
                write("createInter", createInter);
                write("createAll", createAll);
                write("oldAsZero", oldAsZero);
                foreach (var cmp in composants)
                    cmp.save(w);
            writeEnd(); 
        }
        public bool Enabled
        {
            get
            {
                foreach (var cmp in composants)
                {
                    if (cmp.enabled)
                        return true;
                }
                return false;
            }
        }

        public void auto(Piece p)
        {
            if ( p.StackIndex >0 && p.StackIndex <= stackSize + 1)
                return; 
            var motif = p.SelectedMotif;
            if (p.SelectedMotif == selectedCoeff.none)
                return; 
            foreach (var cmp in composants)
            {
                cmp.auto(motif); 
            }
        }
    }


}
]]></content>
  </file>
  <file path="\PieceDb.Consolid\Tuning\CTuning.cs">
    <content><![CDATA[using System;
using pdb.obj;
using pdb.util;
using Math = pdb.util.Math; 

namespace pdb.gen.conf
{
    /// <summary>
    /// permet de gérer finement les possibiltés de tri 
    /// TODO et de sélection
    /// </summary>
    /// <remarks></remarks>
    public class CTuning
    {
        //nombre total de fichiers classés

        private static int total;
        private static int dizaines;

        public static int Total
        {
            get
            {
                return total;
            }
            set
            {
                total = value +2;
                dizaines = 10;
                while (dizaines < total)
                    dizaines *= 10;
            }
        }

        public static void format(StringBuilder sb, int rank)
        {
            if (rank <= 0)
                return;
            int aux = dizaines;
            aux /= 10;
            while (aux > rank)
            {
                sb.Append("0");
                aux /= 10;
            }
            sb.Append(rank.ToString());

        }

        public static string getFormat(int rank)
        {
            StringBuilder sb = new StringBuilder();
            format(sb, rank);
            return sb.ToString();

        }


        public static decimal Calc(CRank a_piece, CConfSort a_conf)
        {
            return RapportNorm(a_piece.Quality, a_conf.Quality) * (1 - a_conf.TimePriority) + RapportNorm(a_piece.Lenght, a_conf.Length) * a_conf.TimePriority;
        }

        /// <summary>
        /// norme le taux de priorité afin de pouvoir faire la compétition entre longueur et qualité
        /// </summary>
        /// <param name="a_rank"></param>
        /// <param name="a_conf"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        private static decimal RapportNorm(int a_rank, CConfQL a_conf)
        {
            return _Rapport(a_rank, a_conf) / _Rapport(1, a_conf);
        }


        //   public static int BorneSup { get { return dizaines; } }
        /// <summary>
        /// Donne le taux de priorité en fonction du rang
        /// </summary>
        /// <param name="a_rank"></param>
        /// <returns></returns>
        /// <remarks>utilisé tel quel pour la sélection des morceaux</remarks>
        private static decimal _Rapport(int a_rank, CConfQL a_conf)
        {
            return _Rapport(a_rank, a_conf.Offset, a_conf.Mode, a_conf.Exp,a_conf.Coeff, a_conf.Base);
        }

        public static decimal Rapport(int a_rank)
        {
            return _Rapport(a_rank, 0, listMode.substract, 1,1,2);
        }

        private static decimal _Rapport(int a_rank, int offset, listMode listMode, decimal exp, decimal coeff, decimal baseLog)
        {

            if (a_rank < 0)
                a_rank = total - 1; 
            decimal r = 1;


            if (offset < 0 && Total - a_rank <= -offset)
                return 0.001m *0.001m;



            switch (listMode)
            {

                case listMode.rapport:
                    r = Convert.ToDecimal(Total) / Convert.ToDecimal((a_rank + offset));
                    break;
                case listMode.substract:
                    r = (Convert.ToDecimal(Total) + 1 + offset - a_rank) / Total;
                    break;
                case listMode.logPure:
                    r =  (Math.Log(Total + 1 + offset) - Math.Log(a_rank)) / Math.Log(2);
                    break;
                case listMode.log:
                    r = (Math.Log(Total * 2 + offset) - Math.Log(a_rank)) / Math.Log(2);
                    break;
                case listMode.logAbs:
                    if (exp <= 1)
                        exp = 10;
                    var rang = a_rank + offset;
                    if (rang < 1)
                        rang = 1;

                    var den = 1 + offset;
                    if (den < 1)
                        den = 1;
                 
                    var ln = Math.Log(rang, exp);
                
                    r = 1 + ln;
                    return 1 / r;
                case listMode.linear:
                    // offset = 1/ pente
                    decimal pente = 0;
                    if (offset > 0)
                        pente = 1 / (decimal)offset;
                    decimal y = a_rank - 1;
                    y = y * pente;
                    if (y < 1 && exp < 1)
                    {
                    }
                    else
                        y =  Math.Pow(y, exp);
                    r = 1.0m + y;
                    return 1 / r;

                //r =  (1 + (double)offset) / (a_rank + offset);
                //break; 
            }


            if (exp > 0 && exp !=1m)
                r = Math.Pow(r, exp);
            return r;
        }


        public static decimal getRest(decimal dt, CConfQL conf)
        {
            decimal offset = 0.001m * conf.Offset;
            decimal ret = 1;

            decimal exp = conf.Exp;

            if (exp == 1)
            {
                switch (conf.Mode)
                {
                    case listMode.substract: ret = 1m + offset - dt;
                        break;
                    case listMode.rapport: ret = 1m / (1m - offset + dt);
                        break;
                    case listMode.logPure:
                        var x = offset - dt;
                        //if (x > 0)
                        //    x = 0;
                        ret =Math.Exp(x);
                        break;
                    case listMode.log:
                        x = offset - dt;
                        //if (x > 0)
                        //    x = 0;
                        ret = Math.Exp(x * Math.Log(2));
                        break;
                    default:
                        break;
                }
            }
            else
            {
                if (exp > 0)
                    exp = -exp;
                ret = Math.Pow( 1m - offset + dt, exp);

            }

            return ret;
        }


        public static decimal getOrg(decimal ret, CConfQL conf)
        {
            var offset = 0.001m * conf.Offset;
            var dt = 1m;

            var exp = conf.Exp;

            if (exp == 1)
            {
                switch (conf.Mode)
                {
                    case listMode.substract:  dt =   1 + offset - ret;
                        break;
                    case listMode.rapport: dt = offset - 1 + 1 / ret;   //ret = 1 / (1 - offset + dt);
                        break;
                    case listMode.logPure: if (ret == 1) dt = 0;
                        else
                        {
                            var x = Math.Log(ret);
                            dt = x - offset; 
                        }
                      
                        break;
                    case listMode.log:
                        if (ret == 2) dt = 0;
                        else
                        {
                            var x = Math.Log(ret) / Math.Log(2m);
                            dt = x - offset; 
                        }
                      
                        break;
                    default:
                        break;
                }
            }
            else
            {

                if (exp > 0)
                    exp = -exp;

                dt = (Math.Log(ret) + offset - 1) / Math.Log(exp); 
             
            }

            return ret;
        }

    }
}
]]></content>
  </file>
  <file path="\PieceDb.Db\CDb.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading;
using System.Xml;
using pdb.db.obj;
using pdb.db.piece.data;
using pdb.obj;
using pdb.util;
using Math = System.Math; 

namespace pdb.db
{
    public enum mergePriority
    {
        left = -1,
        right = 1,
        none = 0
    }
    /// <summary>
    /// g�re la persistence
    /// </summary>  
    /// <remarks></remarks>
    public class CDb
    {
        public const int CURRENT_VERSION = 3;
        public static int Version;

        const string SEQ_PIECE = "seq_piece";
        const string SEQ_LIST = "seq_list";
        private static int pieceSequenceId = 0;
        private static int listSequenceId = 0;
        private static int getPieceNextId { get { pieceSequenceId++; return pieceSequenceId; } }
        private static int getListNextId { get { listSequenceId++; return listSequenceId; } }
        private FileInfo LOCAL_FILE;
        private FileInfo REMOTE_FILE;
        private FileInfo LastFullFile;
        private FileInfo DiffFile;
        private FileInfo SOV;
        private CListPiece m_list;
        private CListPiece lastFull; private CListPiece remoteOrg;
        private CListPiece trace;
        private DateTime now;
        private string sovRep;
        private DateTime lastSov;
        private int nbOpe;

        private bool loadRemote;
        private bool loadTrace;
        private bool loadLastFull;
        private bool loadDiff;



        private FileInfo remoteTrace;
        private DataConf conf;

        private dbMode mode;
        public dbMode Mode { get { return mode; } }
        public CDb(DataConf conf)
        {
            this.conf = conf;
            LOCAL_FILE = conf.dbLocal;
            REMOTE_FILE = conf.dbRemote;
            remoteTrace = conf.dbTrace;
            LastFullFile = conf.dbLastFull;
            DiffFile = conf.dbDiff;
            SOV = conf.dbSov;
            this.mode = conf.mode;

            init();
        }

        public string DefaultFolder { get { return conf.defaultFolder; } }

        private void init()
        {
            this.now = DateTime.Now;
            lastSov = now;
            sovRep = now.ToString("yy-MM-dd_HH-mm-ss");



            System.DateTime l_localDate = System.DateTime.MinValue;
            System.DateTime l_remoteDate = System.DateTime.MinValue;

            if (LOCAL_FILE.Exists)
                l_localDate = LOCAL_FILE.LastWriteTime;
            if (REMOTE_FILE.Exists)
                l_remoteDate = REMOTE_FILE.LastWriteTime;


            TimeSpan l_dif = l_localDate.Subtract(l_remoteDate);
            double l_sec = l_dif.TotalSeconds;
            if (REMOTE_FILE.Exists)
            {

                if (Math.Abs(l_sec) > 3 || (LOCAL_FILE.Exists && REMOTE_FILE.Length != LOCAL_FILE.Length))
                {
                    loadRemote = true;
                }
                else
                {
                    log("not load remote, same file");
                }
            }
            else
            {
                log("remote file does not exist");
            }

            if (remoteTrace != null && remoteTrace.Exists)
                loadTrace = true;




        }

        public void loadData()
        {
            // cas diff-> je mémorise lastFull, je r�cup�re l'instantan�
            // cas full -> je ne m�morise pas lastFull, je r�cup�re le diff et fait le merge

            // gestion des diff
            //if (mode == dbMode.diff)
            //{
            // je sauvegarde lastFull
            misc.log("mode:{0}  LastFullFile.Exists: {1} DiffFile.Exists: {2}", mode, LastFullFile.Exists, DiffFile.Exists);
            if (mode == dbMode.diff)
            {
                if (LastFullFile.Exists)
                {
                    log("load lastFull");
                    lastFull = loadData(LastFullFile);
                }
                else
                {
                    log("load local for lastFull");
                    lastFull = loadData(LOCAL_FILE);
                    File.Copy(LOCAL_FILE.FullName, LastFullFile.FullName, true);
                }

                log("load local");
                m_list = loadData(LOCAL_FILE);
            }

            else
            {

                log("load local");
                m_list = loadData(LOCAL_FILE);
                if (DiffFile.Exists)
                {


                    log("load diff");
                    var diff = loadData(DiffFile);


                    log("consolid diff and local");
                    foreach (CPiece pdiff in diff)
                    {
                        m_list.Consolid(pdiff, mergePriority.right);
                    }

                    var sov = DiffFile.FullName.Replace(".xml", ".sov.xml");
                    DiffFile.CopyTo(sov, true);
                    DiffFile.Delete();


                    write();

                    log("load local consolidé for lastFull");
                    lastFull = loadData(LOCAL_FILE);
                    File.Copy(LOCAL_FILE.FullName, LastFullFile.FullName, true);
                    addToZip(true, LOCAL_FILE.FullName);
                }
                else
                {
                    log("load local for lastFull");
                    lastFull = loadData(LOCAL_FILE);
                    File.Copy(LOCAL_FILE.FullName, LastFullFile.FullName, true);

                    if (loadRemote)
                    {
                        log("load remote");
                        remoteOrg = loadData(REMOTE_FILE);
                        log("consolid remote and local");
                        m_list.Consolid(remoteOrg);
                    }
                }
            }


            if (loadTrace)
            {
                log("load trace");
                trace = loadData(remoteTrace);
            }
        }

        public void eraseClassementForEnabled()
        {

            foreach (CPiece piece in m_list)
            {
                if (piece.Enabled)
                {
                    piece.eraseClassement();
                }
            }
        }

        public List<ITrackIdentity> Files
        {
            get
            {
                return new List<ITrackIdentity>(m_list.getList());
            }
        }

        // r�cup�ration des infos externes
        public void LegacyConsolid(CListPiece list, DateTime date)
        {
            misc.log("Cdb::LegacyConsolid");

            DateTime now = DateTime.Now;
            ChronoData.refreshDate(date);

            foreach (CPiece ext in list)
            {
                m_list.legacyConsolid(ext);
            }

            m_list.bilanNatives();

            setAlbumArtistFromFile();

        }

        public void LegacyConsolid(CPiece ext)
        {
            m_list.legacyConsolid(ext);
        }

        public void SynchroNative(DateTime date)
        {
            misc.log("Cdb::SynchroNative");
            ChronoData.refreshDate(date);
            foreach (CPiece piece in m_list)
            {
                piece.SynchroNative();
            }

        }

        private void setAlbumArtistFromFile()
        {
            foreach (ITrackMetaData piece in m_list)
            {
                setAlbumArtistFromFile(piece);
            }
        }



        private void setAlbumArtistFromFile(ITrackMetaData piece)
        {

            try
            {
                string location = piece.Location;
                if (location.isNullorEmpty())
                    return;
                FileInfo file = new FileInfo(location);
                DirectoryInfo dAlbum = file.Directory;
                string dirAlbum = dAlbum.Name;
                string dirArtist = dAlbum.Parent.Name;
                string artist = piece.Artist;
                string album = piece.Album;

                string newArtist = artist;
                string newAlbum = album;




                if (artist.isNullorEmpty())
                {
                    if (!TrackIdentity.UNKNOW_ARTIST.Equals(dirArtist))
                        newArtist = dirArtist;
                    //if (!UNKNOW_ARTIST.Equals(newArtist))
                    //    piece.Artist = newArtist;
                }

                if (album.isNullorEmpty())
                {
                    if (!dirAlbum.Contains(TrackIdentity.UNKNOW_ALBUM))
                    {
                        newAlbum = dirAlbum;
                        if (newArtist.NotNullOrEmpty())
                        {
                            if (!TrackIdentity.UNKNOW_ARTIST.Equals(newArtist))
                                newAlbum = newAlbum.Replace(newArtist, "");
                        }
                    }
                }

                //if (TrackIdentity.UNKNOW_ARTIST.Equals(newArtist))
                //    piece.Artist = "";
                //else 
                if (newArtist != artist)
                    piece.Artist = newArtist;

                //if (TrackIdentity.UNKNOW_ALBUM.Equals(newAlbum))
                //    piece.Album = "";
                //else
                if (newAlbum != album)
                    piece.Album = newAlbum;

            }
            catch (Exception e)
            {
                misc.log(e.ToString());
            }
        }



        #region "sauvegarde"



        public void Sov(string fileIt)
        {
            var list = new List<string> { fileIt, LOCAL_FILE.FullName };
            if (loadRemote)
                list.Add(REMOTE_FILE.FullName);
            if (loadTrace)
                list.Add(remoteTrace.FullName);

            ZipUtil.compress(SOV.FullName, sovRep, list);
        }

        public void SovIni()
        {
            var list = new List<string> { LOCAL_FILE.FullName, LastFullFile.FullName, DiffFile.FullName };
            if (loadRemote)
                list.Add(REMOTE_FILE.FullName);
            if (loadTrace)
                list.Add(remoteTrace.FullName);

            list.AddRange(conf.othersIni); 

            ZipUtil.compress(SOV.FullName, sovRep, list);
        }

       
        #endregion

        public void removeVersions()
        {
            misc.log("Suppression des versions !!!");
            foreach (CPiece piece in m_list)
            {
                piece.removeVersions();
            }
        }

        public void Menage()
        {
            foreach (CPiece piece in m_list)
            {
                piece.Menage();
            }
        }

        public void WriteDB1()
        {

            misc.log("CDb:WriteDB1");

            lock (lockSave)
            {
                write();
                File.Copy(REMOTE_FILE.FullName + ".tmp", REMOTE_FILE.FullName, true);
                misc.log("CDb:fin WriteDB1");
            }

        }
        public void saveAsync()
        {
            lock (this)
            {
                _goSave = true;
                if (thSave == null)
                {
                    thSave = new Thread(loopSave);
                    thSave.Start();
                }
            }
        }
        private Thread thSave;
        private bool _goSave;
        private volatile object lockSave = new object();

        private void write()
        {
            var settings = new XmlWriterSettings();
            settings.Indent = true;
            settings.Encoding = Encoding.UTF8;
            using (XmlWriter writer = XmlWriter.Create(REMOTE_FILE.FullName + ".tmp", settings))
            {
                writer.WriteStartElement("db");
                writer.WriteAttributeString("version", CURRENT_VERSION.ToString());
                writer.WriteAttributeString(SEQ_PIECE, pieceSequenceId.ToString());
                writer.WriteAttributeString(SEQ_LIST, listSequenceId.ToString());
                m_list.write(writer);
                writer.WriteEndDocument();
                writer.Flush();
            }

            File.Copy(REMOTE_FILE.FullName + ".tmp", REMOTE_FILE.FullName, true);



            if (lastFull != null)
            {
                try
                {
                    var diff = DiffFile.FullName;
                    if (mode == dbMode.full)
                        diff = diff.Replace(".xml", ".d.xml");

                    using (XmlWriter writer = XmlWriter.Create(diff + ".tmp", settings))
                    {
                        writer.WriteStartElement("db");
                        writer.WriteAttributeString("version", CURRENT_VERSION.ToString());
                        writer.WriteAttributeString(SEQ_PIECE, pieceSequenceId.ToString());
                        m_list.writeDiff(writer, lastFull);
                        writer.WriteEndDocument();
                        writer.Flush();
                    }

                    File.Copy(diff + ".tmp", DiffFile.FullName, true);
                }
                catch (Exception ex)
                {
                    misc.log(ex.ToString());
                }
            }

            WriteDB2();
        }
        private void loopSave()
        {
            while (true)
            {
                Thread.Sleep(1000);
                if (!_goSave)
                    continue;
                lock (this)
                    _goSave = false;

                lock (lockSave)
                {

                    try
                    {
                        write();
                    }
                    catch (Exception ex)
                    {
                        misc.log(ex.ToString());
                        lock (this)
                            _goSave = true;
                    }
                }

            }
        }

        public void WriteDB2()
        {

            misc.log("CDb:WriteDB2");
            lock (lockSave)
                REMOTE_FILE.CopyTo(LOCAL_FILE.FullName, true);
            misc.log("CDb:WriteDB2");

            nbOpe++;
            var now = DateTime.Now;
            var ts = now - lastSov;
            if (nbOpe >= conf.sovNb || ts > conf.sovMin)
            {
                nbOpe = 0;
                lastSov = now;
                DiffFile.Refresh();
                if (DiffFile.Exists)
                {
                    var list = new List<string> { DiffFile.FullName };
                    list.AddRange(conf.othersDiff); 
                    addToZip(true, list.ToArray());
                    //var cp = DiffFile.DirectoryName + Path.DirectorySeparatorChar + now.ToString("yy-MM-dd_HH-mm-ss") + DiffFile.Name;
                    //DiffFile.CopyTo(cp);
                    //var list = new List<string> { cp };
                    //ZipUtil.compress(SOV.FullName, sovRep, list);
                    //File.Delete(cp); 
                }


            }
        }

        private void addToZip(bool withHorodate, params string[] list)
        {
            ZipUtil.compress(SOV.FullName, sovRep, list, withHorodate);
        }


        public CListPiece List
        {
            get
            {
                return m_list;

            }

        }

        public CListPiece Remote
        {
            get
            {
                if (loadRemote)
                    return remoteOrg;
                return null;
            }

        }

        public CListPiece Trace
        {
            get { return trace; }
        }

        private XmlElement loadList(FileInfo file, List<CPiece> list)
        {
            XmlElement root = null;
            if (file.Exists)
            {
                XmlDocument l_doc = new XmlDocument();


                l_doc.Load(file.FullName);

                root = l_doc.DocumentElement;
                var xmlTool = new XMLTool(root);
                var version = xmlTool.getIntAttValue("version");
                if (version > 0)
                    Version = version;


                var seqPiece = xmlTool.getIntAttValue(SEQ_PIECE);
                if (seqPiece > pieceSequenceId)
                {
                    pieceSequenceId = seqPiece;
                }

                var seqList = xmlTool.getIntAttValue(SEQ_LIST);
                if (seqList > listSequenceId)
                {
                    listSequenceId = seqList;
                }

                var pieceRoot = root;
                if (version > 0)
                    pieceRoot = root.ChildNodes[0] as XmlElement;



                foreach (XmlElement l_xml in pieceRoot.ChildNodes)
                {
                    CPiece l_piece = new CPiece(l_xml);

                    list.Add(l_piece); //TODO provisoire
                    if (version > 0)
                        checkId(l_piece);
                    else
                    {
                        if (m_list != null)
                        {
                            m_list.checkId(l_piece); 
                        }
                        checkId(l_piece);
                    }
                    //}
                }
                misc.log("aux list: " + list.Count);




            }
            else
            {

            }

            return root;
        }



        private  CListPiece loadData(FileInfo file)
        {
            if (file.Exists)
            {

                List<CPiece> l_list = new List<CPiece>();
                var root = loadList(file, l_list);


                misc.log("aux list: " + l_list.Count);
                System.DateTime l_date = file.LastWriteTime; // File.GetLastWriteTime(a_path);

                //chasse aux doublons
                CListPiece l_ret = new CListPiece(l_list, l_date);
                misc.log(" list: " + l_ret.Count);

                var xLists = XMLTool.NodeLookUp(root, CListPiece.TOKEN_LISTS);

                l_ret.loadListes(xLists);
                return l_ret;
            }
            else
            {
                return new CListPiece();
            }

        }

        public static void checkId(CPiece l_piece)
        {
            if (l_piece.PieceId < 0)
                l_piece.setId(getPieceNextId);
            if (l_piece.PieceId > pieceSequenceId)
                pieceSequenceId = l_piece.PieceId;
        }

        public static void checkId(CPlayList pl)
        {
            if (pl.ID < 0)
                pl.ID = getListNextId;
            if (pl.ID > listSequenceId)
                listSequenceId = pl.ID;
        }
        private void log(String txt)
        {
            misc.log(txt);
        }

        public CPiece getPiece(string location)
        {
            return m_list.getPiece(location);
        }

        public CPiece getPiece(int id)
        {
            return m_list.getPiece(id);
        }
    }


}


]]></content>
  </file>
</db>
