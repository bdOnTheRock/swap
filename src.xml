<db path="C:\Bernard\db1\pdb4">
  <file path="\PieceDb.Consolid\Tuning\ConfAlbumSort.cs">
    <content><![CDATA[using System.Collections.Generic;
using System.Xml;
using pdb.util;
using System;
using pdb.gen.albums;

namespace pdb.gen.Tuning
{
    [Serializable]
    /// <summary>
    /// Configuration sort Albums
    /// </summary>
    public class ConfAlbumSort : TuningBase
    {

        private List<ConfMedianne> composants = new List<ConfMedianne>();
        private List<ConfMedianne> composantsUtiles = new List<ConfMedianne>();
        public List<ConfMedianne> Composants { get { return composants; } }
        public List<ConfMedianne> ComposantsUtiles { get { return composantsUtiles; } }
        // public decimal coeffEnabled = 1m;
        public int stackSize = 0;
        public int stackBefore = 0;
        public bool checkStack = false;
        public bool stackEnabled = true; 
        public DateTime lastModif;
        public bool createCourant = true;
        public bool createInter = true;
        public bool createAll;
        // public bool oldAsZero; 
        public void Calcul()
        {
            composantsUtiles = new List<ConfMedianne>();
            foreach (var cmp in composants)
            {
                if (cmp.enabled)
                    composantsUtiles.Add(cmp);
            }
            if (composantsUtiles.Count == 0)
                composantsUtiles.Add(composants[0]);
        }
        public ConfAlbumSort()
        {
        }

        public ConfAlbumSort(XmlElement node)
            : base(node)
        {

            composants.Clear();
            foreach (XmlNode sub in node.ChildNodes)
            {
                if (sub is XmlElement)
                {
                    var cmp = new ConfMedianne(node, sub as XmlElement);
                    composants.Add(cmp);
                }
            }


            buildi("stackSize", v => stackSize = v);
            buildi("stackBefore", v => stackBefore = v);
            
            buildb("stackEnabled", v => stackEnabled = v);
            buildb("checkStack", v => checkStack = v);
            buildDate("lastModif", v => lastModif = v);
            buildb("createCourant", v => createCourant = v);
            buildb("createInter", v => createInter = v);
            buildb("createAll", v => createAll = v);


            
            Calcul();

        }

        public override void save(XmlWriter w)
        {
            base.save(w);
            writeStart("albumSort");

            write("stackSize", stackSize);
             write("stackBefore", stackBefore);
         
            write("stackEnabled", stackEnabled); 
            write("checkStack", checkStack);
            write("lastModif", lastModif);
            write("createCourant", createCourant);
            write("createInter", createInter);
            write("createAll", createAll);

            foreach (var cmp in composants)
                cmp.save(w);
            writeEnd();
        }
        public bool Enabled
        {
            get
            {
                foreach (var cmp in composants)
                {
                    if (cmp.enabled)
                        return true;
                }
                return false;
            }
        }

        public void auto(Piece p)
        {
            try
            {
                if (checkStack && p.PieceAlbum != null && p.PieceAlbum.Empeached)
                    return;
                var motif = p.SelectedMotif;
                if (p.SelectedMotif == selectedCoeff.none)
                    return;
                foreach (var cmp in composants)
                {
                    cmp.auto(motif);
                }
            }
            finally
            {
                foreach (Piece pp in p)
                {
                    pp.Empeached = false;
                    pp.Empeached1 = false;
                }
            }
        }
    }


}
]]></content>
  </file>
</db>
