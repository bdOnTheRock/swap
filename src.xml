<db path="C:\Bernard\db1\PieceDb3Ref">
  <file path="\pdb.player\App.xaml">
    <content><![CDATA[<Application x:Class="pdb.player.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:util="clr-namespace:pdb.player.Vue.Util"
             StartupUri="Player.xaml">
    <Application.Resources>
        <util:StringFormatConverter x:Key="StringFormater" />
        <util:TimeFormatConverter x:Key="TimeSpan" />
        <util:IntFormatConverter x:Key="Int" />
        <util:ClFormatConverter x:Key="cl" />
        <util:BgColorFormatConverter x:Key="colorExport" />
    </Application.Resources>
</Application>
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\TrackListViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Windows;
using pdb.obj;
using pdb.util;
using pdb.gen;
using pdb.db.obj;

namespace pdb.player.ViewModel
{
    public enum exportState
    {
        none = 0,
        miss = 1,
        present = 2,
        copy = 3,
        delete = 4
    }
    public class TrackListViewModel : BibViewModelBase, ITrackNativeDates
    {




        #region rÃ©percut
        //  private static BgDict<int, List<TrackListViewModel>> dictT = new BgDict<int, List<TrackListViewModel>>();
        #endregion
        private TrackList track;
        private PieceViewModel piece;
        private static TrackListViewModel currentPlaying;
        private static TrackListViewModel currentSelected;
        public TrackList Track { get { return track; } }
        public CPiece Piece { get { return piece.Piece; } }
        public Piece PieceGen { get { return track.Piece; } }
        public Piece Master { get { return PieceGen.Master; } }

        public void remove()
        {
            //var list = dictT[PieceId];
            //if (list == null)
            //    return;
            //list.Remove(this);
        }

        public void refresh()
        {
            OnPropertyChanged("");
        }

        public override bool IsSelected
        {
            get
            {
                return base.IsSelected;
            }
            set
            {
                base.IsSelected = value;
                if (value)
                    CurrentSelected = this;
            }
        }

        private int index;
        public int Index
        {
            get { return index; }
            set
            {
                if (value != index)
                {
                    index = value;
                    OnPropertyChanged("Index");
                }
            }
        }

        public static event EventHandler CurrentSelectedChanged;
        public static TrackListViewModel CurrentSelected
        {
            get
            {
                return currentSelected;
            }
            set
            {
                if (value != currentSelected)
                {
                    currentSelected = value;
                    if (CurrentSelectedChanged != null)
                        CurrentSelectedChanged("Track", EventArgs.Empty);
                }
            }
        }

        public static event EventHandler CurrentHumanSelectedChanged;
        private static TrackListViewModel humanSelected;
        public static TrackListViewModel HumanSelected
        {
            get { return humanSelected; }
            set
            {
                if (value != humanSelected)
                {
                    humanSelected = value;
                    if (CurrentHumanSelectedChanged != null)
                        CurrentHumanSelectedChanged("Human", EventArgs.Empty);
                }
            }
        }

        public bool Enabled
        {
            get
            {
                return piece.Enabled;
            }
            set
            {
                piece.Enabled = value;
                //if (value != track.Enabled)
                //{
                //    track.Piece.Enabled = value;
                //    OnPropertyChanged("Enabled");
                //}
            }
        }
        private exportState exportState;
        public int ExportState
        {
            get
            {
                return (int)exportState;
            }
        }

        public static EventHandler ExportStatusChange;
        private static void OnExportStatusChange(TrackListViewModel tv)
        {
            if (ExportStatusChange != null)
                ExportStatusChange(tv, EventArgs.Empty); 
        }

        public exportState ExportStatus
        {
            get
            {
                return exportState;
            }
            set
            {
                if (exportState != value)
                {
                    exportState = value;
                    OnPropertyChanged("ExportStatus"); 
                    OnExportStatusChange(this); 
                    //refresh();
                    //OnPropertyChanged("Background"); 

                }
            }
        }






        public TrackListViewModel(TrackList track, PlayListViewModel playlist)
            : base(track, playlist)
        {
            this.track = track;
            this.piece = PieceViewModel.getPiece(track); // new PieceViewModel(track); // track.Piece.Track as CPiece; 
            piece.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(piece_PropertyChanged);
            int id = track.PieceId;
            //if (!dictT.ContainsKey(id))
            //{
            //    var list = new List<TrackListViewModel>();
            //    dictT.Add(id, list);
            //}

            //dictT[id].Add(this);

        }

        void piece_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            OnPropertyChanged(e.PropertyName);
        }

        public String StrPlaying
        {
            get
            {
                if (playing) return "<))";
                return "";
            }
        }

        private bool playing;
        public bool Playing
        {
            get { return playing; }
            set
            {
                if (value != playing)
                {
                    playing = value;
                    if (playing)
                    {
                        CurrentPlaying = this;
                    }
                    OnPropertyChanged("Playing");
                    OnPropertyChanged("StrPlaying");
                }
            }
        }

        public static TrackListViewModel CurrentPlaying
        {
            get
            {
                return currentPlaying;
            }
            set
            {
                if (value != currentPlaying)
                {
                    if (currentPlaying != null)
                        currentPlaying.Playing = false;
                    currentPlaying = value;
                }
            }
        }

        public int Rating
        {
            get
            {
                return piece.Rating;
            }
            set
            {
                piece.Rating = value;
                //if (value != track.Rating)
                //{
                //    track.Rating = value;
                //    onPropertyChanged("Rating");
                //}
            }
        }

        //  private pdb.db.obj.CPiece CPiece { get { return track.Piece.Track as pdb.db.obj.CPiece; } }


        //public static readonly DependencyProperty ClassementProperty =
        //DependencyProperty.Register("Classement", typeof(String),
        // typeof(PieceViewModel), new UIPropertyMetadata(null));
        public String Classement
        {
            get
            {
                return piece.Piece.StrClassement;
            }
            set
            {
                // piece.StrClassement = value;
                if (value != piece.Piece.StrClassement)
                {
                    try
                    {
                        App.bib.setClassement(this, value);

                        // piece.Piece.StrClassement = value;

                    }
                    catch
                    {
                    }
                    piece.Classement = value;
                    // onPropertyChanged("Classement");
                    App.go();

                }
            }
        }

        public int Year
        {
            get
            {
                return piece.Year;
            }
            set
            {
                piece.Year = value;
                //if (value != piece.Year)
                //{
                //    track.Year = value;
                //    onPropertyChanged("Year");
                //}
            }
        }


        //public static readonly DependencyProperty CommentProperty =
        //DependencyProperty.Register("Comment", typeof(string),
        //typeof(PieceViewModel), new UIPropertyMetadata(null)); 
        public string Comment
        {
            get
            {
                return track.Comment;
            }
            set
            {
                //piece.Comment = value; 
                if (value != track.Comment)
                {
                    track.Comment = value;
                    OnPropertyChanged("Comment");

                }
            }
        }

        public string Grouping
        {
            get { return track.Grouping; }
            set
            {
                //  piece.Grouping = value;
                if (value != track.Grouping)
                {
                    track.setGrouping(value, true);
                    OnPropertyChanged("Grouping");
                }
            }
        }




        public bool isPodcast
        {
            get { return piece.isPodcast; }
        }


        public TimeSpan Duration
        {
            get { return piece.Duration; }
            set
            {
                piece.Duration = value;
                //if (!Exists)
                //    return; 
                //if (value != Duration)
                //{
                //    var deltaMs = Math.Abs(value.TotalMilliseconds - Duration.TotalMilliseconds);
                //    if (deltaMs >= 1)
                //    {
                //        track.Duration = value;
                //        if (deltaMs >= 1000)
                //            onPropertyChanged("Duration");
                //    }
                //}
            }
        }

        public string Location
        {
            get { return piece.Location; }
        }

        public string Artist
        {
            get
            {
                return piece.Artist;
            }
            set
            {
                piece.Artist = value;
                //if (value != track.Artist)
                //{
                //    track.Artist = value;
                //    onPropertyChanged("Artist");
                //}
            }
        }

        public string Album
        {
            get
            {
                return piece.Album;
            }
            set
            {
                piece.Album = value;
                //if (value != track.Album)
                //{
                //    track.Album = value;
                //    onPropertyChanged("Album");
                //}
            }
        }

        public string Name
        {
            get
            {
                return piece.Name;
            }
            set
            {
                piece.Name = value;
                //if (value != track.Name)
                //{
                //    track.Piece.Name = value;
                //    onPropertyChanged("Name");
                //}
            }
        }

        public int TrackNumber
        {
            get
            {
                return piece.TrackNumber;
            }
            set
            {
                piece.TrackNumber = value;
                //if (value != track.TrackNumber)
                //{
                //    track.TrackNumber = value;
                //    onPropertyChanged("TrackNumber");
                //}
            }
        }


        public void setClassement(string className, int rating)
        {
            piece.Piece.setClassement(className, rating);
        }

        public string ClassName
        {
            get
            {
                return piece.Piece.ClassName;
            }
            set
            {
                piece.Piece.ClassName = value;
            }
        }


        public DateTime PlayedDate
        {
            get { return piece.Piece.PlayedDate; }
        }

        public string ArtWork
        {
            get
            {
                return piece.Piece.ArtWork;
            }
            set
            {
                piece.Piece.ArtWork = value;
            }
        }

        public void setGrouping(string value, bool prior)
        {
            piece.Piece.setGrouping(value, prior);
            piece.Grouping = value;
            // onPropertyChanged("Grouping");
        }

        public bool FirstClass
        {
            get
            {
                return true;
            }
            set
            {

            }
        }

        public List<CPlayList> ClassPlayLists
        {
            get { return piece.Piece.ClassPlayLists; }
        }

        public List<DateTime> Dates
        {
            get { return new List<DateTime>(piece.Piece.Dates); }
        }

        public List<DateTime> DatesClassement
        {
            get { return piece.Piece.DatesClassement; }
        }

        public string ClassEvol
        {
            get { return track.Piece.ClassEvol; }
        }

        public long Size { get { return Piece.Size; } }

        public bool Exists { get { return Piece.Exists; } }

        //public void onPropertyChanged(string propertyName)
        //{
        //    var list = dictT[PieceId];
        //    if (list == null)
        //    {
        //        OnPropertyChanged(propertyName);
        //    }
        //    else
        //    {
        //        foreach (TrackListViewModel t in dictT[PieceId])
        //            t.OnPropertyChanged(propertyName);
        //    }
        //}




        public int PieceId
        {
            get { return track.PieceId; }
        }


        public int PieceParentId
        {
            get { return track.PieceParentId; }
            set { track.PieceParentId = value; }
        }

        public void setParent(TrackListViewModel parent)
        {
            piece.Piece.Parent = parent.Piece;
            track.Piece.Parent = parent.track.Piece;
        }



        #region key
        private TrackIdentity key;
        public TrackIdentity Key
        {
            get
            {
                if (key == null)
                    keyGener();
                return key;
            }
        }
        private void keyGener()
        {
            key = new TrackIdentity(this);
        }

        #endregion
    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\ViewModelBase.cs">
    <content><![CDATA[using System;
using System.ComponentModel;
using System.Windows.Threading;

namespace pdb.player.ViewModel
{

    public class ViewModelBase : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            var eventHandler = PropertyChanged;
            if (eventHandler == null)
            {
              //  int toto = 0;
            }
            else
            {

                //try
                //{

                //    var dispatcher = Dispatcher.CurrentDispatcher;
                //    if (dispatcher.CheckAccess())
                //        PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
                //    else
                //        dispatcher.Invoke(new Action<string>(OnPropertyChanged), propertyName);
                //}
                //catch (Exception ex)
                //{
                //    App.log.log(ex.ToString());
                //}

                Delegate[] delegates = eventHandler.GetInvocationList();
                // Walk thru invocation list
                foreach (PropertyChangedEventHandler handler in delegates)
                {
                    try
                    {
                        var dispatcherObject = handler.Target as DispatcherObject;
                        // If the subscriber is a DispatcherObject and different thread
                        if (dispatcherObject != null && dispatcherObject.CheckAccess() == false)
                            // Invoke handler in the target dispatcher's thread
                            dispatcherObject.Dispatcher.BeginInvoke(DispatcherPriority.Background,
                                          handler, this, new PropertyChangedEventArgs(propertyName));
                        else // Execute handler as is
                            handler(this, new PropertyChangedEventArgs(propertyName));
                    }
                    catch (Exception ex)
                    {
                        App.log.log(ex.ToString()); 
                    }
                }
            }
        }



        #endregion
    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\Commande\PlayList\ExportCmd.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using pdb.db;
using pdb.db.obj;
using pdb.gen;
using pdb.util;
using pdb.gen.Tuning;

namespace pdb.player.ViewModel.Commande.PlayList
{
    public enum compressState
    {
        none,
        record,
        enCours,
        end,
        reload,
        cancel
    }
    class ExportCmd : CommandeBase
    {
        private static IExportTracks ihm;
        public static IExportTracks Ihm { set { ihm = value; } }
        // private static bool cancel;
        // protected static string dir;
       protected static PlayListViewModel lastpl;
        protected static List<PiecePrior> presents;
        protected static Dict<int, PiecePrior> dict;
        protected static List<PiecePrior> list;
        protected static List<List<PiecePrior>> listes;
        protected static List<PlayListViewModel> playlists = new List<PlayListViewModel>();

        protected static Dictionary<int, object> ids;
        protected static Dict<int, PiecePrior> idCopie;
        protected static BgDictString<PiecePrior> idCopieLoc;
        private static int nbLoop = 0;
        protected static Export conf;
        private static bool modeAlbum;
        //private static int nbByAlbumMin = int.MaxValue;
        //private static int nbByAlbumMax = int.MaxValue;
        //private static int nbLot = 100; 
        protected static int nbFicherSup;
        protected static int nbFichierAdd;
        const string CAPTION = "export";
        protected string ANNULATION_EXPORT = "Annulation export";

        protected static BgDictString<List<PiecePrior>> locations = new BgDictString<List<PiecePrior>>(); 

        protected static compressState state;
        public static void CalculExport()
        {
            switch (state)
            {
                case compressState.none:
                    break;
                case compressState.record:
                    break;
                case compressState.enCours:
                    state = compressState.reload;
                    break;
                case compressState.end:
                    state = compressState.reload;
                    break;
                case compressState.reload:
                    break;
                case compressState.cancel:
                    break;
                default:
                    break;
            }
        }

        protected class PiecePrior
        {
            private int prior0 = int.MaxValue;
            private int prior1 = int.MaxValue;
            public readonly CPiece Piece;
            public PiecePrior(CPiece piece, int prior)
            {
                this.Piece = piece;
                this.prior0 = prior;
            }

            public int Prior0 { get { return prior0; } }
            public int Prior1 { get { return prior1; } }
            public int MasterId { get { return Piece.MasterId; } }
            public void setPrior(int prior)
            {
                if (prior < this.prior1)
                    this.prior1 = prior;
            }

            public static void mergePrior0(ICollection<PiecePrior> list)
            {
                if (list.Count <= 1)
                    return; 
                int min = int.MaxValue;
                foreach (PiecePrior p in list)
                {
                    var p0 = p.prior0;
                    if (p0 < min)
                        min = p0; 
                }
                foreach (PiecePrior p in list)
                {
                    p.prior0 = min; 
                }
            }

            public static void mergePrior1(ICollection<PiecePrior> list)
            {
                if (list.Count <= 1)
                    return;
                int min = int.MaxValue;
                foreach (PiecePrior p in list)
                {
                    var p1 = p.prior1;
                    if (p1 < min)
                        min = p1;
                }
                foreach (PiecePrior p in list)
                {
                    p.prior0 = min;
                }
            }

            public override string ToString()
            {
                return "p=" + prior0 + " " + prior1 + " " + Piece.ToString();
            }
        }

        protected class PriorComparer : IComparer<PiecePrior>
        {
            public int Compare(PiecePrior x, PiecePrior y)
            {
                int cmp = x.Prior1.CompareTo(y.Prior1);
                if (cmp != 0)
                    return cmp;
                return x.Prior0.CompareTo(y.Prior0);
            }
        }

        public ExportCmd()
        {

        }


        public override bool CanExecute(object parameter)
        {
            return ihm != null;
        }

        public override void Execute(object parameter)
        {
            if (state <= compressState.record)
                record();
            else
                state = compressState.cancel;
            OnPropertyChanged("Header");
        }

        protected virtual List<PiecePrior> buildList(PlayListViewModel pl)
        {
            bool onlyEnabled = PlayerViewModel.Instance.OnlyEnabled && !modeAlbum;
            bool _modeAlbum = modeAlbum && !PlayerViewModel.Instance.SortByAlbum;
            var list = new List<PiecePrior>();
            var ids = new Dictionary<int, object>();
            int i = 0;
            var tracks = new List<TrackListViewModel>(pl.ExportTracks);
            int lastI = 0;
            string lastAlbum = "";
            int nbByAlbum = int.MaxValue;
            if (conf.modeAlbum)
                nbByAlbum = conf.nbMax;
            int nbLot = 0;
            while (true)
            {
                int nbInThisAlbum = 0;
                foreach (TrackListViewModel track in tracks)
                {
                    track.ExportStatus = exportState.miss; 
                    if (!onlyEnabled || track.Enabled)
                    {
                        CPiece piece = track.Piece;
                        if (piece.Exists)
                        {
                            int id = piece.MasterId;
                            if (ids.ContainsKey(id))
                                continue;
                            if (!_modeAlbum)
                            {
                                if (piece.Album == lastAlbum)
                                {
                                    if (track.Enabled)
                                    {
                                        nbInThisAlbum++;
                                        if (nbInThisAlbum > nbByAlbum)
                                            continue;
                                    }
                                }
                                else
                                {
                                    nbInThisAlbum = 1;
                                    lastAlbum = piece.Album;

                                }
                                var pp = dict[id]; // list.Add(piece);
                                pp.setPrior(i);
                                list.Add(pp);
                                ids.Add(id, pp);
                                i++;

                                if (track.Enabled)
                                {
                                    nbLot++;
                                    if (conf.modeAlbum && nbLot > conf.lot)
                                    {
                                        nbLot = 0;
                                        nbByAlbum--;
                                        if (nbByAlbum < conf.nbMin)
                                            nbByAlbum = conf.nbMin;
                                    }
                                }

                            }
                            else
                            {
                                if (conf.modeAlbum)
                                {
                                    if (piece.Album == lastAlbum)
                                        continue;
                                    else
                                    {
                                        nbLot++;
                                        if (nbLot > conf.lot)
                                        {
                                            nbLot = 0;
                                            nbByAlbum--;
                                            if (nbByAlbum < conf.nbMin)
                                                nbByAlbum = conf.nbMin;
                                        }
                                    }
                                }

                                var album = App.gen.getTracksAlbumByNumber(piece);
                                if (album != null)
                                {
                                    nbInThisAlbum = 0;
                                    lastAlbum = piece.Album;
                                    foreach (var p in album)
                                    {
                                        CPiece pp = p.Track as CPiece;
                                        if (pp.Exists)
                                        {
                                            if (!onlyEnabled || pp.Enabled)
                                            {
                                                id = pp.MasterId;

                                                if (ids.ContainsKey(id))
                                                    continue;
                                                var ppp = dict[id];
                                                ppp.setPrior(i);
                                                list.Add(ppp);
                                                ids.Add(id, ppp);
                                                i++;
                                                if (pp.Enabled)
                                                {
                                                    nbLot++;
                                                    if (conf.modeAlbum && nbLot > conf.lot)
                                                    {
                                                        nbLot = 0;
                                                        nbByAlbum--;
                                                        if (nbByAlbum < conf.nbMin)
                                                            nbByAlbum = conf.nbMin;
                                                    }

                                                    nbInThisAlbum++;
                                                    if (nbInThisAlbum >= nbByAlbum)
                                                        break;
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
                if (!modeAlbum)
                    break;
                if (nbByAlbum == int.MaxValue)
                    break;
                if (i == lastI)
                    break;

                lastI = i;
                lastAlbum = "";
                if (conf.modeAlbum)
                {
                    if (conf.resetAfterLoop)
                        nbByAlbum = conf.nbMax;
                    if (nbByAlbum < conf.nbMin)
                        nbByAlbum = conf.nbMin; 
                }
            }
            listes.Add(list);
            //   ihm.InfoIHm("liste nÂ° " + listes.Count + " " + list.Count + " Ã©lÃ©ments", CAPTION);
            OnPropertyChanged("Header");
            return list;
        }

        public override string Header
        {
            get
            {
                if (state > compressState.record)
                    return ANNULATION_EXPORT;

                return "Exporter la liste";
            }
        }



        private void record()
        {
            if (state == compressState.none)
            {
                state = compressState.record;
                OnPropertyChanged("Header");
                nbLoop = 0;
                conf = ihm.getConfExport("Configuration Export");

                //  dir = conf.dir; // ihm.folderDialog();

                if (string.IsNullOrEmpty(conf.dir))
                {
                    state = compressState.none;
                    return;
                }

                modeAlbum = conf.modeAlbum; // ihm.Confirm("par albums complets?", CAPTION);

                //if (modeAlbum)
                //{
                //    nbByAlbumMin = conf.nbMin; // ihm.getNb("Nombre de morceaux par passe?");
                //    nbByAlbumMax = conf.nbMax;
                //    nbLot = conf.lot;
                //}
                //else
                //    nbByAlbum = int.MaxValue;

                playlists.Clear();
            }

            bool? status = true;


            var pl = ihm.PlayList;
            if (!playlists.Contains(pl))
            {
                playlists.Add(pl);
                lastpl = pl;
            }

            status = ihm.TriChoix("liste nÂ° " + playlists.Count + " " + pl.ExportTracks.Count + " Ã©lÃ©ments\r\n lancer l'export ?", CAPTION);



            if (status == null)
            {
                listes = null;
                playlists.Clear();
                state = compressState.none;
                OnPropertyChanged("Header");
                return;
            }
            if (false.Equals(status))
            {
                OnPropertyChanged("Header");
                return;
            }

            state = compressState.enCours;
            OnPropertyChanged("Header");

            var th = new Thread(export__);
            th.SetApartmentState(ApartmentState.STA);
            th.Start();
        }

        private void buildListIni()
        {

            listes = new List<List<PiecePrior>>();
            presents = new List<PiecePrior>();
            dict = new Dict<int, PiecePrior>();
            locations = new BgDictString<List<PiecePrior>>(); 


            if (!conf.dir.EndsWith("\\"))
                conf.dir += "\\";

            List<Piece> l = null;


            if (lastpl.isSubList("album") || PlayerViewModel.Instance.SortByAlbum)
            {
                l = App.gen.sortByAlbum();
                l.Reverse();
            }
            else
                l = App.gen.sortByClass();
            // l.Reverse();

            int i = 0;
            foreach (Piece p in l)
            {
                var piece = p.Track as CPiece;
                if (!dict.ContainsKey(piece.MasterId))
                {
                    var pp = new PiecePrior(piece, i);
                    i++;
                    presents.Add(pp);
                    dict[piece.MasterId] = pp;
                    foreach (CFile file in piece.Files)
                    {
                        var lp = locations[file.File];
                        if (lp == null)
                        {
                            lp = new List<PiecePrior>();
                            lp.Add(pp);
                            locations.Add(file.File, lp);
                        }
                        else
                        {
                            lp.Add(pp);
                            PiecePrior.mergePrior0(lp); 
                        }
                    }
                }
            }

        }

        [STAThread]
        private void export__()
        {


            while (true)
            {
                switch (state)
                {
                    case compressState.none:
                        return;
                    case compressState.enCours:
                        break;
                    case compressState.end: Thread.Sleep(1000); continue;
                    case compressState.reload:
                        break;
                    case compressState.cancel:
                        {
                            state = compressState.none;
                            nbLoop = 0;
                            return;
                        }

                    default:
                        break;
                }
                state = compressState.enCours;
                nbLoop++;

                buildListIni();

                foreach (PlayListViewModel pl in playlists)
                {
                    buildList(pl);
                }

                foreach (List<PiecePrior> lp in locations.Values)
                {
                    PiecePrior.mergePrior1(lp); 
                }

                // concatÃ©nation
                int max = 0;
                list = new List<PiecePrior>();
                foreach (var _l in listes)
                {
                    var count_ = _l.Count;
                    if (count_ > max)
                        max = count_;
                }
                int count = listes.Count;
                ids = new Dictionary<int, object>();


                for (int i = 0; i < max; i++)
                {
                    for (int j = 0; j < count; j++)
                    {
                        var l = listes[j];
                        if (i < l.Count)
                        {
                            var p = l[i];
                            int id = p.MasterId;
                            if (!ids.ContainsKey(id))
                            {
                                ids.Add(id, p);
                                list.Add(p);
                            }
                        }
                    }
                }






                App.log.log("Export lancÃ© " + listes.Count + " liste" + (list.Count > 1 ? "s " : " ") + list.Count + " Ã©lÃ©ments", CAPTION);
                _export();

            }
        }

        protected virtual bool noMoreSpace()
        {
            return true;
        }
        protected virtual void prepareExport()
        {
        }

        private void _export()
        {

            try
            {

                nbFicherSup = 0; nbFichierAdd = 0;
                idCopie = new Dict<int, PiecePrior>(); idCopieLoc = new BgDictString<PiecePrior>();
                presents.Sort(new PriorComparer());
                prepareExport();

                string orgDir = CFile.DefaultFolder;
                foreach (PiecePrior piece in list)
                {
                    try
                    {
                        if (state != compressState.enCours)
                            return;

                        int id = piece.MasterId;
                        if (idCopie.ContainsKey(id))
                            continue;
                        var files = piece.Piece.Files;
                        bool contFile = false;
                        foreach (CFile file in files)
                        {
                            if (idCopieLoc.ContainsKey(file.File))
                            {
                                contFile = true;
                                break;
                            }
                        }
                        if (contFile)
                            continue;

                        idCopie[id] = piece;
                        foreach (CFile file in files)
                        {
                            idCopieLoc[file.File] = piece;
                        }




                        //1. VÃ©rification que le fichier n'existe pas dÃ©jÃ  
                        bool exists = false;
                        foreach (CFile file in files)
                        {
                            if (state != compressState.enCours)
                                return;
                            try
                            {
                                string path = conf.dir + file.File;
                                var fv = FileRegister.Check(path);
                                if (fv.Exists)
                                {
                                    exists = true;
                                    break;
                                }
                            }

                            catch
                            {
                            }
                        }



                        if (exists)
                        {
                            var track = PlayListViewModel.findTrack(lastpl, piece.Piece.PieceId);
                            if (track != null)
                            {
                                track.ExportStatus = exportState.present; 
                            }
                            continue;
                        }

                        //2. Copie du meilleur fichier
                        CFile pertinent = files.getPertinentFile();
                        if (pertinent == null)
                            continue;


                        while (true)
                        {
                            if (state != compressState.enCours)
                                return;
                            try
                            {
                                FileInfo f = new FileInfo(pertinent.Path);
                                App.log.log(piece.Piece.DurationInSec + "s\tcopie vers " + conf.dir + pertinent.File + " ( " + piece + " )");
                                f.copyTree(conf.dir + pertinent.File, null);
                                var track = PlayListViewModel.findTrack(lastpl, piece.Piece.PieceId);
                                if (track != null)
                                {
                                    track.ExportStatus = exportState.copy;
                                }
                                nbFichierAdd++;

                                break;
                            }
                            catch (System.IO.IOException io)
                            {
                                App.log.log(io.Message);
                                if (noMoreSpace())
                                    return;
                            }
                        }

                    }

                    catch (Exception ex)
                    {
                        App.log.log(ex.ToString());
                    }


                }
            }
            finally
            {
                App.log.log(string.Format("Fin de l'export {0} liste{1} Ã©lÃ©ments\r\n{2} fichier{3} copiÃ©{3}\r\n{4} fichier{5} supprimÃ©{6}",
                    listes.Count, (list.Count > 1 ? "s " : " "), nbFichierAdd, (nbFichierAdd > 1 ? "s" : ""), nbFicherSup, (nbFicherSup > 1 ? "s" : ""), (nbFicherSup > 1 ? "s" : "")), CAPTION);
                //  ihm.InfoIHm("Fin de l'export " + listes.Count + " liste" + (list.Count > 1 ? "s " : " ") + list.Count + " Ã©lÃ©ments\r\n" + idCopie.Count + " fichiers copiÃ©s\r\n" + nbFicherSup + "fichier" + (nbFicherSup > 1 ? "s" : "") + " supprimÃ©" + (nbFicherSup > 1 ? "s" : ""), CAPTION);
                list = null;
                listes = null;

                if (state == compressState.enCours)
                    state = compressState.end;
                OnPropertyChanged("Header");

            }
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\Commande\PlayList\ExportCompress.cs">
    <content><![CDATA[
using System.Collections.Generic;
using pdb.db;
using pdb.db.obj;
using pdb.obj;
using pdb.util;
namespace pdb.player.ViewModel.Commande.PlayList
{
    class ExportCompress : ExportCmd
    {
        private List<CFile> files;
        private int index = 0;
        private int indexPresent = 0;
        List<PiecePrior> _presents;


        public ExportCompress()
        {
        }
        public override string Header
        {
            get
            {
                string header = base.Header;
                if (header.Contains(ANNULATION_EXPORT))
                    return header;

                return "Exporter la liste et compresser si besoin";

            }
        }
        protected override void prepareExport()
        {
            BgDict<int, ITrackIdentity> dict = new BgDict<int, ITrackIdentity>();
            files = new List<CFile>();
            index = 0;
            indexPresent = 0;
            foreach (PiecePrior track in list)
            {
                int id = track.MasterId;
                dict[id] = track.Piece;
            }

            _presents = new List<PiecePrior>(presents);
            _presents.Reverse();

            // phase 1 compress
            foreach (PiecePrior p in _presents)
            {
                CPiece piece = p.Piece;
                getSecondaryFiles(piece);
            }
        }

        private void getSecondaryFiles(CPiece piece)
        {
            var m_files = piece.Files;
            if (m_files.Count <= 1)
                return;

            var l = new List<CFile>();
            foreach (CFile file in m_files)
            {
                if (FileRegister.Exist(conf.dir + file.File))
                {
                    l.Add(file);
                }
            }
            if (l.Count <= 1)
                return;

            l.Sort(new CFileComparer());

            for (int i = 1; i < l.Count; i++)
                files.Add(l[i]);
        }

        private CFile getPertinentFile(CPiece piece)
        {
            var m_files = piece.Files;
            if (m_files.Count < 1)
                return null;

            var l = new List<CFile>();
            foreach (CFile file in m_files)
            {
                if (FileRegister.Exist(conf.dir + file.File))
                {
                    l.Add(file);
                }
            }
            if (l.Count < 1)
                return null;
            if (l.Count >= 2)
                l.Sort(new CFileComparer());

            return l[0];
        }

        protected override bool noMoreSpace()
        {
            if (index >= files.Count)
            {
                return noMoreSpace2();
            }

            CFile file = null;
            while (true)
            {
                if (index >= files.Count)
                    return noMoreSpace2();
                file = files[index];
                string path = conf.dir + file.File;
                if (FileRegister.Exist(path))
                {
                    misc.deleteFile(path);
                    return false;
                }
                index++;
            }
        }

        private bool noMoreSpace2()
        {
            if (indexPresent >= _presents.Count)
                return true;
            while (true)
            {
                if (indexPresent >= _presents.Count)
                    return true;
                var p = _presents[indexPresent];
                int id = p.MasterId;
                if (idCopie[id] == null)
                {
                    var piece = p.Piece;
                    var files = piece.Files;

                    bool contFile = false;
                    foreach (CFile file in files)
                    {
                        if (idCopieLoc.ContainsKey(file.File))
                        {
                            contFile = true;
                            break;
                        }
                    }

                    if (!contFile)
                    {
                        if (files.Exists)
                        {
                            var track = PlayListViewModel.findTrack(lastpl, piece.PieceId);
                            if (track != null)
                            {
                                track.ExportStatus = exportState.delete;
                            }
                            //App.log.log("supression fichiers de {0}", p);
                            foreach (CFile f in files)
                            {
                                string path = conf.dir + f.File;
                                if (FileRegister.Exist(path))
                                {
                                    misc.deleteFile(path);
                                    nbFicherSup++;
                                    return false;
                                }
                            }
                        }
                    }
                }
                indexPresent++;

            }
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\DataGridPlayList.xaml">
    <content><![CDATA[<UserControl x:Class="pdb.player.Vue.DataGridPlayList"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300" >
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <DataGrid Grid.Row="0" Name="dg" AutoGenerateColumns="False" IsSynchronizedWithCurrentItem="False" 
                  SelectedItem="{Binding SelectedTrack, Mode=TwoWay}"               
                  >
            <DataGrid.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="{Binding LinkFather.Header, UpdateSourceTrigger=LostFocus}"   Command="{Binding LinkFather}" />
                    <MenuItem Header="{Binding LinkChild.Header, UpdateSourceTrigger=LostFocus}"  Command="{Binding LinkChild}" />
                    <MenuItem Header="Ressaisir le premier"   Command="{Binding LinkReset}" />
                    <MenuItem Header="Cocher la sÃ©lection"  Command="{Binding ContextCmdCheck}" />
                    <MenuItem Header="DÃ©cocher la sÃ©lection"  Command="{Binding ContextCmdUnCheck}" />
                    <MenuItem Header="{Binding Export.Header, UpdateSourceTrigger=LostFocus}"   Command="{Binding Export}" />
                    <MenuItem Header="{Binding ExportCompress.Header, UpdateSourceTrigger=LostFocus}"   Command="{Binding ExportCompress}" />
                    <MenuItem Header="Ajouter Ã  la liste"  Command="{Binding ContextCmdAddToList}" />



                </ContextMenu>
            </DataGrid.ContextMenu>
            
          
            <DataGrid.Columns>
                

                <DataGridTextColumn Binding="{Binding Index,Mode=OneWay}"/>
                <DataGridTextColumn Binding="{Binding StrPlaying, Mode=OneWay}"/>
                <DataGridCheckBoxColumn Header="" Binding="{Binding Enabled}" >
                    <DataGridCheckBoxColumn.ElementStyle>
                        <Style TargetType="CheckBox">
                            <Style.Triggers>
                                
                            </Style.Triggers>
                        </Style>
                    </DataGridCheckBoxColumn.ElementStyle>
                </DataGridCheckBoxColumn>
                <DataGridCheckBoxColumn Header="" Binding="{Binding Exists,Mode=OneWay}" />
                <DataGridTextColumn Header="Nom" Binding="{Binding Name}"/>
                <DataGridTextColumn Header="Piste"  Binding="{Binding TrackNumber,Converter={StaticResource Int}}">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                            <Setter Property="Padding" Value="0,0,3,0" />

                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="DurÃ©e" Binding="{Binding Duration,Mode=OneWay,Converter={StaticResource TimeSpan}}"   >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                            <Setter Property="Padding" Value="0,0,3,0" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="Classement" Binding="{Binding Classement, Converter={StaticResource cl} }"/>
                <DataGridTextColumn Header="Comment" Binding="{Binding Comment,Mode=OneWay}"/>
                <DataGridTextColumn Header="Album" Binding="{Binding Album}"/>
                <DataGridTextColumn Header="Artiste"  Binding="{Binding Artist}"/>
                <DataGridTextColumn Header="AnnÃ©e" Binding="{Binding Year,Converter={StaticResource Int}}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                            <Setter Property="Padding" Value="0,0,3,0" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                
               
                <DataGridTextColumn Header="Grouping" Binding="{Binding Grouping, Mode=OneWay}"/>
                <DataGridTextColumn Header="Export" Binding="{Binding ExportStatus, Mode=OneWay}">
                    <!--<DataGridTextColumn.ElementStyle>
                        <Style TargetType="DataGridCell">
                            <Setter Property="Background" Value="{Binding ExportStatus, Converter={StaticResource colorExport},  UpdateSourceTrigger=PropertyChanged}"/>
                        </Style>
                    </DataGridTextColumn.ElementStyle>-->
                </DataGridTextColumn>







            </DataGrid.Columns>
           
            <DataGrid.ItemContainerStyle>
                <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
                    <EventSetter Event="MouseDoubleClick" Handler="dg_MouseDoubleClick" />
                    <EventSetter Event="PreviewMouseLeftButtonDown" Handler="dg_MouseClick" />
                    <EventSetter Event="PreviewMouseRightButtonDown" Handler="dg_MouseClick" />
                    <EventSetter Event="PreviewMouseMove" Handler="dg_PreviewMouseMove" />
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                    <!--<Setter Property="IsEnabled" Value="{Binding Exists}" />-->
                    <Setter Property="FontWeight" Value="Normal" />
                    <Setter Property="Background" Value="{Binding Path=., Converter={StaticResource colorExport},  UpdateSourceTrigger=PropertyChanged}" />
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="Brown" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Exists}" Value="False">
                            <Setter Property="Background" Value="LightGray" />
                        </DataTrigger>
                     
                    </Style.Triggers>                    
                </Style>
            </DataGrid.ItemContainerStyle>
            <!--<DataGrid.RowStyle>
                <Style TargetType="{x:Type DataGridRow}">
                    <Setter Property="Background" Value="{Binding ExportStatus, Converter={StaticResource colorExport},  UpdateSourceTrigger=PropertyChanged}"/>
                </Style>
            </DataGrid.RowStyle>-->
        </DataGrid>
        <DockPanel Grid.Row="1" >
            <TextBlock DockPanel.Dock="Bottom" Text="{Binding Resume}"></TextBlock>
        </DockPanel>
    </Grid>

</UserControl>
]]></content>
  </file>
  <file path="\pdb.player\Vue\DataGridPlayList.xaml.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using pdb.gen.Tuning;
using pdb.player.ViewModel;
using pdb.player.ViewModel.Commande.PlayList;
using pdb.util;
using pdb.player.Vue.Util;
using System.Windows.Threading;

namespace pdb.player.Vue
{
    public partial class DataGridPlayList : UserControl, ItrackProvider, IRedraw, IExportTracks
    {
        private static int nb;
        private int ID;
        private Logger log;
        private BgColorFormatConverter colorConvert = new BgColorFormatConverter();

        //  private BgDict<int, DataGridRow> dict = new BgDict<int, DataGridRow>(); 

        public DataGridPlayList()
        {
            ID = nb;
            log = Logger.getLogger("DataGridPlayList" + ID);
            nb++;
            InitializeComponent();
            this.Loaded += DataGridPlayList_Loaded;
            App.refresh += new EventHandler(App_refresh);
            PlayListCommande.Provider = this;
        }

        void App_refresh(object sender, EventArgs e)
        {
            log.log("dg::App_refresh");
            redraw();
        }

        //private void refresh()
        //{
        //    if (ID == 0)
        //    {
        //        init();
        //    }
        //}
        void DataGridPlayList_Loaded(object sender, RoutedEventArgs e)
        {
            init(null);
            PlayListViewModel.selectedPlaylistChange += PlayListViewModel_selectedPlaylistChange;
            PlayListViewModel.addDrow(this);

          //  TrackListViewModel.ExportStatusChange += tv_ExportStatusChanged; 
            ExportCmd.Ihm = this;
        }

        void dg_RowEditEnding(object sender, DataGridRowEditEndingEventArgs e)
        {
            e.Row.Background = colorConvert.getColor(sender as TrackListViewModel);
        }


        void PlayListViewModel_selectedPlaylistChange(object sender, EventArgs e)
        {
            if (ID == 0)
            {
                init(sender as PlayListViewModel);
            }
        }

        private void init(PlayListViewModel old)
        {
            if (!Dispatcher.CheckAccess())
            {
                Dispatcher.Invoke(new Action<PlayListViewModel>(init));
                return;
            }
            log.log("dg::init");
            SortDescriptionCollection sort = null;
            ICollectionView view = null;
            if (old != null)
            {
                view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
                if (view != null)
                    sort = view.SortDescriptions;
                if (sort != null)
                    old.Sort = sort;
            }


            var pl = PlayListViewModel.SelectedPlayList;
            var currentPlaying = TrackListViewModel.CurrentPlaying;
            if (pl == null)
                return;
            base.DataContext = null;

            var source = dg.ItemsSource;

            dg.ItemsSource = null;
            var items = pl.AlltracksVm;
            items.refresh();

            base.DataContext = items;
            int i = 0;
            if (pl.isSubList("gen"))
            {
            }
            else
            {
                foreach (TrackListViewModel track in items)
                {
                    i++;
                    track.Index = i;
                }
            }
            sort = pl.Sort;
            List<SortDescription> _sort = null;
            if (sort != null)
                _sort = new List<SortDescription>(sort);
            dg.ItemsSource = items;
            PlayerViewModel.Instance.set(this);
            TrackListViewModel.CurrentPlaying = currentPlaying;

            view = CollectionViewSource.GetDefaultView(dg.ItemsSource);

            if (_sort != null && _sort.Count > 0)
            {
                view.SortDescriptions.Clear();
                foreach (var _s in _sort)
                {
                    view.SortDescriptions.Add(_s);
                    foreach (DataGridColumn _c in dg.Columns)
                    {
                        if (_s.PropertyName == _c.SortMemberPath)
                        {
                            _c.SortDirection = _s.Direction;
                            break;
                        }
                    }
                    break;

                }
            }

            foreach (TrackListViewModel tv in items)
                tv.PropertyChanged += new PropertyChangedEventHandler(tv_PropertyChanged);
          
            putExportTracks(pl, CollectionViewSource.GetDefaultView(dg.ItemsSource));

        }

        void tv_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ExportStatus")
                updateColor(sender as TrackListViewModel); 
        }

        void updateColor(TrackListViewModel tv)
        {
            if (tv == null)
                return; 
              var row = dg.ItemContainerGenerator.ContainerFromItem(tv) as DataGridRow;
              if (row != null)
                  row.Background = colorConvert.getColor(tv); 
        }

        void tv_ExportStatusChanged(object sender, EventArgs e)
        {          
                Dispatcher.BeginInvoke(DispatcherPriority.Background, new Action<TrackListViewModel>(updateColor), sender as TrackListViewModel);
           
        }
        private void dg_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                var r = sender as DataGridRow;
                var t = r.Item as TrackListViewModel;
                PlayerViewModel.reset(this, t);
            }
            catch
            {
            }
        }

        private void dg_MouseClick(object sender, MouseButtonEventArgs e)
        {
            var r = sender as DataGridRow;
            var t = r.Item as TrackListViewModel;
            var l = new List<TrackListViewModel>();
            foreach (TrackListViewModel track in dg.SelectedItems)
                l.Add(track);
            lock (this)
                selectedTracks = l;
            TrackListViewModel.HumanSelected = t;
            startPoint = e.GetPosition(null);
        }

        private List<TrackListViewModel> selectedTracks = new List<TrackListViewModel>();

        private List<TrackListViewModel> SelectedTracks
        {
            get
            {
                lock (this)
                    return selectedTracks;
            }
        }
        ICollectionView ItrackProvider.PresentationTracks
        {
            get { return CollectionViewSource.GetDefaultView(dg.ItemsSource); }
        }
        void ItrackProvider.Focus(int index)
        {

            // dg.SelectedIndex = index;
            var indexbas = Math.Min(index + 100, dg.Items.Count - 1);
            scrol(indexbas);
            scrol(index);
        }

        List<TrackListViewModel> ISelectedTracks.SelectedTracks
        {
            get
            {
                return SelectedTracks;
            }
        }
        void scrol(int index)
        {
            if (!CheckAccess())
            {
                Dispatcher.Invoke(new Action<int>(this.scrol), index);
            }
            else
                dg.ScrollIntoView(dg.Items[index]);
        }
        public PlayListViewModel PlayList
        {
            get { return PlayListViewModel.SelectedPlayList; }
        }
        public void doFilter(string filter)
        {
            PlayerViewModel.doFilter((this as ItrackProvider).PresentationTracks, filter);
        }
        private bool IsUserVisible(FrameworkElement element, FrameworkElement container)
        {
            if (!element.IsVisible)
                return false;
            Rect bounds = element.TransformToAncestor(container).TransformBounds(new Rect(0.0, 0.0, element.ActualWidth, element.ActualHeight));
            Rect rect = new Rect(0.0, 0.0, container.ActualWidth, container.ActualHeight);
            return rect.Contains(bounds.TopLeft) || rect.Contains(bounds.BottomRight);
        }

        public void redraw()
        {
            if (!CheckAccess())
            {
                Dispatcher.Invoke(new Action(this.redraw));
                return;
            }
            var pl = PlayListViewModel.SelectedPlayList;
            bool isgen = false;
            if (pl != null && pl.isSubList("gen"))
                isgen = true;

            var items = dg.ItemsSource as AllTracksViewModel;

            if (items == null)
            {
                dg.Items.Refresh();
            }
            else
            {
                ICollectionView view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
                SortDescriptionCollection sort = view.SortDescriptions;

                List<SortDescription> _sort = null;
                if (sort != null)
                    _sort = new List<SortDescription>(sort);

                //items.refresh();
                int i = 0;
                foreach (TrackListViewModel track in items)
                {
                    i++;
                    if (!isgen)
                        track.Index = i;
                    track.refresh();
                }

                if (_sort != null && _sort.Count > 0 && view.SortDescriptions.Count > 0)
                {
                    view.SortDescriptions.Clear();
                    foreach (var _s in _sort)
                    {
                        view.SortDescriptions.Add(_s);



                    }
                }
                putExportTracks(pl, view);
            }
            return;


            try
            {
                isgen = false;

                if (isgen)
                {
                    log.log("dg::redraw::init");
                    init(pl);
                }
                else
                {
                    log.log("dg::redraw::Refresh");
                    dg.Items.Refresh();
                }
            }
            catch
            {
                try
                {
                    init(pl);
                }
                catch
                {
                }
            }

        }

        private void MenuItem_Click(object sender, RoutedEventArgs e)
        {
            var items = dg.SelectedItems;
            MessageBox.Show(items.Count.ToString());
        }

        public string folderDialog()
        {
            return App.Instance.folderDialog();
        }


        public System.ComponentModel.ICollectionView PresentationTracks
        {
            get
            {
                return ((ItrackProvider)this).PresentationTracks;
            }
        }






        public bool ModeAlbum
        {
            get { return MessageBox.Show("par albums complets", "export", MessageBoxButton.YesNo) == MessageBoxResult.Yes; }
        }

        public bool Continue
        {
            get { return MessageBox.Show("continuer le marchÃ© ?", "export", MessageBoxButton.YesNo) == MessageBoxResult.Yes; }
        }




        public void InfoIHm(string message, string caption)
        {
            App.Instance.InfoIHm(message, caption);
        }

        public bool Confirm(string question, string caption)
        {
            return App.Instance.Confirm(question, caption);
        }

        public bool? TriChoix(string question, string caption)
        {
            return App.Instance.TriChoix(question, caption);
        }

        public Export getConfExport(string question)
        {
            return App.Instance.getConfExport(question);
        }

        public int getNb(string question)
        {
            return App.Instance.getNb(question);
        }

        public bool changeName(string title, IName data)
        {
            return App.Instance.changeName(title, data);
        }

        public PlayListViewModel selectPlayList(string title)
        {
            return App.Instance.selectPlayList(title);
        }



        //  private List<TrackListViewModel> list = new List<TrackListViewModel>(); 
        public List<TrackListViewModel> ListTrack
        {
            get { return null; }
        }

        private void putExportTracks(PlayListViewModel pl, ICollectionView view)
        {
            var list = new List<TrackListViewModel>();
            foreach (TrackListViewModel track in view)
                list.Add(track);
            pl.ExportTracks = list;

        }
        Point startPoint;
        private void dg_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            startPoint = e.GetPosition(null);
        }

        private void dg_PreviewMouseMove(object sender, MouseEventArgs e)
        {
            var mousePos = e.GetPosition(null);
            var diff = startPoint - mousePos;

            if (Math.Abs(diff.X) > SystemParameters.MinimumHorizontalDragDistance
                || Math.Abs(diff.Y) > SystemParameters.MinimumVerticalDragDistance)
            {
                var treeView = sender as DataGrid;
                var treeViewItem = //(e.OriginalSource as DependencyObject).
                    Util.Util<DataGridRow>.FindAnchestor((DependencyObject)e.OriginalSource);
                //   FindAnchestor<TreeViewItem>((DependencyObject)e.OriginalSource);

                if (treeView == null || treeViewItem == null)
                    return;

                var folderViewModel = treeView.SelectedItem as TrackListViewModel;
                if (folderViewModel == null)
                    return;

                var dragData = new DataObject(folderViewModel);
                DragDrop.DoDragDrop(treeViewItem, dragData, DragDropEffects.Copy);
            }
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\Util\StringFormatConverter.cs">
    <content><![CDATA[using System;
using System.Windows.Data;
using pdb.util;
using pdb.player.ViewModel;
using System.Windows.Media;

namespace pdb.player.Vue.Util
{
    [ValueConversion(typeof(object), typeof(string))]
    public class StringFormatConverter : BaseConverter, IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter,
                          System.Globalization.CultureInfo culture)
        {
            string format = parameter as string;
            if (!string.IsNullOrEmpty(format))
            {
                return string.Format(culture, format, value);
            }
            else
            {
                return value.ToString();
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter,
                        System.Globalization.CultureInfo culture)
        {
            return null;
        }
    }


    [ValueConversion(typeof(TimeSpan), typeof(string))]
    public class TimeFormatConverter : BaseConverter, IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter,
                          System.Globalization.CultureInfo culture)
        {
            if (value is TimeSpan)
            {
                TimeSpan ts = (TimeSpan)value;
                return String.Format("{0}:{1}{2}", ts.Minutes, ts.Seconds >= 10 ? "" : "0", ts.Seconds);
            }
            return value.ToString();

        }

        public object ConvertBack(object value, Type targetType, object parameter,
                        System.Globalization.CultureInfo culture)
        {
            return null;
        }
    }

    [ValueConversion(typeof(string), typeof(string))]
    public class ClFormatConverter : BaseConverter, IValueConverter
    {
        static int NB_DEC = 4; 
        public object Convert(object value, Type targetType, object parameter,
                          System.Globalization.CultureInfo culture)
        {
            if (value == null)
                return "";
            var str = value.ToString();
            int count = str.Length;
            if (count < 4)
                return str;

            var tab = str.ToCharArray();
            var sb = new StringBuilder();
            bool second = false;
            //if (str.StartsWith("0"))
                second = true; 
            int i = 0;

            bool pt = false;
            for (int ii = 0; ii < count; ii++)
            {
                var c = tab[ii];
                if (c == '.')
                    pt = true;

                if (!pt)
                {
                    if (c != ' ')
                    {

                        if (i > NB_DEC || (i >= NB_DEC && second))
                        {
                            if (!second)
                            {
                                second = true;
                                i = 1;
                            }
                            else
                                i = 0;
                            sb.Append(" ");
                        }
                        i++;
                    }
                }
                sb.Append(c);
            }

            return sb.ToString();


        }

        public object ConvertBack(object value, Type targetType, object parameter,
                        System.Globalization.CultureInfo culture)
        {
            if (value == null) return "";
            return value.ToString().Replace(" ", "");
        }
    }


    [ValueConversion(typeof(int), typeof(string))]
    public class IntFormatConverter : BaseConverter, IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter,
                          System.Globalization.CultureInfo culture)
        {
            if (value is int)
            {
                int ivalue = (int)value;
                if (ivalue <= 0) return "";
            }
            return value.ToString();

        }

        public object ConvertBack(object value, Type targetType, object parameter,
                        System.Globalization.CultureInfo culture)
        {
            int result;
            if (int.TryParse(value.ToString(), out result))
            {
                return result;
            }
            return null;
        }
    }
    [ValueConversion(typeof(TrackListViewModel), typeof(Brush))]
    public class BgColorFormatConverter : BaseConverter, IValueConverter
    {
        public SolidColorBrush getColor(TrackListViewModel tv)
        {
            exportState es = tv.ExportStatus;
            if (!tv.Exists)
                es = exportState.miss;
            switch (es)
            {
                case exportState.none: return Brushes.Ivory;
                case exportState.miss: return Brushes.LightGray;
                case exportState.present: return Brushes.Ivory;
                case exportState.copy: return Brushes.LightGreen;
                case exportState.delete: return Brushes.DarkGray;
                default:
                    break;
            }   
            return Brushes.White; 
        }

        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            try
            {

                TrackListViewModel tv = value as TrackListViewModel;
                return getColor(tv); 
          
            }
            catch
            {
               
            }
            return Brushes.White; 
        }

        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            return null;
        }
    }




}
]]></content>
  </file>
  <file path="\pdb.podcast\Auto\AutoBuilderItem.cs">
    <content><![CDATA[using pdb.podcast.Tuning;
using pdb.util;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using pdb.podcast.Delta;
using TimeSpan = pdb.util.timeSpan;
using pdb.podcast.Selection;
using pdb.podcast.Report;

namespace pdb.podcast.Auto
{
    class AutoBuilderItem : IBorder
    {


        /// <summary>
        /// Valeur initiale de la valeur gÃ©rÃ©e
        /// </summary>
        public double org;
        private double pertinentOrg = -1;
        private timeSpan tpertinentOrg;
        public TimeSpan torg;
        private TimeSpan tmin;
        private TimeSpan tmax;
        /// <summary>
        /// Valeur modifiÃ©e
        /// </summary>
        private double newv;
        private double evolSize;
        public double NewV { get { return newv; } }
        internal TrackBorderItem rejected(bool real) { return real ? _rejected : _rejectedLight; }
        internal TrackBorderItem selected(bool real) { return real ? _selected : _selectedLight; }
        internal void makePertinent() { pertinentOrg = org; }

        public void checkAjout(IEnumerable<TrackInfoItunes> list)
        {
            if (pertinentOrg == org)
                return;

            var lcauses = _causes;


            foreach (Causes causes in lcauses)
            {
                foreach (TrackInfoItunes t in list)
                {
                    if (causes.candidat.Location == t.Location)
                    {
                        pertinentOrg = org;
                        return;
                    }
                }

            }


        }

        private string name;

        /// <summary>
        /// Attribut concernÃ©
        /// </summary>
        XmlAttribute att;
        XmlElement xml;
        public double dd;
        public double d;
        private bool lastStrict;
        private bool lastUp;
        private double lastDelta;

        private double lastOrg;

        private pdb.podcast.Tuning.Auto conf;
        public readonly borderType type;
        private AutoBuilder parent;
        public AutoBuilderItem(AutoBuilder parent, pdb.podcast.Tuning.Auto conf)
        {
            this.parent = parent;
            this.conf = conf;
            this.type = conf.type;
            this.name = string.Format("{0}:{1}", conf.name, type);
            if (conf.pente == 0)
                d = conf.max - conf.min;
            else
                d = conf.pente - conf.min;
            dd = d * d;
        }

        private bool _toSave;
        public bool ToSave { get { return _toSave; } }

        public double Org { get { return org; } }

        public void setConf(pdb.podcast.Tuning.Auto conf) { this.conf = conf; }

        #region border
        private TrackBorderItem _selected;
        private TrackBorderItem _selectedLight;
        private TrackBorderItem _rejected;
        private TrackBorderItem _rejectedLight;

        //private bool verify(TrackBorderItem tb)
        //{
        //    return true;
        //    double sourceValue = -1;
        //    var source = tb.source;
        //    switch (type)
        //    {
        //        case borderType.d: sourceValue = source.Duration; break;
        //        case borderType.fd: sourceValue = source.FeedDuration; break;
        //        case borderType.maxdate: sourceValue = (source.DateMax - Conf.Date0).TotalDays; break;
        //        default: return false;
        //    }

        //    if (Math.Abs(org - sourceValue) > 2.0E-7)
        //        return false;
        //    return true;
        //}
        private void setSelect(TrackBorderItem tb)
        {
            // pour down mÃ©mo des track sÃ©lectionnÃ©s

            _selected = tb;

        }

        private void setRejec(TrackBorderItem tb)
        {
            // A REVOIR

            //// pour up mÃ©mo des tracks rejetÃ©s
            ////1. S'il est par ailleurs dÃ©jÃ  intÃ©grÃ©, pas pertinent
            //if (parent.Source.contains(tb.candidat))
            //{
            //    return;
            //    if (_rejected != null)
            //    {
            //        if (_rejected.status > borderStatus.rejectedXtraLight)
            //            return;
            //        if (tb.val >= _rejected.val)
            //            return; 
            //    }

            //    tb.status = borderStatus.rejectedXtraLight; 
            //}


            ////2. On est en cours de construction donc il se peut que ce candidat soit in fine ajoutÃ© par d'autres
            //// intÃ©ret en up . S'il est dans la mÃ©moire pas pertinent en up
            //if (parent.Mem.dict.ContainsKey(tb.candidat.Location))
            //    return;
            _rejected = tb;
        }


        public void signal(TrackBorderItem tb)
        {

            if (tb.Virtual && !Conf.BorderVirtual)
                return;
            if (tb.Selected)
            {
                if (tb.val >= torg)
                    return;
                if (tb.val <= tmin)
                    return;

                if (!tb.Virtual)
                {
                    if (_selected == null)
                        _selected = tb;
                    else if (tb.val > _selected.val)
                        _selected = tb;
                }

                if (_selectedLight == null)
                    _selectedLight = tb;
                else if (tb.val > _selectedLight.val)
                    _selectedLight = tb;

                //if (_selected == null)
                //    setSelect(tb);
                //else
                //{
                //    if (tb.status > _selected.status && !Conf.BorderIdem)
                //        setSelect(tb);
                //    else if (tb.status == _selected.status || Conf.BorderIdem)
                //    {
                //        if (tb.val > _selected.val)
                //            setSelect(tb);
                //    }
                //}

            }
            else
            {

                if (tb.val <= torg)
                    return;
                if (tb.val >= tmax)
                    return;

                if (!tb.Virtual)
                {
                    if (_rejected == null)
                        _rejected = tb;
                    else if (tb.val < _rejected.val)
                        _rejected = tb;
                }

                if (_rejectedLight == null)
                    _rejectedLight = tb;
                else if (tb.val < _rejectedLight.val)
                    _rejectedLight = tb;


                //if (_rejected == null)
                //    setRejec(tb);
                //else
                //{
                //    if (tb.status > _rejected.status && !Conf.BorderIdem)
                //        setRejec(tb);
                //    else if (tb.status == _rejected.status || Conf.BorderIdem)
                //    {
                //        if (tb.val < _rejected.val)
                //            setRejec(tb);
                //    }
                //}

            }
        }
        #endregion

        public void setOrg(XmlElement xml)
        {
            // Program.logAuto.log(ToString());
            _rejected = null;
            _selected = null;
            _toSave = false;
            this.xml = xml;
            att = this.xml.Attributes[type.ToString()];
            lastOrg = org;
            if (att == null)
                org = -1;
            else
                org = Convert.ToDouble(att.Value);

            if (org < conf.min)
            {
                org = conf.min;
                newv = org;
                save();
            }
            else if (org > conf.max)
            {
                org = conf.max;
                newv = org;
                save();
            }
            torg = getValue(org);
            tmin = getValue(conf.min);
            tmax = getValue(conf.max);
            if (pertinentOrg < 0)
                pertinentOrg = org;
            tpertinentOrg = getValue(pertinentOrg);
            //  misc.log(ToString());
        }
        private double dt = -1; public double Dt { get { return dt; } set { dt = value; } }
        private double tension; public double Tension { get { return tension; } }
        private int _stop = AutoBuilder.STOP_MAX;
        public bool Stop(int level) { return _stop < level; }

        public void stop(int level)
        {
            newv = lastOrg;
            org = lastOrg;
            if (_stop > level)
                _stop = level;
            save();
        }
        public void reset()
        {
            _stop = AutoBuilder.STOP_MAX;
        }
        public void setTension(bool up, bool real, bool checkSelect)
        {

            dt = getDt(up, real, checkSelect);
        }

        public void setTension()
        {
            tension = _getTension(org);
        }

        private double getDt(bool up, bool real, bool checkSelect)
        {
            double t0 = _getTension(pertinentOrg);
            tension = _getTension(up, real, checkSelect);
            return (tension - t0) / conf.coeff;

        }

        private double getTension(bool up, bool real, bool selected)
        {
            return _getTension(up, real, selected) / conf.coeff;
        }

        public double getValue(TimeSpan val)
        {
            switch (type)
            {

                case borderType.d:
                case borderType.fd:
                case borderType.nb:
                case borderType.c:
                    return val.TotalMinute;
                case borderType.maxdate: return val.TotalDay;
                default: return -1;

            }

        }

        private TimeSpan getValue(double val)
        {
            switch (type)
            {
                case borderType.d:
                case borderType.fd:
                case borderType.nb:
                case borderType.c:
                    return TimeSpan.FromMinutes(val);
                case borderType.maxdate: return TimeSpan.FromDays(val);
                default: return new TimeSpan();

            }
        }
        public double EvolSize { get { return evolSize; } }

        public List<Causes> getCauses()
        {
            return _causes;
        }

        //public List<Causes> getcauses(bool up, bool strict)
        //{
        //    List<Causes> list = null;
        //    if (up)
        //    {
        //        if (strict)
        //            list = _causesRejetStrict;
        //        else
        //            list = _causesRejet;
        //    }
        //    else
        //    {
        //        if (strict)
        //            list = _causesSelectStrict;
        //        else
        //            list = _causesSelect;
        //    }
        //    return list;
        //}

        public void gap(bool up, bool fix, double _gap)
        {
            _gap = Math.Abs(_gap);
            if (fix)
            {
                newv = Math.Abs(_gap);
            }
            else
            {
                if (up)
                    newv = org + _gap;
                else
                    newv = org - _gap;
            }
            save();
        }

        private double _getTension(bool up, bool strict, bool checkSelect)
        {
            lastStrict = strict;
            lastUp = up;
            // double t0 = getTension(org, dd);
            newv = org;
            evolSize = 0;
            var list = _causes;


            if (list.Count > 0)
            {
                int ifin = 2;
                bool bselect = !up;
                if (checkSelect)
                {
                    ifin = 1;
                }

                CauseItem cause = null;

                for (int i = 0; i < ifin; i++)
                {
                    var _cause = list[0].getCause(type, strict, !up, bselect);
                    bselect = !bselect;
                    if (_cause == null)
                        continue;
                    if (cause == null)
                        cause = _cause;
                    else
                    {
                        if (up)
                        {
                            if (_cause.val < cause.val)
                                cause = _cause;
                        }
                        else
                        {
                            if (_cause.val > cause.val)
                                cause = _cause;
                        }
                    }
                }
                if (cause == null)
                    return int.MaxValue;
                newv = Math.Round(getValue(cause.val), 8);
                foreach (var c in list)
                {
                    var cand = c.candidat;
                    evolSize += Stat.getSizeinMo(cand);
                }
            }
            else
                return int.MaxValue;


            //if (false)
            //{

            //    if (up)
            //    {
            //        var _rejected = strict ? this._rejected : this._rejectedLight;
            //        if (_rejected == null)
            //            return int.MaxValue;
            //        newv = Math.Abs(Math.Round(getValue(_rejected.val), 8));
            //        evolSize = Stat.getSizeinMo(_rejected.candidat);

            //    }
            //    else
            //    {
            //        var _selected = strict ? this._selected : this._selectedLight;
            //        if (_selected == null)
            //            return int.MaxValue;
            //        newv = Math.Round(getValue(_selected.val), 8);
            //    }
            //}

            return _getTension(newv);
        }

        public void save()
        {
            //  xml.SetAttribute(type.ToString(), newv.ToString()); 
            att.Value = newv.ToString();
            _toSave = true;
        }

        public void save(timeSpan val)
        {
            this.newv = Math.Round(getValue(val), 8);
            save();
        }



        private List<Causes> _causes = new List<Causes>();
        //private List<Causes> _causesRejet = new List<Causes>();
        //private List<Causes> _causesSelect = new List<Causes>();

        //private List<Causes> _causesRejetStrict = new List<Causes>();
        //private List<Causes> _causesSelectStrict = new List<Causes>();



        //public void after()
        //{            
        //    _causesRejet = new List<Causes>();
        //    _causesSelect = new List<Causes>();
        //    _causesRejetStrict = new List<Causes>();
        //    _causesSelectStrict = new List<Causes>();
        //    after(true, true);
        //    after(true, false);
        //    after(false, true);
        //    after(false, false);
        //}
        public void after(bool up, bool strict, bool checkSelection)
        {
            _causes = new List<Causes>();
            var list = parent.CauseRegister.getList(false);
            int min = int.MaxValue;
            //  int minStrict = int.MaxValue;
            if (!up)
            {
                min = 0;
                //   minStrict = 0; 
            }
            int orgValue = torg.Value;
            foreach (Causes causes in list)
            {
                var candidat = causes.candidat;
                if (checkSelection)
                {
                    if (up && candidat.Selected)
                        continue;
                    if (!up && !candidat.Selected)
                        continue;
                }
                int ifin = 2;
                bool bselect = !up;
                if (checkSelection)
                {
                    ifin = 1;
                }

                for (int i = 0; i < ifin; i++)
                {


                    var cause = causes.getCause(type, strict, !up, bselect);
                    bselect = !bselect;
                    if (cause == null)
                        continue;
                    if (up && cause.Ok)
                        continue;
                    if (!up && !cause.Ok)
                        continue;
                    //if (value < 0)
                    //    value = -value;
                    int value = cause.val.Value;

                    if (up)
                    {

                        if (value == min)
                        {
                            _causes.Add(causes);

                        }
                        else if (value < min)
                        {
                            _causes.Clear();
                            _causes.Add(causes);
                            min = value;
                        }

                    }
                    else
                    {
                        if (value >= orgValue)
                            continue;

                        if (value == min)
                        {
                            _causes.Add(causes);
                        }
                        else if (value > min)
                        {
                            _causes.Clear();
                            _causes.Add(causes);
                            min = value;
                        }


                    }
                }

            }
        }


        private double _getTension(double org)
        {
            var d2 = org - conf.min;
            if (conf.pente > 0)
                return (d2 / d);

            var d1 = org - conf.max;

            return -1 + 2 * (d1 * d1 + d2 * d2) / dd;
        }

        public double getTension(timeSpan org)
        {
           var _org = getValue(org);
            var t = _getTension(_org);
           // dt = t - _getTension(pertinentOrg); 

            return t; 
        }





        public override string ToString()
        {
            var sb = new System.Text.StringBuilder();
            sb.AppendLine();
            sb.Append(name); sb.Append(" ");
            sb.Append(org); sb.Append(" ");

            if (newv != 0 && newv != org)
            {
                sb.Append("==>");
                sb.Append(newv);
                sb.Append(" ");
            }

            sb.Append("stop="); sb.Append(_stop); sb.Append(" ");

            sb.Append("pertinent="); sb.Append(pertinentOrg); sb.Append(" ");
            sb.Append("tension="); sb.Append(tension); sb.Append(" ");
            if (dt != -1)
            {
                sb.Append("dt="); sb.Append(dt); sb.Append(" ");
            }


            if (newv != 0 && newv != org)
            {
                sb.Append("<==");
            }
            var causes = _causes; // getcauses(lastUp, lastStrict);
            foreach (Causes cause in causes)
            {
                sb.AppendLine();
                var strStrict = lastStrict ? "strict " : "light ";
                var strselect = lastUp ? "rejet " : "select ";
                sb.Append(strselect);
                sb.Append(strStrict);
                sb.Append(cause.getCause(type, lastStrict, !lastUp, !lastUp));
                sb.Append(" "); sb.Append(cause.candidat);
            }

            //if (_causesRejetStrict.Count > 0)
            //{


            //    foreach (Causes cause in _causesRejetStrict)
            //    {
            //        sb.AppendLine();
            //        sb.Append("rejet strict "); sb.Append(cause.getCause(type,true,false));                     
            //    }
            //}

            //else if (_causesRejet.Count > 0)
            //{

            //    foreach (Causes cause in _causesRejet)
            //    {
            //        sb.AppendLine();
            //        sb.Append("rejet light "); sb.Append(cause.getCause(type,false, false));      
            //    }
            //}

            //if (_causesSelectStrict.Count > 0)
            //{

            //    foreach (Causes cause in _causesSelectStrict)
            //    {
            //        sb.AppendLine();
            //        sb.Append("select strict "); sb.Append(cause.getCause(type,true,true));      
            //    }
            //}

            //else if (_causesSelect.Count > 0)
            //{              
            //    foreach (Causes cause in _causesSelectStrict)
            //    {
            //        sb.AppendLine();
            //        sb.Append("select light "); sb.Append(cause.getCause(type,false,true));      
            //    }
            //}



            if (_selected != null)
            {
                sb.AppendLine();
                sb.Append(_selected);
            }

            if (_rejected != null)
            {
                sb.AppendLine();
                sb.Append(_rejected);
            }
            sb.AppendLine();
            return sb.ToString();
        }


        public void signal(CauseDatas cd)
        {
            throw new NotImplementedException();
        }
    }
}
]]></content>
  </file>
</db>
