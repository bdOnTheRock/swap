<db path="C:\Bernard\db1\pd4bb">
  <file path="\pdb.player\ViewModel\DetailAlbumViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Input;
using pdb.player.ViewModel.Commande.PlayList;
using pdb.gen.albums;
using System.Text.RegularExpressions;
using pdb.player.ViewModel.Commande.Link;
using pdb.player.ViewModel.Commande;
using pdb.db;
using System.Windows.Media.Imaging;
using System.IO;
using pdb.util;
using System.Windows.Media;
using pdb.player.model;
using System.Collections.ObjectModel;
using pdb.obj;


namespace pdb.player.ViewModel
{

    public enum albumMode
    {
        identique,
        origine,
        origineSiVirtuel,
        plusLong,
        plusCourt
    }
    class DetailAlbumViewModel : ViewModelBase
    {
        private static ArtWorkManager artworkManager = new ArtWorkManager();
        private TrackListViewModel humanSelected;
        private Album currentAlbum;
        // private List<TrackListViewModel> tracks;
        private albumMode mode;
        private bool albumVirtual;
        private static Logger log = Logger.getLogger("Img");
        private PlayList pl;
        private PlayListViewModel plv;
        public PlayListViewModel PlayListViewModel { get { return plv; } }


        public albumMode Mode
        {
            get
            {
                return mode;
            }
            set
            {
                if (value != mode)
                {
                    mode = value;
                    init(null);
                    OnPropertyChanged("");
                }
            }
        }

        public DetailAlbumViewModel()
        {
            TrackListViewModel.CurrentHumanSelectedChanged += new EventHandler(TrackListViewModel_CurrentSelectedChanged);
        }


        //  private ObservableCollection<ImageSource> images; 

        private void init(TrackListViewModel h)
        {
            // tracks = null;
            img = null;
            //images = new ObservableCollection<ImageSource>() ;
            //  long sizeImgMax = 0;
            // if (humanSelected == null)
            if (h == null)
                humanSelected = TrackListViewModel.HumanSelected;
            if (humanSelected != null)
            {
                var p = humanSelected.PieceGen;
                var idOrg = p.PieceId;

                switch (mode)
                {
                    case albumMode.identique:
                        break;
                    case albumMode.origine: p = p.Master;
                        break;
                    case albumMode.origineSiVirtuel:
                        if (p.Virtual)
                            p = p.Master;
                        break;
                    case albumMode.plusLong:
                        if (p.Virtual)
                        {
                            var virt = p.PieceAlbum.Count;
                            var master = p.Master.PieceAlbum.Count;
                            if (master > virt)
                                p = p.Master;
                        }

                        break;

                    case albumMode.plusCourt:
                        if (p.Virtual)
                        {
                            var virt = p.PieceAlbum.Count;
                            var master = p.Master.PieceAlbum.Count;
                            if (master < virt)
                                p = p.Master;
                        }

                        break;


                    default:
                        break;
                }

                albumVirtual = idOrg != p.PieceId;

                img = artworkManager.get(humanSelected.PieceGen);

                currentAlbum = p.PieceAlbum;
                initAlbums();

            }
            else
            {
                // currentAlbum = null;
                //tracks = new List<TrackListViewModel>();
            }
        }

        //public ObservableCollection<ImageSource> Images
        //{
        //    get
        //    {
        //        return images; 
        //    }
        //}

        void TrackListViewModel_CurrentSelectedChanged(object sender, System.EventArgs e)
        {
            if (humanSelected != TrackListViewModel.HumanSelected)
            {
                init(null);

            }
        }
        private class PieceTrackNumberComparer : IComparer<TrackListViewModel>
        {
            public int Compare(TrackListViewModel x, TrackListViewModel y)
            {
                var cmp = x.TrackNumber.CompareTo(y.TrackNumber);
                if (cmp != 0)
                    return cmp;
                return x.getLocation().CompareTo(y.getLocation());
                //  return x.TrackNumber.CompareTo(y.TrackNumber);
            }
        }
        private class PieceVirtualClassementComparer : IComparer<TrackListViewModel>
        {
            private static PieceTrackNumberComparer tn = new PieceTrackNumberComparer();
            public int Compare(TrackListViewModel x, TrackListViewModel y)
            {
                int cmp = x.PieceGen.VirtualClassement.CompareTo(y.PieceGen.VirtualClassement);


                if (cmp != 0) return -cmp;
                //cmp = x.RapportClassement.CompareTo(y.RapportClassement);
                //if (cmp != 0) return -cmp;
                return tn.Compare(x, y);
                //  return -x.RapportClassement.CompareTo(y.RapportClassement);
            }
        }

        public List<TrackListViewModel> Album
        {
            get
            {
                if (currentAlbum == null || plv == null)
                    return new List<TrackListViewModel>();
                var tracks = plv.Tracks;
                tracks.Sort(new PieceVirtualClassementComparer());
                //int index = 0;
                //foreach (TrackListViewModel t in tracks)
                //{
                //    index++;
                //    t.Index = index;
                //    if (humanSelected != null && t.MasterId == humanSelected.MasterId)
                //        t.IsSelected = true;
                //    else
                //        t.IsSelected = false; 
                //}
                return tracks;

                //var tracks = new List<TrackListViewModel>(); 
                //foreach (var t in currentAlbum.Tracks)
                //{
                //    TrackListViewModel trackList = TrackListViewModel.get(t.PieceId); 
                //    //index++;
                //    //TrackListViewModel trackList = PlayListViewModel.findTrack(App.bib.Musique, t.PieceId);
                //    //if (trackList == null)
                //    //    continue;
                //    //trackList.Index = index;
                //    //if (t.MasterId == humanSelected.MasterId)
                //    //    trackList.IsSelected = true;
                //    //else
                //    //    trackList.IsSelected = false;
                //    tracks.Add(trackList);
                //}
                // //if (tracks != null)
                // //    return tracks;
                //// tracks = new List<TrackListViewModel>();
                // if (currentAlbum == null)
                // {
                //     //tracks = new List<TrackListViewModel>();
                // }
                // else
                // {
                //     // var ll = new List<TrackListViewModel>();

                //   //  int index = 0;
                //     foreach (var t in currentAlbum.Tracks)
                //     {
                //       //  index++;
                //         TrackListViewModel trackList = TrackListViewModel.getOrCreate(t); // PlayListViewModel.findTrack(App.bib.Musique, t.PieceId);
                //         if (trackList == null)
                //             continue;
                //        // trackList.Index = index;
                //         if (t.PieceId == humanSelected.PieceId)
                //             trackList.IsSelected = true;
                //         else
                //             trackList.IsSelected = false;
                //         tracks.Add(trackList);
                //     }
                // }
                //return tracks;

            }
        }

        public TrackListViewModel SelectedTrackInAlbumView
        {
            get
            {


                //var t = humanSelected;


                //if (!albumVirtual)
                //    return t;
                //if (plv != null && !plv.contains(t.PieceId))
                //{
                //    t = plv.Tracks.Find(tt => tt.MasterId == humanSelected.MasterId);
                //    if (t != null)
                //        return t;
                //}
                return humanSelected;

                //if (humanSelected == null)
                //    return null;
                //var tracks = Album;
                //if (tracks == null || tracks.Count == 0)
                //    return null;
                //var tt = tracks.Find(t => t.MasterId == humanSelected.MasterId);
                //return tt;
            }
            set
            {
                if (value == null)
                    return; 
                if (humanSelected != null)
                    humanSelected.IsSelected = false;
                humanSelected = value;
                if (humanSelected != null)
                    humanSelected.IsSelected = true;
               // TrackListViewModel.setHumanSelected(App.bib.Musique, value);
                //  initAlbums(); 
                // TrackListViewModel.HumanSelected = humanSelected; 
                init(humanSelected);
                OnPropertyChanged("");
            }
        }


        #region cmd

        private ICommand _contextCmdCheck;
        public ICommand ContextCmdCheck { get { if (_contextCmdCheck == null) _contextCmdCheck = new CheckCmd(); return _contextCmdCheck; } }

        private ICommand _contextCmdUnCheck;
        public ICommand ContextCmdUnCheck { get { if (_contextCmdUnCheck == null) _contextCmdUnCheck = new UnCheckCmd(); return _contextCmdUnCheck; } }


        private ICommand _contextLinkFather;
        public ICommand LinkFather { get { if (_contextLinkFather == null) _contextLinkFather = new LinkFather(); return _contextLinkFather; } }

        private ICommand _contextLinkChild;
        public ICommand LinkChild { get { if (_contextLinkChild == null) _contextLinkChild = new LinkChild(); return _contextLinkChild; } }

        private ICommand _contextLinkFusion;
        public ICommand LinkFusion { get { if (_contextLinkFusion == null) _contextLinkFusion = new LinkFusion(); return _contextLinkFusion; } }

        private ICommand _contextUnLink;
        public ICommand LinkReset { get { if (_contextUnLink == null) _contextUnLink = new LinkReset(); return _contextUnLink; } }

        private ICommand _contextDelete;
        public ICommand DeleteTrack { get { if (_contextDelete == null) _contextDelete = new DeleteCmd(); return _contextDelete; } }

        private ICommand _contexExplorer;
        public ICommand Explorer { get { if (_contexExplorer == null) _contexExplorer = new Explorer(); return _contexExplorer; } }



        private ICommand _ContextCmdAddToList;
        public ICommand ContextCmdAddToList { get { if (_ContextCmdAddToList == null) _ContextCmdAddToList = new AddToList(App.Instance); return _ContextCmdAddToList; } }

        private ICommand _ContextCmdDbDeleteClassement;
        public ICommand ContextCmdDbDeleteClassement { get { if (_ContextCmdDbDeleteClassement == null) _ContextCmdDbDeleteClassement = new DbDeleteLastClassement(); return _ContextCmdDbDeleteClassement; } }

        private ICommand _ContextCmdDbDeleteRead;
        public ICommand ContextCmdDbDeleteRead { get { if (_ContextCmdDbDeleteRead == null) _ContextCmdDbDeleteRead = new DbDeleteLastRead(); return _ContextCmdDbDeleteRead; } }


        #endregion

        //  static Regex reg = new Regex(@"\[(.*)\]");
        /// <summary>
        /// moche mais pour l'instant on s'en contente
        /// </summary>
        public string Grouping
        {
            get
            {
                return getGrouping(false);
            }
        }

        private string getGrouping(bool albumVirt)
        {
            if (humanSelected == null)
                return "";
            var t = humanSelected.PieceGen;
            if (albumVirt)
                t = humanSelected.PieceGen.Master;

            var a = t.PieceAlbum;
            if (a == null)
                return "";
            string delta = "-";
            var updateClassement = a.UpdateClassement;
            if (updateClassement != null)
                delta = ((int)(DateTime.Now.Date - updateClassement.Value.Date).TotalDays).ToString();

            return string.Format("{0} {1} [{2}] {3}", t.StackIndex, delta, t.RankAlbumReverse, a.EquivLight);

            //var str = t.Grouping;

            //if (!reg.IsMatch(str))
            //    return str;

            //return reg.Match(str).Groups[1].Value;
        }

        public string GroupingAlt
        {
            get
            {
                return getGrouping(true);
            }
        }

        public bool WithVirtualAlbum
        {
            get
            {
                if (humanSelected == null)
                    return false;
                return humanSelected.PieceGen.PieceAlbum.Virtual;
            }
        }

        public string Name
        {
            get
            {
                if (humanSelected == null)
                    return "";
                return humanSelected.Album;
            }
        }

        public string NameAlt
        {
            get
            {
                if (humanSelected == null)
                    return "";
                return humanSelected.Piece.Master.Album;
            }
        }

        #region image
        private ImageSource img;
        public bool HasArtWork
        {
            get
            {
                return img != null;
            }
        }

        public ImageSource ArtWork { get { return img; } }

        #region albums
        public List<TrackListViewModel> Albums { get { return albums; } }
        private List<TrackListViewModel> albums = new List<TrackListViewModel>();
        private void initAlbums()
        {
            if (currentAlbum == null)
                return;

            var _albumName = currentAlbum.Name;
            //if (pl == null || _albumName != pl.Name)
            //{
            pl = new PlayList(_albumName);
            plv = new PlayListViewModel(pl);
            //  plv.setSecondary(); 
            foreach (var t in currentAlbum.Tracks)
            {
                pl.add(t);
            }
            plv.init();
            foreach (TrackListViewModel t in plv.Tracks)
            {
                if (t.PieceId == humanSelected.PieceId)
                    t.IsSelected = true;
                else
                    t.IsSelected = false;
            }
            if (humanSelected == null)
                return;

            albums = new List<TrackListViewModel>();


            foreach (var p in humanSelected.PieceGen.Master)
            {
                var pp = TrackListViewModel.getOrCreate(p); // pl.FindTrack(p.PieceId);
                if (pp != null)
                    albums.Add(pp);
            }
            albums.Sort(new AlbumComparer());

            //foreach (TrackListViewModel t in albums)
            //{
            //    t.IsSelected = t.PieceId == humanSelected.PieceId;
            //}
            //  return albums;
            //TrackListViewModel trackList = TrackListViewModel.getOrCreate(t); // PlayListViewModel.findTrack(App.bib.Musique, t.PieceId);
            //if (trackList == null)
            //    continue;
            //// trackList.Index = index;
            //if (t.PieceId == humanSelected.PieceId)
            //    trackList.IsSelected = true;
            //else
            //    trackList.IsSelected = false;
            //tracks.Add(trackList);
            // }


            //var albums = new List<TrackListViewModel>();
            //if (humanSelected == null)
            //    return albums;
            //var pl_ = PlayListViewModel.SelectedPlayList;
            //if (pl_ == null)
            //    return albums;
            //foreach (var p in humanSelected.PieceGen.Master)
            //{
            //    var pp = TrackListViewModel.getOrCreate(p); // pl.FindTrack(p.PieceId);
            //    if (pp != null)
            //        albums.Add(pp);
            //}
            //albums.Sort(new AlbumComparer());

            //foreach (TrackListViewModel t in albums)
            //{
            //    t.IsSelected = t.PieceId == humanSelected.PieceId;
            //}
            //return albums;


        }



        public TrackListViewModel SelectedTrackInAlbumsView
        {
            get
            {
                return humanSelected;

            }
            set
            {
                if (value == null)
                    return; 
                if (humanSelected != null)
                    humanSelected.IsSelected = false;
                humanSelected = value;
                if (humanSelected != null)
                    humanSelected.IsSelected = true;
                //if (humanSelected != null)
                //    humanSelected.IsSelected = true;
               // TrackListViewModel.setHumanSelected(App.bib.Musique, value); // HumanSelected = value;
                init(humanSelected);
                OnPropertyChanged("");

            }
        }


        private class AlbumComparer : IComparer<TrackListViewModel>
        {
            //private int theOne; 
            //public AlbumComparer(TrackListViewModel humanselected)
            //{
            //    theOne = humanselected.PieceId; 
            //}

            public int Compare(TrackListViewModel x, TrackListViewModel y)
            {

                //if (x.PieceId == theOne)
                //    return -1;
                //if (y.PieceId == theOne)
                //    return 1;
                return x.RankAlbumReverse.CompareTo(y.RankAlbumReverse);
            }
        }
        #endregion
        #endregion

    }
}

]]></content>
  </file>
  <file path="\pdb.player\Vue\AlbumCtl.xaml">
    <content><![CDATA[<UserControl x:Class="pdb.player.Vue.AlbumCtl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             xmlns:l="clr-namespace:pdb.player.Vue"
             d:DesignHeight="300" d:DesignWidth="300">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="3" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />

        </Grid.RowDefinitions>
        <l:EnhancedDataGrid Grid.Row="0"  Grid.Column="0" DockPanel.Dock="Bottom" ConfCouleur="album"
                       x:Name="dg" x:Uid="album"
                       AutoGenerateColumns="False" 
                        IsSynchronizedWithCurrentItem="false" 
                                        
                       SelectedItem="{Binding SelectedTrackInAlbumView}">



            <!--<DataGrid.RowStyle>
                <Style TargetType="DataGridRow">
                    <EventSetter Event="MouseDoubleClick" Handler="dgAlbum_MouseDoubleClick" />
                    <EventSetter Event="PreviewMouseLeftButtonDown" Handler="dg_MouseClick" />
                    <Setter Property="DataGridRow.IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                    <Setter Property="DataGridRow.Background" Value="White" />
                    <Style.Triggers>
                        <Trigger Property="DataGridRow.IsSelected" Value="True">
                            <Setter Property="DataGridRow.Background" Value="Brown" />
                        </Trigger>
                    </Style.Triggers>

                </Style>
            </DataGrid.RowStyle>-->

            <DataGrid.Columns>
                <DataGridTemplateColumn Header="" >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox IsChecked="{Binding Enabled,UpdateSourceTrigger=PropertyChanged}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridCheckBoxColumn Header="" Binding="{Binding Exists,Mode=OneWay}" />
                <!--<DataGridCheckBoxColumn Header=""  Binding="{Binding Enabled,UpdateSourceTrigger=PropertyChanged}"  />-->
                <DataGridTextColumn Header="" Binding="{Binding Index,Mode=OneWay}" />
                <DataGridTextColumn Header="p" Binding="{Binding TrackNumber,Converter={StaticResource Int}}"/>
                <DataGridTextColumn Header="Nom" Binding="{Binding Name,Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="" Binding="{Binding MedianneStatus,Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="Classement" Binding="{Binding Classement,Converter={StaticResource cl},UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="CC" Binding="{Binding ClassementCompact, Converter={StaticResource cl} }"/>
                <DataGridTextColumn Header="Virtuel" Binding="{Binding ClassementVirtuel,Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="Coeff" Binding="{Binding CoeffVirtuel, Mode=OneWay, Converter={StaticResource decimalE},UpdateSourceTrigger=PropertyChanged}"/>

                <DataGridTextColumn Header="Virtuel2" Binding="{Binding ClassementVirtuel2,Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="Coeff2" Binding="{Binding CoeffVirtuel2,Mode=OneWay, Converter={StaticResource decimalE},UpdateSourceTrigger=PropertyChanged}"/>

                <DataGridTextColumn Header="Durée" Binding="{Binding Duration,Mode=OneWay,Converter={StaticResource TimeSpan}}"   >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                            <Setter Property="Padding" Value="0,0,3,0" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="Rank" Binding="{Binding Rank,Mode=OneWay,Converter={StaticResource Int}}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                            <Setter Property="Padding" Value="0,0,3,0" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="Maj"  Binding="{Binding UpdateClassement, Mode=OneWay,Converter={StaticResource date}}" />
                <DataGridTextColumn Header="MajAlbum"  Binding="{Binding AlbumUpdateClassement, Mode=OneWay, Converter={StaticResource date}}" />

                <DataGridTextColumn Header="Delai"  Binding="{Binding UpdateClassement, Mode=OneWay,Converter={StaticResource delai}}" />
                <DataGridTextColumn Header="DelaiAlbum"  Binding="{Binding AlbumUpdateClassement, Mode=OneWay, Converter={StaticResource delai}}" />
                <DataGridTextColumn Header="Motif" Binding="{Binding SelectedMotif,  Mode=OneWay,UpdateSourceTrigger=PropertyChanged, Converter={StaticResource motif}}"/>
                <DataGridTextColumn Header="NbClassements"  Binding="{Binding NbClass,Converter={StaticResource Int}}" />
                <DataGridTextColumn Header="MasterAlbum" Binding="{Binding MasterAlbum}"/>
                <DataGridTextColumn Header="Grouping" Binding="{Binding Grouping, Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="Artiste"  Binding="{Binding Artist}"/>
                <DataGridTextColumn Header="Année" Binding="{Binding Year,Converter={StaticResource Int}}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                            <Setter Property="Padding" Value="0,0,3,0" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>


                <DataGridTextColumn Header="Id"  Binding="{Binding PieceId,Converter={StaticResource Int}}" />
                <DataGridTextColumn Header="ParentId"  Binding="{Binding PieceParentId,Converter={StaticResource Int}}" />
                <DataGridTextColumn Header="MasterId"  Binding="{Binding MasterId,Converter={StaticResource Int}}" />

                <DataGridTextColumn Binding="{Binding StrPlaying, Mode=OneWay}" />
                <DataGridTextColumn Header="Export" Binding="{Binding ExportStatus, Mode=OneWay,UpdateSourceTrigger=PropertyChanged}" />
                <DataGridTextColumn Header="IndexExport" Binding="{Binding IndexExport, Mode=OneWay,UpdateSourceTrigger=PropertyChanged}" />
                <DataGridTextColumn Header="Rendement" Binding="{Binding Rendement, Mode=OneWay, Converter={StaticResource decimalE},UpdateSourceTrigger=PropertyChanged}"/>
            </DataGrid.Columns>


            <DataGrid.ItemContainerStyle>

                <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
                    <EventSetter Event="MouseDoubleClick" Handler="dgAlbum_MouseDoubleClick" />
                    <EventSetter Event="PreviewMouseLeftButtonDown" Handler="dg_MouseClick" />
                    <EventSetter Event="PreviewMouseLeftButtonUp" Handler="dg_MouseClick" />
                    <EventSetter Event="PreviewMouseRightButtonDown" Handler="dg_MouseClick" />
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                    <Setter Property="FontWeight" Value="Normal" />
                    <Setter Property="BorderThickness" Value="0" />
                    <!--<Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="FontWeight" Value="Bold" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Exis
                    ts}" Value="False">
                            <Setter Property="Background" Value="LightGray" />
                        </DataTrigger>
                    </Style.Triggers>-->
                </Style>
            </DataGrid.ItemContainerStyle>

            <DataGrid.CellStyle>
                <Style TargetType="DataGridCell">
                    <Setter Property="Background" Value="{Binding TV, Converter={StaticResource colorExport},ConverterParameter=album,   UpdateSourceTrigger=PropertyChanged}" />
                    <Setter Property="Foreground" Value="{Binding TV, Converter={StaticResource foreColor}, ConverterParameter=album,  UpdateSourceTrigger=PropertyChanged}" />
                    <Setter Property="BorderThickness" Value="1" />
                    <Setter Property="BorderBrush" Value="Transparent" />
                   
                    
                    
                    <EventSetter Event="MouseDoubleClick" Handler="dgAlbum_MouseDoubleClick" />




                    <!--<Style.Triggers>
                        <Trigger Property="IsSelected"  Value="True">-->
                    <!--<Setter Property="Background"  Value="SteelBlue"/>-->
                    <!--<Setter Property="Background"  Value="SteelBlue"/>-->
                    <!--<Setter Property="Foreground"  Value="White" />-->
                    <!--<Setter Property="BorderThickness" Value="1" />-->
                    <!--</Trigger>
                    </Style.Triggers>-->
                </Style>
            </DataGrid.CellStyle>
            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow">
                    <!--<Setter Property="Height"  Value="20" />-->
                  
                    <EventSetter Event="PreviewMouseLeftButtonUp" Handler="dg_MouseClick" />
                    <Setter Property="Background" Value="{Binding TV, Converter={StaticResource colorExport}, ConverterParameter=album,  UpdateSourceTrigger=PropertyChanged}" />
                    <Setter Property="Padding" Value="10,10,10,10" />
                </Style>
            </DataGrid.RowStyle>

            <DataGrid.ContextMenu>
                <ContextMenu>

                    <MenuItem Header="{Binding LinkFather.Header, UpdateSourceTrigger=LostFocus}"   Command="{Binding LinkFather}" />
                    <MenuItem Header="{Binding LinkChild.Header, UpdateSourceTrigger=LostFocus}"  Command="{Binding LinkChild}" />
                    <MenuItem Header="{Binding LinkFusion.Header, UpdateSourceTrigger=LostFocus}"  Command="{Binding LinkFusion}" />
                    <MenuItem Header="!!!Supprimer!!!"  Command="{Binding DeleteTrack}" />
                    <MenuItem Header="Ressaisir le premier"   Command="{Binding LinkReset}" />
                    <MenuItem Header="Cocher la sélection"  Command="{Binding ContextCmdCheck}" />
                    <MenuItem Header="Décocher la sélection"  Command="{Binding ContextCmdUnCheck}" />
                    <MenuItem Header="Invalider dernier classement"  Command="{Binding ContextCmdDbDeleteClassement}" />
                    <MenuItem Header="Invalider dernière lecture"  Command="{Binding ContextCmdDbDeleteRead}" />
                    <MenuItem Header="Ajouter à la liste"  Command="{Binding ContextCmdAddToList}" />
                    <MenuItem Header="Naviguer vers"  Command="{Binding Explorer}" />



                </ContextMenu>
            </DataGrid.ContextMenu>
        </l:EnhancedDataGrid>
        <GridSplitter Grid.Row="1" HorizontalAlignment="Stretch"   ResizeBehavior="PreviousAndNext"  IsTabStop="True"  />
        <Grid Grid.Row="2"  Visibility="{Binding HasArtWork, Converter={StaticResource boolVis}}">
            <Image Source="{Binding ArtWork}" ></Image>
            <!--<ListView ItemsSource="{Binding Images}">
                <ListView.ItemTemplate>
                    <DataTemplate>
                        <StackPanel>
                            <Image Source="{Binding}"  />
                        </StackPanel>
                    </DataTemplate>
                </ListView.ItemTemplate>
                <ListView.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></StackPanel>
                    </ItemsPanelTemplate>
                </ListView.ItemsPanel>

            </ListView>-->

            <Image Source="{Binding ArtWork}" ></Image>
           
        </Grid>
        <Grid Grid.Row="3">

            <l:EnhancedDataGrid Grid.Row="0"  Grid.Column="0" DockPanel.Dock="Bottom" ConfCouleur="albums"
                       x:Name="dgalbums" x:Uid="albums"
                       AutoGenerateColumns="False" 
                        IsSynchronizedWithCurrentItem="False" 
                                SelectedItem="{Binding SelectedTrackInAlbumsView}">
                                HeadersVisibility="All" 
                                
                                 >
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Album" Binding="{Binding Album,Mode=OneWay}" >
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="TextBlock">
                                <Setter Property="HorizontalAlignment" Value="Right" />
                                <Setter Property="Padding" Value="0,0,3,0" />
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Header="RankRev" Binding="{Binding RankAlbumReverse,Mode=OneWay}" />
                    <DataGridTextColumn Header="StackIndex" Binding="{Binding StackIndex, Mode=OneWay}" />
                    <DataGridTextColumn Header="DelaiAlbum"  Binding="{Binding AlbumUpdateClassement, Mode=OneWay, Converter={StaticResource delai}}" >
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="TextBlock">
                                <Setter Property="HorizontalAlignment" Value="Right" />
                                <Setter Property="Padding" Value="0,0,3,0" />
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Header="EquivLight"  Binding="{Binding EquivLight, Mode=OneWay}" />
                    <DataGridTextColumn Header="AlbumCount"  Binding="{Binding AlbumCount, Mode=OneWay, Converter={StaticResource Int}}" />
                    <DataGridTextColumn Header="RankAlbum" Binding="{Binding RankAlbum, Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"/>
                    <DataGridTextColumn Header="Rank0" Binding="{Binding RankAlbumZero, Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"/>


                </DataGrid.Columns>
                <DataGrid.ItemContainerStyle>
                    <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
                        <!--<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />-->
                        <Setter Property="FontWeight" Value="Normal" />                        
                    </Style>
                </DataGrid.ItemContainerStyle>
                
                <DataGrid.CellStyle>
                    <Style TargetType="DataGridCell">
                        <Setter Property="Background" Value="{Binding TV, Converter={StaticResource colorExport}, ConverterParameter=albums,  UpdateSourceTrigger=PropertyChanged}" />
                        <Setter Property="Foreground" Value="{Binding TV, Converter={StaticResource foreColor}, ConverterParameter=albums, UpdateSourceTrigger=PropertyChanged}" />
                        <Setter Property="BorderThickness" Value="0" />
                        <Setter Property="BorderBrush" Value="Transparent" />
                    </Style>
                </DataGrid.CellStyle>
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow">                        
                        <Setter Property="BorderThickness" Value="0" />
                        <Setter Property="Background" Value="{Binding TV, Converter={StaticResource colorExport}, ConverterParameter=albums,  UpdateSourceTrigger=PropertyChanged}" />
                    </Style>
                </DataGrid.RowStyle>


            </l:EnhancedDataGrid>
            <ComboBox Name="cbx_mode" HorizontalAlignment="Right"  Width="20" Height="25" VerticalAlignment="Top" SelectionChanged="cbx_mode_SelectionChanged" >
                <ComboBoxItem  ToolTip="album du morceau sélectionné" >identique</ComboBoxItem>
                <ComboBoxItem ToolTip="album du morceau maitre" >origine</ComboBoxItem>
                <ComboBoxItem ToolTip="album du morceau maitre si virtuel" >origine si virtuel</ComboBoxItem>
                <ComboBoxItem ToolTip="album le plus long entre le maitre et le virtuel" >le plus long</ComboBoxItem>
                <ComboBoxItem ToolTip="album le plus court entre le maitre et le virtuel" >le plus court</ComboBoxItem>
            </ComboBox>



        </Grid>

       
    </Grid>
</UserControl>  
]]></content>
  </file>
  <file path="\pdb.player\Vue\AlbumCtl.xaml.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Threading;
using pdb.player.ViewModel;
using pdb.gen.albums;
using pdb.gen;
using System.Collections;
using pdb.util;

namespace pdb.player.Vue
{
    /// <summary>
    /// Interaction logic for AlbumCtl.xaml
    /// </summary>
    public partial class AlbumCtl : UserControl, ItrackProvider
    {
        public static AlbumCtl Instance;
        private DetailAlbumViewModel model;
        private Logger log;
        //    private DataGridRow currentSelected;
        public AlbumCtl()
        {
            InitializeComponent();
            Loaded += new RoutedEventHandler(AlbumCtl_Loaded);
            App.refresh += new EventHandler(App_refresh);
            App.refreshAlbum += new EventHandler(App_refreshAlbum);
            Instance = this;
            dg.Sorting += dg_Sorting;
            log = Logger.getLogger("AlbumCtl");
        }

        void App_refreshAlbum(object sender, EventArgs e)
        {
            init();
        }

        void dg_Sorting(object sender, DataGridSortingEventArgs e)
        {
          
            DataGridColumn column = e.Column;
            if ("Classement".Equals(column.Header))
            {
                if (dg.ItemsSource == null)
                    return; 
                // prevent the built-in sort from sorting
              

                ListSortDirection direction = (column.SortDirection != ListSortDirection.Descending) ? ListSortDirection.Ascending : ListSortDirection.Descending;

                //set the sort order on the column
               // 

                //use a ListCollectionView to do the sort.
                ListCollectionView lcv = (ListCollectionView)CollectionViewSource.GetDefaultView(dg.ItemsSource);
                if (lcv == null)
                    return;


                e.Handled = true;
                //this is my custom sorter it just derives from IComparer and has a few properties
                //you could just apply the comparer but i needed to do a few extra bits and pieces
                var comparer = new PieceSimpleClassementComparer(direction == ListSortDirection.Ascending);

                //apply the sort
                lcv.CustomSort = comparer;
                column.SortDirection = direction;
            }


        }

        public class PieceSimpleClassementComparer : IComparer
        {
            private int sens;
            public PieceSimpleClassementComparer(bool ascending)
            {
                this.sens = ascending ? 1 : -1;
            }
            private static PieceTrackNumberComparer tn = new PieceTrackNumberComparer();
            public int Compare(object xx, object yy)
            {
                var x = xx as TrackListViewModel;
                var y = yy as TrackListViewModel;
                int cmp = x.PieceGen.RapportClassement.CompareTo(y.PieceGen.RapportClassement);
                if (cmp != 0) return sens * cmp;

                return tn.Compare(x.PieceGen, y.PieceGen);
                //  return -x.RapportClassement.CompareTo(y.RapportClassement);
            }
        }




        void App_refresh(object sender, EventArgs e)
        {
            init();
        }

        void AlbumCtl_Loaded(object sender, RoutedEventArgs e)
        {
            this.model = new DetailAlbumViewModel();
            model.PropertyChanged += new PropertyChangedEventHandler(model_PropertyChanged);
            init();
            TrackListViewModel.CurrentHumanSelectedChanged += new EventHandler(TrackListViewModel_CurrentHumanSelectedChanged);

        }

        void model_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (string.IsNullOrEmpty(e.PropertyName))
            {
                init(); 
            }
        }


        void TrackListViewModel_CurrentHumanSelectedChanged(object sender, EventArgs e)
        {
            init();
        }

        private void init()
        {

            if (!CheckAccess())
            {
                Dispatcher.BeginInvoke(new Action(this.init), App.DISPATCHER_PRIORITY);
                return;
            }
            App.log.log("albumCtl.init"); 
            SortDescriptionCollection sort = null;
            ICollectionView view = null;
            //   currentSelected = dg.SelectedItem as TrackListViewModel;

            view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
            if (view != null)
                sort = view.SortDescriptions;

            List<SortDescription> _sort = null;
            if (sort != null)
                _sort = new List<SortDescription>(sort);
            base.DataContext = null;

            dg.ItemsSource = null;
            dgalbums.ItemsSource = null;
            var alb = model.Album;
            dg.ItemsSource = alb;
           
            //dgalbums.SelectedItem = TrackListViewModel.HumanSelected; 
            base.DataContext = model;

            dgalbums.Items.Clear(); 
            dgalbums.ItemsSource = model.Albums;

            dg.ApplySort(_sort);

            //if (_sort != null && _sort.Count > 0)
            //{
            //    view.SortDescriptions.Clear();
            //    foreach (var _s in _sort)
            //    {
            //        view.SortDescriptions.Add(_s);
            //        foreach (DataGridColumn _c in dg.Columns)
            //        {
            //            if (_s.PropertyName == _c.SortMemberPath)
            //            {
            //                _c.SortDirection = _s.Direction;
            //                break;
            //            }
            //        }
            //        break;

            //    }
            //}

            //    var selected = model.SelectedTrackInAlbumView;


            //try
            //{
            //    //   int index = view.CurrentPosition;
            //    DataGridRow row = dg.ItemContainerGenerator.ContainerFromItem(selected) as DataGridRow;
            //    if (row == null)
            //        row = currentSelected;
            //    if (row != null)
            //    {
            //        row.IsSelected = true;
            //        row.MoveFocus(new TraversalRequest(FocusNavigationDirection.Next));  
            //    }
            //}
            //catch
            //{

            //}


            //if (currentSelected != null)
            //    currentSelected.IsSelected = true;
            //dgStat.ItemsSource = null;

            //var stats = model.Stats;
            //dgStat.DataContext = null;
            //dgStat.DataContext = stats.DefaultView;
            //dgStat.ItemsSource = stats.DefaultView;


            //base.DataContext = model;
            checkItems(true);

            Focus(model.SelectedTrackInAlbumView); 

        }


        private void checkItems(bool reset)
        {
            ////  var l = new List<TrackListViewModel>();

            //ICollectionView view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
            //if (view == null)
            //    return;

            //var selectedTracks = new List<TrackListViewModel>(dg.SelectedItems.Count);
            //foreach (TrackListViewModel t in dg.SelectedItems)
            //    selectedTracks.Add(t);
            //var tracks = dg.Items;


            ////    IDisposable w = view.DeferRefresh();
            //try
            //{


            //    if (reset)
            //    {
            //        TrackListViewModel selected = null;
            //        if (TrackListViewModel.HumanSelected != null)
            //        {
            //            selected = TrackListViewModel.HumanSelected;  // PlayListViewModel.findTrack(App.bib.Musique, TrackListViewModel.HumanSelected.MasterId);
            //        }

            //        //foreach (TrackListViewModel track in view)
            //        //{
            //        //    if (track.MasterId == selected.MasterId)
            //        //        track.IsSelected = true;
            //        //    else
            //        //        track.IsSelected = false;
            //        //}
            //        // dg.SelectedItems.Clear();
            //        //  w.Dispose(); w = null;


            //        if (selected != null)
            //        {
            //            // l.Add(selected);
            //            if (!dg.SelectedItems.Contains(selected))
            //                dg.SelectedItems.Add(selected);
            //        }
            //        //foreach (TrackListViewModel track in selectedTracks)
            //        //{
            //        //    if (track.MasterId != selected.MasterId)
            //        //    {
            //        //        dg.SelectedItems.Remove(track);
            //        //        track.IsSelected = false;
            //        //        //track.refresh();
            //        //    }
            //        //}
            //    }
            //    else
            //    {
            //        //var currentPl = PlayListViewModel.SelectedPlayList;
            //        //foreach (TrackListViewModel track in selectedTracks)
            //        //{
            //        //    //  l.Add(track);
            //        //    track.IsSelected = true;

            //        //    //if (currentPl != null)
            //        //    //{
            //        //    //    TrackListViewModel trackMain =  PlayListViewModel.findTrack(currentPl, track.PieceId);
            //        //    //    if (trackMain != null)
            //        //    //        trackMain.IsSelected = true;
            //        //    //}
            //        //    //track.refresh();
            //        //}


            //    }
            //    //lock (this)
            //    //   this.selectedTracks = l;
            //}
            //finally
            //{
            //    //if (w != null)
            //    //    w.Dispose();
            //}

        }

        //private void checkItems()
        //{
        //    var l = new List<TrackListViewModel>();

        //    ICollectionView view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
        //      IDisposable w = view.DeferRefresh();
        //      try
        //      {
        //          var currentPl = PlayListViewModel.SelectedPlayList; 
        //          foreach (TrackListViewModel track in dg.SelectedItems)
        //          {
        //              l.Add(track);
        //              track.IsSelected = true;
        //              if (currentPl != null)
        //              {
        //                  TrackListViewModel trackMain = PlayListViewModel.findTrack(currentPl, track.PieceId);
        //                  if (trackMain != null)
        //                      trackMain.IsSelected = true;
        //              }
        //              //track.refresh();
        //          }
        //      }

        //      finally
        //      {
        //          if (w != null)
        //              w.Dispose();
        //      }

        //}



        private void dgAlbum_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var t = dg.SelectedItem as TrackListViewModel;
            if (t == null)
                return; 
            ItrackProvider provider = this;
            //var pl = PlayListViewModel.SelectedPlayList;
            //if (pl != null)
            //{
            //    //var f = PlayListViewModel.findTrack(pl, t.PieceId);
            //    //if (f != null)
            //    //{
            //    //    t = f;
            //        provider = null; // OUAILLE?
            //    //}
            //}

            //TrackListViewModel t = null;
            //e.
            //var r = sender as DataGridRow;
            //if (r != null) { }
            ////  t = r.Item as TrackListViewModel;
            //else
            //{
            //    var c = sender as DataGridCell;
            //    r = c.
            //}
            //t = r.Item as TrackListViewModel;
            PlayerViewModel.reset(provider, t);
        }

        private void dg_MouseClick(object sender, MouseButtonEventArgs e)
        {
            //var currentSelected = sender as DataGridRow;
            //var t = currentSelected.Item as TrackListViewModel;
            //currentSelected.IsSelected = true;

            ////  currentSelected.MoveFocus(new TraversalRequest(FocusNavigationDirection.Next));  
            //TrackListViewModel.setHumanSelected(App.bib.Musique, t);

            checkItems(false);
            PlayerViewModel.Instance.makeResume();
        }

        public System.ComponentModel.ICollectionView PresentationTracks
        {
            get { return CollectionViewSource.GetDefaultView(dg.ItemsSource); }
        }


        public PlayListViewModel PlayList
        {
            get { return model.PlayListViewModel; }
        }

        public void Focus(TrackListViewModel t)
        {
            scrolItem = t;
            scrol(); 
        }

        private TrackListViewModel scrolItem;
        void scrol()
        {
            log.log("scroll item->{0}", scrolItem);
            if (!CheckAccess())
            {
                Dispatcher.BeginInvoke (new Action(this.scrol),App.DISPATCHER_PRIORITY);
            }
            else
            {
                if (dg.Items.Count == 0)
                {
                    log.log("scroll sans items");
                    return;
                }

                if (scrolItem == null)
                {
                    log.log("scrollItem null");
                }               

                try
                {
                    dg.ScrollIntoView(scrolItem);
                }
                catch (Exception ex)
                {
                    log.Error("erreur scroll " + ex.Message);
                }
            }
        }

        public void doFilter(string filter)
        {

        }


        public List<TrackListViewModel> SelectedTracks
        {
            get
            {
                var list = new List<TrackListViewModel>();
                foreach (TrackListViewModel track in PresentationTracks)
                    list.Add(track);
                return list;
            }
        }

        private void cbx_mode_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            albumMode mode = (albumMode)cbx_mode.SelectedIndex;
            model.Mode = mode;
            init(); 
        }

       

      
    }
}
]]></content>
  </file>
</db>
