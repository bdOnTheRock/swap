<db path="C:\bernard\db1\db4">
  <file path="\pdb.player\App.xaml.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Threading;
using pdb.db;
using pdb.db.piece.data;
using pdb.gen;
using pdb.gen.conf;
using pdb.gen.Tuning;
using pdb.obj;
using pdb.ordo;
using pdb.player.ViewModel;
using pdb.player.ViewModel.Commande.PlayList;
using pdb.player.ViewModel.gen;
using pdb.player.Vue;
using pdb.util;
using pdb.db.obj;
using pdb.gen.albums;
using System.Linq;
using System.Linq.Expressions;
using System.Windows.Input;

namespace pdb.player
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application, IIhm
    {
        public static Logger log = Logger.getLogger("Program");
        public static Logger logPerf = Logger.getLogger("Perf");
        public static CDb Db;
        public static Consolid gen;
        //  public static LegacyApp app;
        // internal static HomeLoader loader;
        internal static BibViewModel bib;
        static int step = -5;
        public const string PHASE1 = "PHASE1";
        public const string PHASE2 = "PHASE2";

        private static Export export;
        private static Import import;
        public static DispatcherPriority DISPATCHER_PRIORITY = DispatcherPriority.ContextIdle;

        public static void setDispatcherPriority()
        {
            var str = CConf.DispatcherPriority;
            if (!string.IsNullOrEmpty(str))
            {
                DISPATCHER_PRIORITY = (DispatcherPriority)Enum.Parse(typeof(DispatcherPriority), str);
            }
        }

        private class UIItem
        {
            public readonly Action action;
            public readonly IClient client;
            public UIItem(Action action, IClient client)
            {
                this.action = action;
                this.client = client;
            }
        }

        private pdb.util.Queue<UIItem> uiItems = new util.Queue<UIItem>();
        private DispatcherTimer uiTimer;


        static ILogger logDispatch;
        public static void Dispatch(Action action, IClient client)
        {
            Instance.dispatch(action, client);
        }
        public void dispatch(Action action, IClient client)
        {
            if (!client.HasLog)
                client.Log = logDispatch;
            if (uiTimer == null)
            {

                lock (_lock)
                {
                    if (uiTimer == null)
                    {
                        uiTimer = new DispatcherTimer();

                    }
                }
            }

            if (!CheckAccess())
            {
                client.log("async");
                client.isAsync = true;
                Dispatcher.BeginInvoke(action, DISPATCHER_PRIORITY);
            }
            else
            {
                action();
            }
        }

        //public void dispatchLessPrior(Action action, IClient client)
        //{
        //    Dispatcher.BeginInvoke(action, DispatcherPriority.ApplicationIdle);
        //}



        private void syncAction(Action action, IClient client)
        {
            client.log("debut Effectif");
            action();
            client.log("fin");
        }

        private static Thread thLoop;
        private static bool __go;
        private static bool __end;
        private static volatile object _lock = new object();
        private static ListWriter listWriter;
        private static App _instance;
        public static App Instance { get { return _instance; } }
        private static DetailClassementViewModel detailClassementViewModel;
        internal static DetailClassementViewModel DetailClassementViewModel { set { detailClassementViewModel = value; } }

        public App()
            : base()
        {
            var xmlConf = CConf.loadConf();
            setDispatcherPriority();
            pdb.player.ViewModel.Colors.MementoColor.recover();
            AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(CurrentDomain_UnhandledException);
            this.DispatcherUnhandledException += new DispatcherUnhandledExceptionEventHandler(App_DispatcherUnhandledException);
            Application.Current.DispatcherUnhandledException += new DispatcherUnhandledExceptionEventHandler(Current_DispatcherUnhandledException);
            TaskScheduler.UnobservedTaskException += new EventHandler<UnobservedTaskExceptionEventArgs>(TaskScheduler_UnobservedTaskException);
            _instance = this;
        }

        void TaskScheduler_UnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs e)
        {
            e.SetObserved();
            CheckException("Task", sender, e.Exception);
        }

        void Current_DispatcherUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e)
        {
            e.Handled = true;
            CheckException("AppDispatcher", sender, e.Exception);
        }

        void App_DispatcherUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e)
        {
            e.Handled = true;
            CheckException("Dispatcher", sender, e.Exception);
        }

        void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e)
        {
            CheckException("Domain", sender, e.ExceptionObject);
        }

        private bool displayMsg;
        private void CheckException(string from, object sender, object ex)
        {
            string message = string.Format("Erreur:\r\n from->{0}\r\nsender ->{1}\r\n{2}", from, sender, ex.ToString());  // "Erreur->sender:" + sender +" from:" + from + " " + ex.ToString();
            if (log != null)
                log.log(message);
            var msgBox = message;
            if (msgBox.Length > 2000)
                msgBox = msgBox.Substring(0, 1998);
            if (!displayMsg)
            {
                displayMsg = true;
                var result = MessageBox.Show(msgBox, "Erreur", MessageBoxButton.OK, MessageBoxImage.Error);
                displayMsg = false;
            }

        }
        private static bool changing;
        public static void setChanging() { changing = true; }
        public static void releaseChanging() { changing = false; }
        public static void invalidateAlbums()
        {
            if (gen == null)
                return;

            gen.invalidateAlbums();
            if (changing)
                return;
            go();
        }
        [STAThread]
        protected override void OnStartup(StartupEventArgs e)
        {
            try
            {
                var xmlConf = CConf.loadConf();
                setDispatcherPriority();

                base.OnStartup(e);
                Thread.CurrentThread.Name = "GUI";

                //   app = new LegacyApp(); 
                Logger.init(Environment.CurrentDirectory.Replace("\\", "_"));
                log = Logger.getLogger("Program");
                logDispatch = Logger.getLogger("Dispatch");
                misc.init(log);



                //  IPlayerEngine player = PlayerBuilder.create("vlcplugin");



                Piece.Compact = CConf.Compact;
                CPieceClassement.DateMin = CConf.ConfGen.MinClassDate;
                export = CConf.Export;
                import = CConf.Import;

                gen = new Consolid();
                gen.FilterNext = CConf.ConfGen.FilterNext;
                var mementoAlbum = Memento.Instance.confAlbum;
                if (mementoAlbum != null && mementoAlbum.Composants.Count > 0)
                    gen.SortAlbumMode = mementoAlbum;
                else
                    gen.SortAlbumMode = CConf.ConfGen.AlbumSort;
                Memento.Instance.confAlbum = gen.SortAlbumMode;
                CConf.ConfGen.AlbumSort = gen.SortAlbumMode;

                Piece.SeuilProvisoire = gen.SortAlbumMode.lastModif;
                Piece.SeuilCompact = gen.SortAlbumMode.compact;

                BackGroundTaskMgr.Conf = CConf.ConfOrdo;
                BackGroundTaskMgr.Start();
                DataConf dbConf = new DataConf(xmlConf);
                CFile.DefaultFolder = dbConf.defaultFolder;
                ZipUtil.Exe = dbConf.sZip;
                Db = new CDb(dbConf);

                //  loader = new HomeLoader(Db);
                //  app.init(loader);
                Db.SovIni();
                Db.loadData();

                if (dbConf.compressID || dbConf.synchroID)
                {
                    Environment.Exit(0);
                }

                //ChronoData.refreshDate(DateTime.MinValue);
                //ChronoData.DateAuto = false;
                //Db.eraseClassementForEnabled();
                //Db.WriteDB1(); 
                //return;
                // app.loadData(Db, CConf.Scan);

                // Db.LegacyConsolid(app.LegacyList, DateTime.Now);




                goInit();

                //  Memento.Instance.save();
                thLoop = new Thread(loop);
                thLoop.Start();

                MemUtil.Start(CConf.GcCollect);
                //  go();
            }
            catch (Exception ex)
            {
                if (log != null)
                    log.log(ex.ToString());
            }



        }



        private static void loop()
        {
            Thread.CurrentThread.Name = "App";
            while (!__end)
            {
                Thread.Sleep(30);
                if (!__go)
                    continue;
                lock (_lock)
                {
                    if (!__go)
                        continue;
                    __go = false;
                }
                _go();

            }

        }
        private static bool _updateStats;
        private static TrackListViewModel _currentTrack;
        public static void go()
        {
            go(false);
        }
        public static void go(bool updateStats)
        {
            lock (_lock)
            {
                _updateStats |= updateStats;
                __go = true;
                if (bib != null)
                    bib.Aborted = true;
            }
        }

        public static void go(TrackListViewModel current)
        {
            lock (_lock)
            {
                _currentTrack = current;
                go(true);
            }
        }

        private static void resetOneCl()
        {
            lock (_lock)
            {
                try
                {
                    if (CConf.ResetOneCl)
                    {

                        // CPieceClassement.DateMin = DateTime.MinValue;
                        //   Classement zero = Classement.create("0.0"); decimal zer0d = zero.ClassementValueDecimal;
                        var oldKepp = new List<Piece>();

                        var _albums = gen.Albums;
                        foreach (var album in _albums.List)
                        {
                            var l = album.Tracks;
                            foreach (Piece t in l)
                            {
                                if (t.Keep)
                                {
                                    t.setKeep(0); //t.Keep = false;
                                    oldKepp.Add(t);
                                    //t.resetMedianneCompact();
                                    //t.invalidateCache(true); 
                                }
                            }
                        }
                        foreach (var album in _albums.List)
                        {
                            var l = album.Tracks;
                            Classement pluspetitNonNull = null;
                            Piece min = null;
                            int nbnotes = 0;
                            foreach (Piece t in l)
                            {
                                var cl = t.DeepClassement; // p.Classement.DbValue;
                                // decimal clValue = obj.Classement.create(cl.ToString()).ClassementValueDecimal; //  Piece.classementHash.getCache(cl.ToString()).ClassementValueDecimal; // t.ClassementValueDecimal(false);
                                if (cl.isPositive())// > zer0d)
                                {
                                    nbnotes++;
                                    if (t.LastClassementRecent || !t.Enabled)
                                    {
                                        //min = null;
                                        //break;
                                        continue;
                                    }
                                    if (pluspetitNonNull == null || cl < pluspetitNonNull)
                                    {
                                        pluspetitNonNull = cl;
                                        min = t;
                                    }
                                }
                            }

                            if (min != null)
                            {
                                var coeff = (decimal)nbnotes / (l.Count * l.Count);
                                min.setKeep(coeff);
                            }
                        }

                        foreach (Piece t in oldKepp)
                        {

                            if (!t.Keep)
                            {
                                t.resetMedianneCompact();
                                t.invalidateCache(true);
                            }
                        }


                    }
                }
                finally
                {
                    //  CPieceClassement.DateMin = CConf.ConfGen.MinClassDate;
                }
            }
        }



        private static void goInit()
        {
            var client = new SimpleClient("goInit\t", logPerf);
            var root = gen.Root;

            ChronoData.DateAuto = false;
            DateTime now = DateTime.Now;
            gen.Now = now;
            gen.Step = -1;




            if (CConf.ResetOneCl)
            {
                gen.ConsolidInit(Db.List.getList());
                client.log(" gen.ConsolidInit(Db.List.getList());");
                resetOneCl();
                client.log("resetOneCl");
                //CPieceClassement.DateMin = DateTime.MinValue;
                ////Classement min = Classement.create("00003.0"); decimal mind = min.ClassementValueDecimal;
                //Classement zero = Classement.create("0.0"); decimal zer0d = zero.ClassementValueDecimal;

                ////foreach (Piece p in gen.sortByClass())
                ////{
                ////    decimal clValue = p.ClassementValueDecimal(false) ;
                ////    if (clValue > zer0d)
                ////    {
                ////        if (clValue >= zer0d)
                ////        {
                ////            var dPiece = Db.getPiece(p.PieceId);
                ////            var strNewCl = "0000" + dPiece.getClassement().ToString();
                ////            var newCl = Classement.create(strNewCl);
                ////            p.Enabled = true;

                ////            p.setClassement(newCl.ClassList, newCl.Rating);
                ////            dPiece.Classement.eraseClassement2(newCl);
                ////        }
                ////        else
                ////            p.Enabled = false;
                ////    }
                ////}

                //var _albums = gen.Albums;
                //foreach (var album in _albums.List)
                //{
                //    var l = album.Tracks;
                //    decimal pluspetitNonNull = int.MaxValue;
                //    Piece min = null;
                //    foreach (Piece t in l)
                //    {
                //        decimal clValue = t.ClassementValueDecimal(false);
                //        if (clValue > zer0d)
                //        {
                //            if (clValue < pluspetitNonNull)
                //            {
                //                pluspetitNonNull = clValue;
                //                min = t;
                //            }
                //        }

                //    }

                //    if (min != null)
                //    {
                //        (min.Track as CPiece).Classement.keepValue();
                //    }
                //}
                ////    foreach (Piece t in l)
                ////    {
                ////        if (t.Parent == null)
                ////        {
                ////            decimal clValue = t.ClassementValueDecimal(false);
                ////            if (t.isClassListNumeric && clValue > zer0d)
                ////            {
                ////                if (clValue > pluspetitNonNull)
                ////                {
                ////                    var dPiece = Db.getPiece(t.PieceId);
                ////                    t.Enabled = true;
                ////                    t.setClassement("0", 0);
                ////                    dPiece.Classement.eraseClassement2();
                ////                }
                ////            }
                ////        }
                ////    }
                ////}

                ////gen.MakeConsolid(Db.List.getList(), true);
                CPieceClassement.DateMin = CConf.ConfGen.MinClassDate;
            }

            gen.MakeConsolid(null, true, true, client);
            //  if (CConf.ConfGen.LimitList <= 0)
            gen.buildMusique();
            // gen.buildClassTree();
            gen.buildLists(Db.List.Listes);

            bib = new BibViewModel(root);
            client.log("creation bib");
            ChronoData.DateAuto = true;
            //  var classement = root.getOrCreate("classement");



            ListWriterMgr.Async = false;
            listWriter = new ListWriter(bib);
            //   gen.createRot(CConf.ListBase, listWriter); 
            //bib = new BibViewModel(Db.Root); 
            //gen.createRot(CConf.ListBase, bib);
            //   if (bgClass.IsEnd) BackGroundTaskMgr.Start();


            //  gen.timeRanking();
            // gen.eraseGrouping();
            // gen.writeComment();
            Piece.SeuilProvisoire = gen.SortAlbumMode.lastModif;
            gen.createRot(CConf.ListBase, client, listWriter);
            PlayListViewModel.Log = true;
            //   gen.builStats();
            //gen.CommentGo = true;
            //gen.GroupinGO = true;
            //  PlayerViewModel.Instance.SortAlbumMode = gen.SortAlbumMode;
            PlayerViewModel.Instance.WithVirtualAlbum = gen.AlbumVirtual;
            PlayerViewModel.ConfAlbumSort = gen.SortAlbumMode;
            Memento.Instance.confAlbum = gen.SortAlbumMode;
            Piece.SeuilProvisoire = gen.SortAlbumMode.lastModif;


            //foreach (CPiece p in Db.List)
            //{
            //    if (p.DurationInSec == 0 && p.Exists)
            //    {
            //        try
            //        {
            //            PlayerViewModel.Instance.Player.getDuration(p);
            //            log.log("{0} duration {1} s", p, p.DurationInSec);
            //        }
            //        catch (Exception ex)
            //        {
            //            log.log(ex.ToString());
            //        }

            //    }
            //}


            // detailClassementViewModel.IhmInDispo = ihmInDispo.stat;
            // new Thread(() =>
            gen.builStats(null);
            client.log("Fin goInit");
        }

        private static bool mustBuildCompleteAlbums(TrackListViewModel currentTrack)
        {
            var tracks = new List<TrackListViewModel>();
            foreach (TrackListViewModel t in PlayerViewModel.Instance.PresentationTracks)
            {
                tracks.Add(t);
            }
            tracks.Sort((x, y) => x.RankAlbumReverse.CompareTo(y.RankAlbumReverse));
            int count = tracks.Count;
            int rank0 = currentTrack.RankAlbumReverse;

            int i = 0;
            // recherche trou avant ex rank0=3 pas de 1 ni de 2
            for (; i < count; i++)
            {
                var t = tracks[i];
                if (t.RankAlbumReverse >= rank0)
                    break;

                if (t.RankAlbumReverse > i + 1)
                    return true;
            }

            //if (i + 1 < count && tracks[i + 1].RankAlbumReverse > rank0 + 1)
            //{
            //    return true;
            //}

            return false;
        }

        private static void buildAffectedAlbumsWhenCurrentTrackChange(TrackListViewModel currentTrack, IDictionary<string, Album> dict, HashSet<Album> depot, bool navQuick)
        {
            if (currentTrack == null)
                return;
            TrackListViewModel item = currentTrack;
            var cl = item.PieceGen.getClassement(true);
            var _dict = dict;  // new Dictionary<string,Album>(); 

            //foreach (Album album in dict.Values)
            //{
            //    var current = album.PlusPetitEnabled; 
            //    if (current == null || cl<=current.getClassement(true))
            //        _dict.Add(album.Key, album); 
            //}

            var tracks = new List<TrackListViewModel>();
            foreach (TrackListViewModel t in PlayerViewModel.Instance.PresentationTracks)
            {
                tracks.Add(t);
            }
            tracks.Sort((x, y) => x.Index.CompareTo(y.Index));
            int count = tracks.Count;

            //int index = -1;
            //for (int i = 0; i < count; i++)
            //{
            //    var t = tracks[i];
            //    if (t.PieceId == currentTrack.PieceId)
            //    {
            //        index = i;
            //        break;
            //    }
            //}

            //if (index < 0)
            //{
            //    foreach (Album a in dict.Values)
            //        depot.Add(a);
            //    return;
            //}

            var hs = new HashSet<int>();
            if (navQuick)
                hs.Add(item.MasterId);
            int index = -1;
            try
            {
                while (true)
                {
                    index++;
                    if (index >= count)
                        return;

                    var t = tracks[index];
                    if (!hs.Add(t.MasterId))
                        continue;
                    if (navQuick && t.album == item.album)
                        continue;
                    //if (t.album == item.album)
                    //    continue;

                    if (_dict.ContainsKey(t.album.Key))
                    {
                        depot.Add(t.album);
                        if (depot.Count >= _dict.Count)
                            return;
                    }
                    else
                        break;

                }
            }
            catch (Exception ex)
            {
                log.log(ex.ToString());
            }
            finally
            {

            }
        }

        private void automateNextTrack()
        {
            var client = new SimpleClient("automateNextTrack\t");
            this.dispatch(
                () =>
                {
                    PlayerViewModel.Instance.forwardAuto();
                    App.go();
                }, client);
            //if (!CheckAccess())
            //    Dispatcher.BeginInvoke(new Action(this.automateNextTrack), App.DISPATCHER_PRIORITY);
            //else
            //{
            //    PlayerViewModel.Instance.forwardAuto();
            //    App.go();
            //}
        }

        static int nbGo = 0;
        static bool classementChange;
        private static SimpleClient client;
        public static bool Indispo { get; set; }
        private static void _go()
        {
            gen.Albums.endParallelSort();
            bool classementChange = App.classementChange;
            var _currentTrack = App._currentTrack;
            nbGo++;
            bool urgence = false;
            if (client != null)
            {
                client.log("FIN new step");
                client.cancel();
            }

            client = new SimpleClient("<--- chrono " + nbGo + "\t", logPerf);

            try
            {

                bool reInit = !gen.AlbumBuild;
                var confSort = PlayerViewModel.ConfAlbumSort;
                if (confSort != null)
                {
                    Piece.SeuilProvisoire = confSort.lastModif;
                    CConf.ConfGen.AlbumSort = confSort;
                }
                //   gen.compact(); 
                if (detailClassementViewModel != null)
                    detailClassementViewModel.IhmInDispo = ihmInDispo.rot;
                //gen.CommentGo = false;
                //gen.GroupinGO = false;
                bib.Aborted = true;

                step++;
                gen.Step = step;

                ChronoData.DateAuto = false;
                DateTime now = DateTime.Now;
                gen.Now = now;
                ChronoData.DateAuto = false;

                urgence = gen.Urgence && TrackListViewModel.CurrentPlaying == _currentTrack;
                if (!urgence)
                {
                    Db.saveAsync();
                    Memento.Instance.save();
                }
                client.log(string.Format("debut classementChange={0} gen.ClassementChanged={1} gen.Urgence={2} _currentTrack={3}", classementChange, gen.ClassementChanged, gen.Urgence, _currentTrack));
                if (PlayerViewModel.Instance.CreateRot)
                {

                    if (gen.ClassementChanged)
                    {
                        classementChange = true;
                        App.classementChange = true;
                    }

                    if (!urgence && classementChange)
                    {
                        resetOneCl();
                        client.log("resetOneCl");
                        App.classementChange = false;
                    }

                    if (_currentTrack != null)
                    {
                        int nbAlbums = 0;
                        // bool sortDone = false;
                        if (urgence)
                        {
                            var affectedAlbums = gen.Albums.GetAndInvalidateAlbums(_currentTrack.PieceGen);
                            bool mustComplete = mustBuildCompleteAlbums(_currentTrack);

                            if (!mustComplete)
                            {

                                //}

                                var depot = new HashSet<Album>();
                                buildAffectedAlbumsWhenCurrentTrackChange(_currentTrack, affectedAlbums, depot, CConf.ConfGen.NavQuick);
                                if (depot.Count == 0)
                                {
                                    if (_currentTrack == TrackListViewModel.CurrentPlaying)
                                    {
                                        log.log("pas de makeSort. on passe au suivant on verra après");
                                        _currentTrack = null;
                                        gen.Urgence = false;

                                        App.Instance.automateNextTrack();
                                        return;

                                    }
                                    else
                                    {
                                        log.log("trop naze c'est trop long");
                                        gen.Urgence = false;

                                    }


                                }
                                //}
                                //}
                                else
                                {
                                    log.log("depot:");
                                    nbAlbums = gen.Albums.makeSort(depot, log);
                                    //sortDone = true;
                                }

                            }
                            else
                            {
                                log.log("y a des trous dans la raquette on force le makesort");
                                gen.Urgence = false;
                            }
                            //if (!sortDone && gen.Urgence)
                            //{
                            //    log.log("affected albums");
                            //    nbAlbums = gen.Albums.makeSort(_currentTrack.PieceGen, log);
                            //}
                            client.log(string.Format("makeSort partial {0} elt", nbAlbums));
                            _currentTrack.refresh();
                            while (Indispo)
                                Thread.Sleep(100);
                            if (nbAlbums > 0)
                            {
                                if (refreshAlbum != null)
                                    refreshAlbum("", EventArgs.Empty);
                                client.log("refreshAlbum");
                            }
                        }
                    }

                    _currentTrack = null;


                    // if (__end || __go) return;


                    //  gen.SortAlbumMode = PlayerViewModel.Instance.SortAlbumMode;
                    //    gen.AlbumVirtual = PlayerViewModel.Instance.WithVirtualAlbum; 

                    while (Indispo)
                        Thread.Sleep(100);
                    gen.MakeConsolid(null, _updateStats, classementChange, client); //   bib.Musique.Tracks);
                    if (reInit)
                        gen.buildMusiqueAgain();
                    //  if (__end || __go) return;
                    // AlbumCtl.Instance.init();
                    //   if (__end || __go) return;
                    //gen.timeRanking();
                    //  if (__end || __go) return;
                    ChronoData.DateAuto = true;

                    //bool navAuto = PlayerViewModel.Instance.NavAuto; 
                    //if (navAuto)
                    //{
                    //    if (refresh != null)
                    //        refresh(PHASE1, EventArgs.Empty);
                    //}



                    //      if (__end || __go) return;
                    bib.Aborted = false;
                    ListWriterMgr.Async = false;
                    //listWriter = new ListWriter(root);
                    try
                    {
                        CConf.loadConf();
                        setDispatcherPriority();
                    }
                    catch (Exception ex)
                    {
                        log.log(ex.ToString());
                    }
                    // gen.SortByAlbum = PlayerViewModel.Instance.SortByAlbum;
                     while (Indispo)
                        Thread.Sleep(100);
                    gen.createRot(CConf.ListBase, client, App.bib);
                    if (reInit)
                        bib.syncMusique();
                    //if (refresh != null)
                    //    refresh(PHASE1, EventArgs.Empty);


                    //log.log("visibles"); 
                    //foreach (TrackListViewModel visible in Player.VisibleItems)
                    //{
                    //    if (__end || __go) return;
                    //    visible.PieceGen.writeCommentGrouping();
                    //    visible.refresh(); 
                    //}
                    //if (refresh != null)
                    //    refresh(PHASE2, EventArgs.Empty);

                    //if (__end || __go) return;
                    //gen.writeComment();
                    //if (__end || __go) return;
                    //gen.writeGrouping();

                     while (Indispo)
                        Thread.Sleep(100);
                    if (refresh != null)
                        refresh(PHASE2, EventArgs.Empty);
                    client.log("refresh après createRot");


                    //if (__end || __go) return;

                    //gen.CommentGo = true;
                    //gen.GroupinGO = true;



                    //if (refresh != null)
                    //    refresh(PHASE2, EventArgs.Empty);
                    // _refresh = true;
                    lock (_lock)
                    {
                        if (_updateStats && !urgence)
                        {
                            if (detailClassementViewModel != null)
                                detailClassementViewModel.IhmInDispo = ihmInDispo.stat;
                            //new Thread(() =>
                            gen.builStats(() => { if (detailClassementViewModel != null) detailClassementViewModel.IhmInDispo = ihmInDispo.none; });

                        }
                        else
                        {
                            if (detailClassementViewModel != null)
                                detailClassementViewModel.IhmInDispo = ihmInDispo.none;
                        }
                    }
                    //bib = new BibViewModel(Db.Root); 
                    //gen.createRot(CConf.ListBase, bib);
                    //   if (bgClass.IsEnd) BackGroundTaskMgr.Start();
                    //gen.CommentGo = true;
                    //gen.GroupinGO = true;


                }


            }
            catch (Exception ex)
            {
                log.log(ex.ToString());
            }

            finally
            {
                //   gen.eraseGrouping(); 
                //if (refresh != null && PlayerViewModel.Instance.CreateRot)
                //    refresh(PHASE2, EventArgs.Empty);

                // detailClassementViewModel.IhmInDispo = ihmInDispo.none;
                lock (_lock)
                {
                    _currentTrack = null;
#if EXPORT
                    ExportCmd.CalculExport();
#endif
                    if (_updateStats && !urgence)
                    {
                        _updateStats = false;
                    }
                }
                client.log("FIN _go()");
                if (urgence && !DetailClassementViewModel.Instance.Auto)
                    go(false);

                if (classementChange && !urgence)
                    gen.Albums.parallelSort();


            }


        }

        public static event EventHandler refresh;
        public static event EventHandler refreshAlbum;

        public static void shutdown()
        {
            MemUtil.End();
            __end = true;
            if (App.bib != null)
                App.bib.Aborted = true;
            Db.WriteDB1();
            if (App.bib != null)
                App.bib.Aborted = true;
            Environment.Exit(0);
        }

        public static List<TrackListViewModel> getAlbum(TrackListViewModel track)
        {
            if (gen == null)
                return null;

            var ll = new List<TrackListViewModel>();

            var l = gen.getTracksAlbum(track.PieceGen);
            if (l == null)
                return null;
            foreach (Piece p in l)
            {

                TrackListViewModel trackList = TrackListViewModel.getOrCreate(p); // PlayListViewModel.findTrack(bib.Musique, p.PieceId);
                if (trackList == null)
                    continue;
                ll.Add(trackList);
            }

            return ll;

        }

        public void InfoIHm(string message, string caption)
        {
            MessageBox.Show(message, caption, MessageBoxButton.OK);
        }

        public bool Confirm(string question, string caption)
        {
            return MessageBox.Show(question, caption, MessageBoxButton.YesNo) == MessageBoxResult.Yes;
        }

        public bool? TriChoix(string question, string caption)
        {
            var result = MessageBox.Show(question, caption, MessageBoxButton.YesNoCancel);
            switch (result)
            {
                case MessageBoxResult.Cancel:
                return null;
                case MessageBoxResult.No:
                return false;
                case MessageBoxResult.None:
                return null;
                case MessageBoxResult.OK:
                return true;
                case MessageBoxResult.Yes: return true;
                default: return null;

            }
        }
        public Export getConfExport(string question)
        {
            var dialog = new ConfExport(question, export);
            dialog.ShowDialog();
            return export;
        }

        public Import getConfImport(string question)
        {
            var dialog = new ConfImport(question, import);
            dialog.ShowDialog();
            return import;
        }

        public string folderDialog()
        {
            var dialog = new FolderBrowserDialogW(Db.DefaultFolder); // new System.Windows.Forms.FolderBrowserDialog();
            dialog.ShowDialog();
            //dialog.SelectedPath = Db.DefaultFolder;
            //System.Windows.Forms.DialogResult result = dialog.ShowDialog();
            //string dir = null;
            //if (result == System.Windows.Forms.DialogResult.OK)
            //{
            //    dir = dialog.SelectedPath;
            //}

            //return dir;
            return dialog.Dir;
        }

        public int getNb(string question)
        {
            var w = new getNb(question, 2);
            w.ShowDialog();
            return w.Nb;
        }


        public bool changeName(string title, IName data)
        {
            var stringDialog = new StringDialog(title, data);
            stringDialog.ShowDialog();
            return stringDialog.Ok;
        }

        public PlayListViewModel selectPlayList(string title)
        {
            var dialog = new BrowsePlayList(title);
            dialog.ShowDialog();
            if (dialog.Ok)
            {
                return dialog.Selected;
            }

            return null;
        }

        public static void buildList()
        {
            Db.List.buildLists(bib.Listes.PlayList);
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\AllTracksViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Windows.Input;
using System.Windows.Threading;
using pdb.player.ViewModel.Commande.Link;
using pdb.player.ViewModel.Commande.PlayList;
using pdb.player.ViewModel.Commande;
using pdb.util;
using System.Globalization;
using pdb.gen.auto;

namespace pdb.player.ViewModel
{
    public enum listDisplay
    {
        all,
        onlyDisabled,
        onlyEnabled
    }

    public class AllTracksViewModel : List<TrackListViewModel>, INotifyCollectionChanged, INotifyPropertyChanged
    {
        public event NotifyCollectionChangedEventHandler CollectionChanged;
        public event PropertyChangedEventHandler PropertyChanged;
        //   private List<TrackListViewModel> tracks;
        private Dictionary<int, TrackListViewModel> dict;
        private object _lock = new object();
        private PlayListViewModel parent;
        private DispatcherOperation ope;

        private ItrackProvider provider;
        internal ItrackProvider Provider { get { return provider; } set { provider = value; } }


        private bool? onlyDisabled;
        private bool onlyFathers;
        public AllTracksViewModel(PlayListViewModel parent, bool? onlyDisabled, bool onlyFathers)
        {
            this.parent = parent;
            this.onlyDisabled = onlyDisabled;
            this.onlyFathers = onlyFathers;
            //   this.mode = mode; 
            build();
            PlayerViewModel.Instance.resumeChange += playerResumeChange;
            PlayerViewModel.autoChange += new EventHandler(PlayerViewModel_autoChange);
            //TrackListViewModel.CurrentHumanSelectedChanged += PlayerViewModel_autoChange; 
        }

        void PlayerViewModel_autoChange(object sender, EventArgs e)
        {
            OnPropertyChanged("AutoResume");
        }


        void playerResumeChange(object sender, EventArgs e)
        {
            OnPropertyChanged("TV");
            OnPropertyChanged("Resume");
            OnPropertyChanged("AutoResume");
        }

        public string Resume
        {
            get
            {
                return PlayerViewModel.Instance.Resume;
            }
            set
            {

            }
        }

        protected void OnCollectionChange(NotifyCollectionChangedEventArgs e)
        {
            // Be nice - use BlockReentrancy like MSDN said

            //var dispatcher = Dispatcher.CurrentDispatcher;
            //if (dispatcher.CheckAccess())
            //{
            //    if (CollectionChanged == null)
            //    {
            //    }
            //    else
            //    {
            //        CollectionChanged(this, e); 
            //    }
            //    return; 
            //}

            //dispatcher.Invoke(DispatcherPriority.DataBind, new Action<NotifyCollectionChangedEventArgs>(OnCollectionChange), e);



            var eventHandler = CollectionChanged;
            if (eventHandler != null)
            {
                Delegate[] delegates = eventHandler.GetInvocationList();
                // Walk thru invocation list
                // IClient client = null; 
                foreach (NotifyCollectionChangedEventHandler handler in delegates)
                {
                    try
                    {
                        //if (client == null)
                        //    client = new SimpleClient("AlTracksViewModel::OnCollectionChange");
                        //App.Dispatch(() => handler(this, e), client); 
                        var dispatcherObject = handler.Target as DispatcherObject;
                        // If the subscriber is a DispatcherObject and different thread
                        if (dispatcherObject != null && dispatcherObject.CheckAccess() == false)
                        // Invoke handler in the target dispatcher's thread
                        {
                            // var client = new SimpleClient("AlTracksViewModel::OnCollectionChange");

                            ope =
                               dispatcherObject.Dispatcher.BeginInvoke(App.DISPATCHER_PRIORITY,
                                            handler, this, e);
                            //  ope.Completed += ope_Completed;


                        }
                        else // Execute handler as is
                            handler(this, e);
                    }
                    catch (Exception ex)
                    {
                        App.log.log(ex.ToString());
                    }
                }
            }
            else
            {
            }

            // PlayerViewModel.Instance.makeResume();

        }

        //void ope_Completed(object sender, EventArgs e)
        //{
        //    App.log.log(string.Format("AllTracksViewModel::OnCollectionChange {0} CollectionChanged completé", sender));
        //    PlayerViewModel.Instance.makeResume();
        //}


        protected virtual void OnPropertyChanged(string propertyName)
        {
            var eventHandler = PropertyChanged;
            if (eventHandler == null)
            {
                //   int toto = 0;
            }
            else
            {
                //var dispatcher = Dispatcher.CurrentDispatcher;
                //if (dispatcher.CheckAccess())
                //    PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
                //else
                //    dispatcher.Invoke(new Action<string>(OnPropertyChanged), propertyName);

                Delegate[] delegates = eventHandler.GetInvocationList();
                // Walk thru invocation list
                IClient client = null;
                foreach (PropertyChangedEventHandler handler in delegates)
                {
                    try
                    {
                        if (client == null)
                            client = new SimpleClient("AlTracksViewModel::OnPropertyChanged " + propertyName);
                        App.Dispatch(() => { client.Start(); handler(this, new PropertyChangedEventArgs(propertyName)); }, client);

                        //var dispatcherObject = handler.Target as DispatcherObject;
                        //// If the subscriber is a DispatcherObject and different thread
                        //if (dispatcherObject != null && dispatcherObject.CheckAccess() == false)
                        //    // Invoke handler in the target dispatcher's thread
                        //    dispatcherObject.Dispatcher.BeginInvoke(App.DISPATCHER_PRIORITY,
                        //                  handler, this, new PropertyChangedEventArgs(propertyName));
                        //else // Execute handler as is
                        //    handler(this, new PropertyChangedEventArgs(propertyName));
                    }
                    catch (Exception ex)
                    {
                        App.log.log(ex.ToString());
                    }
                    finally
                    {
                        if (client != null)
                            client.End(); 
                    }
                }
            }
        }

        public void refresh()
        {
            build();
            foreach (TrackListViewModel track in this)
                track.refresh();

        }

        //public void init()
        //{
        //    refresh();
        //    OnCollectionChange(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset));
        //}

        public TrackListViewModel TV { get { return TrackListViewModel.HumanSelected; } }

        public void build()
        {
            lock (_lock)
            {
                var list = new List<TrackListViewModel>();
                var dict = new Dictionary<int, TrackListViewModel>();
                buildAllTraks(list, dict, onlyDisabled, onlyFathers);
                if (this.dict == null)
                {
                    this.dict = new Dictionary<int, TrackListViewModel>();
                    foreach (TrackListViewModel track in list)
                    {
                        Add(track);
                        this.dict.Add(track.PieceId, track);
                        // track.PropertyChanged += track_PropertyChanged;
                    }

                    OnCollectionChange(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset));
                }
                else
                {

                    foreach (TrackListViewModel newTrack in list)
                    {
                        if (!this.dict.ContainsKey(newTrack.PieceId))
                        {
                            Add(newTrack);
                            this.dict.Add(newTrack.PieceId, newTrack);
                            // newTrack.PropertyChanged += track_PropertyChanged;
                            OnCollectionChange(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, newTrack));
                        }
                    }

                    foreach (TrackListViewModel track in new List<TrackListViewModel>(this))
                    {
                        if (!dict.ContainsKey(track.PieceId))
                        {
                            Remove(track);
                            this.dict.Remove(track.PieceId);
                            // track.PropertyChanged -= track_PropertyChanged;
                            OnCollectionChange(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove, track));
                        }
                    }
                }
            }

            //Clear(); 
            //foreach (TrackListViewModel track in parent.Tracks)
            //    Add(track); 
        }

        //void track_PropertyChanged(object sender, PropertyChangedEventArgs e)
        //{
        //    switch (e.PropertyName)
        //    {
        //        case "Duration":
        //        case "Enabled":
        //            PlayerViewModel.Instance.makeResume();
        //            break;
        //    }
        //}

        public List<TrackListViewModel> AllTracks
        {
            get
            {
                build();
                return this;
            }
        }

        public List<TrackListViewModel> Tracks
        {
            get
            {
                return parent.Tracks;
            }
        }

        protected void buildAllTraks(List<TrackListViewModel> container, Dictionary<int, TrackListViewModel> dict, bool? onlyDisabled, bool onlyFathers)
        {
            foreach (TrackListViewModel t in parent.Tracks)
            {
                if (!t.Enabled || true != onlyDisabled)
                {
                    if (onlyDisabled == null && t.Enabled)
                    {
                        if (!t.PieceGen.ClassementProvisoireRecent)
                            continue;
                    }
                    if (t.PieceParentId < 0 || !onlyFathers)
                    {
                        if (!t.Virtual || PlayerViewModel.Instance.WithVirtualAlbum)
                        {

                            if (!dict.ContainsKey(t.PieceId))
                            {
                                dict.Add(t.PieceId, t);
                                container.Add(t);
                                //  t.Index = container.Count; 
                            }
                        }
                    }
                }

            }

            foreach (PlayListViewModel pl in parent)
            {
                AllTracksViewModel other = pl.AlltracksVm;
                //if (true == onlyDisabled)
                //    other = pl.AlltracksVmd;
                //else
                //    other = pl.AlltracksVm;
                other.buildAllTraks(container, dict, onlyDisabled, onlyFathers);
            }
        }

        #region cmd

        private ICommand _contextCmdCheck;
        public ICommand ContextCmdCheck { get { if (_contextCmdCheck == null) _contextCmdCheck = new CheckCmd(provider); return _contextCmdCheck; } }

        private ICommand _contextCmdUnCheck;
        public ICommand ContextCmdUnCheck { get { if (_contextCmdUnCheck == null) _contextCmdUnCheck = new UnCheckCmd(provider); return _contextCmdUnCheck; } }


        private ICommand _contextLinkFather;
        public ICommand LinkFather { get { if (_contextLinkFather == null) _contextLinkFather = new LinkFather(); return _contextLinkFather; } }

        private ICommand _contextLinkChild;
        public ICommand LinkChild { get { if (_contextLinkChild == null) _contextLinkChild = new LinkChild(); return _contextLinkChild; } }

        private ICommand _contextLinkFusion;
        public ICommand LinkFusion { get { if (_contextLinkFusion == null) _contextLinkFusion = new LinkFusion(); return _contextLinkFusion; } }

        private ICommand _contextUnLink;
        public ICommand LinkReset { get { if (_contextUnLink == null) _contextUnLink = new LinkReset(); return _contextUnLink; } }

#if EXPORT
        private ICommand _contextExport;
        public ICommand Export { get { if (_contextExport == null) _contextExport = new ExportCmd(); return _contextExport; } }


        private ICommand _contextExportCompress;
        public ICommand ExportCompress { get { if (_contextExportCompress == null) _contextExportCompress = new ExportCompress(); return _contextExportCompress; } }
#endif
        private ICommand _contextDelete;
        public ICommand DeleteTrack { get { if (_contextDelete == null) _contextDelete = new DeleteCmd(); return _contextDelete; } }

        private ICommand _contexExplorer;
        public ICommand Explorer { get { if (_contexExplorer == null) _contexExplorer = new Explorer(); return _contexExplorer; } }

        private ICommand _contextInfo;
        public ICommand Info { get { if (_contextInfo == null) _contextInfo = new InfoCmd(); return _contextInfo; } }

        private ICommand _contexRefreshAlbum;
        public ICommand RefreshAlbum { get { if (_contexRefreshAlbum == null) _contexRefreshAlbum = new RefreshAlbum(); return _contexRefreshAlbum; } }

        private ICommand _contexRefreshAllAlbum;
        public ICommand RefreshAllAlbum { get { if (_contexRefreshAllAlbum == null) _contexRefreshAllAlbum = new RefreshAllAlbum(); return _contexRefreshAllAlbum; } }



        private ICommand _ContextCmdAddToList;
        public ICommand ContextCmdAddToList { get { if (_ContextCmdAddToList == null) _ContextCmdAddToList = new AddToList(provider, App.Instance); return _ContextCmdAddToList; } }

        private ICommand _ContextCmdDbDeleteClassement;
        public ICommand ContextCmdDbDeleteClassement { get { if (_ContextCmdDbDeleteClassement == null) _ContextCmdDbDeleteClassement = new DbDeleteLastClassement(provider); return _ContextCmdDbDeleteClassement; } }

        private ICommand _ContextCmdDbDeleteRead;
        public ICommand ContextCmdDbDeleteRead { get { if (_ContextCmdDbDeleteRead == null) _ContextCmdDbDeleteRead = new DbDeleteLastRead(provider); return _ContextCmdDbDeleteRead; } }


#endregion

        public TrackListViewModel HumanSelected
        {
            get
            {
                return TrackListViewModel.HumanSelected;
            }
        }

#region from Ihm
        private TrackListViewModel selectedTrack;
        public TrackListViewModel SelectedTrack
        {
            get
            {
                return selectedTrack;
            }
            set
            {
                selectedTrack = value;
                TrackListViewModel.setHumanSelected(parent, value); //  .HumanSelected = value;
                if (selectedTrack != null)
                    selectedTrack.IsSelected = true;
            }
        }
#endregion

        private int nbAlbumMoved;

        public int NbAlbumMoved
        {
            get { return nbAlbumMoved; }
        }

        private int nbEmpeached;
        public int NbEmpeached { get { return nbEmpeached; } }

        private void writeConf(StringBuilder sb, ConfMedianneVirt conf)
        {
            var coeff = conf.coeffVirt;
            if (coeff == 1)
                coeff = conf.CoeffOld;
            sb.Append((coeff - 1).FormatE(3)); sb.Append("\t "); //(3,3,9));                  

            sb.Append((conf.v).FormatE(3)); sb.Append("\t ");  //sb.Append("m  ");

            sb.Append(conf.a.FormatE(3)); sb.Append("\t ");
            if (conf.CoeffStaticmRetour > 1)
            {
                sb.Append(conf.CurrentStaticm.FormatE(3)); sb.Append("\t ");
            }


            sb.Append(conf.Serial); sb.Append(" ");
            //  sb.Append(conf.SerialBox); sb.Append(" ");
            // sb.Append(conf.Alt); sb.Append(" ");
            sb.Append(conf.AltHisto); sb.Append("  ");
            sb.Append(conf.Elastique.ToString("0.##")); sb.Append(" ");
            sb.Append(conf.Elastique2.ToString("0.##")); sb.Append(" ");
            sb.Append(conf.DeltaElastiqueDisplay.ToString("0.##")); sb.Append(" ");
            var coeffLot = conf.CoeffLotDisplay;
            if (coeffLot < 1m)
                sb.Append(coeffLot.ToString("#.##"));
        }

        private void check(StringBuilder sb, StringBuilder sb2)
        {
            sb.Append(" ");
            sb2.Append(" ");

            while (sb.Length < sb2.Length)
                sb.Append(" ");
            while (sb2.Length < sb.Length)
                sb2.Append(" ");

        }

        //private void writeConf(StringBuilder sb, ConfMedianneVirt conf, StringBuilder sb2, ConfMedianneVirt conf2)
        //{
        //    sb.Append((conf.coeffVirt - 1).FormatE(4));
        //    sb2.Append((conf2.coeffVirt - 1).FormatE(4));

        //    check(sb, sb2); 

        //    sb.Append((conf.v).FormatE(4));
        //    sb2.Append((conf2.v).FormatE(4));
        //    check(sb, sb2); 

        //    sb.Append(conf.a.FormatE(4));
        //    sb2.Append(conf2.a.FormatE(4));
        //    check(sb, sb2); 

        //    sb.Append(conf.CurrentStaticm.FormatE(3));
        //    sb2.Append(conf2.CurrentStaticm.FormatE(3));
        //    check(sb, sb2);

        //    sb.Append(conf.Serial);
        //    sb2.Append(conf2.Serial);
        //    check(sb, sb2);
        //    //  sb.Append(conf.SerialBox); sb.Append(" ");
        //    // sb.Append(conf.Alt); sb.Append(" ");
        //    sb.Append(conf.AltHisto); 
        //    sb2.Append(conf2.AltHisto);
        //    check(sb, sb2);


        //    sb.Append(conf.Elastique.ToString("0.##"));
        //    sb2.Append(conf2.Elastique.ToString("0.##"));

        //    check(sb, sb2); 
        //    sb.Append(conf.Elastique2.ToString("0.##"));
        //    sb2.Append(conf2.Elastique2.ToString("0.##"));
        //}

        public string AutoResume
        {
            get
            {
#if GEN2
                  try
                  {
                      var confM = App.gen.SortAlbumMode.ComposantsUtiles[0];
                      var conf = confM.Main;
                      var min = confM.Min;
                      var sb = new StringBuilder();



                      //if (min.Use)
                      //{
                      //    var sb2 = new StringBuilder();
                      //    writeConf(sb, conf, sb2, min);
                      //    sb.AppendLine();
                      //    sb.Append(sb2.ToString()); 
                      //}

                      //else
                      //    writeConf(sb, conf);


                      writeConf(sb, conf);
                      if (min.Use)
                      {
                          sb.AppendLine();
                          writeConf(sb, min);
                      }


                      return sb.ToString();

                  }
                  catch
                  {
                      return "";
                  }

#else
                return "";
#endif
            }
        }
        public string NbAlbumMovedDesc
        {
            get
            {
                if (nbAlbumMoved < 0)
                    return "";
                if (nbAlbumMoved == 0)
                    return "pas d'album en quarantaine";
                return string.Format("{0} albums en quarantaine", nbAlbumMoved);
            }
        }

        public void setNbAlbum(int nbanavailable, int empeches, int moved)
        {
            if (nbanavailable != this.nbAlbumMovedUnavailable)
            {
                this.nbAlbumMovedUnavailable = nbanavailable;
                OnPropertyChanged("NbAlbumMovedUnavailable");
            }

            if (empeches != nbEmpeached)
            {
                nbEmpeached = empeches;
                OnPropertyChanged("NbEmpeached");
            }

            if (moved != nbAlbumMoved)
            {
                nbAlbumMoved = moved;
                OnPropertyChanged("NbAlbumMoved");
            }
        }

        //public void setNbAlbumMoved(int nb)
        //{
        //    if (nb != nbAlbumMoved)
        //    {
        //        nbAlbumMoved = nb;
        //        OnPropertyChanged("NbAlbumMoved");
        //        OnPropertyChanged("NbAlbumMovedDesc");
        //    }

        //}

        private int nbAlbumMovedUnavailable;
        public int NbAlbumMovedUnavailable
        {
            get
            {
                return nbAlbumMovedUnavailable;
            }

            //set
            //{
            //    if (value != nbAlbumMovedUnavailable)
            //    {
            //        nbAlbumMovedUnavailable = value;
            //        OnPropertyChanged("NbAlbumMovedUnavailable");
            //    }
            //}
        }

    }


}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\DetailClassementViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Data;
using System.Windows.Input;
using pdb.gen.stat;
using pdb.player.ViewModel.Commande;
using pdb.obj;
using pdb.util;
using System.Threading;

namespace pdb.player.ViewModel
{
    enum ihmInDispo
    {
        none,
        rot,
        stat
    }

    public interface IRecordClassmentObserver
    {
        void signalClassementChange();
        void autoNextTrack(TrackListViewModel currentPlaying);
    }
    public interface IClassementObserver
    {
        void signalClassementChange(IClient client);
    }
    class DetailClassementViewModel : ViewModelBase
    {
        private static DetailClassementViewModel _instance;
        public static DetailClassementViewModel Instance { get { return _instance; } }
        private static IRecordClassmentObserver recordClassementObserver;
        public static IRecordClassmentObserver RecordObserver { set { recordClassementObserver = value; } }
        // private CPlayList _root;
        private PlayListViewModel currentClassList;
        private TrackListViewModel currentTrack;


        //   private CPlayList _currentClassList;
        private ICommand cmdRecord;
        private IClassementObserver ihm;
        public DetailClassementViewModel(IClassementObserver ihm)
        {
            this.ihm = ihm;
            cmdRecord = new RecordClassement(this);
            TrackListViewModel.CurrentHumanSelectedChanged += new EventHandler(TrackListViewModel_CurrentSelectedChanged);
            //this._root = root.getOrCreate("classement");
            //_currentClassList = _root;
            // findCurrentPlaylist();
            _instance = this;
        }

        void TrackListViewModel_CurrentSelectedChanged(object sender, System.EventArgs e)
        {
            //if (currentTrack == null)
            //{
            if (currentTrack != TrackListViewModel.HumanSelected)
            {
                currentTrack = TrackListViewModel.HumanSelected;
                if (currentTrack != null)
                {
                    Classement = currentTrack.Classement;
                    Name = currentTrack.Name;
                }
                //  OnPropertyChanged(""); 

            }
            //}
        }

        private bool onlyDisabled = false;
        public bool OnlyDisabled
        {
            get { return onlyDisabled; }
            set
            {
                if (value != onlyDisabled)
                {
                    onlyDisabled = value;
                    OnPropertyChanged("OnlyDisabled");
                }
            }
        }


        private bool uncheckAfter = false;
        public bool UncheckAfter
        {
            get { return uncheckAfter; }
            set
            {
                if (value != uncheckAfter)
                {
                    uncheckAfter = value;
                    OnPropertyChanged("UncheckAfter");
                }
            }
        }

        private bool auto = true;
        public bool Auto
        {
            get { return auto; }
            set
            {
                if (value != auto)
                {
                    auto = value;
                    OnPropertyChanged("Auto");
                }
            }
        }

        private ihmInDispo inDispo;
        public ihmInDispo IhmInDispo
        {
            get { return inDispo; }
            set
            {
                if (value != inDispo)
                {
                    inDispo = value;
                    OnPropertyChanged("IhmInDispo");
                }
            }
        }


        public string Name
        {
            get { if (currentTrack != null) return currentTrack.Name; return ""; }
            set { OnPropertyChanged("Name"); }
        }
        private string classement = "-";
        public string Classement
        {
            get { return classement; }
            set
            {
                if (value != classement)
                {
                    if (isClassment(value))
                    {
                        classement = value;
                        if (this.client != null)
                            this.client.cancel();
                        var client = new SimpleClient("buildStat\t", Logger.getLogger("Classement"));
                        client.log(value);
                        this.client = client;

                        if (!client.Cancel)
                        {
                            new Thread(() => waitBeforeSignalClassChange(client, value)).Start();
                        }
                    }

                }
            }
        }


        private void waitBeforeSignalClassChange(IClient client, string value)
        {
            Thread.Sleep(30);
            if (client.Cancel)
                return;
            findCurrentPlaylist(client);
            if (client.Cancel)
                return;
            client.log("fin stats " + value);
            Thread.Sleep(30);
            if (client.Cancel)
                return;
            ihm.signalClassementChange(client);
        }

        public static bool isClassment(string str)
        {
            return pdb.obj.Classement.canBeClassement(str);
        }
        private SimpleClient client;
        private void findCurrentPlaylist(IClient client)
        {
            if (App.bib == null)
                return;
            try
            {
                if (string.IsNullOrEmpty(classement))
                {
                    //  _currentClassList = _root;
                    currentClassList = App.bib.getClass("", true); // new PlayListViewModel(_root);
                }
                else
                {
                    if (!pdb.obj.Classement.canBeClassement(classement))
                        return;

                    currentClassList = App.bib.getClass(classement, true);

                    //var tab = classement.ToCharArray();
                    //var pl = _root;

                    //foreach (char c in tab)
                    //{
                    //    if (c == '.')
                    //        break;
                    //    pl = pl.get(c.ToString());
                    //}
                    //_currentClassList = pl;
                    //  currentClassList = new PlayListViewModel(pl);
                }

                buildStats(client);
            }
            finally
            {
                //  OnPropertyChanged("");
            }
        }

        #region stats
        int d0, d1, d2, d3, d4, d5, d01, d23, d45, d02, d35;
        const int NB_ROW = 4;
        const int NB_COL = 6;
        private int[,] tab = new int[NB_ROW, NB_ROW];
        private DynamicStat stats = null;
        private void buildStats(IClient client)
        {
            if (currentClassList == null)
                return;
            if (App.gen == null)
                return;


            stats = App.gen.generStat(client, classement, onlyDisabled);
            if (client.Cancel)
                return;
            d0 = get(0); // currentClassList.get("0", false).AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d1 = get(1); // currentClassList.get("1").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d2 = get(2);  //currentClassList.get("2").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d3 = get(3); //currentClassList.get("3").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d4 = get(4); //currentClassList.get("4").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d5 = get(5); //currentClassList.get("5").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;

            d01 = d0 + d1;
            d23 = d2 + d3;
            d45 = d4 + d5;

            d02 = d0 + d1 + d2;
            d35 = d3 + d4 + d5;

            //   OnPropertyChanged("");
        }

        public DataTable Stats
        {
            get
            {
                if (stats == null)
                    return null;
                var dt = new DataTable();
                for (int i = -DynamicStatLigne.SEMI_COLS; i <= DynamicStatLigne.SEMI_COLS; i++)
                {
                    dt.Columns.Add(i.ToString(), typeof(int));
                }

                foreach (DynamicStatLigne ligne in stats.rows)
                {
                    DataRow row = dt.Rows.Add();
                    for (int i = -DynamicStatLigne.SEMI_COLS; i <= DynamicStatLigne.SEMI_COLS; i++)
                    {
                        row[i.ToString()] = ligne[i];
                    }

                }

                return dt;

            }
        }

        public DynamicStat getStats(IClient client)
        {
            if (stats == null)
                buildStats(client);
            return stats;
        }

        private int get(int level)
        {
            if (currentClassList == null)
                return 0;
            if (stats == null)
                return 0;

            int row = 2;
            if (classement.Contains("."))
                row = 4;

            return stats[row][level];

            //var sub = currentClassList.get(level.ToString());
            //var pl = currentClassList;
            //int nb = 0;


            //if (onlyDisabled)
            //    nb += currentClassList.AlltracksVmd.Tracks.FindAll(t => t.PieceParentId < 0 && t.Rating == 20 * level).Count;
            //else
            //    nb += currentClassList.AlltracksVm.Tracks.FindAll(t => t.PieceParentId < 0 && t.Rating == 20 * level && (!t.Enabled || t.PieceGen.ClassementProvisoireRecent)).Count;

            //if (sub != null)
            //{
            //    if (onlyDisabled)
            //        nb += sub.AlltracksVmd.AllTracks.FindAll(t => t.PieceParentId < 0).Count;
            //    else
            //        nb += sub.AlltracksVm.AllTracks.FindAll(t => t.PieceParentId < 0 && (!t.Enabled || t.PieceGen.ClassementProvisoireRecent)).Count;
            //}

            //return nb;

            //if (!onlyDisabled)
            //    return tracks.Count;

            //tracks = tracks.FindAll(t => !t.Enabled);

            //return tracks.Count;

        }

        //private int get(string className, int level)
        //{
        //    var currentClassList = App.bib.getClass(className, false);
        //    var sub = currentClassList.get(level.ToString());
        //    List<TrackListViewModel> tracks;
        //    if (sub == null)
        //    {
        //        tracks = currentClassList.Tracks.FindAll(t => t.Rating == 20 * level);
        //    }
        //    else
        //    {
        //        tracks = sub.AllTracks;
        //    }

        //    if (!onlyDisabled)
        //        return tracks.Count;

        //    tracks = tracks.FindAll(t => !t.Enabled);

        //    return tracks.Count;

        //}

        private string getOffset(string classBase, int offset)
        {
            if (string.IsNullOrEmpty(classBase))
                return "";
            return "";
        }


        public int D0 { get { return d0; } }
        public int D1 { get { return d1; } }
        public int D2 { get { return d2; } }
        public int D3 { get { return d3; } }
        public int D4 { get { return d4; } }
        public int D5 { get { return d5; } }

        public int D01 { get { return d01; } }
        public int D23 { get { return d23; } }
        public int D45 { get { return d45; } }

        public int D02 { get { return d02; } }
        public int D35 { get { return d35; } }
        #endregion

        private List<TrackListViewModel> _list;
        public List<TrackListViewModel> getTracks(IClient client)
        {

            if (_list == null)
            {
                if (App.gen == null)
                    return new List<TrackListViewModel>();
                if (client == null)
                    client = new SimpleClient("ClassementTracks", Logger.getLogger("ClassementTracks"));
                var list = App.gen.getTracks(client, classement, onlyDisabled);
                _list = new List<TrackListViewModel>();
                foreach (var p in list)
                {
                    TrackListViewModel t = TrackListViewModel.getOrCreate(p); // App.bib.Musique.FindTrack(p.PieceId);
                    if (t != null)
                        _list.Add(t);
                }
            }
            return _list;

        }
        public void reset()
        {
            _list = null;
        }
        //public AllTracksViewModel Tracks0
        //{
        //    get
        //    {
        //        AllTracksViewModel tracks = null;
        //        if (currentClassList == null)
        //            return null;
        //        if (onlyDisabled)
        //            tracks = currentClassList.AllTrackFatherDisabled;
        //        else
        //            tracks = currentClassList.AllTrackFather;
        //        if (tracks == null)
        //            return null;
        //        if (!onlyDisabled)
        //            tracks = currentClassList.AllTrackFather; 
        //        tracks.refresh();

        //        return tracks;

        //        //var list = currentClassList.AlltracksVm;
        //        //if (onlyDisabled)
        //        //    list = list.FindAll(t => !t.Enabled);

        //        ////if (currentTrack != null)
        //        ////{
        //        ////    foreach (TrackListViewModel t in list)
        //        ////    {
        //        ////        if (t.Location == currentTrack.Location)
        //        ////            t.IsSelected = true;
        //        ////        else
        //        ////            t.IsSelected = false;
        //        ////    }
        //        ////}
        //        //return currentClassList.AlltracksVm; 
        //        //return list;
        //    }
        //}

        public List<TrackListViewModel> Album
        {
            get
            {
                if (currentClassList == null)
                    return null;
                if (currentTrack == null)
                    return null;
                var tracks = App.getAlbum(currentTrack);
                //foreach (TrackListViewModel t in tracks)
                //{
                //    if (t.Location == currentTrack.Location)
                //        t.IsSelected = true;
                //    else
                //        t.IsSelected = false; 
                //}

                return tracks;
            }
        }



        public TrackListViewModel SelectedTrackInClassView
        {
            get
            {
                if (currentTrack == null | currentClassList == null)
                    return null;
                return currentTrack;
            }
            set
            {
            }
        }

        public TrackListViewModel SelectedTrackInAlbumView
        {
            get
            {
                if (currentTrack == null || currentClassList == null)
                    return null;
                var tracks = Album;
                if (tracks == null || tracks.Count == 0)
                    return null;
                return tracks.Find(t => t.PieceId == currentTrack.PieceId);
            }
            set
            {
            }
        }

        public void record()
        {
            App.Indispo = false; 
            if (currentTrack == null)
                return;
            var currentPlaying = TrackListViewModel.CurrentPlaying;
            if (currentPlaying != null && currentPlaying.MasterId != currentTrack.MasterId)
            {
                IIhm ihm = App.Instance;
                if (!ihm.Confirm("Modifier le classement de " + currentTrack + " ?", "Classement"))
                    return;
            }



            currentTrack.Classement = classement;


            if (uncheckAfter)
                currentTrack.Enabled = false;

            if (recordClassementObserver != null)
            {
                recordClassementObserver.signalClassementChange();
                if (auto)
                    recordClassementObserver.autoNextTrack(currentTrack);
            }

        }

        //void IClient.log(string phase)
        //{
        //   if (client ==null)
        //        return; 
        //   client.log(phase); 
        //}

        public bool CanRecord
        {
            get
            {
                return currentTrack != null && currentTrack.Enabled && isClassment(classement);
            }
        }

        public ICommand Record { get { return cmdRecord; } }

        //bool IClient.Cancel
        //{
        //    get
        //    {
        //        if (client ==null)
        //            return false; 
        //        return client.Cancel; 
        //    }
        //}
    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\PlayerViewModel.cs">
    <content><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Threading;
using System.Windows.Input;
using System.Windows.Threading;
using pdb.gen;
using pdb.gen.conf;
using pdb.gen.medianne;
using pdb.gen.Tuning;
using pdb.player.engine;
using pdb.player.engine.build;
using pdb.player.ViewModel.Commande;
using pdb.util;
using pdb.gen.auto;
using pdb.gen.albums;

namespace pdb.player.ViewModel
{


    enum positionstate
    {
        free,
        cannotPrevious,
        cannotForward
    }

    class HiddenPlayList : ItrackProvider
    {
        private ICollectionView viewOrg;
        private PlayListViewModel pl;
        private static List<TrackListViewModel> hiddenSelected = new List<TrackListViewModel>();

        public HiddenPlayList(PlayListViewModel pl, ICollectionView viewOrg)
        {
            this.viewOrg = viewOrg;
            this.pl = pl;
        }
        public ICollectionView PresentationTracks
        {
            get { return viewOrg; }
        }

        public void Focus(TrackListViewModel t)
        {

        }

        public PlayListViewModel PlayList
        {
            get { return pl; }
        }


        public void doFilter(string filter)
        {
            PlayerViewModel.doFilter(PresentationTracks, filter);
        }


        public List<TrackListViewModel> SelectedTracks
        {
            get { return hiddenSelected; }
        }
    }



    class PlayerViewModel : ViewModelBase
    {
        private static PlayerViewModel _instance;
        private static volatile object _lock = new object();
        private static ConfAlbumSort confAlbumSort;
        public static ConfAlbumSort ConfAlbumSort { get { return confAlbumSort; } set { confAlbumSort = value; } }
        public static PlayerViewModel Instance
        {
            get
            {
                if (_instance == null)
                {
                    lock (_lock)
                    {
                        if (_instance == null)
                            _instance = new PlayerViewModel();
                    }
                }
                return _instance;
            }
        }

        public ConfFilter ConfFilter { get { return FilterTask.conf; } }
        private IPlayerEngine _player;

        public IPlayerEngine Player
        {
            get
            {
                if (_player == null)
                {
                    lock (_lock)
                    {
                        if (_player == null)
                        {
                            _player = PlayerBuilder.create("vlcplugin");
                            _player.mediaEndReached += player_mediaEndReached;
                            _player.Volume = volume;

                            new Thread(refreshLoop).Start();
                        }
                    }
                }
                return _player;
            }
        }

        private TrackListViewModel currentTrack;
        private PlayListViewModel currentPl;
        public event EventHandler currentTrackChange;
        public event EventHandler resumeChange;
        public static event EventHandler autoChange;
        private playerstate state;
        private positionstate _positionstate;
        private bool onlyEnabled = true;
        // private bool sortByAlbum = true;
        private bool withVirtualAlbum = CConf.ConfGen.AlbumVirtual;
        private bool withArtistVirtual = CConf.ConfGen.ArtistVirtual;
        private bool navAuto = CConf.ConfGen.NavAuto;
        public bool NavAuto
        {
            get { return navAuto; }
            set
            {
                if (value != navAuto)
                {
                    navAuto = value;
                    OnPropertyChanged("NavAuto");
                }
            }
        }

        private bool selectAuto = CConf.SelectAuto;
        public bool SelectAuto
        {
            get { return selectAuto; }
            set
            {
                if (value != selectAuto)
                {
                    selectAuto = value;
                    OnPropertyChanged("SelectAuto");
                }
            }
        }

        private bool filterOnlyNext = false;
        public bool FilterNext
        {
            get { return filterOnlyNext; }
            set
            {
                if (value != filterOnlyNext)
                {
                    filterOnlyNext = value;
                    OnPropertyChanged("FilterNext");
                    //  App.gen.FilterNext = value;
                }
            }
        }
        ItrackProvider _real;
        private Logger log;
        // public static IPlayerEngine Player { get { return Instance.player; } }


        public bool OnlyEnabled
        {
            get
            {
                return onlyEnabled;
            }
            set
            {
                if (value != onlyEnabled)
                {
                    onlyEnabled = value;
                    OnPropertyChanged("OnlyEnabled");
                }
            }
        }
        private bool createRot = true;
        public bool CreateRot
        {
            get
            {
                return createRot;
            }
            set
            {
                if (value != createRot)
                {
                    createRot = value;
                    OnPropertyChanged("CreateRot");
                }
            }
        }

        public bool SortByAlbum
        {
            get
            {
                return confAlbumSort.Enabled;
            }
        }
        //private albumSortMode sortAlbumMode;
        //public albumSortMode SortAlbumMode
        //{
        //    get { return sortAlbumMode; }
        //    set
        //    {
        //        if (value != sortAlbumMode)
        //        {
        //            sortAlbumMode = value;
        //            OnPropertyChanged("SortAlbumMode");
        //            App.go();
        //        }
        //    }
        //}

        public bool WithVirtualAlbum
        {
            get { return withVirtualAlbum; }
            set
            {
                if (value != withVirtualAlbum)
                {
                    withVirtualAlbum = value;
                    OnPropertyChanged("WithVirtualAlbum");
                    App.go();
                }
            }
        }

        public bool WithVirtualArtist
        {
            get { return withArtistVirtual; }
            set
            {
                if (value != withArtistVirtual)
                {
                    withArtistVirtual = value;
                    OnPropertyChanged("WithVirtualArtist");
                    App.go();
                }
            }
        }



        private PlayerViewModel()
        {
            this.log = Logger.getLogger("PlayerViewModel");
            //player.mediaEndReached += player_mediaEndReached;
            //player.Volume = volume;

            TrackListViewModel.CurrentHumanSelectedChanged += TrackListViewModel_CurrentHumanSelectedChanged;


            //new Thread(refreshLoop).Start();
            this.currentPl = PlayListViewModel.SelectedPlayList;
        }

        void TrackListViewModel_CurrentHumanSelectedChanged(object sender, EventArgs e)
        {
            makeResume();
        }

        void player_mediaEndReached(object sender, EventArgs e)
        {
            var track = this.CurrentTrack;
            if (track != null)
                track.Piece.recordJustReadTrack();
            next();
            App.go();
        }

        #region commande
        private ICommand cmdPlayPause;
        private ICommand cmdForward;
        private ICommand cmdStop;
        private ICommand cmdBackWard;
        private readonly static TimeSpan LIMIT_BACK = TimeSpan.FromSeconds(5.1);

        public ICommand Play
        {
            get
            {
                if (cmdPlayPause == null)
                    cmdPlayPause = new PlayPause();
                return cmdPlayPause;
            }
        }

        public ICommand Forward
        {
            get
            {
                if (cmdForward == null)
                    cmdForward = new ForWard();
                return cmdForward;
            }
        }

        public ICommand BackWard
        {
            get
            {
                if (cmdBackWard == null)
                    cmdBackWard = new BackWard();
                return cmdBackWard;
            }
        }

        public bool canForward()
        {
            return canPlay() && _positionstate != positionstate.cannotForward;
        }
        public bool canBackWard()
        {
            if (!canPlay())
                return false;
            if (PlayJustStarted)
                return _positionstate != positionstate.cannotPrevious;
            return true;

        }

        public void backWard()
        {
            if (PlayJustStarted)
                movetoPrevious();
            else
                goStartTrack();
        }

        public void checkNavIni()
        {
            if (!navAuto)
                return;

            var tracks = PresentationTracks;
            if (tracks == null)
                return;
            bool foundFirst = false;
            TrackListViewModel f = null;

            foreach (TrackListViewModel t in tracks)
            {
                if (t.Index == 1)
                {
                    foundFirst = true;
                }
                if (foundFirst && t.PieceGen.IsNext)
                {
                    f = t;
                    break;
                }
            }

            if (f == null)
                return;

            tracks.MoveCurrentTo(f);
            focus(f);

        }


        public void forwardAuto()
        {
            var _track = new List<TrackListViewModel>();
            var __collec = PresentationTracks;

            int maxIndex = int.MaxValue;
            int target = 1;
            TrackListViewModel _next = null;

            foreach (TrackListViewModel tt in __collec)
            {
                var index = tt.Index;
                if (tt == currentTrack)
                {
                    if (currentTrack.Index == 1)
                        target = 2;
                    continue;
                }
                if (tt.MasterId == currentTrack.MasterId)
                    continue;
                if (index < maxIndex)
                {
                    maxIndex = index;
                    _next = tt;
                    if (maxIndex == target)
                        break;
                }

            }

            if (_next != null)
            {
                __collec.MoveCurrentTo(_next);
                CurrentTrack = _next;

                Player.play(_next.Location, true);

                var currentPlaying = TrackListViewModel.CurrentPlaying;
                if (currentPlaying != null)
                    TrackListViewModel.setHumanSelected(PlayListViewModel.SelectedPlayList, currentPlaying); //   .HumanSelected = currentPlaying; 


            }


        }

        public void forward()
        {
            if (!navAuto)
                movetoNext(true);
            else
            {
                try
                {
                    var t = TrackListViewModel.HumanSelected;
                    if (t != null)
                    {
                        t.refresh();
                        //  var g = t.Grouping; 
                    }

                    var pl = PlayListViewModel.SelectedPlayList;
                    if (pl == null || currentTrack == null)
                    {
                        movetoNext(true);
                        return;
                    }





                    string _album = "";
                    if (currentTrack != null)
                        _album = currentTrack.Album;
                    movetoNext(true); // des fois le morceaux affiché n'est pas celui joué. Dommage...
                    if (currentTrack != null && currentTrack.Album == _album)
                    {
                        if (state == playerstate.play)
                            play(false, true);
                        return;
                    }

                    if (currentTrack == null)
                        return;
                    var album = App.gen.Albums.getAlbum(CurrentTrack.PieceGen);
                    var tracks = album.Tracks;
                    //    tracks.Sort(new PieceClassementComparer());
                    //  decimal val = int.MaxValue;
                    int i = 0;
                    TrackListViewModel choose = null;
                    if (confAlbumSort.ComposantsUtiles[0].cmpMin > modeMin.non)
                    {
                        var next = album.Next;
                        if (next != null)
                            choose = TrackListViewModel.getOrCreate(next); // pl.FindTrack(next.PieceId);
                    }
                    else
                    {
                        for (i = 0; i < tracks.Count; i++)
                        {
                            var item = tracks[i];
                            if (item != null && (!onlyEnabled || item.Enabled))
                            {
                                var tl = TrackListViewModel.getOrCreate(item); // pl.FindTrack(item.PieceId);
                                if (!tl.ExistsNow)
                                    continue;
                                choose = tl;

                                //val = v;
                                // choose = tl;
                                if (!item.Classement.isPositive())
                                {
                                    break;
                                    //if (confAlbumSort.ComposantsUtiles[0].cmpMin != modeMin.toujours)
                                    //    choose = tl;
                                    //break;
                                }
                                // choose = tl;
                            }
                        }
                    }

                    if (choose != null)
                    {
                        //var p = choose.PieceGen;
                        //if (p != null)
                        //   confAlbumSort.auto(p.AutoCoeff1, p.AutoCoeff2); 
                        if (choose != currentTrack)
                        {
                            reset(provider, choose, state == playerstate.play);
                            var coll = PresentationTracks;
                            coll.MoveCurrentTo(choose);
                        }

                        focus(choose);

                    }
                }
                finally
                {
                    refresh();
                    //doFilter(_lastFilter);
                }

            }
        }

        public bool isHidden { get { return provider is HiddenPlayList; } }

        public void pause()
        {
            State = playerstate.pause;
            Player.pause();
        }

        private bool PlayJustStarted { get { return ElapsedTime < LIMIT_BACK; } }

        #endregion

        #region navigation
        public bool canPlay()
        {
            //if (currentPl == null)
            //    return false;
            var tracks = PresentationTracks;
            if (tracks == null)
                return false;
            if (tracks.IsEmpty)
                return false;
            return true;
        }



        private void movetoNext(bool autoPlay)
        {
            move(true, autoPlay);
            //   doFilter(_lastFilter);
        }

        private void goStartTrack()
        {
            Position = 0;
        }

        private void move(bool _toNext, bool autoPlay)
        {
            bool playing = state == playerstate.play;
            TrackListViewModel item = null;



            var tracks = PresentationTracks;

            Func<bool> _move;
            if (_toNext)
                _move = tracks.MoveCurrentToNext;
            else
                _move = tracks.MoveCurrentToPrevious;
            try
            {

                int masterId = 0;
                if (currentTrack != null)
                {
                    tracks.MoveCurrentTo(currentTrack);
                    masterId = currentTrack.MasterId;
                }
                if (!_move())
                {
                    return;
                }

                while (true)
                {
                    item = tracks.CurrentItem as TrackListViewModel;
                    if (item != null && item.ExistsNow && (!onlyEnabled || item.Enabled) && item.MasterId != masterId)
                        break;
                    if (!_move())
                    {
                        item = null;
                        return;
                    }

                }



            }
            finally
            {
                if (item == null)
                    _positionstate = _toNext ? positionstate.cannotForward : positionstate.cannotPrevious;
                CurrentTrack = item;
                tracks.MoveCurrentTo(currentTrack);
                if (item != null)
                {
                    // focus(item);
                    if (playing && autoPlay)
                    {
                        Player.play(item.Location, true);
                        if (selectAuto)
                            TrackListViewModel.setHumanSelected(currentPl, item);
                    }
                    // focus(item);
                }

                refresh();

            }
        }


        private void movetoPrevious()
        {
            move(false, true);
            //bool playing = state == playerstate.play;
            //TrackListViewModel item = null;

            //var tracks = PresentationTracks;
            //try
            //{


            //    if (currentTrack != null)
            //        tracks.MoveCurrentTo(currentTrack);
            //    if (!tracks.MoveCurrentToPrevious())
            //    {
            //        _positionstate = positionstate.cannotPrevious;
            //        state = playerstate.stop;
            //        return;
            //    }

            //    while (true)
            //    {
            //        item = tracks.CurrentItem as TrackListViewModel;
            //        if (item.Enabled)
            //            break;
            //        if (!tracks.MoveCurrentToPrevious())
            //        {
            //            _positionstate = positionstate.cannotPrevious;
            //            state = playerstate.stop;
            //            return;
            //        }

            //    }



            //}
            //finally
            //{
            //    CurrentTrack = item;
            //    tracks.MoveCurrentTo(currentTrack);
            //    if (item != null)
            //    {
            //        focus(tracks.CurrentPosition);
            //        if (playing)
            //        {
            //            player.play(item.Location, true);

            //        }
            //    }

            //}
        }



        public void play(bool forceDisabled, bool reload)
        {

            TrackListViewModel item = currentTrack;
            var tracks = PresentationTracks;
            try
            {
                if (!canPlay())
                    return;

                while (true)
                {
                    if (item == null)
                    {
                        _positionstate = positionstate.cannotPrevious;

                        if (!tracks.MoveCurrentToFirst())
                        {
                            //_positionstate = positionstate.cannotPrevious; 
                            return;
                        }

                        while (true)
                        {
                            item = tracks.CurrentItem as TrackListViewModel;
                            if (item != null && item.ExistsNow && (!onlyEnabled || item.Enabled))
                                break;
                            else if (currentTrack != null)
                            {
                                item = currentTrack;
                                break;
                            }
                            if (!tracks.MoveCurrentToNext())
                            {
                                _positionstate = positionstate.cannotForward;
                                return;
                            }
                            _positionstate = positionstate.free;
                        }

                        if (item == null)
                            return;


                    }
                    tracks.MoveCurrentTo(item);
                    if (tracks.CurrentPosition >= 0)
                        break;
                    item = null;
                }

                CurrentTrack = item;

                //  focus(item);

                State = playerstate.play;
                //item.Playing = true;
                Player.play(currentTrack.Location, reload);
                // Volume = Volume;
                focus(item);
            }
            finally
            {
                if (!canPlay() || currentTrack == null)
                    stop();
                refresh();
            }
        }



        public void stop()
        {

            if (isHidden)
            {
                provider = _real;
                tracks = provider.PresentationTracks;
            }

            State = playerstate.stop;
            Player.stop();
            refresh();

        }

        private void next()
        {
            if (navAuto)
                forward();
            else
                movetoNext(true);
        }



        #endregion

        private ItrackProvider provider;
        //internal ItrackProvider Provider
        //{
        //    set
        //    {

        //        //if (state != playerstate.stop)
        //        //{
        //        //    if (provider != null)
        //        //    {
        //        //        if (provider is HiddenPlayList)
        //        //        {
        //        //        }
        //        //        else
        //        //        {
        //        //            provider = new HiddenPlayList(provider.PresentationTracks);
        //        //        }
        //        //    }
        //        //    else
        //        //        provider = value;
        //        //}
        //        provider = value;
        //    }
        //}
        public ICollectionView PresentationTracks
        {
            get
            {
                if (provider == null)
                    return null;
                return provider.PresentationTracks;
            }
        }

        public void focusHelp()
        {
            var t = TrackListViewModel.CurrentPlaying;
            if (t == null)
                t = TrackListViewModel.HumanSelected;
            if (t == null) return;
            focus(t);
        }
        private void focus(TrackListViewModel t)
        {
            if (provider == null)
                return;
            provider.Focus(t);
        }






        public playerstate State
        {
            get
            {
                return state;
            }
            set
            {
                if (value != state)
                {
                    state = value;
                    OnPropertyChanged("State");
                    OnPropertyChanged("SrcPlayPause");
                }
            }
        }



        private bool bEnd;
        private void refreshLoop()
        {
            while (!bEnd)
            {
                Thread.Sleep(1000);
                refresh();
            }
        }

        private void refresh()
        {
            try
            {

                //  this.IndexList = infos.IndexList;
                var _position = _player.Position;
                if (_position != position) { position = _position; OnPropertyChanged("Position"); }

                this.ElapsedTime = _player.Elapsed;
                this.Length = _player.Duration;

                this.RemainingTime = Length - ElapsedTime;
                if (CurrentTrack == null)
                {
                    CurrentName = "";
                    CurrentAuthorAlbum = "";
                }
                else
                {
                    CurrentName = currentTrack.Name;
                    var sb = new System.Text.StringBuilder();
                    sb.Append(currentTrack.Artist);
                    sb.Append(" - ");
                    sb.Append(currentTrack.Album);
                    if (currentTrack.PieceGen != null)
                    {
                        if (currentTrack.PieceGen.Virtual)
                        {
                            sb.Append(" (");
                            sb.Append(currentTrack.PieceGen.Master.Album);
                            sb.Append(")");
                        }
                    }
                    CurrentAuthorAlbum = sb.ToString();
                    if (currentTrack.ExistsNow)
                        currentTrack.Duration = length;

                }

            }
            catch { }

        }


        public TrackListViewModel CurrentTrack
        {
            get { return currentTrack; }
            set
            {
                if (value != null)
                    value.Playing = true;
                if (value != currentTrack)
                {
                    if (currentTrack != null)
                        currentTrack.Playing = false;
                    currentTrack = value;
                    if (currentTrack == null)
                        stop();
                    if (currentTrackChange != null)
                        currentTrackChange(Instance, EventArgs.Empty);
                }
            }
        }

        public static void reset(ItrackProvider provider, TrackListViewModel track)
        {
            reset(provider, track, true);
        }

        public static void makeauto(TrackListViewModel current)
        {
            if (current != null)
            {
                var p = current.PieceGen;
                if (p != null)
                {
                    if (MedianneDriver.auto(confAlbumSort, p))
                        App.gen.Albums.invalidateAll(false);
                    if (autoChange != null)
                        autoChange(current, EventArgs.Empty);
                }
            }
        }

        public static void reset(ItrackProvider provider, TrackListViewModel track, bool autoPlay)
        {
            if (provider != null)
            {
                Instance.provider = provider;
                if (provider.PlayList != null)
                    Instance.currentPl = provider.PlayList;
                Instance.provider = provider;
                Instance.tracks = provider.PresentationTracks;

            }
            Instance._positionstate = positionstate.free;






            Instance.CurrentTrack = track;
            if (autoPlay)
                Instance.play(true, true);
            Instance.makeResume();
            App.go();
        }


        public PlayListViewModel PlayList
        {
            get
            {
                return currentPl;
            }
        }
        ICollectionView tracks = null;
        public void set(ItrackProvider provider)
        {
            try
            {
                if (provider == null)
                {
                    log.log("provider null");
                    this.provider = null;
                    this.currentPl = null;
                    return;
                }
                else if (this.provider == null)
                {
                    log.log("init provider " + provider);
                    this.provider = provider;
                    this.currentPl = provider.PlayList;
                    this.tracks = provider.PresentationTracks;
                }

                else
                {


                    if (provider.PlayList == currentPl || state == playerstate.stop)
                    {
                        if (isHidden)
                        {
                            log.log("retour au réel");
                            this.provider = provider;
                            this.currentPl = provider.PlayList;
                            this.tracks = provider.PresentationTracks;
                            var currentPlaying = TrackListViewModel.CurrentPlaying;
                            tracks.MoveCurrentTo(currentPlaying);
                            provider.Focus(currentPlaying);
                        }
                        else
                        {
                            log.log("détection standart");
                            this.provider = provider;
                            this.currentPl = provider.PlayList;
                            this.tracks = provider.PresentationTracks;
                        }
                    }

                    else
                    {
                        if (isHidden)
                        {
                            log.log("toujours virtuel");
                        }
                        else
                        {


                            log.log("passage en virtuel");
                            this.provider = new HiddenPlayList(currentPl, tracks);
                            this._real = provider;
                            // this.currentPl = provider.PlayList;
                            //this.tracks = provider.PresentationTracks; 
                        }
                    }
                }

                _positionstate = positionstate.free;
                if (currentPl == null)
                {
                    CurrentTrack = null;
                    stop();
                    return;
                }

            }
            finally
            {
                OnPropertyChanged("State");
                OnPropertyChanged("SrcPlayPause");
                makeResume();
            }
        }
        //  private class filterTask
        //  {
        //      public filterTask()
        //      {
        //      }
        //      public string filter;
        //      //public string waitingFilter; 
        //      //private bool cancel; 
        //      //private Thread th;
        //      public Predicate<object> Filter;
        //      //public ICollectionView coll;
        //      //private bool busy;

        //      public void go()
        //      {

        //          if (!string.IsNullOrEmpty(filter))
        //              filter = filter.Trim().ToLower().removeAccent();

        //          var tab = filter.Split(' ');
        //          // var coll = CollectionViewSource.GetDefaultView(dg.ItemsSource); 
        //          lock (this)
        //              busy = true;
        //          coll.Filter = item =>
        //          {
        //              TrackListViewModel vitem = item as TrackListViewModel;
        //              if (vitem == null) return false;

        //              //if (Regex.IsMatch(filter, @"[0-5]+\.?[0-5]?") || Regex.IsMatch(filter, @"\.[0-5]?"))
        //              //    return vitem.Classement.StartsWith(filter);
        //              bool ok = true;
        //              var name = vitem.Name.Trim().ToLower().removeAccent();
        //              var artist = vitem.Artist.Trim().ToLower().removeAccent();
        //              var album = vitem.Album.Trim().ToLower().removeAccent();
        //              var classement = vitem.Classement;
        //              foreach (string str in tab)
        //              {
        //                  if (!ok)
        //                      return false;
        //                  if (string.IsNullOrEmpty(str))
        //                      continue;
        //                  var str_ = str.Trim();
        //                  if (str_ == string.Empty)
        //                      continue;

        //                  ok = name.Contains(str_)
        //                      || artist.Contains(str_)
        //                      || album.Contains(str_)
        //                      || classement.StartsWith(str_);

        //              }

        //              return ok;

        //          };

        //          lock (this)
        //              busy = true;

        //      }
        //      private void getItems()
        //      {
        //          try
        //          {
        //              if (!string.IsNullOrEmpty(filter))
        //                  filter = filter.Trim().ToLower().removeAccent();
        //              if (cancel)
        //                  return;
        //              var tab = filter.Split(' ');
        //              if (cancel)
        //                  return;
        //              Filter = item =>
        //              {
        //                  TrackListViewModel vitem = item as TrackListViewModel;
        //                  if (vitem == null) return false;

        //                  //if (Regex.IsMatch(filter, @"[0-5]+\.?[0-5]?") || Regex.IsMatch(filter, @"\.[0-5]?"))
        //                  //    return vitem.Classement.StartsWith(filter);
        //                  bool ok = true;
        //                  var name = vitem.Name.Trim().ToLower().removeAccent();
        //                  var artist = vitem.Artist.Trim().ToLower().removeAccent();
        //                  var album = vitem.Album.Trim().ToLower().removeAccent();
        //                  var classement = vitem.Classement;
        //                  foreach (string str in tab)
        //                  {
        //                      if (!ok)
        //                          return false;
        //                      if (string.IsNullOrEmpty(str))
        //                          continue;
        //                      var str_ = str.Trim();
        //                      if (str_ == string.Empty)
        //                          continue;

        //                      ok = name.Contains(str_)
        //                          || artist.Contains(str_)
        //                          || album.Contains(str_)
        //                          || classement.StartsWith(str_);

        //                  }

        //                  return ok;

        //              };
        //          }
        //          catch (Exception ex)
        //          {
        //              App.log.log(ex.ToString()); 
        //          }
        //      }
        //  }
        ////  private static filterTask filtertask = new filterTask(); 
        private static IDisposable work;
        private static FilterTask filterTask = null;

        private static bool cancel;
        public static void doFilter0(ICollectionView coll, string filter)
        {

            ILogger log = App.log;
            log.log("filter=>{0}", filter);
            lock (_lock)
            {
                if (work == null)
                {
                    log.log("filter=>{0} verrou libre", filter);
                    work = coll.DeferRefresh();
                }
                else
                {
                    log.log("filter=>{0} verrou pris, abandon tâche en cours", filter);
                    cancel = true;
                }
            }

            var _cancel = cancel;
            if (_cancel)
                log.log("filter=>{0} verrou pris, attente fin tâche en cours", filter);
            while (cancel)
                Thread.Sleep(30);

            if (_cancel)
                log.log("filter=>{0} verrou pris, fin d'attente fin tâche en cours", filter);

            if (!string.IsNullOrEmpty(filter))
                filter = filter.Trim().ToLower().removeAccent();

            var tab = filter.Split(' ');
            // var coll = CollectionViewSource.GetDefaultView(dg.ItemsSource); 


            _cancel = cancel;
            if (!_cancel)
            {
                lock (_lock)
                    _cancel = cancel;
            }

            if (!_cancel)
            {
                log.log("filter=>{0} lancement filtre", filter);
                coll.Filter = item =>
                {
                    if (cancel)
                        return false;
                    TrackListViewModel vitem = item as TrackListViewModel;
                    if (vitem == null) return false;



                    //if (Regex.IsMatch(filter, @"[0-5]+\.?[0-5]?") || Regex.IsMatch(filter, @"\.[0-5]?"))
                    //    return vitem.Classement.StartsWith(filter);
                    bool ok = true;
                    var name = vitem.Name.Trim().ToLower().removeAccent();
                    var artist = vitem.Artist.Trim().ToLower().removeAccent();
                    var album = vitem.Album.Trim().ToLower().removeAccent();
                    List<string> paths = null;

                    var classement = vitem.Classement;
                    foreach (string str in tab)
                    {
                        if (!ok)
                            return false;
                        if (string.IsNullOrEmpty(str))
                            continue;
                        var str_ = str.Trim();
                        if (str_ == string.Empty)
                            continue;

                        ok = name.Contains(str_)
                            || artist.Contains(str_)
                            || album.Contains(str_)
                            || classement.StartsWith(str_);

                        if (!ok)
                        {
                            if (paths == null)
                            {
                                paths = new List<string>();
                                foreach (var f in vitem.Piece.Files)
                                {
                                    paths.Add(f.File.ToLower().removeAccent());
                                }
                            }

                            foreach (string path in paths)
                            {
                                if (path.Contains(str))
                                    return true;
                            }
                        }
                    }

                    return ok;

                };

                if (cancel)
                    log.log("filter=>{0} la tâche a été interrompue", filter);
            }
            else
            {
                log.log("filter=>{0} finalement pas de lancement", filter);
            }
            lock (_lock)
            {
                if (!cancel)
                {
                    if (work != null)
                    {
                        log.log("filter=>{0} application du filtre", filter);
                        work.Dispose();
                    }
                    else
                    {
                        log.log("filter=>{0} ben pourquoa le work était null ????", filter);
                    }
                    work = null;

                }
            }

            lock (_lock)
                cancel = false;

            log.log("filter=>{0} fin", filter);
        }




        private class FilterTask
        {
            public static ConfFilter conf = new ConfFilter();
            private ICollectionView coll;
            public readonly string filter0;
            public readonly bool filterNext;

            private string filter;
            private bool _cancel;
            private bool end;
            private Thread th;
            SimpleChrono log;
            public string step;
            private HashSet<int> l = new HashSet<int>();
            public FilterTask(string filter, bool filterNext, ICollectionView coll, SimpleChrono log)
            {
                this.filter0 = filter;
                this.filter = filter;
                this.filterNext = filterNext;

                this.coll = coll;
                this.log = log;
                step = "ini";
                th = new Thread(calc);
                th.Start();
            }

            public void cancel()
            {
                lock (_lock)
                    _cancel = true;
            }

            public bool End { get { return end; } }
            public bool Cancel { get { return _cancel; } }
            private bool toClear;

            private void calc()
            {
                step = "calc";
                try
                {
                    if (string.IsNullOrEmpty(filter) && !filterNext)
                    {
                        toClear = true;
                        apply();
                        return;
                    }
                    toClear = false;

                    filter = filter.Trim().ToLower().removeAccent();
                    //if (string.IsNullOrWhiteSpace(filter) && !filterNext && conf.includeVirtual && conf.includeVirtualArtist)
                    //{
                    //    clear(); 
                    //    return;
                    //}

                    var tab = filter.Split(' ');

                    int nb = 0;
                    int nbOk = 0;

                    foreach (TrackListViewModel vitem in coll.SourceCollection)
                    {
                        if (_cancel)
                            return;

                        if (filterNext && !vitem.PieceGen.IsNext)
                            continue;
                        if (conf.onlyMaster && vitem.Piece.Parent != null)
                            continue;
                        if (!filterNext)
                        {
                            if (vitem.PieceGen.Virtual && !conf.includeVirtual)
                                continue;
                            if (vitem.PieceGen.VirtualMode == pdb.gen.albums.virtualMode.artist && !conf.includeVirtualArtist)
                                continue;
                        }



                        bool ok = true;

                        if (conf.onlyId)
                        {
                            ok = filter == vitem.PieceId.ToString();
                        }
                        else
                        {

                            var name = vitem.Name.Trim().ToLower().removeAccent();
                            var artist = vitem.Artist.Trim().ToLower().removeAccent();
                            var album = vitem.Album.Trim().ToLower().removeAccent();
                            var masterAlbum = vitem.MasterAlbum.Trim().ToLower().removeAccent();
                            var classement = vitem.Classement;
                            List<string> paths = null;
                            foreach (string str in tab)
                            {
                                if (ok)
                                {
                                    if (string.IsNullOrEmpty(str))
                                        continue;
                                    var str_ = str.Trim();
                                    if (str_ == string.Empty)
                                        continue;

                                    ok = name.Contains(str_)
                                        || artist.Contains(str_)
                                        || album.Contains(str_)
                                        || masterAlbum.Contains(str_)
                                        || classement.StartsWith(str_)
                                        || (conf.includeId && str == vitem.PieceId.ToString())
                                        ;

                                    if (!ok)
                                    {
                                        if (paths == null)
                                        {
                                            paths = new List<string>();
                                            foreach (var f in vitem.Piece.Files)
                                            {
                                                paths.Add(f.File.ToLower().removeAccent());
                                            }
                                        }

                                        foreach (string path in paths)
                                        {
                                            if (path.Contains(str))
                                            {
                                                ok = true;
                                                break;
                                            }
                                        }
                                    }

                                }
                                else
                                    break;

                            }
                        }


                        nb++;
                        if (ok)
                        {
                            if (conf.family)
                            {
                                foreach (Piece p in vitem.PieceGen.Master)
                                {
                                    if (!filterNext)
                                    {
                                        if (p.Virtual && !conf.includeVirtual)
                                            continue;
                                        if (p.VirtualMode == pdb.gen.albums.virtualMode.artist && !conf.includeVirtualArtist)
                                            continue;
                                    }
                                    l.Add(p.PieceId);
                                }
                            }
                            else
                                l.Add(vitem.PieceId);

                            nbOk++;
                        }
                    }

                    log.log(string.Format("{0}/{1}", nbOk, nb));
                    // log.log(string.Format("calc:{0} item{1} {2} sélectionné{3}", nb, (nb > 1 ? "s" : ""), nbOk, (nbOk > 1 ? "s" : "")));   

                    lock (_lock)
                    {
                        if (_cancel)
                            return;
                    }


                    apply();


                }
                finally
                {
                    if (_cancel)
                    {
                        lock (_lock)
                            end = true;
                        log.log("tache terminée par cancel");
                    }
                }





            }

            private void applyImpl()
            {
                step = "apply";

                bool __cancel = _cancel;

                if (!__cancel)
                {
                    lock (_lock)
                        __cancel = _cancel;
                }

                if (__cancel)
                    return;
                step = "applyAppDispatcher";
                try
                {
                    if (toClear)
                    {
                        log.log("clear filter");
                        coll.Filter = null;
                        log.log("fin clear filter");
                        return;
                    }

                    if (work == null)
                    {
                        log.log("creation du tempo");
                        work = coll.DeferRefresh();
                    }
                    else
                    {
                        log.log("tempo déjà créé ");

                    }


                    coll.Filter = item =>
                    {
                        if (_cancel)
                            return false;

                        var t = item as TrackListViewModel;
                        if (t == null)
                            return false;
                        if (!l.Contains(t.PieceId))
                            return false;
                        return true;
                    };




                    if (!__cancel)
                    {
                        log.log("application");
                        work.Dispose();
                        work = null;
                        log.log("fin application");
                    }
                    else
                    {
                        log.log("abandon application");
                    }
                }
                finally
                {
                    lock (_lock)
                        end = true;
                    log.log("tache terminée par application");
                    // PlayerViewModel.Instance.makeResume();
                    //  PlayerViewModel.Instance.focusHelp();
                }
            }


            public void apply()
            {
                var client = new SimpleClient("FilterTask::apply()");
                App.Dispatch(() => { client.Start(); applyImpl(); client.End(); }, client);
            }

            public override string ToString()
            {
                return string.Format("en cours:{0} step:{1} end:{2} cancel:{3}", filter0, step, End, Cancel);
            }

        }


        public static void doFilter(ICollectionView coll, string filter)
        {
            SimpleChrono log = new SimpleChrono(string.Format("\tfilter=>{0}\t", filter), App.log);

            log.log("");
            lock (_lock)
            {
                bool _cancelCurrent = false;
                bool _same = false;

                if (filterTask != null)
                {
                    log.log(filterTask.ToString());
                }

                _cancelCurrent = filterTask != null && !filterTask.End;
                _same = _cancelCurrent && filterTask.filter0.Equals(filter) && filterTask.filterNext == Instance.FilterNext;
                if (_same)
                {
                    log.log("identique");
                    return;
                }
                else if (_cancelCurrent)
                {
                    log.log("abandon tâche en cours");
                    filterTask.cancel();
                }

                else
                {
                    log.log("verrou libre");
                }

                filterTask = new FilterTask(filter, Instance.filterOnlyNext, coll, log);

            }





        }



        //public void set(ItrackProvider provider)
        //{
        //    try
        //    {
        //        if (provider == null)
        //        {
        //            this.provider = null;
        //            this.currentPl = null;
        //            return;
        //        }
        //        else if (this.provider == null)
        //        {
        //            this.provider = provider;
        //            this.currentPl = provider.PlayList;
        //            this.tracks = provider.PresentationTracks;
        //        }

        //        else
        //        {
        //            if (provider.PlayList == currentPl || state == playerstate.stop)
        //            {
        //                this.provider = provider;
        //                this.currentPl = provider.PlayList;
        //                this.tracks = provider.PresentationTracks;
        //            }

        //            else
        //            {
        //                if (_real == null || _real.PlayList != provider.PlayList)
        //                {
        //                    this.provider = new HiddenPlayList(currentPl, tracks);
        //                    this._real = provider;
        //                }
        //                else
        //                {
        //                    this.provider = _real;
        //                }
        //            }
        //        }

        //        _positionstate = positionstate.free;
        //        if (currentPl == null)
        //        {
        //            CurrentTrack = null;
        //            stop();
        //            return;
        //        }

        //    }
        //    finally
        //    {
        //        OnPropertyChanged("State");
        //        OnPropertyChanged("SrcPlayPause");
        //    }
        //}
        //string _lastFilter = "";
        //public void doFilter()
        //{
        //    if (this.navAuto)
        //        doFilter(_lastFilter);
        //}

        public void doFilter(String filter)
        {
            //  this._lastFilter = filter;
            var provider = DisplayProvider;

            if (provider == null)
                return;
            provider.doFilter(filter);

        }

        private ItrackProvider DisplayProvider
        {
            get
            {
                if (provider == null)
                    return null;
                if (isHidden && _real != null)
                {
                    return _real;
                }
                return provider;
            }
        }

        private string resume;

        public void makeResume()
        {
            var client = new SimpleClient("PlayerViewModel::makeresume");
            App.Dispatch(() =>
                {
                    client.Start();
                    string newResume = resume;
                    try
                    {

                        IEnumerable items = null;
                        var provider = DisplayProvider;
                        if (provider == null)
                            return;
                        var tracks = provider.PresentationTracks;
                        int nbOrg = -1;
                        items = tracks;
                        if (items == null)
                            return;

                        var selected = provider.SelectedTracks;
                        if (selected.Count > 1)
                        {
                            items = selected;
                            nbOrg = 0;
                            foreach (TrackListViewModel t in tracks)
                                nbOrg++;
                        }
                        int nb = 0, nbSelected = 0, nbPresent = 0;
                        TimeSpan duration = new TimeSpan(), durationSelected = new TimeSpan(), durationPresent = new TimeSpan();
                        HashSet<int> h = new HashSet<int>();

                        foreach (TrackListViewModel track in items)
                        {
                            if (!h.Add(track.PieceGen.MasterId))
                                continue;
                            nb++;
                            duration += track.Duration;
                            if (track.Enabled)
                            {
                                nbSelected++;
                                durationSelected += track.Duration;
                            }
                            if (true == track.Exists)
                            {
                                nbPresent++;
                                durationPresent += track.Duration;
                            }
                        }

                        ITextWriter sb = new pdb.util.StringBuilder();
                        sb.Append(nb);
                        sb.Append(" ");
                        sb.Append("elt");
                        if (nb > 1)
                            sb.Append("s");
                        if (nbOrg >= 0)
                        {
                            sb.Append(" sur ");
                            sb.Append(nbOrg);
                            sb.Append(",");
                        }
                        sb.Append(" ");
                        humanDuration(sb, duration);
                        sb.Append(" ( ");
                        sb.Append(nbSelected);
                        sb.Append(" ");
                        sb.Append("elt");
                        if (nbSelected > 1)
                            sb.Append("s");
                        sb.Append(" ");
                        humanDuration(sb, durationSelected);

                        sb.Append(" )");

                        if (nbPresent > 0)
                        {
                            sb.Append(" presents: ");
                            sb.Append(nbPresent);
                            sb.Append(" ");
                            sb.Append("elt");
                            if (nb > 1)
                                sb.Append("s");
                            sb.Append(" ");
                            humanDuration(sb, durationPresent);
                        }
                        sb.Append("\t");

                        var currentTrack = TrackListViewModel.HumanSelected;
                        if (currentTrack != null)
                        {
                            humanSize(sb, currentTrack.Size);
                            sb.Append(" ");
                            sb.Append(currentTrack.Piece.Files.PathReduc);
                        }

                        newResume = sb.ToString();

                    }
                    catch (Exception e0)
                    {
                        App.log.log(e0.ToString());
                    }
                    finally
                    {

                        if (newResume != resume)
                        {
                            client.log("end before event");
                            resume = newResume;
                            if (resumeChange != null)
                            {
                                try
                                {
                                    resumeChange(this, EventArgs.Empty);
                                }
                                catch (Exception ex)
                                {
                                    App.log.log(ex.ToString());
                                }
                            }
                        }
                        client.End(); 

                    }


                }, client);
        }

        public string Resume
        {
            get
            {
                //if (resume == null)
                //    makeResume();
                return resume;
            }
        }

        private void humanSize(ITextWriter sb, long size)
        {
            sb.Append(size.HumanReadableSize(-1));
        }

        private void humanDuration(ITextWriter sb, TimeSpan duration)
        {
            TimeSpan courant = duration;
            TimeSpan reste = new TimeSpan();
            TimeSpan ts = new TimeSpan();
            double days = duration.TotalDays;
            int idays = (int)days;

            double hours = duration.TotalHours;
            int ihours = (int)hours;


            if (days >= 1)
            {
                ts = new TimeSpan(idays, 0, 0, 0);
                reste = courant.Subtract(ts);
                sb.Append(idays);
                sb.Append("j");
                //if (idays > 1)
                //    sb.Append("s");

                hours = reste.TotalHours;
                ihours = (int)hours;

                if (ihours == 0)
                    return;
                sb.Append(" ");
                sb.Append(ihours);
                sb.Append("h");
                //if (ihours > 1)
                //    sb.Append("s");
                return;
            }

            double mins = duration.TotalMinutes;
            int imins = (int)mins;

            if (hours > 1)
            {
                ts = new TimeSpan(ihours, 0, 0);
                reste = courant.Subtract(ts);
                sb.Append(ihours);
                sb.Append("h");
                //if (ihours > 1)
                //    sb.Append("s");

                mins = reste.TotalMinutes;
                imins = (int)mins;

                if (imins == 0)
                    return;
                sb.Append(" ");
                sb.Append(imins);
                sb.Append("m");
                //if (imins > 1)
                //    sb.Append("s");
                return;

            }

            ts = new TimeSpan(0, imins, 0);
            reste = courant.Subtract(ts);
            sb.Append(imins);
            sb.Append("m");
            //if (imins > 1)
            //    sb.Append("s");

            double secs = reste.TotalSeconds;
            int isec = (int)secs;


            if (isec == 0)
                return;
            sb.Append(" ");
            sb.Append(isec);
            sb.Append("s");
            //if (imins > 1)
            //    sb.Append("s");
            return;



        }

        # region infos

        private bool transitionState = false;
        public bool TransitionState { set { transitionState = value; OnPropertyChanged("SrcPlayPause"); } }

        public String SrcPlayPause
        {
            get
            {
                if (isHidden)
                    return @"images\Toolbar-MP3-Stop-icon.png";
                if (state != playerstate.play)
                    return @"images\Toolbar-MP3-Play-icon.png";
                return @"images\Toolbar-MP3-Pause-icon.png";
            }
        }


        //private int indexList = -1;
        //public int IndexList
        //{
        //    get { return indexList; }
        //    set
        //    {
        //        if (value != indexList)
        //        {
        //            indexList = value;
        //            this.OnPropertyChanged("IndexList");
        //        }
        //    }
        //}

        private double position = 0;
        public double Position
        {
            get
            {

                return position;
            }
            set
            {
                if (value != position)
                {
                    position = value;
                    Player.Position = value;
                    this.OnPropertyChanged("Position");
                }
            }
        }

        private String currentName;
        public String CurrentName
        {
            get { return currentName; }
            set
            {
                if (value != currentName)
                {
                    currentName = value;
                    this.OnPropertyChanged("CurrentName");
                }
            }
        }

        private double volume = 0.5;
        public double Volume
        {
            get { return volume; }
            set
            {
                if (value != volume)
                {
                    volume = value;
                    Player.Volume = value;
                    OnPropertyChanged("Volume");
                }
            }
        }


        private String currentAuthorAlbum;
        public String CurrentAuthorAlbum
        {
            get { return currentAuthorAlbum; }
            set
            {
                if (value != currentAuthorAlbum)
                {
                    currentAuthorAlbum = value;
                    this.OnPropertyChanged("CurrentAuthorAlbum");
                }
            }
        }

        private TimeSpan sinceBeginReadTrack;
        public TimeSpan ElapsedTime
        {
            get { return sinceBeginReadTrack; }
            set
            {
                if (value != sinceBeginReadTrack)
                {
                    sinceBeginReadTrack = value;
                    this.OnPropertyChanged("ElapsedTime");
                }
            }
        }

        private TimeSpan remainingTime;
        public TimeSpan RemainingTime
        {
            get { return remainingTime; }
            set
            {
                if (value != remainingTime)
                {
                    remainingTime = value;
                    this.OnPropertyChanged("RemainingTime");
                }
            }
        }

        private TimeSpan length;
        public TimeSpan Length
        {
            get { return length; }
            set
            {
                if (value != length && value > TimeSpan.FromMilliseconds(100))
                {
                    length = value;
                    this.OnPropertyChanged("Length");
                }
            }
        }
        #endregion
    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\PlayListViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Windows.Threading;
using pdb.db.obj;
using pdb.gen;
using pdb.gen.conf;
using pdb.obj;
using pdb.util;
using pdb.gen.albums;
using System.Linq;


namespace pdb.player.ViewModel
{
    public class PlayListViewModel : BibViewModelTreelBase, INotifyCollectionChanged, IEnumerable<PlayListViewModel>
    {
        protected Logger log;
        private object _lock = new object();
        private PlayList pl;
        private List<BibViewModelBase> _childs = new List<BibViewModelBase>();
        protected List<PlayListViewModel> _playlists = new List<PlayListViewModel>();
        //  private List<PlayListViewModel> __playlists = new List<PlayListViewModel>(); 
        private List<TrackListViewModel> _tracks = new List<TrackListViewModel>();

        private static List<IRedraw> gui = new List<IRedraw>();
        internal static void addDrow(IRedraw _gui) { gui.Add(_gui); }
        private static bool _log;
        public static bool Log { set { _log = value; } }
#if EXPORT
        #region export
        private List<TrackListViewModel> exportTracks = new List<TrackListViewModel>();
        public List<TrackListViewModel> ExportTracks { get { return exportTracks; } set { exportTracks = value; } }
        #endregion
#endif
        private bool _main = true;
        public void setSecondary() { _main = false; }


        private static void redraw()
        {
            // foreach (IRedraw _gui in gui)  _gui.redraw();
        }

        #region optim recherche
        //private static BgDictString<PlayListViewModel> dictPl = new BgDictString<PlayListViewModel>();
        //private static BgDictString<TrackListViewModel> dictT = new BgDictString<TrackListViewModel>();
        //protected static void recordPl(PlayListViewModel pl)
        //{
        //    dictPl.Add(pl.pl.getPath(), pl);
        //}

        //protected static string getKey(PlayListViewModel pl, int id)
        //{
        //    return pl.pl.getPath() + "|" + id;
        //}

        private HashSet<int> hs = new HashSet<int>();

        protected void recordTrack(TrackListViewModel t)
        {
            hs.Add(t.PieceId);
        }

        public bool contains(int id)
        {
            return hs.Contains(id);
        }

        //public static bool containsTrack(TrackListViewModel t, PlayListViewModel pl)
        //{
        //    return dictT.ContainsKey(getKey(pl, t.PieceId));
        //}

        protected void removeTrack(TrackListViewModel t)
        {
            hs.Remove(t.PieceId); // dictT.Remove(getKey(pl, t.PieceId));
        }

        //public static TrackListViewModel findTrack(PlayListViewModel pl, int id)
        //{
        //    var key = getKey(pl, id);
        //    if (dictT.ContainsKey(key))
        //        return dictT[key];
        //    return null;
        //}

        //public TrackListViewModel FindTrack(int id)
        //{
        //    return findTrack(this, id);
        //}

        public static void resetExport(exportState state)
        {
            misc.log("resetExport {0}", state);
            try
            {
                foreach (var t in TrackListViewModel.Dict.Values)
                    t.ExportStatus = state;
            }
            catch (Exception ex)
            {
                misc.log(ex.ToString());
            }
        }

        public static void setExport(Piece p, exportState state)
        {
            if (_selectedPl != null)
            {

                try
                {
                    var t = TrackListViewModel.getOrCreate(p); // findTrack(_selectedPl, id);
                    if (t != null)
                    {
                        t.ExportStatus = state;
                    }

                    //foreach (TrackListViewModel t in _selectedPl._tracks)
                    //{
                    //    if (t.PieceId == id)
                    //        t.refresh();
                    //}
                }
                //foreach (TrackListViewModel t in dictT.Values)
                //{
                //    if (t.PieceId == id)
                //        t.ExportStatus = state;
                //}

                catch (Exception ex)
                {
                    misc.log(ex.ToString());
                }
            }


        }

        //protected bool contains( int id)
        //{
        //    //return hs.Contains(id); 
        //    //var key = getKey(pl, id);
        //    //if (dictT.ContainsKey(key))
        //    //    return true;
        //    //return false;
        //}


        #endregion


        static PlayListViewModel()
        {
            //  App.refresh += new EventHandler(App_refresh);
        }

        static void App_refresh(object sender, EventArgs e)
        {
            //var pl = _selectedPl;
            //if (pl != null)
            //    pl.refresh(); 
        }

        public bool isSubList(string name)
        {
            return pl.isSubList(name);
        }

        public bool isSubList(PlayListViewModel pl)
        {
            return this.pl.isSubList(pl.PlayList);
        }

        public void init()
        {
            _childs.Clear();
            _playlists.Clear();
            _tracks.Clear();

            foreach (PlayList sublist in pl.PlayLists)
            {
                var _pl = new PlayListViewModel(sublist, this);
                _childs.Add(_pl);
                _playlists.Add(_pl);
                //  recordPl(_pl);
            }
            foreach (Piece track in pl.Items)
            {
                if (track.Virtual && !PlayerViewModel.Instance.WithVirtualAlbum)
                    continue;
                TrackListViewModel _t = null;
                if (_main)
                    _t = TrackListViewModel.getOrCreate(track); // new TrackListViewModel(track, this);
                else
                    _t = TrackListViewModel.getOrCreateA(track);
                _childs.Add(_t);
                _tracks.Add(_t);
                recordTrack(_t);
            }



            allTracks = new AllTracksViewModel(this, false, false);
        }


        public void Synch()
        {
            var hsnew = new HashSet<int>();
            foreach (Piece track in pl.Items)
            {
                hsnew.Add(track.PieceId);
                if (!hs.Contains(track.PieceId))
                {
                    log.log("Sync {0} ajout {1}", this, track);
                    TrackListViewModel _t = null;
                    if (_main)
                        _t = TrackListViewModel.getOrCreate(track); // new TrackListViewModel(track, this);
                    else
                        _t = TrackListViewModel.getOrCreateA(track);
                    _childs.Add(_t);
                    _tracks.Add(_t);
                }
            }

            foreach (int oldId in hs)
            {
                if (!hsnew.Contains(oldId))
                {
                    TrackListViewModel _t = null;
                    if (_main)
                        _t = TrackListViewModel.get(oldId); // new TrackListViewModel(track, this);
                    else
                        _t = TrackListViewModel.getA(oldId);
                    string desc = oldId.ToString();
                    if (_t != null)
                        desc = _t.ToString();
                    log.log("Sync {0} suppression {1}", this, desc);
                    if (_t != null)
                    {
                        _childs.Remove(_t);
                        _tracks.Remove(_t);
                    }
                }
            }

            hs = hsnew;
        }


        public PlayListViewModel get(string name)
        {
            return get(name, false);
        }

        public PlayListViewModel get(string name, bool create)
        {
            foreach (var pl in _playlists)
                if (pl.Name == name)
                    return pl;
            if (!create)
                return null;
            var _pl = new PlayList(name, this.pl);
            var _new = new PlayListViewModel(_pl, this);
            _playlists.Add(_new);
            _childs.Add(_new);
            // recordPl(_new);
            //_new.PropertyChanged += _pl_PropertyChanged;
            //_new.CollectionChanged += _pl_CollectionChanged; 
            OnCollectionChange(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, _new));

            //  redraw(); 
            return _new;
        }


        private PlayListViewModel _getFromPath(string[] tab, int index)
        {
            for (; index < tab.GetLength(0); index++)
            {
                string dir = tab[index];
                if (string.IsNullOrEmpty(dir))
                    continue;
                if (dir.Equals(Name))
                    continue;
                var sub = get(dir, false);
                if (sub == null)
                    return null;
                return sub._getFromPath(tab, index + 1);
            }

            return this;

        }

        public PlayListViewModel getFromPath(string path)
        {
            var tab = path.Split(PlayListComposite.SEP);
            return _getFromPath(tab, 0);
        }

        public List<TrackListViewModel> Tracks { get { return _tracks; } }
        private AllTracksViewModel allTracks;
        public AllTracksViewModel AlltracksVm { get { return allTracks; } }

        //private AllTracksViewModel alltracksVmd;
        //public AllTracksViewModel AlltracksVmd
        //{
        //    get
        //    {
        //        if (alltracksVmd == null)
        //            alltracksVmd = new AllTracksViewModel(this, true, false);
        //        return alltracksVmd;

        //    }
        //}

        //private AllTracksViewModel alltracksFather;
        //public AllTracksViewModel AllTrackFather
        //{
        //    get
        //    {
        //        if (alltracksFather == null)
        //            alltracksFather = new AllTracksViewModel(this,null, true);
        //        return alltracksFather;
        //    }
        //}


        //private AllTracksViewModel alltracksFatherDisabled;
        //public AllTracksViewModel AllTrackFatherDisabled
        //{
        //    get
        //    {
        //        if (alltracksFatherDisabled == null)
        //            alltracksFatherDisabled = new AllTracksViewModel(this, true, true);
        //        return alltracksFatherDisabled;
        //    }
        //}

        public PlayListViewModel(PlayList pl)
            : this(pl, null)
        {
        }

        private PlayListViewModel(PlayList pl, PlayListViewModel parent)
            : base(pl, parent)
        {
            this.pl = pl;
            log = Logger.getLogger(pl.getPath());
            init();

        }
        public PlayList PlayList { get { return pl; } }

        public string Name
        {
            get
            {
                return pl.Name;
            }
            set
            {
                if (value != Name)
                {
                    pl.Name = value;
                    OnPropertyChanged("Name");
                }
            }
        }

        #region selected

        /// <summary>
        /// element sélectionné. Répercuté jusqu'à la racine de l'arbre
        /// </summary>
        private static PlayListViewModel _selectedPl;
        public static PlayListViewModel SelectedPlayList
        {
            get
            {
                return _selectedPl;
            }
            private set
            {
                if (_selectedPl == value)
                    return;
                var _oldpl = _selectedPl;
                _selectedPl = value;
                if (_selectedPl != null)
                {
                    _selectedPl.IsSelected = true;
                    _selectedPl.IsExpanded = true;
                }
                OnSelectedPlayListChange(_oldpl);
            }
        }

        public static void initSelected(string strPl)
        {
            if (!string.IsNullOrEmpty(strPl))
            {
                var selected = App.bib.Root.getFromPath(strPl);

                if (selected != null)
                    PlayListViewModel.SelectedPlayList = selected;

            }
        }

        public override bool IsSelected
        {
            get
            {
                return base.IsSelected;
            }
            set
            {
                base.IsSelected = value;

                if (_isSelected)
                {
                    SelectedPlayList = this;
                }

            }
        }

        #endregion

        public static event EventHandler selectedPlaylistChange;
        private static void OnSelectedPlayListChange(PlayListViewModel oldPl)
        {
            if (selectedPlaylistChange != null)
                selectedPlaylistChange(oldPl, EventArgs.Empty);
        }


        #region INotifyCollectionChanged Members

        public event NotifyCollectionChangedEventHandler CollectionChanged;

        protected void OnCollectionChange(NotifyCollectionChangedEventArgs e)
        {
            var client = new SimpleClient("PlayListViewModel::OnCollectionChange", log);
            // Be nice - use BlockReentrancy like MSDN said
            lock (_lock)
            {
                client.log("_lock");
                var eventHandler = CollectionChanged;
                if (eventHandler != null)
                {
                    Delegate[] delegates = eventHandler.GetInvocationList();
                    // Walk thru invocation list

                    foreach (NotifyCollectionChangedEventHandler handler in delegates)
                    {

                        App.Dispatch(() => { handler(this, e); client.log("handler"); }, client);
                        //try
                        //{
                        //    var dispatcherObject = handler.Target as DispatcherObject;
                        //    // If the subscriber is a DispatcherObject and different thread
                        //    if (dispatcherObject != null && dispatcherObject.CheckAccess() == false)
                        //    // Invoke handler in the target dispatcher's thread
                        //    {
                        //        var ope =
                        //        dispatcherObject.Dispatcher.BeginInvoke(App.DISPATCHER_PRIORITY,
                        //                           handler, this, e);
                        //        ope.Completed += ope_Completed;
                        //    }
                        //    else // Execute handler as is
                        //        handler(this, e);
                        //}
                        //catch (Exception ex)
                        //{
                        //    App.log.log(ex.ToString());
                        //}
                    }
                }
            }
            client.End();

            //var dispatcher = Dispatcher.CurrentDispatcher;
            //if (dispatcher.CheckAccess())
            //{
            //    if (this.CollectionChanged == null)
            //    {
            //        int toto = 0;
            //    }
            //    else
            //        this.CollectionChanged(this, e);               
            //}
            //else
            //    dispatcher.Invoke(new Action<NotifyCollectionChangedEventArgs>(OnCollectionChange), e); 

        }

        void ope_Completed(object sender, EventArgs e)
        {
            App.log.log(string.Format("PlayListViewModel::OnCollectionChange {0} CollectionChanged completé", sender));
        }

        #endregion

        public PlayListViewModel getOrCreatePlayList(string name)
        {

            var found = _playlists.Find(pl => pl.Name == name);
            if (found == null)
            {
                found = AddPlayList(name);
            }

            return found;
        }

        public PlayListViewModel AddPlayList(string name)
        {
            var subModel = new PlayList(name, pl);
            var sub = new PlayListViewModel(subModel, this);
            _childs.Add(sub);
            _playlists.Add(sub);
            //recordPl(sub);
            //   __playlists.Add(sub);
            //sub.PropertyChanged += _pl_PropertyChanged;
            //sub.CollectionChanged += _pl_CollectionChanged; 
            OnCollectionChange(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, sub));
            // PLayLists.Add(sub); 
            // redraw(); 
            return sub;
        }

        public TrackListViewModel AddTrack(IFile file, bool signal)
        {
            // var piece = App.Db.getPiece(location);
            return AddTrack(file as Piece, signal);

        }

        private TrackListViewModel Get(IFile file)
        {
            var t = TrackListViewModel.get(file.PieceId);
            if (t == null)
                t = AddTrack(file as Piece, false);
            return t;
        }

        private TrackListViewModel Get(Piece file)
        {
            var t = TrackListViewModel.get(file.PieceId);
            if (t == null)
                t = AddTrack(file, false);
            return t;
        }

        public TrackListViewModel AddTrack(Piece piece, bool signal)
        {
            if (_log) log.log("{0} AddTrack {1}", pl.getPath(), piece.ToString());
            if (hs.Contains(piece.PieceId))
            {
                App.Instance.InfoIHm(string.Format("le morceau {0} est déjà présent dans la liste {1}", piece, this), "Ajout dans la playlist");
                return null;
            }
            //var tl = new TrackList(piece);
            pl.add(piece);
            //var p = piece.Track;
            //CPiece cPiece = null;
            //if (p is CPiece)
            //    cPiece = p as CPiece;

            //else if (p is TrackListViewModel)
            //{
            //    var pp = ((TrackListViewModel)p).Piece;
            //    cPiece = pp as CPiece;
            //}


            //if (cPiece != null)
            //    pl.addPiece(cPiece);
            var vm = TrackListViewModel.getOrCreate(piece); // new TrackListViewModel(tl, this);
            _childs.Add(vm);
            _tracks.Add(vm);
            recordTrack(vm);
            //  vm.PropertyChanged += _pl_PropertyChanged;
            if (signal)
            {
                //OnCollectionChange(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, vm));
                AlltracksVm.refresh();
                //if (alltracksVmd != null)
                //    alltracksVmd.refresh();
                redraw();
            }

            return vm;
        }

        public void RemoveTrack(TrackListViewModel tl, bool signal)
        {
            if (_log) log.log("{0} RemoveTrack {1}", pl.getPath(), tl.Piece);
            _childs.Remove(tl);
            _tracks.Remove(tl);
            removeTrack(tl);


            tl.remove();
            //TODO faire la suppression de l'item de liste org

            if (signal)
            {
                // OnCollectionChange(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove, tl));
                AlltracksVm.refresh();
                //if (alltracksVmd != null)
                //    alltracksVmd.refresh();
                redraw();
            }
        }

        private void insert(TrackListViewModel k, List<IFile> newElements)
        {
            int indexInsert = k.Index - 1;
            if (indexInsert < 0)
                indexInsert = 0;
            if (indexInsert > newElements.Count)
                indexInsert = newElements.Count;
            newElements.Insert(indexInsert, k);
        }

        private void insert2(TrackListViewModel k, List<Piece> newElements)
        {
            int indexInsert = k.Index2 - 1;
            if (indexInsert < 0)
                indexInsert = 0;
            if (indexInsert > newElements.Count)
                indexInsert = newElements.Count;
            newElements.Insert(indexInsert, k.PieceGen);
        }
        //  private bool filterNext; 
        public void mergeList(ICollection<IFile> newElements_, IAbortTask writer)
        {
            lock (Consolid.Lock)
            {
                lock (Albums.Lock)
                {
                    var tt = TrackListViewModel.HumanSelected;
                    if (tt != null)
                    {
                        tt.refresh();
                        //var g = tt.Grouping; 
                        // tt.Grouping = tt.PieceGen.RankAlbumReverse.ToString();
                    }

                    bool isMe = PlayListViewModel.SelectedPlayList == null || PlayListViewModel.SelectedPlayList == this;
                    bool isAlbum = this.isSubList("album");
                    bool isGen = this.isSubList("gen");


                    var confalbum = App.gen.SortAlbumMode;
                    int stackBefore = 4;
                    if (confalbum != null && confalbum.stackBefore > 0)
                        stackBefore = confalbum.stackBefore;

                    // bool checkStack = (PlayListViewModel.SelectedPlayList == null || PlayListViewModel.SelectedPlayList == this) && isGen && !isAlbum && confalbum.stackEnabled;

                    int _indexAlbumRead = -1;
                    int _indexTrackRead = -1;
                    Album _currentAlbum = null;
                    TrackListViewModel current = TrackListViewModel.CurrentPlaying;
                    Album currentAlbum = null;
                    if (current != null)
                        currentAlbum = current.album;
                    var conf = CConf.ConfGen;
                    List<TrackListViewModel> toDelete = new List<TrackListViewModel>();
                    List<TrackListViewModel> toKeep = new List<TrackListViewModel>();

                    var newElements = new HashList<IFile>(newElements_);


                    BgDict<int, bool?> newElt = new BgDict<int, bool?>();
                    foreach (IFile elt in newElements_)
                    {
                        newElt[elt.PieceId] = false;
                    }

                    int indexAlbumOrg = -1;
                    int indexTrackOrg = -1;

                    int indexAlbumOrg2 = -1;
                    int indexTrackOrg2 = -1;
                    var tracks = _tracks;
                    //if (isMe)
                    //{
                    tracks = new List<TrackListViewModel>(_tracks);
                    tracks.Sort((x, y) => x.Index.CompareTo(y.Index));
                    // }

                    int count0 = _tracks.Count;
                    //  var limitList = CConf.ConfGen.LimitList;

                    foreach (TrackListViewModel tl in tracks)
                    {
                        if (tl.album != _currentAlbum)
                        {
                            _currentAlbum = tl.album;
                            _indexAlbumRead++;
                            _indexTrackRead = 0;
                        }
                        else
                            _indexTrackRead++;
                        var found = newElt[tl.PieceId] != null;
                        bool keep = false;
                        //if (isMe)
                        //{
                        if (isAlbum && currentAlbum == tl.album) // Equals(tl.Album))
                        {
                            keep = true;
                        }
                        else if (current != null && current.PieceId == tl.PieceId)
                        {
                            keep = true;
                            indexAlbumOrg = _indexAlbumRead;
                            indexTrackOrg = _indexTrackRead;
                        }
                        //}

                        newElt[tl.PieceId] = keep;


                        //if (current != null && !keep && tl.Location == current.Location)
                        //{
                        //    App.log.log("bizarre");
                        //}
                        if (!found)
                        {
                            if (keep)
                                toKeep.Add(tl);
                            else
                                toDelete.Add(tl);
                        }
                    }

                    //if (checkStack)
                    //{
                    _indexAlbumRead = -1;
                    _indexTrackRead = -1;
                    tracks.Sort((x, y) => x.Index2.CompareTo(y.Index2));
                    // }

                    foreach (TrackListViewModel tl in tracks)
                    {
                        if (tl.album != _currentAlbum)
                        {
                            _currentAlbum = tl.album;
                            _indexAlbumRead++;
                            _indexTrackRead = 0;
                        }
                        else
                            _indexTrackRead++;
                        var found = newElt[tl.PieceId] != null;


                        if (isAlbum && currentAlbum == tl.album) // Equals(tl.Album))
                        {

                        }
                        else if (current != null && current.PieceId == tl.PieceId)
                        {

                            indexAlbumOrg2 = _indexAlbumRead;
                            indexTrackOrg2 = _indexTrackRead;
                        }

                    }
                    //  }



                    //Addition
                    List<IFile> toAdd = new List<IFile>();
                    //if (limitList <= 0 || !_log)
                    //{
                    foreach (IFile elt in newElements)
                    {
                        if (writer.Aborted)
                            return;

                        bool found = hs.Contains(elt.PieceId); // contains(this, elt.PieceId);


                        if (!found)
                            toAdd.Add(elt);

                    }
                    //  log.log("mergeList::fin determination toAdd");

                    if (toAdd.Count > 0 && _log)
                        log.log("{0} {1} elt to add", this, toAdd.Count);

                    if (tracks.Count > 0 && toAdd.Count > 100) //&& filterNext == PlayerViewModel.Instance.FilterNext)
                    {
                        log.log("!!!!!!!!!!!!!!!{0} {1} elt to add c'est trop!", this, toAdd.Count);
                        try { toAdd.RemoveRange(100, toAdd.Count - 100); }
                        catch { toAdd.Clear(); }

                        //return;
                        //var l = new List<IFile>(100);
                        //for (int i = 0; i < 100; i++)
                        //    l.Add(toAdd[i]);
                        //toAdd = l;
                    }

                    if (tracks.Count > 0 && toDelete.Count > 0 && _log)
                        log.log("{0} {1} elt to delete", this, toDelete.Count);

                    if (toDelete.Count > 100) //&& filterNext == PlayerViewModel.Instance.FilterNext)
                    {
                        log.log("!!!!!!!!!!!!!!!{0} {1} elt toDelete c'est trop!", this, toDelete.Count);

                        try { toDelete.RemoveRange(100, toDelete.Count - 100); }
                        catch { toDelete.Clear(); }

                        // toDelete.Clear();
                        //var l = new List<TrackListViewModel>(100);
                        //for (int i = 0; i < 100; i++)
                        //    l.Add(toDelete[i]);
                        //toDelete = l;
                    }


                    int count = toAdd.Count;
                    for (int i = 0; i < count; i++)
                    {
                        if (writer.Aborted) return;

                        AddTrack(toAdd[i], false);
                    }

                    foreach (TrackListViewModel vm in toDelete)
                    {
                        if (writer.Aborted) return;
                        RemoveTrack(vm, false);
                    }
                    //  }


                    var newElements3 = newElements;

                    if (isGen)
                    {
                        HashSet<int> moved = new HashSet<int>();
                        HashSet<int> empeached = new HashSet<int>();
                        HashSet<int> unavailable = new HashSet<int>();
                        newElements3 = new HashList<IFile>();
                        // chercher le premier album non quarantaine
                        decimal min = int.MaxValue;
                        for (int i = 0; i < newElements.Count; i++)
                        {
                            var t = newElements[i] as Piece;
                            if (t.StackValue == 0 && t.PieceAlbum != null)
                            {
                                min = t.PieceAlbum.ClassementValueLight;
                                break;
                            }
                        }


                        int ifirst = 0;
                        bool b = false;
                        Album courant = null;
                        for (; ifirst < newElements.Count; ifirst++)
                        {
                            var t = newElements[ifirst] as Piece;
                            if (t.PieceAlbum == courant)
                                continue;
                            courant = t.PieceAlbum;

                            if (courant.Absent)
                            {
                                unavailable.Add(t.PieceAlbum.Next.MasterId);
                            }
                            else
                            {
                                if (courant.StackValue > 0 && courant.ClassementValueLightSt >= min) //  checkStack && courant.ClassementValueLightSt >= min)
                                {
                                    if (!b)
                                    {
                                        courant.Empeached1 = true;
                                        b = true;
                                    }

                                    moved.Add(t.PieceAlbum.Next.MasterId);
                                    empeached.Add(t.PieceAlbum.Next.MasterId);

                                    courant.Moved = true;
                                    courant.Empeached = true;


                                }
                                else break;
                            }


                        }

                        if (ifirst < newElements.Count) // && checkStack)
                        {
                            //  int i = 0;

                            //HashSet<Album> aux = new HashSet<Album>();
                            //foreach (Album album in empeached)
                            //{
                            //    aux.Add(album); 
                            //}
                            //for (; i < newElements.Count; i++)
                            //{
                            //    var t = newElements[i] as Piece;
                            //    var a = t.PieceAlbum;
                            //    if (a == null)
                            //        continue;
                            //    if (aux.Add(a))
                            //    {
                            //        a.empeachedDecrement(); 
                            //    }
                            //}
                            HashSet<Album> albs = new HashSet<Album>();
                            //Album alb = null;
                            //Album alb2 = null;
                            //Album alb3 = null;
                            //Album alb4 = null;

                            courant = null;
                            int i = ifirst;
                            while (true)
                            {
                                if (i >= newElements.Count)
                                    break;
                                var t = newElements[i] as Piece;
                                if (t.StackValue > 0 && t.ClassementValueLightSt >= min)
                                {
                                    moved.Add(t.PieceAlbum.Next.MasterId);
                                    t.Moved = true;
                                    if (t.isEmpeached())
                                    {
                                        empeached.Add(t.PieceAlbum.Next.MasterId);
                                    }

                                }
                                else if (t.AlbumAbsent)
                                { }// moved.Add(t.Album); 
                                else
                                {
                                    var _alb = t.PieceAlbum;
                                    if (courant != _alb)
                                    {
                                        courant = _alb;

                                        if (!albs.Contains(courant))
                                        {
                                            if (albs.Count < stackBefore)
                                            {
                                                albs.Add(courant);
                                            }
                                            else
                                                break;
                                        }




                                        //if (alb == null)
                                        //    alb = courant;
                                        //else if (alb2 == null)
                                        //    alb2 = courant;
                                        //else if (alb3 == null)
                                        //    alb3 = courant;
                                        //else if (alb4 == null)
                                        //    alb4 = courant;
                                        //else
                                        //    break;
                                    }

                                    newElements3.Add(t);
                                }
                                i++;
                            }

                            for (i = 0; i < newElements.Count; i++)
                            {
                                var t = newElements[i] as Piece;
                                var alb_ = t.PieceAlbum;
                                if (alb_ == null)
                                    continue;

                                if (!albs.Contains(alb_))
                                    newElements3.Add(t);
                                //if (alb_ != alb && alb_ != alb2 && alb_ != alb3 && alb_ != alb4)
                                //    newElements3.Add(t);
                            }
                        }
                        else
                            newElements3 = newElements;

                        allTracks.setNbAlbum(unavailable.Count, empeached.Count, moved.Count);



                    }
                    else
                    {
                        allTracks.setNbAlbum(-1, -1, -1);
                    }




                    var newElements2 = new List<IFile>(newElements3);
                    List<Piece> stackSorted = null;
                    //if (checkStack)
                    //{
                    stackSorted = new List<Piece>();
                    foreach (IFile iFile in newElements2)
                    {
                        //var t = Get(iFile); // TrackListViewModel.get(iFile.PieceId);// findTrack(this, iFile.PieceId);
                        //if (t != null)
                        //{
                        stackSorted.Add(iFile as Piece);
                        // }
                    }

                    stackSorted.Sort(new PieceStackCmp());

                    //}
                    foreach (IFile iFile in newElements3)
                    {
                        var keep = newElt[iFile.PieceId];
                        var t = Get(iFile); // TrackListViewModel.get(iFile.PieceId);// findTrack(this, iFile.PieceId);
                        if (t != null)
                        {
                            if (true == keep)
                            {
                                int index0 = t.Index - 1;
                                int index1 = newElements2.IndexOf(iFile);
                                if (index1 > index0)
                                {
                                    newElements2.Remove(iFile);
                                    insert(t, newElements2);
                                }

                                //if (checkStack)
                                //{
                                int index20 = t.Index2 - 1;
                                int index21 = stackSorted.IndexOf(t.PieceGen);
                                if (index21 > index20)
                                {
                                    stackSorted.Remove(t.PieceGen);
                                    insert2(t, stackSorted);
                                }
                                // }
                            }

                        }
                    }

                    foreach (TrackListViewModel k in toKeep)
                    {
                        insert(k, newElements2);
                    }

                    //if (checkStack)
                    //{
                    foreach (TrackListViewModel k in toKeep)
                    {
                        insert2(k, stackSorted);
                    }
                    // }

                    if (indexAlbumOrg >= 0)
                    {
                        _indexAlbumRead = -1;
                        _currentAlbum = null;
                        int newIndex = 0;

                        bool dontTouch = false;

                        for (int i = 0; i < newElements2.Count; i++)
                        {
                            var ifile = newElements2[i] as Piece;
                            if (ifile == null)
                            {
                                dontTouch = true;
                                break;
                            }
                            if (ifile.PieceAlbum != _currentAlbum)
                            {
                                _indexAlbumRead++;
                                _currentAlbum = ifile.PieceAlbum;
                            }
                            if (_currentAlbum == currentAlbum)
                            {
                                dontTouch = true;
                                break;
                            }

                            if (_indexAlbumRead == indexAlbumOrg)
                            {
                                newIndex = i;
                                break;
                            }
                        }


                        if (!dontTouch)
                        {
                            var currentFile = newElements2.Find(p => p.PieceId == current.PieceId);
                            if (currentFile != null)
                            {

                                newElements2.Remove(currentFile);
                                newElements2.Insert(newIndex, currentFile);
                            }
                        }
                    }



                    if (indexAlbumOrg2 >= 0)
                    {
                        _indexAlbumRead = -1;
                        _currentAlbum = null;
                        int newIndex = 0;

                        bool dontTouch = false;

                        for (int i = 0; i < stackSorted.Count; i++)
                        {
                            var ifile = stackSorted[i];
                            if (ifile == null)
                            {
                                dontTouch = true;
                                break;
                            }
                            if (ifile.PieceAlbum != _currentAlbum)
                            {
                                _indexAlbumRead++;
                                _currentAlbum = ifile.PieceAlbum;
                            }
                            if (_currentAlbum == currentAlbum)
                            {
                                dontTouch = true;
                                break;
                            }

                            if (_indexAlbumRead == indexAlbumOrg2)
                            {
                                newIndex = i;
                                break;
                            }
                        }


                        if (!dontTouch)
                        {
                            var currentFile = stackSorted.Find(p => p.PieceId == current.PieceId);
                            if (currentFile != null)
                            {
                                stackSorted.Remove(currentFile);
                                stackSorted.Insert(newIndex, currentFile);
                            }
                        }

                    }




                    int index = 1;
                    var rankMax = 0;
                    for (int i = 0; i < newElements3.Count; i++)
                    {
                        var ifile = newElements2[i];

                        var t = Get(ifile); // TrackListViewModel.get(ifile.PieceId); // findTrack(this, ifile.PieceId);
                        if (t == null)
                        {
                            App.log.log("file ID {0} non trouvé dans {1} {2}", ifile.PieceId, this, ifile.Location);

                        }
                        else
                        {
                            if (isMe)
                            {
                                var rank = t.RankAlbum;
                                if (rank > rankMax)
                                    rankMax = rank;


                                //var keep = newElt[ifile.PieceId];
                                //if (true != keep)
                                t.Index = index;

                                // t.Grouping = t.PieceGen.RankAlbumReverse.ToString(); 
                                if (i == 0)
                                {
                                    t.refresh();
                                    // var g = t.Grouping; 
                                }
                            }
                        }
                        index++;
                    }

                    if (isMe)
                        Albums.RankZero = rankMax + 1;

                    //if (checkStack)
                    //{
                    index = 1;
                    for (int i = 0; i < stackSorted.Count; i++)
                    {
                        var t = Get(stackSorted[i]); // TrackListViewModel.get(stackSorted[i].PieceId); // findTrack(this, stackSorted[i].PieceId);
                        if (t == null)
                            continue;

                        //var keep = newElt[ifile.PieceId];
                        //if (true != keep)
                        t.Index2 = index;
                        // t.Grouping = t.PieceGen.RankAlbumReverse.ToString(); 
                        if (i == 0)
                        {
                            t.refresh();
                            // var g = t.Grouping; 
                        }

                        index++;
                    }
                    // }

                    if (current != null && current.Index > 1)
                    {
                        App.log.log("le courant a l'index {0} {1}", current.Index, current);

                        int index1 = -1;
                        for (int i = 0; i < newElements.Count; i++)
                        {
                            if (newElements[i].PieceId == current.PieceId) { index1 = i; break; }
                        }

                        int index2 = -1;
                        for (int i = 0; i < newElements2.Count; i++)
                        {
                            if (newElements2[i].PieceId == current.PieceId) { index2 = i; break; }
                        }

                        int index3 = -1;
                        for (int i = 0; i < newElements3.Count; i++)
                        {
                            if (newElements3[i].PieceId == current.PieceId) { index3 = i; break; }
                        }
                        App.log.log("indexes {0} {1} {2}", index1, index2, index3);

                    }

                    //if (limitList > 0)
                    //{
                    //    toAdd.Clear();
                    //    toDelete.Clear();
                    //    bool onlyNext = App.gen.FilterNext;
                    //    var list = new List<TrackListViewModel>();
                    //    foreach (IFile p in newElements3)
                    //    {
                    //        var t = Get(p); // TrackListViewModel.get(p.PieceId);
                    //        if (onlyNext && !t.PieceGen.IsNext)
                    //            continue;
                    //        list.Add(t);
                    //    }
                    //    list.Sort((x, y) => x.Index.CompareTo(y.Index));
                    //    if (list.Count > limitList)
                    //    {
                    //        list = list.GetRange(0, limitList);
                    //    }

                    //    var hs = new HashSet<int>();
                    //    foreach (TrackListViewModel t in _tracks)
                    //    {
                    //        hs.Add(t.PieceId);
                    //    }

                    //    var hsNew = new HashSet<int>();
                    //    foreach (TrackListViewModel t in list)
                    //    {
                    //        hsNew.Add(t.PieceId);
                    //        if (!hs.Contains(t.PieceId))
                    //        {
                    //            toAdd.Add(t);
                    //        }
                    //    }

                    //    foreach (TrackListViewModel t in _tracks)
                    //    {
                    //        if (!hsNew.Contains(t.PieceId))
                    //        {
                    //            toDelete.Add(t);
                    //        }
                    //    }


                    //    foreach (TrackListViewModel vm in toAdd)
                    //    {
                    //        if (writer.Aborted) return;

                    //        AddTrack(vm, false);
                    //    }

                    //    foreach (TrackListViewModel vm in toDelete)
                    //    {
                    //        if (writer.Aborted) return;
                    //        RemoveTrack(vm, false);
                    //    }
                    //}
                }

                //if (toAdd.Count > 0 || toDelete.Count > 0)
                //{
                AlltracksVm.refresh();
                //if (alltracksVmd != null)
                //    alltracksVmd.refresh();
                //if (alltracksFather != null)
                //    alltracksFather.refresh();
                //if (alltracksFatherDisabled != null)
                //    alltracksFatherDisabled.refresh();

                //}
                //filterNext = PlayerViewModel.Instance.FilterNext; 
            }
        }

        //private class StackCmp : IComparer<TrackListViewModel>
        //{
        //    public int Compare(TrackListViewModel x, TrackListViewModel y)
        //    {
        //        int cmp = x.ClassementValueLightSt.CompareTo(y.ClassementValueLightSt);
        //        //if (x.StackValue > 0 && y.StackValue > 0)
        //        //    cmp = 
        //        //else
        //        //    cmp = x.Index.CompareTo(y.Index);
        //        if (cmp != 0)
        //            return cmp;
        //        return x.Index.CompareTo(y.Index);
        //    }
        //}

        public IEnumerator<PlayListViewModel> GetEnumerator()
        {
            return _playlists.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _playlists.GetEnumerator();
        }

        private SortDescriptionCollection sort;
        public SortDescriptionCollection Sort { get { return sort; } set { sort = value; } }

#if EXPORT
        public string getEmpreinte()
        {
            var sb = new StringBuilder();
            sb.Append(exportTracks.Count);
            sb.Append(" éléments:");
            long hash = 0;
            foreach (TrackListViewModel t in exportTracks)
            {
                hash += t.PieceId.GetHashCode();
            }
            sb.Append(hash);

            return sb.ToString();

        }
#endif
    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\TrackListViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Windows;
using pdb.obj;
using pdb.util;
using pdb.gen;
using pdb.db.obj;
using pdb.gen.albums;
using pdb.gen.medianne;

namespace pdb.player.ViewModel
{

    public class TrackListViewModel : BibViewModelBase, ITrackInfoItunes
    {




        #region répercut
        //  private static BgDict<int, List<TrackListViewModel>> dictT = new BgDict<int, List<TrackListViewModel>>();
        #endregion

        private CPiece piece;
        private Piece track;

        // private TrackList track;
        //  private PieceViewModel piece;
        private static TrackListViewModel currentPlaying;
        private static TrackListViewModel currentSelected;
        //  public TrackList Track { get { return track; } }
        //   public CPiece Piece { get { return piece.Piece; } }
        // public Piece PieceGen { get { return track.Piece; } }

        public CPiece Piece { get { return piece; } }
        public Piece PieceGen { get { return track; } }
        public Piece Master { get { return track.Master; } }
        public bool Played { get { return piece.Played; } }

        public void remove()
        {
            //var list = dictT[PieceId];
            //if (list == null)
            //    return;
            //list.Remove(this);
        }

        public void refresh()
        {
            // piece.eraseCommentGrouping();
            OnPropertyChanged("ExportStatus");
            OnPropertyChanged("TV");
            //OnPropertyChanged("Comment");
            //OnPropertyChanged("Grouping");
            OnPropertyChanged("MedianneStatus");
            OnPropertyChanged("ClassementVirtuel");
            OnPropertyChanged("MedianneStatus");
            OnPropertyChanged("");
        }

        public override bool IsSelected
        {
            get
            {
                return base.IsSelected;
            }
            set
            {
                if (value != base.IsSelected)
                {
                    base.IsSelected = value;
                    if (value)
                        CurrentSelected = this;
                    OnPropertyChanged("TV");
                }
            }
        }

        private int index;
        public int Index
        {
            get { return index; }
            set
            {
                if (value != index)
                {
                    index = value;
                    OnPropertyChanged("Index");
                }
            }
        }

        private int index2;
        public int Index2
        {
            get { return index2; }
            set
            {
                if (value != index2)
                {
                    index2 = value;
                    OnPropertyChanged("Index2");
                }
            }
        }

        public int StackValue { get { return PieceGen.StackValue; } }
        public int StackIndex { get { return PieceGen.StackIndex; } }

        public bool Empeached { get { return PieceGen.isEmpeached(); } set { PieceGen.Empeached = value; } }
        public int EmpeachedNb { get { return PieceGen.EmpeachedNb; } }

        public static event EventHandler CurrentSelectedChanged;
        public static TrackListViewModel CurrentSelected
        {
            get
            {
                return currentSelected;
            }
            set
            {
                if (value != currentSelected)
                {
                    currentSelected = value;
                    if (CurrentSelectedChanged != null)
                        CurrentSelectedChanged("Track", EventArgs.Empty);
                }
            }
        }

        public static event EventHandler CurrentHumanSelectedChanged;
        private static TrackListViewModel humanSelected;
        private static int humanSelectedId;
        public static TrackListViewModel HumanSelected
        {
            get { return humanSelected; }
            //set
            //{
            //    if (value != humanSelected)
            //    {
            //        humanSelected = value;
            //        if (CurrentHumanSelectedChanged != null)
            //            CurrentHumanSelectedChanged("Human", EventArgs.Empty);
            //    }
            //}
        }

        private static bool setHumanSelectedUsed;
        private static volatile object _lock = new object();
        public static void setHumanSelected(PlayListViewModel pl, TrackListViewModel track)
        {
            lock (_lock)
            {
                if (setHumanSelectedUsed)
                    return;
            }

            try
            {
                lock (_lock)
                    setHumanSelectedUsed = true;
                //if (humanSelected != null)
                //{
                //    humanSelected.refresh();
                //   // var b = humanSelected.Grouping; 
                //}
                if (track != humanSelected)
                {
                    humanSelected = track;


                    //  humanSelected.refresh();
                    // var b = humanSelected.Grouping; 
                    int id = 0;
                    if (track != null) id = track.PieceId;
                    if (id != humanSelectedId)
                    {
                        App.Indispo = false; 
                        humanSelectedId = id;
                        if (CurrentHumanSelectedChanged != null)
                            CurrentHumanSelectedChanged(pl, EventArgs.Empty);
                    }
                }
            }
            finally
            {
                lock (_lock)
                    setHumanSelectedUsed = false;
            }
        }

        public bool Enabled
        {
            get
            {
                return piece.Enabled;
            }
            set
            {
                piece.Enabled = value;
                //if (value != track.Enabled)
                //{
                //    track.Piece.Enabled = value;
                //    OnPropertyChanged("Enabled");
                //}
            }
        }
        //  private exportState exportState;
        //public int ExportState
        //{
        //    get
        //    {
        //        return (int)exportState;
        //    }
        //}

        public static EventHandler ExportStatusChange;
        private static void OnExportStatusChange(TrackListViewModel tv)
        {
            if (ExportStatusChange != null)
                ExportStatusChange(tv, EventArgs.Empty);
        }

        public static event EventHandler ClassementChange;
        private static void OnClassementChange(TrackListViewModel tv)
        {
            if (ClassementChange != null)
                ClassementChange(tv, EventArgs.Empty);
        }

        public TrackListViewModel TV { get { return this; } }

        public exportState ExportStatus
        {
            get
            {
                return MasterPiece.ExportStatus; // exportState;
            }
            set
            {
                if (MasterPiece.ExportStatus != value)
                {
                    MasterPiece.ExportStatus = value;
                    OnPropertyChanged("ExportStatus");
                    OnPropertyChanged("TV");
                    OnPropertyChanged("Background");
                    OnExportStatusChange(this);
                    //refresh();


                }
            }
        }

        public int IndexExport
        {
            get { return PieceGen.IndexExport; }
        }

        public selectedCoeff SelectedMotif
        {
            get
            {
                if (PieceGen == null)
                    return selectedCoeff.none;
                return PieceGen.SelectedMotif;
            }
        }



        private TrackListViewModel(Piece piece)
            : base(piece)
        {
            this.track = piece;
            this.piece = track.Track as CPiece;
        }
        # region registre
        #region main
        /// <summary>
        /// Registre des tracks présentés dans la grille principale
        /// </summary>
        private static BgDict<int, TrackListViewModel> dict = new BgDict<int, TrackListViewModel>();
        /// <summary>
        /// Récupère ou crée un track dans la grille principale
        /// </summary>
        /// <param name="p"></param>
        /// <returns></returns>
        public static TrackListViewModel getOrCreate(Piece p)
        {
            var t = dict[p.PieceId];
            if (t == null)
            {
                t = new TrackListViewModel(p);
                dict.Add(p.PieceId, t);
            }
            return t;
        }

        public static TrackListViewModel get(int id)
        {
            return dict[id];
        }
        public static IDictionary<int, TrackListViewModel> Dict { get { return dict; } }
        #endregion
        #region album
        /// <summary>
        /// Registre des tracks présentés dans la grille album
        /// </summary>
        private static BgDict<int, TrackListViewModel> dictA = new BgDict<int, TrackListViewModel>();
        /// <summary>
        /// Récupère ou crée un track dans la grille album
        /// </summary>
        /// <param name="p"></param>
        /// <returns></returns>
        public static TrackListViewModel getOrCreateA(Piece p)
        {
            var t = dictA[p.PieceId];
            if (t == null)
            {
                t = new TrackListViewModel(p);
                dictA.Add(p.PieceId, t);
            }
            return t;
        }

        public static TrackListViewModel getA(int id)
        {
            return dictA[id];
        }
        public static IDictionary<int, TrackListViewModel> DictA { get { return dictA; } }
        #endregion
        # endregion
        //public TrackListViewModel(TrackList track, PlayListViewModel playlist)
        //    : base(track, playlist)
        //{
        //    //this.track = track;
        //    //this.piece = PieceViewModel.getPiece(track); // new PieceViewModel(track); // track.Piece.Track as CPiece; 
        //    //piece.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(piece_PropertyChanged);
        //    //int id = track.PieceId;
        //    //if (!dictT.ContainsKey(id))
        //    //{
        //    //    var list = new List<TrackListViewModel>();
        //    //    dictT.Add(id, list);
        //    //}

        //    //dictT[id].Add(this);

        //}

        void piece_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            OnPropertyChanged(e.PropertyName);
        }

        public String StrPlaying
        {
            get
            {
                if (playing) return "<))";
                return "";
            }
        }
        public string MedianneStatus
        {
            get
            {
                var p = PieceGen;
                if (p.Medianne)
                    return ">>";
                if (p.MedianneLight)
                    return ">";
                if (p.Border)
                    return "-";
                if (p.BorderMin)
                    return "-";
                if (p.BorderEffect)
                    return "--";

                return "";
            }
        }

        private bool playing;
        public bool Playing
        {
            get { return playing; }
            set
            {
                if (value != playing)
                {
                    playing = value;
                    if (playing)
                    {
                        CurrentPlaying = this;
                    }
                    OnPropertyChanged("Playing");
                    OnPropertyChanged("StrPlaying");
                }
            }
        }

        public static TrackListViewModel CurrentPlaying
        {
            get
            {
                return currentPlaying;
            }
            set
            {
                if (value != currentPlaying)
                {
                    if (currentPlaying != null)
                        currentPlaying.Playing = false;
                    currentPlaying = value;
                }
            }
        }

        public int Rating
        {
            get
            {
                return piece.Rating;
            }
            set
            {
                piece.Rating = value;
                //if (value != track.Rating)
                //{
                //    track.Rating = value;
                //    onPropertyChanged("Rating");
                //}
            }
        }

        //  private pdb.db.obj.CPiece CPiece { get { return track.Piece.Track as pdb.db.obj.CPiece; } }

        public string ClassementCompact
        {
            get { return PieceGen.ClassementCompact; }
        }

        //public static readonly DependencyProperty ClassementProperty =
        //DependencyProperty.Register("Classement", typeof(String),
        // typeof(PieceViewModel), new UIPropertyMetadata(null));
        //  Classement ITrackNative.Classement { get { return PieceGen.Classement; } }
        public String Classement
        {
            get
            {
                return PieceGen.Classement.ToString();
            }
            set
            {

                // piece.StrClassement = value;
                //if (value != piece.Piece.StrClassement)
                //{

                lock (Albums.LockSort)
                {
                    piece.StrClassement = value;
                    track.invalidateCache(true);
                    App.gen.ClassementChange();

                    //piece.Classement = value;
                    // PieceGen.invalidateCache();
                    var albums = App.gen.Albums;
                    albums.signalClassChange(track);
                  //  albums.invalidateAll(false); 
                    if (DetailClassementViewModel.Instance.Auto)
                        App.gen.setUrgence();
                    try
                    {

                        PlayerViewModel.makeauto(this);
                        App.bib.setClassement(this, value);



                        // piece.Piece.StrClassement = value;

                    }
                    catch
                    {
                    }

                    OnClassementChange(this);
                    OnPropertyChanged("Classement");

                    App.go(this);
                    // onPropertyChanged("Classement");


                    // }

                }
            }
        }

        public int Year
        {
            get
            {
                return piece.Year;
            }
            set
            {
                if (value != Year)
                {
                    piece.Year = value;
                    App.invalidateAlbums();
                }
                //if (value != piece.Year)
                //{
                //    track.Year = value;
                //    onPropertyChanged("Year");
                //}
            }
        }

        public DateTime Added { get { return piece.Added; } }

        public DateTime FirstAcces
        {
            get
            {
                return track.FirstAcces;
            }
        }



        public DateTime AlbumAdded
        {
            get
            {
                return track.AlbumAdded;
            }
        }

        public int RankAlbum { get { return PieceGen.RankAlbum; } }
        public int RankAlbumZero { get { return PieceGen.RankAlbumZero; } }
        public int RankAlbumReverse { get { return PieceGen.RankAlbumReverse; } }
      //  public int RankAllAlbum { get { return PieceGen.RankAllAlbum; } }
        public int RankAlbumSt { get { return PieceGen.RankAlbumSt; } }
        public int RankAlbumZeroSt { get { return PieceGen.RankAlbumZeroSt; } }


        public int Rank { get { return PieceGen.Rank.Quality; } }
        //public static readonly DependencyProperty CommentProperty =
        //DependencyProperty.Register("Comment", typeof(string),
        //typeof(PieceViewModel), new UIPropertyMetadata(null)); 
        //public string Comment
        //{
        //    get
        //    {
        //        if (PieceGen.Virtual)
        //            return "";
        //        return piece.Comment;
        //    }
        //    set
        //    {
        //        if (PieceGen.Virtual)
        //            return;
        //        //piece.Comment = value; 
        //        if (value != piece.Comment)
        //        {
        //            //  track.Comment = value;
        //            piece.Comment = value;
        //            OnPropertyChanged("Comment");

        //        }
        //    }
        //}

        //public string Grouping
        //{
        //    get { return track.Piece.Grouping; }
        //    set
        //    {
        //        //  piece.Grouping = value;
        //        if (value != track.Piece.Grouping)
        //        {
        //            track.Piece.setGrouping(value, true);
        //            // track.setGrouping(value, true);
        //            OnPropertyChanged("Grouping");
        //        }
        //    }
        //}




        public bool isPodcast
        {
            get { return piece.isPodcast; }
        }


        public TimeSpan Duration
        {
            get { return piece.Duration; }
            set
            {
                piece.Duration = value;
                //if (!Exists)
                //    return; 
                //if (value != Duration)
                //{
                //    var deltaMs = Math.Abs(value.TotalMilliseconds - Duration.TotalMilliseconds);
                //    if (deltaMs >= 1)
                //    {
                //        track.Duration = value;
                //        if (deltaMs >= 1000)
                //            onPropertyChanged("Duration");
                //    }
                //}
            }
        }

        public string File
        {
            get { return piece.Files.PathReduc; }
        }

        public string Location
        {
            get { return piece.Location; }
        }

        public string Artist
        {
            get
            {
                return piece.Artist;
            }
            set
            {
                if (value != Artist)
                {
                    piece.Artist = value;
                    App.invalidateAlbums();
                }
                //if (value != track.Artist)
                //{
                //    track.Artist = value;
                //    onPropertyChanged("Artist");
                //}
            }
        }

        public string Album
        {
            get
            {
                if (track.Virtual)
                {
                    switch (track.VirtualMode)
                    {
                        case virtualMode.none:
                        break;
                        case virtualMode.artist:
                        return string.Format("[{0}]", track.Album);
                        case virtualMode.path:
                        break;
                        case virtualMode.year:
                        if (track.Album.Length == 3)
                            return string.Format("[[{0}0']]", track.Album);
                        else
                            return string.Format("[[{0}]]", track.Album);
                        case virtualMode.extended:
                        return string.Format("¤{0}", track.Album);
                        case virtualMode.added:
                        return string.Format("<{0}>", track.Album);
                        case virtualMode.word:
                        return string.Format("'{0}'", track.Album);
                        case virtualMode.list:
                        return string.Format("/{0}", track.Album);
                        default:
                        break;
                    }
                    return track.Album;
                }
                return piece.Album;
            }
            set
            {
                if (!track.Virtual)
                {
                    if (value != Album)
                    {
                        piece.Album = value;
                        App.invalidateAlbums();
                    }
                }
                //if (value != track.Album)
                //{
                //    track.Album = value;
                //    onPropertyChanged("Album");
                //}
            }
        }

        public string MasterAlbum
        {
            get
            {
                //    if (track.Virtual)
                //        return " " + PieceGen.Master.Album;
                return PieceGen.Master.Album;
            }
            set
            {
                if (value == null)
                    return;
                value = value.Trim();
                if (value != PieceGen.Master.Album)
                {
                    PieceGen.Master.Album = value;
                    OnPropertyChanged("MasterAlbum");
                }
            }
        }

        public Album album { get { return PieceGen.PieceAlbum; } }

        public string Name
        {
            get
            {
                return piece.Name;
            }
            set
            {
                piece.Name = value;
                //if (value != track.Name)
                //{
                //    track.Piece.Name = value;
                //    onPropertyChanged("Name");
                //}
            }
        }

        public int TrackNumber
        {
            get
            {
                return track.TrackNumber;
            }
            set
            {
                if (!track.Virtual)
                    piece.TrackNumber = value;
                //if (value != track.TrackNumber)
                //{
                //    track.TrackNumber = value;
                //    onPropertyChanged("TrackNumber");
                //}
            }
        }


        public void setClassement(string className, int rating)
        {
            piece.setClassement(className, rating);
            PieceGen.invalidateCache(true);

        }



        public DateTime PlayedDate
        {
            get { return piece.PlayedDate; }
        }

        //public string ArtWork
        //{
        //    get
        //    {
        //        return piece.ArtWork;
        //    }
        //    set
        //    {
        //        piece.ArtWork = value;
        //    }
        //}

        //public void setGrouping(string value, bool prior)
        //{
        //    track.Piece.setGrouping(value, prior);
        //    piece.Grouping = value; // TODO je fait quoi de ça ???
        //    // onPropertyChanged("Grouping");
        //}

        public string ClassementVirtuel { get { return PieceGen.ClassementVirtuel; } }

        public decimal CoeffVirtuel { get { return PieceGen.CoeffVirtuel - 1; } }

        public string ClassementVirtuel2 { get { return PieceGen.ClassementVirtuel2; } }

        public decimal CoeffVirtuel2 { get { return PieceGen.CoeffVirtuel2 - 1; } }

        public decimal Rendement
        {
            get
            {
                if (album == null)
                    return 0;
                return album.Rendement - 1;
            }
        }

        public bool FirstClass
        {
            get
            {
                return true;
            }
            set
            {

            }
        }



        public List<DateTime> Dates
        {
            get { return new List<DateTime>(piece.Dates); }
        }


        public string ClassEvol
        {
            get { return track.ClassEvol; }
        }

        public long Size { get { return Piece.Size; } }

        public bool? Exists { get { return Piece.Exists; } }
        public bool ExistsNow { get { return Piece.ExistsNow; } }

        //public void onPropertyChanged(string propertyName)
        //{
        //    var list = dictT[PieceId];
        //    if (list == null)
        //    {
        //        OnPropertyChanged(propertyName);
        //    }
        //    else
        //    {
        //        foreach (TrackListViewModel t in dictT[PieceId])
        //            t.OnPropertyChanged(propertyName);
        //    }
        //}




        public int PieceId
        {
            get { return track.PieceId; }
        }
        public int MasterId { get { return PieceGen.MasterId; } }


        public int PieceParentId
        {
            get { return track.PieceParentId; }
            set { track.PieceParentId = value; }
        }

        public void setParent(TrackListViewModel parent)
        {
            track.invalidateCache(false);
            parent.PieceGen.invalidateCache(false);

            track.albumMustRefresh();
            parent.track.albumMustRefresh();

            piece.Parent = parent.Piece.Master;
            track.setParent(parent.track);

            track.albumMustRefresh();
            parent.track.albumMustRefresh();

            track.invalidateCache(false);
            parent.PieceGen.invalidateCache(false);
        }

        public void fusion(TrackListViewModel toDelete)
        {

            PieceGen.invalidateCache(false);
            toDelete.PieceGen.invalidateCache(false);

            App.Db.List.fusion(piece, toDelete.Piece);
            PieceGen.invalidateCache(false);
            toDelete.PieceGen.invalidateCache(false);

        }





        #region key
        private TrackIdentity key;
        public TrackIdentity Key
        {
            get
            {
                if (key == null)
                    keyGener();
                return key;
            }
        }
        private void keyGener()
        {
            key = new TrackIdentity(this);
        }

        #endregion


        public List<string> RelativesPath
        {
            get { return track.RelativesPath; }
        }

        public DateTime? UpdateClassement { get { return PieceGen.UpdateClassement; } }
        public DateTime? AlbumUpdateClassement { get { return PieceGen.AlbumUpdateClassement; } }
        public DateTime? MasterAlbumUpdateClassement { get { return PieceGen.MasterAlbumUpdateClassement; } }



        public DateTime? LastRead { get { return PieceGen.LastRead; } }
        public DateTime? AlbumLastRead { get { return PieceGen.AlbumLastRead; } }

        public int NbClass { get { return PieceGen.NbClass; } }

        public List<DateTime> DatesClassementBrut
        {
            get
            {
                return track.DatesClassementBrut;
            }
        }


        public string getLocation()
        {
            return piece.getLocation();
        }

        public string EquivLight
        {
            get
            {
                if (album == null)
                    return "";
                return album.EquivLight;
            }
        }

        public string EquivLight0
        {
            get
            {
                if (album == null)
                    return "";
                return album.EquivLight0;
            }
        }

        public string EquivLightSt
        {
            get
            {

                if (album == null)
                    return "";
                return album.EquivLightSt;
            }
        }

        public decimal ClassementValueLightSt
        {
            get
            {
                if (album == null)
                    return 0;
                return album.ClassementValueLightSt;
            }
        }

        public decimal ClassementValueLight
        {
            get
            {
                if (album == null)
                    return 0;
                return album.ClassementValueLight;
            }
        }

        public int AlbumCount
        {
            get
            {
                if (album == null)
                    return 0;
                return album.Count;
            }
        }

        public bool Virtual { get { return PieceGen.Virtual; } }

        public int DeltaRank { get { return PieceGen.DeltaRank; } }


        public void setClassement(string classement)
        {
            Classement = classement;
        }


        public string strClassement
        {
            get { return Classement; }
        }

        public string MaxClassement
        {
            get { return track.MaxClassement.ToString(); }
        }

        public string DeepClassement
        {
            get { return track.DeepClassement.ToString(); }
        }




        public bool Keep { get { return PieceGen.Keep; } }

        public bool NoCompact { get { return !PieceGen.UseCompact; } }

        public int MainTrackNumber { get { return PieceGen.MasterTrackNumber; } }

        public int NbRecentsInAlbum { get { return PieceGen.NbRecentsInAlbum; } }
        public int NbDoneInAlbum { get { return PieceGen.NbDoneInAlbum; } }
        public string PlusPetitEnabled { get { return PieceGen.PlusPetitEnabled; } }

        public decimal KeepCoeff { get { return PieceGen.KeepCoeff; } }

        public IMasterPiece MasterPiece
        {
            get
            {
                return piece.MasterPiece;
            }
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\Commande\PlayList\ExportCmd.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using pdb.db;
using pdb.db.obj;
using pdb.gen;
using pdb.util;
using pdb.gen.Tuning;
using System.Runtime.InteropServices;
using pdb.gen.albums;
using pdb.obj;

namespace pdb.player.ViewModel.Commande.PlayList
{
    class StatAlbum
    {
        private string key;
        private int count;

        public void clear()
        {
            count = 0;
        }

        public StatAlbum(string key)
        {
            this.key = key;
        }

        public override bool Equals(object obj)
        {
            if (obj is StatAlbum)
            {
                return key.Equals(((StatAlbum)obj).key);
            }
            return false;
        }

        public override int GetHashCode()
        {
            return key.GetHashCode();
        }

        public int Count { get { return count; } }
        public void record()
        {
            count++;
        }
    }

    class StatAlbums
    {
        private BgDictString0<StatAlbum> dict = new BgDictString0<StatAlbum>();

        public void clear()
        {
            foreach (var stat in dict)
            {
                stat.Value.clear();
            }
        }

        public StatAlbum getStat(Album album)
        {
            var key = album.Key;
            var s = dict[key];
            if (s == null)
            {
                s = new StatAlbum(key);
                dict.Add(key, s);
            }
            return s;
        }
    }


    public enum compressState
    {
        none,
        enCours,
        reload,
        cancel
    }



 #if EXPORT
    class ExportCmd : CommandeBase
    {
        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        [return: MarshalAs(UnmanagedType.Bool)]
        static extern bool GetDiskFreeSpaceEx(string lpDirectoryName,
        out ulong lpFreeBytesAvailable,
        out ulong lpTotalNumberOfBytes,
        out ulong lpTotalNumberOfFreeBytes);

        private static long getFreeSpace()
        {
            ulong FreeBytesAvailable;
            ulong TotalNumberOfBytes;
            ulong TotalNumberOfFreeBytes;

            bool success = GetDiskFreeSpaceEx(conf.dir, out FreeBytesAvailable, out TotalNumberOfBytes,
                               out TotalNumberOfFreeBytes);
            if (!success)
                throw new System.ComponentModel.Win32Exception();
            return (long)TotalNumberOfFreeBytes;
        }



        private static IExportTracks ihm;
        public static IExportTracks Ihm { set { ihm = value; } }
        // private static bool cancel;
        // protected static string dir;
        protected static PlayListViewModel lastpl;
        protected static List<PiecePrior> all;
        protected static Dictionary<int, PiecePrior> dict;
        protected static Dictionary<int, PiecePrior> masterDict;
        protected static List<PiecePrior> list;
        protected static List<List<PiecePrior>> listes;

        protected static List<PlayListViewModel> playlists = new List<PlayListViewModel>();
        protected static Dict<string, string> empreintes = new Dict<string, string>();
        protected static StatAlbums statAlbums = new StatAlbums();

        //  protected static Dictionary<int, object> ids;
        protected static HashSet<int> idCopie;
        protected static HashSet<string> idCopieLoc;
        private static int nbLoop = 0;
        protected static Export conf;
        private static bool modeAlbum;
        //private static int nbByAlbumMin = int.MaxValue;
        //private static int nbByAlbumMax = int.MaxValue;
        //private static int nbLot = 100; 
        protected static int nbFicherSup;
        protected static int nbFichierAdd;
        const string CAPTION = "export";
        protected string ANNULATION_EXPORT = "Annulation export";
        protected static volatile object _lock = new object();
        private static volatile object _lockBuildFileExport = new object();
        protected static Thread thCalcul;
        protected static Thread thCopy;

        protected static bool endCopy;
        protected static bool endCopyFinal;
        protected static compressState copy;
        protected static bool endCalcul;

        protected static compressState query;

        //protected static BgDictString<List<PiecePrior>> locations = new BgDictString<List<PiecePrior>>();

        protected static ILogger logger = Logger.getLogger("export");
#if DEB
        protected static ILogger debug = Logger.getLogger("exportDebug", false);
#endif

        protected static void sendCancel()
        {
            lock (_lock)
            {
                if (query < compressState.cancel)
                    query = compressState.cancel;
            }
        }
        protected static compressState Query
        {
            get
            {
                lock (_lock)
                    return query;
            }
            set
            {
                lock (_lock)
                    query = value;
            }
        }





        public static void CalculExport()
        {
            if (conf != null && conf.oneShot)
                return;
            switch (Query)
            {
                case compressState.none:
                break;
                case compressState.enCours:
                //if (checkSthChange())
                //{
                //PlayListViewModel.resetExport(exportState.none);
                Query = compressState.reload;
                //lock (_lock)
                //    state = compressState.reload;
                //}
                break;
                case compressState.cancel:
                PlayListViewModel.resetExport(exportState.none);
                Query = compressState.none;
                break;
                default:
                break;
            }
        }

        private static bool checkSthChange()
        {
            bool ret = false;
            foreach (PlayListViewModel pl in playlists)
            {
                var emp = empreintes[pl.Name];
                logger.log("{0} ancienne empreinte {1}", pl.Name, emp);
                var _newEmpre = pl.getEmpreinte();
                logger.log("{0} nouvelle empreinte {1}", pl.Name, _newEmpre);
                if (emp != _newEmpre)
                {
                    logger.log("on recalcule");
                    ret = true;
                }
                empreintes[pl.Name] = _newEmpre;

            }
            return ret;

        }

        protected class PiecePrior
        {
            private int index = int.MaxValue;
            private int prior0 = int.MaxValue;
            private int prior1 = int.MaxValue;
            private int prior2 = int.MaxValue;
            private int prior3 = int.MaxValue;
            public readonly Piece PieceGen;
            public PiecePrior(Piece piece, int prior)
            {
                this.PieceGen = piece;
                this.prior0 = prior;
            }
            public PiecePrior(PiecePrior o)
            {
                PieceGen = o.PieceGen;
                index = o.index;
                prior0 = o.prior0;
                prior1 = o.prior1;
                prior2 = o.prior2;
                prior3 = o.prior3;
            }

            public override bool Equals(object obj)
            {
                var o = obj as PiecePrior;
                if (o == null)
                    return false;
                return PieceGen.PieceId == o.PieceGen.PieceId;
            }

            public override int GetHashCode()
            {
                return PieceGen.PieceId.GetHashCode();
            }

            public CListFile Files { get { return (PieceGen.Track as CPiece).Files; } }

            public int Index { get { return index; } }
            public int Prior0 { get { return prior0; } }
            public int Prior1 { get { return prior1; } }
            public int Prior2 { get { return prior2; } }
            public int Prior3 { get { return prior3; } }
            // public int PriorMin { get { return System.Math.Min(prior1, prior2); } }
            // public int MasterId { get { return Piece.MasterId; } }
            public int PieceId { get { return PieceGen.PieceId; } }
            public int MasterId { get { return PieceGen.MasterId; } }



            public void setPrior2(int prior)
            {
                if (prior < this.prior2)
                    this.prior2 = prior;
            }

            public void setPrior3(int prior)
            {
                if (prior < this.prior3)
                    this.prior3 = prior;
            }

            public void setPrior1(int prior)
            {
                if (prior < this.prior1)
                    this.prior1 = prior;
            }



            public void setPrior(PiecePrior o)
            {
                if (o == this)
                    return;
                setPrior1(o.prior1);
                setPrior2(o.prior2);
                setPrior3(o.prior3);
            }

            public void setPrior0(PiecePrior o)
            {
                if (o.prior0 < this.prior0)
                    this.prior0 = o.prior0;
            }

            public void setIndex(int index)
            {
                this.index = index;
            }

            //public static void mergePrior0(ICollection<PiecePrior> list)
            //{
            //    if (list.Count <= 1)
            //        return;
            //    int min = int.MaxValue;
            //    foreach (PiecePrior p in list)
            //    {
            //        var p0 = p.prior0;
            //        if (p0 < min)
            //            min = p0;
            //    }
            //    foreach (PiecePrior p in list)
            //    {
            //        p.prior0 = min;
            //    }
            //}

            //public static void mergePrior1(ICollection<PiecePrior> list)
            //{
            //    if (list.Count <= 1)
            //        return;
            //    int min = int.MaxValue;
            //    foreach (PiecePrior p in list)
            //    {
            //        var p1 = p.prior1;
            //        if (p1 < min)
            //            min = p1;
            //    }
            //    foreach (PiecePrior p in list)
            //    {
            //        p.prior0 = min;
            //    }
            //}

            public override string ToString()
            {
                try
                {
                    int rank = PieceGen.RankAlbumReverse;
                    int nb = PieceGen.NbExportPresents;
                    var _indexExport = PieceGen.IndexExport;
                    int indexExport = 0;
                    if (_indexExport < 10000 && _indexExport >= 0)
                        indexExport = PieceGen.IndexExport + 1;

                    string priority = string.Format("{0} {1} {2} {3} {4}", display(index), display(prior3), display(prior2), display(prior1), display(prior0));

                    return string.Format("{0} {1} {2} p={3} i={4} {5} {6}", rank, nb, PieceGen.TrackNumber, priority, indexExport, PieceGen.PieceAlbum.Key, PieceGen.Name);
                }
                catch
                {
                }
                return "";
                //  return rank + " " + PieceGen.TrackNumber + "\t" + prior0 + " " + prior1 + " " + PieceGen.ToString();
            }
            private static string display(int nb)
            {
                if (nb < 0 || nb == int.MaxValue)
                    return "-";
                return nb.ToString();
            }
        }

        protected class PriorComparer : PriorComparerBase, IComparer<PiecePrior>
        {

            public override int Compare(PiecePrior x, PiecePrior y)
            {
                int cmp = x.Index.CompareTo(y.Index);
                if (cmp != 0)
                    return cmp;
                cmp = x.Prior3.CompareTo(y.Prior3);
                if (cmp != 0)
                    return cmp;

                return base.Compare(x, y);


            }
        }

        protected class PriorComparerBase : IComparer<PiecePrior>
        {
            protected static PieceTrackNumberComparer tn = new PieceTrackNumberComparer();
            public virtual int Compare(PiecePrior x, PiecePrior y)
            {
                int cmp = x.Prior2.CompareTo(y.Prior2);
                if (cmp != 0)
                    return cmp;
                cmp = x.Prior1.CompareTo(y.Prior1);
                if (cmp != 0)
                    return cmp;
                cmp = x.Prior0.CompareTo(y.Prior0);
                if (cmp != 0)
                    return cmp;

                var xx = x.PieceGen;
                var yy = y.PieceGen;
                cmp = xx.RankAlbumReverse.CompareTo(yy.RankAlbumReverse);
                if (cmp != 0)
                    return cmp;
                cmp = xx.IndexExport.CompareTo(yy.IndexExport);
                if (cmp != 0)
                    return cmp;
                cmp = xx.VirtualClassement.CompareTo(yy.VirtualClassement);
                if (cmp != 0)
                    return cmp;
                return tn.Compare(xx, yy);
            }
        }


        protected class PriorComparerDelete : PriorComparer, IComparer<PiecePrior>
        {


        }
        public ExportCmd()
        {

        }


        public override bool CanExecute(object parameter)
        {
            return ihm != null;
        }

        public override void Execute(object parameter)
        {
            if (Query <= compressState.none)
                record();
            else
            {
                sendCancel();
                PlayListViewModel.resetExport(exportState.none);
            }
            OnPropertyChanged("Header");
        }

        class AllPieceComparer : IComparer<TrackListViewModel>
        {
            PieceInAlbumComparer pieceComp = new PieceInAlbumComparer();
            IComparer<Album> albumcomp = new pdb.gen.albums.AlbumClassComparer2();

            public int Compare(TrackListViewModel x, TrackListViewModel y)
            {
                int cmp = albumcomp.Compare(x.album, y.album);
                if (cmp != 0)
                    return cmp;
                return -pieceComp.Compare(x, y);
            }
        }
        class PieceInAlbumComparer : IComparer<TrackListViewModel>
        {
            private bool debile(int trackNumber)
            {
                return trackNumber <= 0 || trackNumber > 10000;
            }

            private bool debile(TrackListViewModel piece)
            {
                return debile(piece.TrackNumber);
            }
            public int Compare(TrackListViewModel x, TrackListViewModel y)
            {
                if (debile(x))
                {
                    if (debile(y))
                    {
                        var f1 = Path.GetFileName(x.getLocation());
                        var f2 = Path.GetFileName(y.getLocation());
                        return f1.CompareTo(f2);
                    }
                    return -1;
                }
                if (debile(y))
                    return 1;
                var cmp = x.TrackNumber.CompareTo(y.TrackNumber);
                if (cmp != 0)
                    return cmp;
                return x.getLocation().CompareTo(y.getLocation());
            }
        }

        private class TrackAlbumReverseComparer : IComparer<TrackListViewModel>
        {
            //  private static PieceClassementComparerInv comparer = new PieceClassementComparerInv();
            //private bool disabledAlway;

            //public TrackAlbumReverseComparer(bool disabledAlway)
            //{
            //    this.disabledAlway = disabledAlway; 
            //}
            private static AllPieceComparer all = new AllPieceComparer(); 

            public int Compare(TrackListViewModel x, TrackListViewModel y)
            {
                var xx = x.PieceGen;
                var yy = y.PieceGen;
                if (xx.PieceAlbum != yy.PieceAlbum)
                    return -all.Compare(x,y); 
                 //   return -xx.RankAllAlbum.CompareTo(yy.RankAllAlbum);

                return xx.IndexExport.CompareTo(yy.IndexExport);

                //if (disabledAlway)
                //{
                //    if (x.Enabled != y.Enabled)
                //    {
                //        return -x.Enabled.CompareTo(y.Enabled); // ? -1 : 1;
                //    }
                //}
                //var xv = x.PieceGen.RapportClassement;
                //var yv = y.PieceGen.RapportClassement;

                //int cmp = 0;
                //if (xv > 0 && yv > 0)
                //{
                //    cmp = xv.CompareTo(yv);
                //    if (cmp != 0) return cmp;
                //    cmp = x.PieceGen.VirtualClassement.CompareTo(y.PieceGen.VirtualClassement);
                //    if (cmp != 0) return cmp;
                //}

                //cmp = x.TrackNumber.CompareTo(y.TrackNumber);
                //if (cmp != 0)
                //    return cmp;
                //return x.Location.CompareTo(y.Location);

            }
        }
        protected virtual void buildList(PlayListViewModel pl)
        {

            var list = new List<PiecePrior>();

            try
            {
                bool onlyEnabled = PlayerViewModel.Instance.OnlyEnabled && !modeAlbum;
                bool _modeAlbum = modeAlbum && !PlayerViewModel.Instance.SortByAlbum;

                // var ids = new Dictionary<int, object>();
                int i = 0;
                List<TrackListViewModel> tracks = null;
                if (pl.isSubList("gen") && pl.Name == "all")
                {
                    tracks = new List<TrackListViewModel>(pl.Tracks);
                    var cmp = new AllPieceComparer(); 
                    tracks.Sort(cmp); 
                    tracks.Reverse(); 
                   // tracks.Sort((x, y) => -x.PieceGen.RankAllAlbum.CompareTo(y.PieceGen.RankAllAlbum));  //x.Index.CompareTo(y.Index));
                }
                else
                    tracks = new List<TrackListViewModel>(pl.ExportTracks);
                logger.log("export::buildList {0} {1} elements", pl, tracks.Count);
                if (conf.albumReverse)
                {

                    tracks.Sort(new TrackAlbumReverseComparer()); //conf.disabledAlway));

                }
                else
                    tracks.Sort((x, y) => x.Index.CompareTo(y.Index));
                int iii = 0;
                logger.log("buildlist setPrior1 {0}", pl);
                foreach (TrackListViewModel t in tracks)
                {
                    iii++;
                    var pp = dict[t.PieceId];
                    pp.setPrior1(iii);
                    //var master = masterDict[t.MasterId];
                    //master.setPrior1(iii);
                }

                //foreach (PiecePrior pp in dict.Values)
                //{
                //    var master = masterDict[pp.MasterId];
                //    pp.setPrior1(master.Prior1);
                //}
                logger.log("buildlist {0}", pl);
                int lastI = 0;
                Album lastAlbum = null;
                StatAlbum lastStatAlbum = null;
                //  int inext = -1; 
                int nbByAlbum = int.MaxValue;
                int limitMax = int.MaxValue;
                if (conf.modeAlbum)
                {
                    nbByAlbum = conf.nbMax;
                    limitMax = conf.limitMax;
                    if (limitMax < nbByAlbum)
                        limitMax = nbByAlbum;
                }
                int nbLot = 0;
                int ii = -1;
                var ids = new HashSet<int>();
                int passe = 0;
                while (true)
                {

                    if (query != compressState.enCours)
                        return;
                    passe++;
                    int nbInThisAlbum = 0;
                    foreach (TrackListViewModel track in tracks)
                    {
                        if (query != compressState.enCours)
                            return;
                        int id = track.PieceId;
                        if (ids.Contains(id))
                            continue;
                        ii++;


                        //  track.ExportStatus = exportState.miss; 
                        if (!onlyEnabled || track.Enabled)
                        {
                            // CPiece piece = track.Piece;
                            if (track.ExistsNow)
                            {
                                var pp = dict[id]; // list.Add(piece);
                                if (pp == null)
                                {
                                    pp = new PiecePrior(track.PieceGen, ii);
                                    dict[id] = pp;
                                    logger.log("bizarre création de {0}", pp);
                                }

                                //var masterId = track.MasterId;
                                //if (ids.Add(masterId))
                                //{
                                //    presents.Add(pp);
                                //}



                                if (!_modeAlbum)
                                {
                                    if (track.album == lastAlbum)
                                    {
                                        if (lastStatAlbum.Count > limitMax)
                                        {
                                            ids.Add(id);
                                            i++;
                                            pp.setPrior2(i);
                                            continue;
                                        }
                                        if (nbInThisAlbum > nbByAlbum)
                                            continue;
                                        if (track.Enabled || (conf.countFirsts && track.PieceGen.VirtualClassement >= lastAlbum.ClassementValueLight) || (conf.countLasts && track.PieceGen.VirtualClassement <= lastAlbum.ClassementValueLight))
                                            nbInThisAlbum++;
                                        else if (nbInThisAlbum >= nbByAlbum)
                                            continue;
                                        if (nbInThisAlbum > nbByAlbum)
                                            continue;

                                    }
                                    else
                                    {
                                        nbInThisAlbum = 0;
                                        lastAlbum = track.album;// inext = lastAlbum.IndexClass(lastAlbum.Next);
                                        lastStatAlbum = statAlbums.getStat(lastAlbum);
                                        if (lastStatAlbum.Count > limitMax)
                                        {
                                            ids.Add(id);
                                            i++;
                                            pp.setPrior2(i);
                                            continue;
                                        }

                                        if (track.Enabled || (conf.countFirsts && track.PieceGen.VirtualClassement >= lastAlbum.ClassementValueLight) || (conf.countLasts && track.PieceGen.VirtualClassement <= lastAlbum.ClassementValueLight))
                                            nbInThisAlbum++;
                                        else if (nbInThisAlbum >= nbByAlbum)
                                            continue;
                                        if (nbInThisAlbum > nbByAlbum)
                                            continue;


                                    }

                                    // pp.setPrior(i);
                                    list.Add(pp);

                                    lastStatAlbum.record();
                                    ids.Add(id);

                                    i++;
                                    pp.setPrior2(i);

                                    //  if (track.Enabled || conf.countAll)
                                    nbLot++;
#if DEB
                                    debug.log("buildList passe={0} i={1} nbLot={2} nbInThisAlbum={3} pp={4}", passe, i, nbLoop, nbInThisAlbum, pp);
#endif

                                    if (conf.modeAlbum && nbLot > conf.lot)
                                    {
                                        nbLot = 0;
                                        nbByAlbum--;
                                        if (nbByAlbum < conf.nbMin)
                                            nbByAlbum = conf.nbMin;
                                        if (nbByAlbum == 0)
                                            break;

                                        limitMax = conf.limitMax;
                                        if (limitMax < nbByAlbum)
                                            limitMax = nbByAlbum;

                                    }


                                }
                                else
                                {
                                    if (conf.modeAlbum)
                                    {
                                        if (track.album == lastAlbum)
                                            continue;
                                        else
                                        {
                                            nbLot++;
                                            if (nbLot > conf.lot)
                                            {
                                                nbLot = 0;
                                                nbByAlbum--;
                                                if (nbByAlbum < conf.nbMin)
                                                    nbByAlbum = conf.nbMin;
                                                if (nbByAlbum == 0)
                                                    break;

                                                limitMax = conf.limitMax;
                                                if (limitMax < nbByAlbum)
                                                    limitMax = nbByAlbum;
                                            }
                                        }
                                    }
                                    List<Piece> album = null;
                                    if (conf.albumReverse)
                                        album = App.gen.getTracksAlbumReverse(track.PieceGen);
                                    else
                                        album = App.gen.getTracksAlbumByNumber(track.PieceGen); // piece);
                                    if (album != null)
                                    {
                                        nbInThisAlbum = 0;
                                        lastAlbum = track.album;// inext = lastAlbum.IndexClass(lastAlbum.Next);  //.Album;
                                        foreach (var p in album)
                                        {
                                            var piece = p.Track as CPiece;
                                            if (piece != null && piece.ExistsNow)
                                            {
                                                if (!onlyEnabled || piece.Enabled)
                                                {
                                                    id = p.PieceId;

                                                    //if (ids.Contains(id))
                                                    //    continue;
                                                    var ppp = dict[id];
                                                    // ppp.setPrior(i);
                                                    list.Add(ppp);
                                                    //   ids.Add(id);
                                                    i++;
                                                    if (piece.Enabled || (conf.countFirsts && p.VirtualClassement >= lastAlbum.ClassementValueLight) || (conf.countLasts && p.VirtualClassement <= lastAlbum.ClassementValueLight))
                                                    {
                                                        nbLot++;
                                                        if (conf.modeAlbum && nbLot > conf.lot)
                                                        {
                                                            nbLot = 0;
                                                            nbByAlbum--;
                                                            if (nbByAlbum < conf.nbMin)
                                                                nbByAlbum = conf.nbMin;

                                                            limitMax = conf.limitMax;
                                                            if (limitMax < nbByAlbum)
                                                                limitMax = nbByAlbum;
                                                        }

                                                        nbInThisAlbum++;
                                                        if (nbInThisAlbum >= nbByAlbum)
                                                            break;
                                                    }
                                                }
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (!modeAlbum)
                        break;
                    if (nbByAlbum == int.MaxValue)
                        break;
                    if (nbByAlbum > 0)
                    {
                        if (i == lastI)
                        {
#if DEB
                            debug.log("buildList fin passe={0} i={1} nbLot={2} nbInThisAlbum={3}", passe, i, nbLoop, nbInThisAlbum);
#endif
                            break;
                        }
                    }

                    lastI = i;
                    lastAlbum = null;
                    if (conf.modeAlbum)
                    {
                        if (conf.resetAfterLoop)
                            nbByAlbum = conf.nbMax;
                        if (nbByAlbum < conf.nbMin)
                            nbByAlbum = conf.nbMin;
                        if (nbByAlbum == 0)
                            nbByAlbum = 1;

                        limitMax = conf.limitMax;
                        if (limitMax < nbByAlbum)
                            limitMax = nbByAlbum;
                    }
                }
                listes.Add(list);

                //   ihm.InfoIHm("liste n° " + listes.Count + " " + list.Count + " éléments", CAPTION);
                OnPropertyChanged("Header");
            }
            catch (Exception ex)
            {
                misc.log(ex.ToString());
            }

        }

        public override string Header
        {
            get
            {
                if (query == compressState.enCours || query == compressState.reload)
                    return ANNULATION_EXPORT;

                return "Exporter la liste";
            }
        }



        private void record()
        {
            if (Query == compressState.none)
            {

                OnPropertyChanged("Header");
                nbLoop = 0;
                conf = ihm.getConfExport("Configuration Export");

                //  dir = conf.dir; // ihm.folderDialog();

                if (string.IsNullOrEmpty(conf.dir))
                {
                    Query = compressState.none;
                    return;
                }

                modeAlbum = conf.modeAlbum; // ihm.Confirm("par albums complets?", CAPTION);

                //if (modeAlbum)
                //{
                //    nbByAlbumMin = conf.nbMin; // ihm.getNb("Nombre de morceaux par passe?");
                //    nbByAlbumMax = conf.nbMax;
                //    nbLot = conf.lot;
                //}
                //else
                //    nbByAlbum = int.MaxValue;

                playlists.Clear(); empreintes.Clear();
            }

            bool? status = true;


            var pl = ihm.PlayList;
            if (!playlists.Contains(pl))
            {
                playlists.Add(pl);
                empreintes[pl.Name] = pl.getEmpreinte();
                lastpl = pl;
            }

            status = ihm.TriChoix("liste n° " + playlists.Count + " " + pl.ExportTracks.Count + " éléments\r\n lancer l'export ?", CAPTION);



            if (status == null)
            {
                //listes = new List<List<PiecePrior>>();
                playlists.Clear(); empreintes.Clear();
                Query = compressState.none;
                OnPropertyChanged("Header");
                return;
            }
            if (false.Equals(status))
            {
                OnPropertyChanged("Header");
                return;
            }

            waitCalculForEnd();

            Query = compressState.enCours;

            lock (_lock)
            {
                if (thCalcul == null)
                {
                    thCalcul = new Thread(calculLoop);
                    thCalcul.SetApartmentState(ApartmentState.STA);
                    thCalcul.Start();
                }

                if (thCopy == null)
                {
                    thCopy = new Thread(copyLoop);
                    thCopy.SetApartmentState(ApartmentState.STA);
                    thCopy.Start();
                }
            }


            OnPropertyChanged("Header");
        }
        //protected static long totalSize = 0;
        //protected static long capacity = int.MaxValue;
        //protected static long freeSpace; 
        //private static void refreshInfoFreeSpace()
        //{
        //    DriveInfo drive = new DriveInfo(Path.GetPathRoot(conf.dir));
        //    var calculfree = freeSpace; 
        //    freeSpace = drive.AvailableFreeSpace;
        //    var delta = freeSpace - calculfree;
        //    if (delta > 0)
        //        App.log.log("difference free space " + delta); 

        //}

        private void buildListIni()
        {

            logger.log("export:buildListIni");
            lock (_lock)
            {
                statAlbums.clear();
                listes = new List<List<PiecePrior>>();
                lock (_lockBuildFileExport)
                    all = new List<PiecePrior>();
                dict = new Dictionary<int, PiecePrior>();
                masterDict = new Dictionary<int, PiecePrior>();
            }
            //  locations = new BgDictString<List<PiecePrior>>();

            try
            {

                if (!conf.dir.EndsWith("\\"))
                    conf.dir += "\\";
                //  refreshInfoFreeSpace(); 

                List<Piece> l = null;


                if (lastpl.isSubList("album") || PlayerViewModel.Instance.SortByAlbum)
                {
                    l = App.gen.sortByAlbum();
                    // l.Reverse();
                }
                else
                    l = App.gen.sortByClass();
                // l.Reverse();

                int i = 0;
                foreach (Piece p in l)
                {

                    if (query != compressState.enCours)
                        return;
                    //var piece = p.Track as CPiece;
                    if (!dict.ContainsKey(p.PieceId))
                    {
                        i++;
                        var pp = new PiecePrior(p, i);

                        all.Add(pp);
                        dict[p.PieceId] = pp;
                    }
                }

                foreach (Piece p in l)
                {
                    if (query != compressState.enCours)
                        return;
                    var id = p.PieceId;
                    var masterId = p.MasterId;
                    if (!masterDict.ContainsKey(masterId))
                    {
                        var _p = dict[masterId];
                        var pMaster = new PiecePrior(_p);
                        masterDict[masterId] = pMaster;
                    }
                    else
                    {
                        masterDict[masterId].setPrior0(dict[id]);
                    }
                }

                foreach (Piece p in l)
                {
                    if (query != compressState.enCours)
                        return;
                    dict[p.PieceId].setPrior0(masterDict[p.MasterId]);
                }
            }
            catch (Exception ex)
            {
                misc.log(ex.ToString());
            }

        }

        private void waitCalculForEnd()
        {
            lock (_lock)
            {

                if (query == compressState.none)
                    return;
                if (query == compressState.enCours)
                    query = compressState.cancel;
            }
            var dt = DateTime.Now;
            int nb = 0;
            while (true)
            {
                lock (_lock)
                    if (endCalcul)
                        return;
                Thread.Sleep(100);
                if ((DateTime.Now - dt).TotalSeconds > 10)
                    return;
                nb++;
                if (nb >= 10)
                {
                    nb = 0;
                    logger.log("waitForEnd Calcul");
                }
            }

        }


        private void waitCopyForEnd()
        {
            lock (_lock)
            {
                if (copy == compressState.none)
                    return;
                if (copy == compressState.enCours)
                    copy = compressState.cancel;
                if (endCopy)
                    return;
            }
            var dt = DateTime.Now;
            int nb = 0;
            while (true)
            {
                lock (_lock)
                {
                    if (endCopy)
                        return;
                    if (query != compressState.enCours)
                    {
                        logger.log("abandon attente car query={0}", query);
                        return;
                    }
                }
                Thread.Sleep(100);
                if ((DateTime.Now - dt).TotalSeconds > 10)
                    return;
                nb++;
                if (nb >= 10)
                {
                    nb = 0;
                    logger.log("waitForEnd Copy");
                }
            }

        }


        [STAThread]
        private void copyLoop()
        {
            while (true)
            {
                try
                {
                    compressState _cp;
                    lock (_lock)
                        _cp = copy;
                    if (_cp != compressState.enCours)
                    {
                        Thread.Sleep(1000);
                        continue;
                    }

                    _copy();
                }

                catch (Exception ex)
                {
                    logger.log(ex.ToString());
                }
            }
        }


        [STAThread]
        private void calculLoop()
        {


            while (true)
            {
                switch (Query)
                {
                    case compressState.none: Thread.Sleep(1000); continue;

                    case compressState.enCours:
                    if (endCopyFinal)
                    {
                        Thread.Sleep(1000); continue;
                    }
                    break;
                    case compressState.reload:
                    waitCalculForEnd();
                    break;

                    case compressState.cancel:
                    {
                        waitCalculForEnd();
                        waitCopyForEnd();
                        Query = compressState.none;
                        nbLoop = 0;
                        Thread.Sleep(1000); continue;
                    }

                    default:
                    break;
                }
                lock (_lock)
                {
                    endCalcul = false;
                    query = compressState.enCours;
                    nbLoop++;
                }

                _calc();

            }
        }

        private void _calc()
        {
            try
            {




                buildListIni();

                if (query != compressState.enCours)
                    return;

                foreach (PlayListViewModel pl in playlists)
                {
                    buildList(pl);
                    if (query != compressState.enCours)
                        return;
                }



                //foreach (List<PiecePrior> lp in locations.Values)
                //{
                //    PiecePrior.mergePrior1(lp);
                //}

                // concaténation
                int max = 0;
                lock (_lockBuildFileExport)
                    list = new List<PiecePrior>();
                var ids = new HashSet<int>();


                logger.log("_calc:concaténation");

                foreach (var _l in listes)
                {
                    if (query != compressState.enCours)
                        return;
                    var count_ = _l.Count;
                    if (count_ > max)
                        max = count_;
                }
                int count = listes.Count;

                int nb = 0;
                for (int i = 0; i < max; i++)
                {
                    if (query != compressState.enCours)
                        return;
                    for (int j = 0; j < count; j++)
                    {
                        var l = listes[j];
                        if (i < l.Count)
                        {
                            var p = l[i];
                            if (ids.Add(p.PieceId))
                            {
                                nb++;
                                p.setPrior3(nb);
                                p.setIndex(nb);
                                list.Add(p);
                                //var master = masterDict[p.MasterId];
                                //if (master != p)
                                //    master.setPrior3(p);

                            }
                        }
                    }
                }
#if DEB
                debug.log("_calc: avant tri");
#endif
                //for (int i = 0; i < list.Count; i++)
                //{
                //    if (query != compressState.enCours)
                //        return;
                //    var p = list[i];
                //    var master = masterDict[p.MasterId];
                //    if (master != p)
                //        p.setPrior3(master);
                //    #if DEB
                //    debug.log("i={0} pp={1}", i, p);
                //    #endif  


                //}
#if DEB
                debug.log("_calc: apres tri");
                list.Sort(new PriorComparer());
                for (int i = 0; i < list.Count; i++)
                {
                    debug.log("i={0} pp={1}", i, list[i]);
                }

                debug.log("_calc: all apres tri");

                all.Sort(new PriorComparer());
                for (int i = 0; i < all.Count; i++)
                {
                    debug.log("i={0} pp={1}", i, all[i]);
                }
#endif
                logger.log("_calc:prior");
                foreach (PiecePrior pp in dict.Values)
                {
                    var master = masterDict[pp.MasterId];
                    master.setPrior(pp);
                }

                foreach (PiecePrior pp in dict.Values)
                {
                    var master = masterDict[pp.MasterId];
                    pp.setPrior(master);
                }

                postTrace();


                waitCopyForEnd();
                lock (_lock)
                {
                    if (query != compressState.enCours)
                        return;
                    App.log.log("Export lancé " + listes.Count + " liste" + (listes.Count > 1 ? "s " : " ") + list.Count + " éléments", CAPTION);
                    endCopy = false; copy = compressState.enCours; endCopyFinal = false;
                }

                while (true)
                {
                    Thread.Sleep(100);

                    if (endCopy || query != compressState.enCours)
                        break;

                }


            }
            catch (Exception ex)
            {
                misc.log(ex.ToString());
                Thread.Sleep(1000);
            }

            finally
            {
                lock (_lock)
                    endCalcul = true;


            }
        }

        private static DateTime requestTrace;
        private static DateTime traceJob;

        private static void postTrace()
        {
            lock (_lockBuildFileExport)
            {
                if (requestTrace == DateTime.MinValue)
                {
                    new Thread(traceLoop).Start();
                }
                requestTrace = DateTime.Now;
            }
        }
        private static void traceLoop()
        {
            List<PiecePrior> _list;
            List<PiecePrior> _all;
            while (true)
            {
                Thread.Sleep(1000);

                lock (_lockBuildFileExport)
                {
                    if (requestTrace > traceJob)
                    {
                        traceJob = DateTime.Now;
                        _list = new List<PiecePrior>(list);
                        _all = new List<PiecePrior>(all);
                    }
                    else
                        continue;
                }

                trace(_list, @"..\export.txt");
                _all.Sort(new PriorComparer());
                trace(_all, @"..\exportAll.txt");


            }
        }

        private static void trace(List<PiecePrior> list, string file)
        {
            logger.log("trace {0}", file);
            var sb = new StringBuilder();
            foreach (PiecePrior p in list)
            {
                try
                {
                    sb.Append(p.PieceGen.PieceId); sb.Append(":");
                    sb.Append(p.PieceGen.MasterId); sb.Append(":");
                    sb.AppendLine(p.ToString());
                }
                catch
                {
                }
            }
            logger.log("fin trace {0}", file);
            AsyncFileWriter.Instance.post(file, sb.ToString());
        }

        protected virtual bool noMoreSpace()
        {
            return true;
        }
        protected virtual void prepareExport()
        {
        }

        protected void setExport(exportState state, PiecePrior p)
        {
            setExport(state, p.PieceGen);
        }

        protected void setExport(exportState state, Piece p)
        {
            p.ExportStatus = state;
            PlayListViewModel.setExport(p, state);


            var h = TrackListViewModel.HumanSelected;
            if (h != null)
            {
                if (p.Album == h.Album)
                {
                    TrackListViewModel trackAlbum = TrackListViewModel.getOrCreate(p); // PlayListViewModel.findTrack(App.bib.Musique, p.PieceId);
                    if (trackAlbum != null)
                    {
                        trackAlbum.ExportStatus = state;
                    }

                }
            }

            //var track = PlayListViewModel.findTrack(lastpl, p.PieceId);
            //if (track != null)
            //{
            //    track.ExportStatus = state;
            //}
            //var h = TrackListViewModel.HumanSelected;
            //if (h != null)
            //{
            //    if (p.Album == h.Album)
            //    {
            //        var album = App.getAlbum(h);
            //        var f = album.Find(t => t.PieceId == p.PieceId);
            //        if (f != null)
            //            track.ExportStatus = state;
            //    }
            //  }
        }
        [STAThread]
        private void _copy()
        {

            PlayListViewModel.resetExport(exportState.none);
            logger.log("check existant files");
            try
            {
                List<PiecePrior> _list = null;
                lock (_lock)
                {
                    _list = new List<PiecePrior>(list);
                }
                foreach (PiecePrior piece in _list)
                {
                    try
                    {
                        if (copy != compressState.enCours)
                            return;
                        //1. Vérification que le fichier n'existe pas déjà 
                        bool exists = false;
                        var files = piece.Files;
                        foreach (CFile file in files)
                        {
                            if (copy != compressState.enCours)
                                return;
                            try
                            {
                                string path = conf.dir + file.File;
                                var fv = FileRegister.CheckNow(path);
                                if (fv.ExistsNow)
                                {
                                    if (fv.Length == file.Size)
                                    {
                                        exists = true;
                                        break;
                                    }
                                    else
                                    {
                                        fv.delete();
                                    }
                                }
                            }

                            catch
                            {
                            }
                        }



                        if (exists)
                        {
                            setExport(exportState.present, piece);
                            // PlayListViewModel.setExport(piece.Piece.PieceId, exportState.present);
                            //var track = PlayListViewModel.findTrack(lastpl, piece.Piece.PieceId);
                            //if (track != null)
                            //{
                            //    track.ExportStatus = exportState.present;
                            //}
                        }
                        else
                            setExport(exportState.miss, piece);
                    }
                    catch (Exception e)
                    {
                        App.log.log(e.ToString());
                    }
                }

                logger.log("prepareExport");

                nbFicherSup = 0; nbFichierAdd = 0;
                idCopie = new HashSet<int>();
                idCopieLoc = new HashSet<string>();
                //  presents.Sort(new PriorComparer());
                prepareExport();

                string orgDir = CFile.DefaultFolder;
                foreach (PiecePrior piece in _list)
                {
                    try
                    {
                        if (copy != compressState.enCours)
                            return;

                        int id = piece.PieceGen.MasterId;
                        if (idCopie.Contains(id))
                            continue;
                        var files = piece.Files;
                        bool contFile = false;
                        foreach (CFile file in files)
                        {
                            if (idCopieLoc.Contains(file.File))
                            {
                                contFile = true;
                                break;
                            }
                        }
                        if (contFile)
                            continue;

                        idCopie.Add(id); // idCopie[id] = piece;
                        foreach (CFile file in files)
                        {
                            idCopieLoc.Add(file.File); // [file.File] = piece;
                        }




                        //1. Vérification que le fichier n'existe pas déjà 
                        bool exists = false;
                        foreach (CFile file in files)
                        {
                            if (copy != compressState.enCours)
                                return;
                            try
                            {
                                string path = conf.dir + file.File;
                                var fv = FileRegister.CheckNow(path);
                                if (fv.ExistsNow)
                                {

                                    if (fv.Length == file.Size)
                                    {
                                        exists = true;
                                        break;
                                    }
                                    else
                                    {
                                        fv.delete();
                                    }

                                }
                            }

                            catch
                            {
                            }
                        }



                        if (exists)
                        {
                            //    var track = PlayListViewModel.findTrack(lastpl, piece.Piece.PieceId);
                            //    if (track != null)
                            //    {
                            //        track.ExportStatus = exportState.present; 
                            //    }
                            continue;
                        }

                        //2. Copie du meilleur fichier
                        CFile pertinent = files.getPertinentFile();
                        if (pertinent == null)
                            continue;


                        while (true)
                        {
                            if (copy != compressState.enCours)
                                return;
                            try
                            {
                                var f = FileRegister.CheckNow(pertinent.Path); //  FileInfo f = new  FileInfo FileInfo(pertinent.Path);
                                var freeSpace = getFreeSpace() - conf.marge;
                                long nextfreeAvailable = freeSpace - f.Length;
                                if (nextfreeAvailable < 0)
                                {
                                    if (noMoreSpace())
                                        return;
                                    continue;
                                }
                                App.log.log("copie\t" + piece + "->" + conf.dir + pertinent.File + " ( " + piece.PieceGen + " )");
                                f.copyWithImg(conf.dir + pertinent.File);
                                //  freeSpace = nextfreeAvailable; 
                                //  PlayListViewModel.setExport(piece.Piece.PieceId, exportState.copy);
                                setExport(exportState.copy, piece);
                                //var track = PlayListViewModel.findTrack(lastpl, piece.Piece.PieceId);
                                //if (track != null)
                                //{
                                //    track.ExportStatus = exportState.copy;
                                //}
                                nbFichierAdd++;

                                break;
                            }
                            catch (System.IO.IOException io)
                            {
                                App.log.log(io.Message);
                                //  refreshInfoFreeSpace(); 
                                if (noMoreSpace())
                                    return;
                            }
                        }

                    }

                    catch (Exception ex)
                    {
                        App.log.log(ex.ToString());
                    }


                }
            }
            catch (Exception ex)
            {
                App.log.log(ex.ToString());

            }
            finally
            {
                compressState _copy;
                lock (_lock)
                    _copy = copy;

                if (Query != compressState.none && _copy != compressState.none)
                {
                    var _status = string.Format("statusCalc={0} statusCopy={1} calc={2} copy={3}", endCalcul, endCopy, query, copy);
                    var log = string.Format("Fin de l'export {0} liste{1} éléments\r\n{2} fichier{3} copié{3}\r\n{4} fichier{5} supprimé{6} {7}",
                        listes.Count, (list.Count > 1 ? "s " : " "), nbFichierAdd, (nbFichierAdd > 1 ? "s" : ""), nbFicherSup, (nbFicherSup > 1 ? "s" : ""), (nbFicherSup > 1 ? "s" : ""), _status);
                    App.log.log(log, CAPTION);
                    if (conf.oneShot)
                        ihm.InfoIHm(log, CAPTION);
                    //  ihm.InfoIHm("Fin de l'export " + listes.Count + " liste" + (list.Count > 1 ? "s " : " ") + list.Count + " éléments\r\n" + idCopie.Count + " fichiers copiés\r\n" + nbFicherSup + "fichier" + (nbFicherSup > 1 ? "s" : "") + " supprimé" + (nbFicherSup > 1 ? "s" : ""), CAPTION);
                    //list = new List<PiecePrior>();
                    //listes = new List<List<PiecePrior>>(); 

                    if (_copy == compressState.enCours)
                    {
                        endCopyFinal = true;
                        // PlayListViewModel.resetExport(exportState.none);
                    }

                    OnPropertyChanged("Header");
                }

                lock (_lock)
                {
                    endCopy = true;
                    copy = compressState.none;
                }
                //var log = string.Format("Fin de l'export {0} liste{1} éléments\r\n{2} fichier{3} copié{3}\r\n{4} fichier{5} supprimé{6}",
                //    listes.Count, (list.Count > 1 ? "s " : " "), nbFichierAdd, (nbFichierAdd > 1 ? "s" : ""), nbFicherSup, (nbFicherSup > 1 ? "s" : ""), (nbFicherSup > 1 ? "s" : ""));
                //App.log.log(log, CAPTION);
                //if (conf.oneShot)
                //    ihm.InfoIHm(log, CAPTION);
                ////  ihm.InfoIHm("Fin de l'export " + listes.Count + " liste" + (list.Count > 1 ? "s " : " ") + list.Count + " éléments\r\n" + idCopie.Count + " fichiers copiés\r\n" + nbFicherSup + "fichier" + (nbFicherSup > 1 ? "s" : "") + " supprimé" + (nbFicherSup > 1 ? "s" : ""), CAPTION);
                //list = null;
                //listes = null;

                //if (state == compressState.enCours)
                //{
                //}
                //else
                //    PlayListViewModel.resetExport(exportState.none);

                //lock (_lock)
                //    state = compressState.end;
                //OnPropertyChanged("Header");

            }
        }
    }
    #endif
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\Commande\PlayList\ExportCompress.cs">
    <content><![CDATA[
using System.Collections.Generic;
using pdb.db;
using pdb.db.obj;
using pdb.obj;
using pdb.util;
using pdb.gen;
#if EXPORT
namespace pdb.player.ViewModel.Commande.PlayList
{
    class ExportCompress : ExportCmd
    {
        private List<CFile> files;
        private int index = 0;
        private int indexPresent = 0;
        List<PiecePrior> _all;


        public ExportCompress()
        {
        }
        public override string Header
        {
            get
            {
                string header = base.Header;
                if (header.Contains(ANNULATION_EXPORT))
                    return header;

                return "Exporter la liste et compresser si besoin";

            }
        }
        protected override void prepareExport()
        {
            logger.log("preparation export"); 
            //   BgDict<int, ITrackIdentity> dict = new BgDict<int, ITrackIdentity>();
            files = new List<CFile>();
            index = 0;
            indexPresent = 0;
            //foreach (PiecePrior track in list)
            //{
            //    int id = track.MasterId;
            //    dict[id] = track.Piece;
            //}

            _all = new List<PiecePrior>(all);
            _all.Sort(new PriorComparerDelete());
            _all.Reverse();
#if DEB
            debug.log("prepareExport: _all apres tri"); 
            for (int i = 0; i < _all.Count; i++)
            {
                debug.log("i={0} pp={1}", i, _all[i]);
            }
#endif

            // phase 1 compress
            foreach (PiecePrior p in _all)
            {
                getSecondaryFiles(p.Files);
            }
        }

        private void getSecondaryFiles(CListFile m_files)
        {
            // var m_files = piece.Files;
            if (m_files.Count <= 1)
                return;

            var l = new List<CFile>();
            foreach (CFile file in m_files)
            {
                if (FileRegister.ExistNow(conf.dir + file.File))
                {
                    l.Add(file);
                }
            }
            if (l.Count <= 1)
                return;

            l.Sort(new CFileComparer());

            for (int i = 1; i < l.Count; i++)
                files.Add(l[i]);
        }

        //private CFile getPertinentFile(CPiece piece)
        //{
        //    var m_files = piece.Files;
        //    if (m_files.Count < 1)
        //        return null;

        //    var l = new List<CFile>();
        //    foreach (CFile file in m_files)
        //    {
        //        if (FileRegister.Exist(conf.dir + file.File))
        //        {
        //            l.Add(file);
        //        }
        //    }
        //    if (l.Count < 1)
        //        return null;
        //    if (l.Count >= 2)
        //        l.Sort(new CFileComparer());

        //    return l[0];
        //}

        protected override bool noMoreSpace()
        {
            if (index >= files.Count)
            {
                return noMoreSpace2();
            }

            CFile file = null;
            while (true)
            {
                if (index >= files.Count)
                    return noMoreSpace2();
                file = files[index];
                string path = conf.dir + file.File;
                var fi = FileRegister.CheckNow(path);
                if (fi.ExistsNow)
                {
                    misc.deleteFile(path, file.ToString());
                    //   freeSpace += fi.Length; 
                    return false;
                }
                index++;
            }
        }

        private bool noMoreSpace2()
        {
            if (indexPresent >= _all.Count)
                return true;
            while (true)
            {
                if (indexPresent >= _all.Count)
                    return true;
                var p = _all[indexPresent];
                int id = p.MasterId;
                if (!idCopie.Contains(id))
                {

                    var files = p.Files;

                    bool contFile = false;
                    foreach (CFile file in files)
                    {
                        if (idCopieLoc.Contains(file.File))
                        {
                            contFile = true;
                            break;
                        }
                    }

                    if (!contFile)
                    {
                        //if (files.Exists)
                        //{
                        //var track = PlayListViewModel.findTrack(lastpl, p.PieceId);

                        //App.log.log("supression fichiers de {0}", p);
                        foreach (CFile f in files)
                        {
                            string path = conf.dir + f.File;
                            var fv = FileRegister.CheckNow(path);
                            if (fv.ExistsNow)
                            {
                                misc.deleteWithImg(path, string.Format("{0} {1}", p, f));
                                //  freeSpace += fv.Length; 
                                // PlayListViewModel.setExport(piece.PieceId, exportState.delete);
                                setExport(exportState.delete, p.PieceGen);
                                //if (track != null)
                                //    track.ExportStatus = exportState.delete;
                                nbFicherSup++;
                                return false;
                            }
                        }
                        //  }
                    }
                }
                indexPresent++;

            }
        }
    }
}
#endif]]></content>
  </file>
  <file path="\pdb.player\Vue\AlbumCtl.xaml.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Threading;
using pdb.player.ViewModel;
using pdb.gen.albums;
using pdb.gen;
using System.Collections;
using pdb.util;

namespace pdb.player.Vue
{
    /// <summary>
    /// Interaction logic for AlbumCtl.xaml
    /// </summary>
    public partial class AlbumCtl : UserControl, ItrackProvider
    {
        public static AlbumCtl Instance;
        private DetailAlbumViewModel model;
        private Logger log;
        //    private DataGridRow currentSelected;
        public AlbumCtl()
        {
            InitializeComponent();
            Loaded += new RoutedEventHandler(AlbumCtl_Loaded);
            App.refresh += new EventHandler(App_refresh);
            App.refreshAlbum += new EventHandler(App_refreshAlbum);
            Instance = this;
            dg.Sorting += dg_Sorting;
            log = Logger.getLogger("AlbumCtl");
        }

        void App_refreshAlbum(object sender, EventArgs e)
        {
            init();
        }

        void dg_Sorting(object sender, DataGridSortingEventArgs e)
        {

            DataGridColumn column = e.Column;
            if ("Classement".Equals(column.Header))
            {
                if (dg.ItemsSource == null)
                    return;
                // prevent the built-in sort from sorting


                ListSortDirection direction = (column.SortDirection != ListSortDirection.Descending) ? ListSortDirection.Ascending : ListSortDirection.Descending;

                //set the sort order on the column
                // 

                //use a ListCollectionView to do the sort.
                ListCollectionView lcv = (ListCollectionView)CollectionViewSource.GetDefaultView(dg.ItemsSource);
                if (lcv == null)
                    return;


                e.Handled = true;
                //this is my custom sorter it just derives from IComparer and has a few properties
                //you could just apply the comparer but i needed to do a few extra bits and pieces
                var comparer = new PieceSimpleClassementComparer(direction == ListSortDirection.Ascending);

                //apply the sort
                lcv.CustomSort = comparer;
                column.SortDirection = direction;
            }


        }

        public class PieceSimpleClassementComparer : IComparer
        {
            private int sens;
            public PieceSimpleClassementComparer(bool ascending)
            {
                this.sens = ascending ? 1 : -1;
            }
            private static PieceTrackNumberComparer tn = new PieceTrackNumberComparer();
            public int Compare(object xx, object yy)
            {
                var x = xx as TrackListViewModel;
                var y = yy as TrackListViewModel;
                int cmp = x.PieceGen.Classement.CompareTo(y.PieceGen.Classement);
                if (cmp != 0) return sens * cmp;

                return tn.Compare(x.PieceGen, y.PieceGen);
                //  return -x.RapportClassement.CompareTo(y.RapportClassement);
            }
        }




        void App_refresh(object sender, EventArgs e)
        {
            init();
        }

        void AlbumCtl_Loaded(object sender, RoutedEventArgs e)
        {
            this.model = new DetailAlbumViewModel();
            model.PropertyChanged += new PropertyChangedEventHandler(model_PropertyChanged);
            init();
            TrackListViewModel.CurrentHumanSelectedChanged += new EventHandler(TrackListViewModel_CurrentHumanSelectedChanged);

        }

        void model_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (string.IsNullOrEmpty(e.PropertyName))
            {
                init();
            }
        }


        void TrackListViewModel_CurrentHumanSelectedChanged(object sender, EventArgs e)
        {
            init();
        }

        private void init()
        {
            var client = new SimpleClient("AlbumCtl::init()");
            App.Dispatch(() =>
                {
                    client.Start();
                    App.log.log("albumCtl.init");
                    //SortDescriptionCollection sort = null;
                    //ICollectionView view = null;
                    ////   currentSelected = dg.SelectedItem as TrackListViewModel;

                    //view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
                    //if (view != null)
                    //    sort = view.SortDescriptions;

                    //List<SortDescription> _sort = null;
                    //if (sort != null)
                    //    _sort = new List<SortDescription>(sort);
                    ////base.DataContext = null;
                    //client.log("recup sort"); 
                    //
                    //dgalbums.ItemsSource = null;
                    base.DataContext = model;
                    client.log("init DataContext");
                    var alb = model.Album;
                    dg.ItemsSource = null;
                    dg.ItemsSource = alb;

                    //dgalbums.SelectedItem = TrackListViewModel.HumanSelected; 

                    client.log("init dg.ItemsSource");

                    //
                    dgalbums.ItemsSource = null;
                    dgalbums.Items.Clear();
                    dgalbums.ItemsSource = model.Albums;
                    client.log("init dgalbums.ItemsSource=fin");

                    //dg.ApplySort(_sort);
                    //   client.log("init dgalbums.ItemsSource");

                    checkItems(true);

                    // Focus(model.SelectedTrackInAlbumView);
                }, client);

        }


        private void checkItems(bool reset)
        {
            ////  var l = new List<TrackListViewModel>();

            //ICollectionView view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
            //if (view == null)
            //    return;

            //var selectedTracks = new List<TrackListViewModel>(dg.SelectedItems.Count);
            //foreach (TrackListViewModel t in dg.SelectedItems)
            //    selectedTracks.Add(t);
            //var tracks = dg.Items;


            ////    IDisposable w = view.DeferRefresh();
            //try
            //{


            //    if (reset)
            //    {
            //        TrackListViewModel selected = null;
            //        if (TrackListViewModel.HumanSelected != null)
            //        {
            //            selected = TrackListViewModel.HumanSelected;  // PlayListViewModel.findTrack(App.bib.Musique, TrackListViewModel.HumanSelected.MasterId);
            //        }

            //        //foreach (TrackListViewModel track in view)
            //        //{
            //        //    if (track.MasterId == selected.MasterId)
            //        //        track.IsSelected = true;
            //        //    else
            //        //        track.IsSelected = false;
            //        //}
            //        // dg.SelectedItems.Clear();
            //        //  w.Dispose(); w = null;


            //        if (selected != null)
            //        {
            //            // l.Add(selected);
            //            if (!dg.SelectedItems.Contains(selected))
            //                dg.SelectedItems.Add(selected);
            //        }
            //        //foreach (TrackListViewModel track in selectedTracks)
            //        //{
            //        //    if (track.MasterId != selected.MasterId)
            //        //    {
            //        //        dg.SelectedItems.Remove(track);
            //        //        track.IsSelected = false;
            //        //        //track.refresh();
            //        //    }
            //        //}
            //    }
            //    else
            //    {
            //        //var currentPl = PlayListViewModel.SelectedPlayList;
            //        //foreach (TrackListViewModel track in selectedTracks)
            //        //{
            //        //    //  l.Add(track);
            //        //    track.IsSelected = true;

            //        //    //if (currentPl != null)
            //        //    //{
            //        //    //    TrackListViewModel trackMain =  PlayListViewModel.findTrack(currentPl, track.PieceId);
            //        //    //    if (trackMain != null)
            //        //    //        trackMain.IsSelected = true;
            //        //    //}
            //        //    //track.refresh();
            //        //}


            //    }
            //    //lock (this)
            //    //   this.selectedTracks = l;
            //}
            //finally
            //{
            //    //if (w != null)
            //    //    w.Dispose();
            //}

        }

        //private void checkItems()
        //{
        //    var l = new List<TrackListViewModel>();

        //    ICollectionView view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
        //      IDisposable w = view.DeferRefresh();
        //      try
        //      {
        //          var currentPl = PlayListViewModel.SelectedPlayList; 
        //          foreach (TrackListViewModel track in dg.SelectedItems)
        //          {
        //              l.Add(track);
        //              track.IsSelected = true;
        //              if (currentPl != null)
        //              {
        //                  TrackListViewModel trackMain = PlayListViewModel.findTrack(currentPl, track.PieceId);
        //                  if (trackMain != null)
        //                      trackMain.IsSelected = true;
        //              }
        //              //track.refresh();
        //          }
        //      }

        //      finally
        //      {
        //          if (w != null)
        //              w.Dispose();
        //      }

        //}



        private void dgAlbum_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var t = dg.SelectedItem as TrackListViewModel;
            if (t == null)
                return;
            ItrackProvider provider = this;
            //var pl = PlayListViewModel.SelectedPlayList;
            //if (pl != null)
            //{
            //    //var f = PlayListViewModel.findTrack(pl, t.PieceId);
            //    //if (f != null)
            //    //{
            //    //    t = f;
            //        provider = null; // OUAILLE?
            //    //}
            //}

            //TrackListViewModel t = null;
            //e.
            //var r = sender as DataGridRow;
            //if (r != null) { }
            ////  t = r.Item as TrackListViewModel;
            //else
            //{
            //    var c = sender as DataGridCell;
            //    r = c.
            //}
            //t = r.Item as TrackListViewModel;
            PlayerViewModel.reset(provider, t);
        }

        private void dg_MouseClick(object sender, MouseButtonEventArgs e)
        {
            //var currentSelected = sender as DataGridRow;
            //var t = currentSelected.Item as TrackListViewModel;
            //currentSelected.IsSelected = true;

            ////  currentSelected.MoveFocus(new TraversalRequest(FocusNavigationDirection.Next));  
            //TrackListViewModel.setHumanSelected(App.bib.Musique, t);

            checkItems(false);
            PlayerViewModel.Instance.makeResume();
        }

        public System.ComponentModel.ICollectionView PresentationTracks
        {
            get { return CollectionViewSource.GetDefaultView(dg.ItemsSource); }
        }


        public PlayListViewModel PlayList
        {
            get { return model.PlayListViewModel; }
        }

        public void Focus(TrackListViewModel t)
        {
            scrolItem = t;
            scrol();
        }

        public void focusHelp()
        {
            var t = TrackListViewModel.CurrentPlaying;
            if (t == null)
                t = TrackListViewModel.HumanSelected;
            if (t == null) return;
            Focus(t);
        }



        private TrackListViewModel scrolItem;
        void scrol()
        {
            log.log("scroll item->{0}", scrolItem);
            var client = new SimpleClient("AlbumCtl::scrol()");
            App.Instance.dispatch(() =>
            {
                //if (dg.Items.Count == 0)
                //{
                //    log.log("scroll sans items");
                //    return;
                //}

                if (scrolItem == null)
                {
                    log.log("scrollItem null");
                    return;
                }

                try
                {
                    dg.ScrollIntoView(scrolItem);
                }
                catch (Exception ex)
                {
                    log.Error("erreur scroll " + ex.Message);
                }
            }, client);


        }

        public void doFilter(string filter)
        {

        }


        public List<TrackListViewModel> SelectedTracks
        {
            get
            {
                var list = new List<TrackListViewModel>();
                foreach (TrackListViewModel track in PresentationTracks)
                    list.Add(track);
                return list;
            }
        }

        private void cbx_mode_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            albumMode mode = (albumMode)cbx_mode.SelectedIndex;
            model.Mode = mode;
            init();
        }




    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\ClassementCtl.xaml">
    <content><![CDATA[<UserControl x:Class="pdb.player.Vue.ClassementCtl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             xmlns:l="clr-namespace:pdb.player.Vue"
             d:DesignHeight="300" d:DesignWidth="300">
    <Grid Background="{Binding IhmInDispo, Converter={StaticResource dispo},  UpdateSourceTrigger=PropertyChanged}" >
        <!--<Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="3" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>-->
        <!--<DataGrid  Grid.Column="0" DockPanel.Dock="Bottom" 
                       Name="dgAlbum" 
                       AutoGenerateColumns="False" 
                       ScrollViewer.CanContentScroll="True" 
                       SelectedItem="{Binding SelectedTrackInAlbumView}">

            <DataGrid.ItemContainerStyle>
                <Style TargetType="{x:Type DataGridRow}">
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                    <Setter Property="FontWeight" Value="Normal" />
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="FontWeight" Value="Bold" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.ItemContainerStyle>

            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow">
                    <EventSetter Event="MouseDoubleClick" Handler="dgAlbum_MouseDoubleClick" />
                    <Setter Property="DataGridRow.IsSelected" Value="{Binding isSelected, Mode=TwoWay}" />
                    <Setter Property="DataGridRow.Background" Value="White" />
                    <Style.Triggers>
                        <Trigger Property="DataGridRow.IsSelected" Value="True">
                            <Setter Property="DataGridRow.Background" Value="Brown" />
                        </Trigger>
                    </Style.Triggers>

                </Style>
            </DataGrid.RowStyle>

            <DataGrid.Columns>
                <DataGridCheckBoxColumn Header="" Binding="{Binding Enabled}" />
                <DataGridTextColumn Binding="{Binding TrackNumber,Converter={StaticResource Int}}"/>
                <DataGridTextColumn Header="Nom" Binding="{Binding Name}"/>
                <DataGridTextColumn Header="Classement" Binding="{Binding Classement}"/>
            </DataGrid.Columns>

        </DataGrid>
        <GridSplitter Grid.Column="1" HorizontalAlignment="Stretch" />-->

        <Grid Grid.Column="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="3" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <Grid Grid.Row="0" Margin="5"  >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="90" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <CheckBox Grid.Column="0" Style="{StaticResource cb}"  Name="cbEnabled" ToolTip="Afficher seulement les désactivés" IsChecked="{Binding OnlyDisabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  />
                <CheckBox Grid.Column="1" Style="{StaticResource cb}"  Name="cbUncheck" ToolTip="Décocher après classement" IsChecked="{Binding UncheckAfter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  />
                <CheckBox Grid.Column="2"  Style="{StaticResource cb}" Name="cbAuto" ToolTip="Passage au morceau suivant automatiquement" IsChecked="{Binding Auto, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  />
                <TextBox Grid.Column="3"  Name="TbClass"   Text="{Binding Classement, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource cl} }" PreviewKeyDown="TbClass_PreviewKeyDown" MouseEnter="TbClass_MouseEnter" PreviewMouseDown="TbClass_PreviewMouseDown" MouseLeave="TbClass_MouseLeave"  />
                <TextBox Grid.Column="4"  Name="TbName" Text="{Binding Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <Button Grid.Column="5" Name="btRecord" DockPanel.Dock="Right" Content="Enregistrer"  Command="{Binding Record,UpdateSourceTrigger=PropertyChanged}" 
                        />

            </Grid>


            <!--<ListView  DockPanel.Dock="Top" Grid.Row="0" Name="dg"  ScrollViewer.CanContentScroll="True" >
                <ListView.ItemContainerStyle>
                    <Style TargetType="{x:Type ListViewItem}">
                        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                        <Setter Property="FontWeight" Value="Normal" />
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="FontWeight" Value="Bold" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ListView.ItemContainerStyle>
                <ListView.View>
                    <GridView>
                        <GridViewColumn DisplayMemberBinding="{Binding Enabled}"/>
                        <GridViewColumn DisplayMemberBinding="{Binding Name}"/>
                        <GridViewColumn DisplayMemberBinding="{Binding Classement}"/>
                    </GridView>
                </ListView.View>
            </ListView>-->

            <l:EnhancedDataGrid Grid.Row="1" AutoGenerateColumns="False"  DockPanel.Dock="Top" x:Name="dg" x:Uid="classement"  ScrollViewer.CanContentScroll="True" ConfCouleur="classement" >
                <!--SelectedItem="{Binding SelectedTrackInClassView}" >-->
                <DataGrid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="infos" Command="{Binding}"/>
                    </ContextMenu>
                </DataGrid.ContextMenu>
                <DataGrid.ItemContainerStyle>
                    <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
                        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        <Setter Property="FontWeight" Value="Normal" />
                        <Style.Triggers>
                            <!--<Trigger Property="IsSelected" Value="True">
                                <Setter Property="Foreground" Value="Brown" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Exists}" Value="False">
                                <Setter Property="Foreground" Value="LightGray" />
                            </DataTrigger>-->

                        </Style.Triggers>
                    </Style>
                </DataGrid.ItemContainerStyle>
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow">
                        <EventSetter Event="MouseDoubleClick" Handler="dgMouseDoubleClick" />
                        <Setter Property="DataGridRow.IsSelected" Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                        <Setter Property="Background" Value="{Binding TV, Converter={StaticResource colorExport}, ConverterParameter=classement,  UpdateSourceTrigger=PropertyChanged}" />
                       
                        <!--<Style.Triggers>
                            <Trigger Property="DataGridRow.IsSelected" Value="True">
                                <Setter Property="DataGridRow.Background" Value="Brown" />
                            </Trigger>
                          

                        </Style.Triggers>-->
                    </Style>
                </DataGrid.RowStyle>
                <DataGrid.Columns>
                    <!--<DataGridCheckBoxColumn Header="" Binding="{Binding Enabled}" />-->
                    <DataGridTemplateColumn Header="" >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <CheckBox Style="{StaticResource cb}"  IsChecked="{Binding Enabled,UpdateSourceTrigger=PropertyChanged}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTextColumn Header="Nom" Binding="{Binding Name}"/>
                    <DataGridTextColumn Header="Classement" Binding="{Binding Classement,Converter={StaticResource cl} }"/>
                    <DataGridTextColumn Header="Album" Binding="{Binding Album}"/>
                    <DataGridTextColumn Header="Artiste"  Binding="{Binding Artist}"/>
                    <DataGridTextColumn Header="Grouping" Binding="{Binding Grouping, Mode=OneWay}"/>
                    <DataGridTextColumn Header="Maj"  Binding="{Binding UpdateClassement, Mode=OneWay,Converter={StaticResource date}}" />
                    <DataGridTextColumn Header="MajAlbum"  Binding="{Binding AlbumUpdateClassement, Mode=OneWay, Converter={StaticResource date}}" />

                    <DataGridTextColumn Header="Delai"  Binding="{Binding UpdateClassement, Mode=OneWay,Converter={StaticResource delai}}" />
                    <DataGridTextColumn Header="DelaiAlbum"  Binding="{Binding AlbumUpdateClassement, Mode=OneWay, Converter={StaticResource delai}}" />
                    <DataGridTextColumn Header="Motif" Binding="{Binding SelectedMotif,  Mode=OneWay,UpdateSourceTrigger=PropertyChanged, Converter={StaticResource motif}}"/>


                </DataGrid.Columns>

            </l:EnhancedDataGrid>


            <GridSplitter Grid.Row="2" HorizontalAlignment="Stretch"   ResizeBehavior="PreviousAndNext"  IsTabStop="True" />

            <!--<Grid Grid.Row="3" HorizontalAlignment="Stretch">
                <DataGrid ItemsSource="{Binding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                       Name="dgStat"  IsReadOnly="True"
          Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DockPanel}}, Path=ActualWidth}"
                       AutoGenerateColumns="False" >
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="-5" Binding="{Binding -5}"/>
                        <DataGridTextColumn Header="-4" Binding="{Binding -4}"/>
                        <DataGridTextColumn Header="-3" Binding="{Binding -3}"/>
                        <DataGridTextColumn Header="-2" Binding="{Binding -2}"/>
                        <DataGridTextColumn Header="-1" Binding="{Binding -1}"/>
                        <DataGridTextColumn Header="0" Binding="{Binding  0}" >
                            
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="1" Binding="{Binding  1}"/>
                        <DataGridTextColumn Header="2" Binding="{Binding  2}"/>
                        <DataGridTextColumn Header="3" Binding="{Binding  3}"/>
                        <DataGridTextColumn Header="4" Binding="{Binding  4}"/>
                        <DataGridTextColumn Header="5" Binding="{Binding  5}"/>
                    </DataGrid.Columns>
                    <DataGrid.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text ="{Binding}" Width="Auto"  HorizontalAlignment="Stretch"/>
                        </DataTemplate>
                    </DataGrid.ItemTemplate>
                </DataGrid>
            </Grid>-->
            <Grid Name="tab" Grid.Row="3" >

            </Grid>
            <Grid Grid.Row="4">
                <Grid.RowDefinitions>
                    <RowDefinition  Height="Auto"/>
                    <RowDefinition />
                    <RowDefinition />

                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <!--<TextBlock Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" Name="d02" Text="{Binding D02}" />
            <TextBlock Grid.Row="0" Grid.Column="3" Grid.ColumnSpan="3" Name="d35" Text="{Binding D35}" />
            <TextBlock Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Name="d01" Text="{Binding D01}" />
            <TextBlock Grid.Row="1" Grid.Column="2" Grid.ColumnSpan="2" Name="d23" Text="{Binding D23}" />
            <TextBlock Grid.Row="1" Grid.Column="4" Grid.ColumnSpan="2" Name="d45" Text="{Binding D45}" />-->


                <TextBlock Grid.Row="1" Text="{Binding Path=Tracks.Count}" />
                <TextBlock Grid.Row="1" Grid.Column="1" Name="d02" Text="{Binding D02}" />
                <TextBlock Grid.Row="1" Grid.Column="2" Name="d35" Text="{Binding D35}" />
                <TextBlock Grid.Row="1" Grid.Column="3" Name="d01" Text="{Binding D01}" />
                <TextBlock Grid.Row="1" Grid.Column="4" Name="d23" Text="{Binding D23}" />
                <TextBlock Grid.Row="1" Grid.Column="5" Name="d45" Text="{Binding D45}" />
                <TextBlock Grid.Row="2" Grid.Column="0" Name="d0" Text="{Binding D0}" />
                <TextBlock Grid.Row="2" Grid.Column="1" Name="d1" Text="{Binding D1}" />
                <TextBlock Grid.Row="2" Grid.Column="2" Name="d2" Text="{Binding D2}" />
                <TextBlock Grid.Row="2" Grid.Column="3" Name="d3" Text="{Binding D3}" />
                <TextBlock Grid.Row="2" Grid.Column="4" Name="d4" Text="{Binding D4}" />
                <TextBlock Grid.Row="2" Grid.Column="5" Name="d5" Text="{Binding D5}" />
            </Grid>

        </Grid>
    </Grid>
</UserControl>
]]></content>
  </file>
  <file path="\pdb.player\Vue\ClassementCtl.xaml.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using pdb.player.ViewModel;
using pdb.gen.stat;
using pdb.player.Vue.Adorn;
using System.ComponentModel;
using pdb.gen;
using System.Text.RegularExpressions;
using System.Windows.Threading;
using pdb.player.Vue.Util;
using pdb.player.ViewModel.Colors;
using pdb.util;
using System.Threading;

namespace pdb.player.Vue
{
    public class TB : UIElement
    {
        private Border border;
        private TextBlock tb;
        public TB()
        {
            border = new Border();
            border.BorderThickness = new Thickness(0.3);
            border.BorderBrush = Brushes.Gray;

            tb = new TextBlock();
            tb.TextAlignment = TextAlignment.Center;
            border.Child = tb;
            tb.FontSize = 10;
            tb.HorizontalAlignment = HorizontalAlignment.Stretch;
            tb.Visibility = System.Windows.Visibility.Visible;
        }

        public Brush Background { set { tb.Background = value; } }
        public string Content { set { tb.Text = value; } }

        protected override bool IsEnabledCore
        {
            get
            {
                return true;
            }
        }




    }


    /// <summary>
    /// Interaction logic for ClassementCtl.xaml
    /// </summary>
    public partial class ClassementCtl : UserControl, IGradiant, IClassementObserver
    {



        private DetailClassementViewModel model;
        private StatCtl[,] tbs = new StatCtl[DynamicStat.ROWS + 1, DynamicStatLigne.COLS];
        private Border[,] borders = new Border[DynamicStat.ROWS + 1, DynamicStatLigne.COLS];
        private ILogger log;
        public ClassementCtl()
        {

            InitializeComponent();
            GradiantBuilder.Instance.Add(this);
            TbClass.PreviewTextInput += new TextCompositionEventHandler(TbClass_PreviewTextInput);

            for (int i = -DynamicStatLigne.SEMI_COLS; i <= DynamicStatLigne.SEMI_COLS; i++)
            {
                var col = new ColumnDefinition();
                col.Width = new GridLength(1, GridUnitType.Star);
                tab.ColumnDefinitions.Add(col);
            }

            for (int j = 0; j <= DynamicStat.ROWS; j++)
            {
                var row = new RowDefinition();
                row.Height = new GridLength(1, GridUnitType.Star);
                tab.RowDefinitions.Add(row);
            }

            for (int c = 0; c < DynamicStatLigne.COLS; c++)
            {
                var border = new Border();
                border.BorderThickness = new Thickness(0.3);
                border.BorderBrush = Brushes.Gray;
                border.Background = Brushes.LightGray;
                border.VerticalAlignment = System.Windows.VerticalAlignment.Center;
                border.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
                border.ClipToBounds = true;
                var tb = new TextBlock();
                tb.VerticalAlignment = System.Windows.VerticalAlignment.Stretch;
                tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
                tb.Background = Brushes.LightGray;
                tb.Text = (c - DynamicStatLigne.SEMI_COLS).ToString();
                tb.TextAlignment = TextAlignment.Center;
                border.Child = tb;
                tab.Children.Add(border);
                Grid.SetRow(border, 0);
                Grid.SetColumn(border, c);
            }


            for (int r = 1; r <= DynamicStat.ROWS; r++)
            {
                for (int c = 0; c < DynamicStatLigne.COLS; c++)
                {
                    var tb = new StatCtl();
                    //var border = new Border();
                    //border.BorderThickness = new Thickness(0.3);
                    //border.BorderBrush = Brushes.Gray;

                    //border.VerticalAlignment = System.Windows.VerticalAlignment.Stretch;
                    ////var tb = new TextBlock();
                    ////tb.TextAlignment = TextAlignment.Center;

                    //////tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
                    ////tb.VerticalAlignment = System.Windows.VerticalAlignment.Center;
                    ////tb.FontSize = 10;


                    //border.Child = tb;
                    //    border.ClipToBounds = true;
                    tbs[r, c] = tb;
                    // borders[r, c] = border;


                    // AdornedControl ac = new AdornedControl(); 

                    // tb.BorderThickness = new Thickness(0.2) ;
                    // tb.BorderBrush = Brushes.Gray;
                    // tb.FontSize = 10;


                    tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
                    tb.Margin = new Thickness(0);
                    tb.Padding = new Thickness(0);

                    //tab.Children.Add(border);

                    //Grid.SetRow(border, r);
                    //Grid.SetColumn(border, c);

                    tab.Children.Add(tb);
                    Grid.SetRow(tb, r);
                    Grid.SetColumn(tb, c);

                    //if (r == 0)
                    //{
                    //    tb.Background = Brushes.LightGray;
                    //    tb.Text = (c - DynamicStatLigne.SEMI_COLS).ToString();
                    //}


                    if (c == DynamicStatLigne.SEMI_COLS || r == 3)
                        tb.FontWeight = FontWeights.Bold;
                }
            }




            this.Loaded += new RoutedEventHandler(ClassementCtl_Loaded);
        }
        Regex regex = new Regex(@"[0-5.\ ]+");
        void TbClass_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            var text = e.Text;
            if (!string.IsNullOrEmpty(text))
            {
                //regex that matches disallowed text
                if (!regex.IsMatch(text))
                    e.Handled = true;
            }

        }

        void ClassementCtl_Loaded(object sender, RoutedEventArgs e)
        {
            this.classProvider = new Provider(dg);
            // this.albumProvider = new Provider(dgAlbum); 
            this.model = new DetailClassementViewModel(this);
            App.DetailClassementViewModel = model;
            model.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(model_PropertyChanged);
            TrackListViewModel.CurrentSelectedChanged += new EventHandler(TrackListViewModel_CurrentSelectedChanged);
            model.Classement = "";
            btRecord.IsDefault = true;
            init(NUllClient.NULL);
            log = Logger.getLogger("ClassementCtl");
        }

        void TrackListViewModel_CurrentSelectedChanged(object sender, EventArgs e)
        {
            // init(); 
        }

        void model_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            init(NUllClient.NULL);
        }

        private class CPieceComparerByQualityAndLength2 : IComparer<TrackListViewModel>
        {
            private static IComparer<Piece> qual = new CPieceComparerByQualityAndLength();
            int IComparer<TrackListViewModel>.Compare(TrackListViewModel x, TrackListViewModel y)
            {
                return -qual.Compare(x.PieceGen, y.PieceGen);
                // return -x.PieceGen.Rank.Twice.CompareTo(y.PieceGen.Rank.Twice);
            }
        }

        private void init(IClient client)
        {


            if (client.Cancel)
                return;
            App.Dispatch(() =>
                {
                    client.Start();
                    //SortDescriptionCollection sort = null;
                    //ICollectionView view = null;

                    int caretIndex = TbClass.CaretIndex;
                    TbClass.IsReadOnly = true;

                    //view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
                    //if (view != null)
                    //    sort = view.SortDescriptions;

                    //List<SortDescription> _sort = null;
                    //if (sort != null)
                    //    _sort = new List<SortDescription>(sort);


                    if (client.Cancel)
                        return;
                    base.DataContext = null;
                    try
                    {
                        model.reset();
                        dg.ItemsSource = null;
                        if (client.Cancel)
                            return;
                        var tracks = model.getTracks(client);

                        if (tracks == null)
                            return;
                        if (client.Cancel)
                            return;
                        tracks.Sort(new CPieceComparerByQualityAndLength2());
                        dg.ItemsSource = tracks;
                        //foreach (TrackListViewModel t in tracks)
                        //    t.refresh(); 

                        //ICollectionView source = CollectionViewSource.GetDefaultView(dg.ItemsSource);
                        //if (source != null)
                        //{
                        //    if (source.SortDescriptions != null)
                        //        source.SortDescriptions.Clear();
                        //    source.SortDescriptions.Add(new SortDescription("Classement", ListSortDirection.Descending));
                        //}
                        //  tracks.init();
                        //dgAlbum.ItemsSource = null;
                        //object sel; 
                        //if (dgAlbum.Items.Count > 0)
                        //{
                        //    sel = dgAlbum.SelectedItem; 
                        //}
                        //dgAlbum.ItemsSource = model.Album;
                        //dgStat.ItemsSource = null;

                        //var stats = model.Stats;
                        //dgStat.DataContext = null; 
                        //dgStat.DataContext = stats.DefaultView;
                        //dgStat.ItemsSource = stats.DefaultView; 
                        if (client.Cancel)
                            return;
                        var stats = model.getStats(client);
                        if (stats == null)
                            return;

                        //for (int c = -DynamicStatLigne.SEMI_COLS; c <= DynamicStatLigne.SEMI_COLS; c++)
                        //{
                        //    var tb = tbs[0, c + DynamicStatLigne.SEMI_COLS];
                        //    tb.Background = Brushes.LightGray;
                        //    tb.Text = (c - DynamicStatLigne.SEMI_COLS).ToString();
                        //    tb.InvalidateVisual();
                        //}
                        if (client.Cancel)
                            return;
                        for (int r = 1; r <= DynamicStat.ROWS; r++)
                        {

                            var list = new List<int>(from c in stats[r - 1] select c);
                            list.Sort();
                            int count = list.Count;
                            int max = list[count - 1];
                            int max2 = list[count - 2];
                            double f = max2 * 1.5;
                            f = System.Math.Round(f);
                            if (f > 2 && f < max)
                                max = (int)f;
                            //for (int c = -DynamicStatLigne.SEMI_COLS; c <= DynamicStatLigne.SEMI_COLS; c++)
                            //{
                            //    int nb = stats[r - 1][c];
                            //    if (nb > max)
                            //        max = nb;
                            //}
                            for (int c = -DynamicStatLigne.SEMI_COLS; c <= DynamicStatLigne.SEMI_COLS; c++)
                            {
                                try
                                {
                                    //  var row = stats.Rows[r-1][c.ToString()]; 
                                    int nb = stats[r - 1][c];
                                    var tb = tbs[r, c + DynamicStatLigne.SEMI_COLS];
                                    if (nb > 0)
                                        tb.Text = nb.ToString();
                                    else
                                        tb.Text = "";
                                    tb.setValue(nb, max);
                                    tb.InvalidateVisual();
                                    //var b = borders[r, c + DynamicStatLigne.SEMI_COLS];
                                    //var layer = AdornerLayer.GetAdornerLayer(b);
                                    //try { layer.Remove((layer.GetAdorners(b))[0]); }
                                    //catch { }
                                    //layer.Add(new BarAdorner(b, nb, max));


                                }
                                catch (Exception ex)
                                {
                                    App.log.log(ex.ToString());
                                }


                                // tbs[r, c + DynamicStatLigne.SEMI_COLS].Text = stats.Rows[r - 1][c.ToString()].ToString(); 
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        App.log.log(ex.ToString());
                    }
                    finally
                    {
                        if (!client.Cancel)
                        {
                            base.DataContext = model;
                            // view = CollectionViewSource.GetDefaultView(dg.ItemsSource);

                            //   dg.ApplySort(_sort);
                            TbClass.CaretIndex = caretIndex;
                            TbClass.IsReadOnly = false;

                            client.End();
                        }
                    }
                }, client);
        }

        private void btRecord_Click(object sender, RoutedEventArgs e)
        {
            model.record();

        }

        private ItrackProvider classProvider;
        private ItrackProvider albumProvider;

        private void dgMouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var r = sender as DataGridRow;
            var t = r.Item as TrackListViewModel;
            PlayerViewModel.reset(classProvider, t);
        }

        //private void dgAlbum_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        //{
        //    var r = sender as DataGridRow;
        //    var t = r.Item as TrackListViewModel;
        //    PlayerViewModel.reset(albumProvider, t);
        //}

        private class Provider : ItrackProvider
        {
            private DataGrid dt;
            public Provider(DataGrid dt)
            {
                this.dt = dt;
            }

            public System.ComponentModel.ICollectionView PresentationTracks
            {
                get { return CollectionViewSource.GetDefaultView(dt.ItemsSource); }
            }

            public PlayListViewModel PlayList
            {
                get { return null; }
            }

            public void Focus(TrackListViewModel t)
            {

            }


            public void doFilter(string filter)
            {

            }

            public List<TrackListViewModel> SelectedTracks
            {
                get
                {
                    var list = new List<TrackListViewModel>();
                    foreach (TrackListViewModel track in PresentationTracks)
                        list.Add(track);
                    return list;
                }
            }
        }

        //public System.ComponentModel.ICollectionView PresentationTracks
        //{
        //    get { return CollectionViewSource.GetDefaultView(dgAlbum.ItemsSource); }
        //}

        public PlayListViewModel PlayList
        {
            get { return null; }
        }

        public void Focus(int index)
        {

        }

        ViewModel.Colors.Gradient IGradiant.Conf
        {
            get { return Couleurs.Instance.classement.gradient; }
        }

        bool IGradiant.sensGradient
        {
            get { return true; }
        }

        void IBackGround.setBackground(Brush brush)
        {
            dg.Background = brush;
        }

        void IClassementObserver.signalClassementChange(IClient client)
        {
            init(client);
        }

        private void TbClass_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            log.log("TbClass_PreviewKeyDown");
            App.Indispo = true;
        }

        private void TbClass_MouseEnter(object sender, MouseEventArgs e)
        {
            log.log("TbClass_MouseEnter");
            App.Indispo = true;
        }

        private void TbClass_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            log.log("TbClass_PreviewMouseDown");
            App.Indispo = true;
        }

        private void TbClass_MouseLeave(object sender, MouseEventArgs e)
        {
            log.log("TbClass_MouseLeave");
            App.Indispo = false;
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\ConfAlbumSortW.xaml.cs">
    <content><![CDATA[using System;
using System.Windows;
using pdb.gen.Tuning;
using pdb.gen;
using pdb.player.Vue.Conf;
using System.Windows.Controls;
using pdb.gen.stat;
using pdb.player.ViewModel;
using System.Collections.Generic;
using pdb.db.obj;

namespace pdb.player.Vue
{
    /// <summary>
    /// Interaction logic for ConfAlbumSortW.xaml
    /// </summary>
    public partial class ConfAlbumSortW : Window, IConfSort
    {
        private ConfAlbumSort conf;
        private ConfMedianneW first;
        private ConfMedianneW second;
        private static bool _idem;
        public ConfAlbumSortW()
        {
            InitializeComponent();
            this.Loaded += new RoutedEventHandler(ConfAlbumSortW_Loaded);
        }

        void ConfAlbumSortW_Loaded(object sender, RoutedEventArgs e)
        {
            bt_ok.IsDefault = true;

            display();
        }

        public ConfAlbumSortW(ConfAlbumSort conf)
            : this()
        {
            this.conf = conf;
            first = new ConfMedianneW(conf.Composants[0], this);
            gfirst.Children.Add(first);
            if (conf.Composants.Count > 1)
            {
                second = new ConfMedianneW(conf.Composants[1], this);
                gsecond.Children.Add(second);
            }

            InitializeComponent();
        }

        void display()
        {
          
            tb_stackSize.Text = conf.stackSize.ToString();
            tb_stackBefore.Text = conf.stackBefore.ToString();
         
            cb_createAll.IsChecked = conf.createAll;
            cb_createInter.IsChecked = conf.createInter;
            cb_createCourant.IsChecked = conf.createCourant;
            dp_date.SelectedDate = conf.lastModif;
            cb_idem.IsChecked = _idem;
            cb_checkStack.IsChecked = conf.checkStack;
            cb_stackEnabled.IsChecked = conf.stackEnabled;
            cb_only_new.IsChecked = conf.stackOnlyNew; 
         

            first.display();
            if (second != null)
                second.display();


            //var list = conf.Composants;
            //var item1 = list[0];
            //cb_enabled.IsChecked = item1.enabled;
            //cbxSort.SelectedIndex = (int)item1.type;
            //tb_medianne.Text = item1.medianne.ToString();
            //cb_quasi.IsChecked = item1.quasi;
            //cb_lissage.IsChecked = item1.lissage;
            //cb_removeEpsilon.IsChecked = item1.removeEpsilon;
            //cb_reSort.IsChecked = item1.reSort;
            //cb_removeFirst.IsChecked = item1.removeFirst;
            //cb_deleteFirst.IsChecked = item1.deleteFirst;
            //cbx1_removeLast.SelectedIndex = (int)item1.removeLast;
            //cb_cumul.IsChecked = item1.cumul;
            //cb_noAdd.IsChecked = item1.noAdd;
            //tb_safe.Text = item1.safe.ToString();
            //tb_coeff.Text = item1.coeffVirt.ToString();
            //tb_exp.Text = item1.expEnabled.ToString();
            //tb_zero.Text = Piece.getClassementEquiv(item1.zero);
            //cb_removeEnabled.IsChecked = item1.removeEnabled;
            //cb_virtOnlyDisabled.IsChecked = item1.virtOnlyDisabled;
            //cb_forceCoeffVirt.IsChecked = item1.forceCoeffVirt;
            //cb_virtAlignPrec.IsChecked = item1.virtAlignPrec;
            //cb_virtAlignSelected.IsChecked = item1.virtAlignSelected;
            //cb_coeffVirtAdjust.IsChecked = item1.coeffVirtAdjust;
            //cb_coeffVirtAuto.IsChecked = item1.coeffVirtAuto;
            //cbx_cmpMinn.SelectedIndex = (int)item1.cmpMin;
            //cb_noaddEnd.IsChecked = item1.noAddEnd;
            //cb_noaddAll.IsChecked = item1.noAddAll; 





            //if (list.Count > 1)
            //{
            //    item1 = list[1];
            //    cb2_enabled.IsChecked = item1.enabled;
            //    cbx2Sort.SelectedIndex = (int)item1.type;
            //    tb2_medianne.Text = item1.medianne.ToString();
            //    cb2_quasi.IsChecked = item1.quasi;
            //    cb2_lissage.IsChecked = item1.lissage;
            //    cb2_removeEpsilon.IsChecked = item1.removeEpsilon;
            //    cb2_reSort.IsChecked = item1.reSort;
            //    cb2_removeFirst.IsChecked = item1.removeFirst;
            //    cb2_deleteFirst.IsChecked = item1.deleteFirst;
            //    cbx2_removeLast.SelectedIndex = (int)item1.removeLast;
            //    cb2_cumul.IsChecked = item1.cumul;
            //    cb2_noAdd.IsChecked = item1.noAdd;
            //    tb2_safe.Text = item1.safe.ToString();
            //    tb2_coeff.Text = item1.coeffVirt.ToString();
            //    tb2_exp.Text = item1.expEnabled.ToString();
            //    tb2_zero.Text = Piece.getClassementEquiv(item1.zero);
            //    cb2_removeEnabled.IsChecked = item1.removeEnabled;
            //    cb2_virtOnlyDisabled.IsChecked = item1.virtOnlyDisabled;
            //    cb2_forceCoeffVirt.IsChecked = item1.forceCoeffVirt;
            //    cb2_virtAlignPrec.IsChecked = item1.virtAlignPrec;
            //    cb2_virtAlignSelected.IsChecked = item1.virtAlignSelected;
            //    cb2_coeffVirtAdjust.IsChecked = item1.coeffVirtAdjust;
            //    cb2_coeffVirtAuto.IsChecked = item1.coeffVirtAuto;
            //    cbx2_cmpMinn.SelectedIndex = (int)item1.cmpMin;
            //    cb2_noaddEnd.IsChecked = item1.noAddEnd;
            //    cb2_noaddAll.IsChecked = item1.noAddAll; 
            //}
        }
        void record()
        {
          
            conf.stackSize = Convert.ToInt32(tb_stackSize.Text);
            conf.stackBefore = Convert.ToInt32(tb_stackBefore.Text);
            conf.createCourant = cb_createCourant.IsChecked.Value;
            conf.createInter = cb_createInter.IsChecked.Value;
            conf.createAll = cb_createAll.IsChecked.Value;
            conf.lastModif = dp_date.SelectedDate.Value;
            conf.checkStack = cb_checkStack.IsChecked.Value;
            conf.stackEnabled = cb_stackEnabled.IsChecked.Value;
            conf.stackOnlyNew = cb_only_new.IsChecked.Value; 
          

            first.record();
            if (second != null)
                second.record();

           


            //var list = conf.Composants;
            //var item1 = list[0];
            //item1.enabled = cb_enabled.IsChecked.Value;
            //item1.type = (util.medianneMode)cbxSort.SelectedIndex;
            //item1.medianne = Convert.ToDecimal(tb_medianne.Text);
            //item1.quasi = cb_quasi.IsChecked.Value;
            //item1.lissage = cb_lissage.IsChecked.Value;
            //item1.removeEpsilon = cb_removeEpsilon.IsChecked.Value;
            //item1.reSort = cb_reSort.IsChecked.Value;
            //item1.removeFirst = cb_removeFirst.IsChecked.Value;
            //item1.deleteFirst = cb_deleteFirst.IsChecked.Value;
            //item1.removeLast = (util.removeLast)cbx1_removeLast.SelectedIndex;
            //item1.cumul = cb_cumul.IsChecked.Value;
            //item1.noAdd = cb_noAdd.IsChecked.Value;
            //item1.safe = Convert.ToInt32(tb_safe.Text);
            //item1.coeffVirt = Convert.ToDecimal(tb_coeff.Text);
            //item1.expEnabled = Convert.ToDecimal(tb_exp.Text);
            //var cl = Classement.create(tb_zero.Text);
            //item1.zero = cl.RapportClassement;
            //item1.removeEnabled = cb_removeEnabled.IsChecked.Value;
            //item1.virtOnlyDisabled = cb_virtOnlyDisabled.IsChecked.Value;
            //item1.forceCoeffVirt = cb_forceCoeffVirt.IsChecked.Value;
            //item1.virtAlignPrec = cb_virtAlignPrec.IsChecked.Value;
            //item1.virtAlignSelected = cb_virtAlignSelected.IsChecked.Value;
            //item1.coeffVirtAuto = cb_coeffVirtAuto.IsChecked.Value;
            //item1.coeffVirtAdjust = cb_coeffVirtAdjust.IsChecked.Value;
            //item1.cmpMin = (util.modeMin)cbx_cmpMinn.SelectedIndex;
            //item1.noAddEnd = cb_noaddEnd.IsChecked.Value;
            //item1.noAddAll = cb_noaddAll.IsChecked.Value; 

            //if (list.Count > 1)
            //{
            //    if (cbx2Sort.SelectedIndex == 0)
            //    {
            //        list.RemoveAt(1);
            //        return;
            //    }
            //}
            //else
            //{
            //    if (cbx2Sort.SelectedIndex > 0)
            //    {
            //        item1 = new util.ConfMedianne();
            //        list.Add(item1);
            //    }
            //}

            //if (list.Count > 1)
            //{
            //    item1 = list[1];

            //    item1.enabled = cb2_enabled.IsChecked.Value;
            //    item1.type = (util.medianneMode)cbx2Sort.SelectedIndex;
            //    item1.medianne = Convert.ToDecimal(tb2_medianne.Text);
            //    item1.quasi = cb2_quasi.IsChecked.Value;
            //    item1.lissage = cb2_lissage.IsChecked.Value;
            //    item1.removeEpsilon = cb2_removeEpsilon.IsChecked.Value;
            //    item1.reSort = cb2_reSort.IsChecked.Value;
            //    item1.removeFirst = cb2_removeFirst.IsChecked.Value;
            //    item1.deleteFirst = cb2_deleteFirst.IsChecked.Value;
            //    item1.removeLast = (util.removeLast)cbx2_removeLast.SelectedIndex;
            //    item1.cumul = cb2_cumul.IsChecked.Value;
            //    item1.noAdd = cb2_noAdd.IsChecked.Value;
            //    item1.safe = Convert.ToInt32(tb2_safe.Text);
            //    item1.coeffVirt = Convert.ToDecimal(tb2_coeff.Text);
            //    item1.expEnabled = Convert.ToDecimal(tb2_exp.Text);
            //    item1.zero = Convert.ToDecimal(tb2_zero.Text);

            //    cl = Classement.create(tb2_zero.Text);
            //    item1.zero = cl.RapportClassement;
            //    item1.removeEnabled = cb2_removeEnabled.IsChecked.Value;
            //    item1.virtOnlyDisabled = cb2_virtOnlyDisabled.IsChecked.Value;
            //    item1.forceCoeffVirt = cb2_forceCoeffVirt.IsChecked.Value;
            //    item1.virtAlignPrec = cb2_virtAlignPrec.IsChecked.Value;
            //    item1.virtAlignSelected = cb2_virtAlignSelected.IsChecked.Value;
            //    item1.coeffVirtAuto = cb2_coeffVirtAuto.IsChecked.Value;
            //    item1.coeffVirtAdjust = cb2_coeffVirtAdjust.IsChecked.Value;
            //    item1.cmpMin = (util.modeMin)cbx2_cmpMinn.SelectedIndex;
            //    item1.noAddEnd = cb2_noaddEnd.IsChecked.Value;
            //    item1.noAddAll = cb2_noaddAll.IsChecked.Value; 
            //}
        }

        private void bt_cancel_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        private void bt_ok_Click(object sender, RoutedEventArgs e)
        {
            record();
            Close();
            conf.Calcul();
            App.go();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {

        }




        //public string CoeffEnabled
        //{
        //    get { return tb_coeffEnabled.Text; }
        //}

        public bool DuplicateItem
        {
            get
            {
                bool ret = cb_idem.IsChecked.Value;
                _idem = ret;
                return ret;
            }
        }
        private void tb_safe_KeyUp(object sender, System.Windows.Input.KeyEventArgs e)
        {
            first.onchange();

            if (second != null)
                second.onchange();
        }

        private void bt_coul_Click(object sender, RoutedEventArgs e)
        {
            new ConfCouleurs().Show();
        }

        private void cb_idem_Click(object sender, RoutedEventArgs e)
        {
            first.checkIdem();
            if (second != null)
                second.checkIdem();
        }

        private void bt_debug_Click(object sender, RoutedEventArgs e)
        {
            var w = new Debug(conf);
            w.Show(); 
        }

        private void bt_compact_Click(object sender, RoutedEventArgs e)
        {
            Condenseur.deleteFile();
            App.gen.GoCompact();
            App.go(); 
        }

        private void btBd_Click(object sender, RoutedEventArgs e)
        {

            var pl = PlayListViewModel.SelectedPlayList;
            var listT =new List<TrackListViewModel>(pl.Tracks); 
            var list = new List<CPiece>();
            var hs = new HashSet<int>(); 
            int count = Convert.ToInt32(tb_nb.Text);
            string file = tb_path.Text;
            int nb = 0; 
            for (int i = 0; i < listT.Count; i++)
            {
                var track = listT[i];
                if (track.album.Virtual)
                    continue; 
                var p = track.Piece;
                if (hs.Add(p.PieceId))
                {
                    list.Add(p);
                    nb++;
                    if (nb >= count)
                        break;
                }
            }
            App.Db.export(file, list); 
        }

        private void bt_misc_Click(object sender, RoutedEventArgs e)
        {
            var w = new Miscellaneous();
            w.Show(); 
        }

    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\DataGridPlayList.xaml.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using pdb.gen.Tuning;
using pdb.player.ViewModel;
using pdb.player.ViewModel.Commande.PlayList;
using pdb.util;
using pdb.player.Vue.Util;
using System.Windows.Threading;
using System.Windows.Media;
using Math = System.Math;
using System.Linq;
using System.Linq.Expressions;
using System.Collections;

namespace pdb.player.Vue
{



    public partial class DataGridPlayList : UserControl, ItrackProvider, IRedraw, IExportTracks
    {
        private static int nb;
        private int ID;
        private Logger log;
        public static event EventHandler refreshOk;
        // private BgColorFormatConverter colorConvert = new BgColorFormatConverter();

        //  private BgDict<int, DataGridRow> dict = new BgDict<int, DataGridRow>(); 
        // private TrackListViewModel currentTrack;
        private AllTracksViewModel model;

        public DataGridPlayList()
        {
            ID = nb;
            log = Logger.getLogger("DataGridPlayList_" + ID);
            nb++;
            InitializeComponent();
            this.Loaded += DataGridPlayList_Loaded;
            App.refresh += new EventHandler(App_refresh);
            //PlayListCommande.Provider = this;
        }

        void DataGridPlayList_Loaded(object sender, RoutedEventArgs e)
        {
            log = Logger.getLogger("DataGridPlayList_" + dg.Uid);
            init(null);
            PlayListViewModel.selectedPlaylistChange += PlayListViewModel_selectedPlaylistChange;
            PlayListViewModel.addDrow(this);
            dg.PreviewKeyUp += new KeyEventHandler(dg_preview);
            TrackListViewModel.CurrentHumanSelectedChanged += new EventHandler(TrackListViewModel_CurrentHumanSelectedChanged);

            PlayerViewModel.Instance.checkNavIni();
#if EXPORT
            ExportCmd.Ihm = this;
#endif

            Cctl.MouseDoubleClick += new MouseButtonEventHandler(Cctl_MouseDoubleClick);

        }

        void Cctl_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (model == null)
                return;
            var cmd = model.Explorer;
            if (cmd.CanExecute(e))
                cmd.Execute(e);
        }

        void TrackListViewModel_CurrentHumanSelectedChanged(object sender, EventArgs e)
        {
            //if (currentTrack != null)
            //    currentTrack.refresh();
            ICollectionView view = CollectionViewSource.GetDefaultView(dg.ItemsSource);

            var hs = TrackListViewModel.HumanSelected;
            if (hs == null)
                return;
            var pl = PlayListViewModel.SelectedPlayList;
            bool reset = pl != sender;

            //TrackListViewModel t = null;
            try
            {
                checkItems(true);

                //t = PlayListViewModel.findTrack(pl, hs.PieceId);
                //if (t == null)
                //    return;
                //t.IsSelected = true;

            }
            finally
            {
                //  currentTrack = t;
                //if (currentTrack != null)
                //    currentTrack.refresh();
                //TrackListViewModel.setHumanSelected(PlayList, TrackListViewModel.CurrentSelected); 

            }


            PlayerViewModel.Instance.makeResume();
        }

        Key key;
        void dg_preview(object sender, KeyEventArgs e)
        {
            // e.Handled = false; 
            key = e.Key;
            bool nav = false;

            switch (key)
            {
                case Key.Up:
                case Key.Down:
                case Key.PageDown:
                case Key.PageUp: nav = true; break;
                //case Key.LeftCtrl: case Key.RightCtrl : // TODO ajouter un élément
            }



            if (!nav)
                return;
            TrackListViewModel.setHumanSelected(PlayList, TrackListViewModel.CurrentSelected); //    .HumanSelected = TrackListViewModel.CurrentSelected;
        }


        void App_refresh(object sender, EventArgs e)
        {
            log.log("dg::App_refresh");
            redraw();
        }




        void PlayListViewModel_selectedPlaylistChange(object sender, EventArgs e)
        {
            if (ID == 0)
            {
                init(sender as PlayListViewModel);
            }
        }

        private void init(PlayListViewModel old)
        {
            var client = new SimpleClient("DataGridPlayList::init())", log);
            App.Dispatch(() =>
            {
                client.Start();
                log.log("dg::init");

                SortDescriptionCollection sort = null;
                ICollectionView view = null;
                if (old != null)
                {
                    view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
                    if (view != null)
                        sort = view.SortDescriptions;
                    if (sort != null)
                        old.Sort = sort;
                    client.log("check old");
                }


                var pl = PlayListViewModel.SelectedPlayList;
                var currentPlaying = TrackListViewModel.CurrentPlaying;
                if (pl == null)
                    return;
                base.DataContext = null;
                client.log("base.DataContext = null");

                var source = dg.ItemsSource;

                dg.ItemsSource = null;
                this.model = pl.AlltracksVm;
                this.model.Provider = this;
                client.log("this.model.Provider = this");

                view = CollectionViewSource.GetDefaultView(model);
                client.log("view = CollectionViewSource.GetDefaultView(model);");
                using (var w = view.DeferRefresh())
                {
                    // items.refresh();

                    base.DataContext = model;
                    client.log("base.DataContext = model;");
                    // int i = 0;
                    if (pl.isSubList("gen"))
                    {
                    }
                    else
                    {
                        //foreach (TrackListViewModel track in items)
                        //{
                        //    i++;
                        //    track.Index = i;
                        //}
                    }
                    sort = pl.Sort;
                    List<SortDescription> _sort = null;
                    if (sort != null)
                        _sort = new List<SortDescription>(sort);
                    dg.ItemsSource = model;
                    client.log("dg.ItemsSource = model;");
                    TrackListViewModel.CurrentPlaying = currentPlaying;

                    dg.ApplySort(_sort, w);
                    client.log("dg.ApplySort(_sort, w);");
                }
                PlayerViewModel.Instance.set(this);
                client.log("PlayerViewModel.Instance.set(this);");

                //if (_sort != null && _sort.Count > 0)
                //{
                //    view.SortDescriptions.Clear();
                //    foreach (var _s in _sort)
                //    {
                //        view.SortDescriptions.Add(_s);
                //        foreach (DataGridColumn _c in dg.Columns)
                //        {
                //            if (_s.PropertyName == _c.SortMemberPath)
                //            {
                //                _c.SortDirection = _s.Direction;
                //                break;
                //            }
                //        }
                //        break;

                //    }
                //}

                //foreach (TrackListViewModel tv in items)
                //    tv.PropertyChanged += new PropertyChangedEventHandler(tv_PropertyChanged);

                //if (currentTrack != null)
                //    currentTrack.refresh();
#if EXPORT
                putExportTracks(pl, CollectionViewSource.GetDefaultView(dg.ItemsSource));
                client.log("putExportTracks(pl, CollectionViewSource.GetDefaultView(dg.ItemsSource));");
#endif
                // this.scrol();
                OnRefresh();
                client.log("OnRefresh");
            }, client);


        }
        private void OnRefresh()
        {
            if (refreshOk != null)
                refreshOk(this, EventArgs.Empty);
        }

        private void dg_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                var r = sender as DataGridRow;
                var t = r.Item as TrackListViewModel;
                PlayerViewModel.reset(this, t);
            }
            catch
            {
            }
        }

        private void checkItems(bool reset)
        {
            var l = new List<TrackListViewModel>();


            ICollectionView view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
            var selectedTracks = new List<TrackListViewModel>(dg.SelectedItems.Count);
            foreach (TrackListViewModel t in dg.SelectedItems)
                selectedTracks.Add(t);
            var tracks = dg.Items;



            //    IDisposable w = view.DeferRefresh();
            try
            {


                if (reset)
                {
                    TrackListViewModel selected = null;
                    if (TrackListViewModel.HumanSelected != null)
                    {
                        selected = TrackListViewModel.HumanSelected; // PlayListViewModel.findTrack(PlayList, TrackListViewModel.HumanSelected.PieceId);
                    }

                    foreach (TrackListViewModel track in view)
                    {
                        if (track == selected)
                            track.IsSelected = true;
                        else
                            track.IsSelected = false;

                        //track.refresh();
                    }
                    // dg.SelectedItems.Clear();
                    //  w.Dispose(); w = null;


                    if (selected != null)
                    {
                        l.Add(selected);
                        if (!dg.SelectedItems.Contains(selected))
                            dg.SelectedItems.Add(selected);
                    }
                    foreach (TrackListViewModel track in selectedTracks)
                    {
                        if (track != selected)
                        {
                            dg.SelectedItems.Remove(track);
                            track.IsSelected = false;
                            //track.refresh();
                        }
                    }
                }
                else
                {
                    foreach (TrackListViewModel track in selectedTracks)
                    {
                        l.Add(track);
                        track.IsSelected = true;

                        //TrackListViewModel trackMusique = PlayListViewModel.findTrack(App.bib.Musique, track.PieceId);
                        //if (trackMusique != null)
                        //    trackMusique.IsSelected = true;
                        //track.refresh();
                    }
                }
                //lock (this)
                //   this.selectedTracks = l;
            }
            finally
            {
                //if (w != null)
                //    w.Dispose();
            }

        }

        private void dg_MouseClick(object sender, MouseButtonEventArgs e)
        {
            //  e.Handled = true; 
            //var r = sender as DataGridRow;
            //var t = r.Item as TrackListViewModel;
            //TrackListViewModel.setHumanSelected(PlayList, t); //   .HumanSelected = t;
            //startPoint = e.GetPosition(null);

            checkItems(false);

            PlayerViewModel.Instance.makeResume();
        }



        // private List<TrackListViewModel> selectedTracks = new List<TrackListViewModel>();

        private List<TrackListViewModel> SelectedTracks
        {
            get
            {
                lock (this)
                {
                    var l = new List<TrackListViewModel>();

                    foreach (TrackListViewModel t in dg.ItemsSource)
                    // foreach (TrackListViewModel t in dg.ItemsSource.Cast<TrackListViewModel>())
                    {
                        if (t.IsSelected)
                            l.Add(t);
                    }
                    return l;
                }
            }
        }
        ICollectionView ItrackProvider.PresentationTracks
        {
            get { return CollectionViewSource.GetDefaultView(dg.ItemsSource); }
        }
        void ItrackProvider.Focus(TrackListViewModel t)
        {

            // dg.SelectedIndex = index;
            //var indexbas = Math.Min(index + 100, dg.Items.Count - 1);
            //scrol(indexbas);
            this.scrolItem = t;
            scrol();
        }

        List<TrackListViewModel> ISelectedTracks.SelectedTracks
        {
            get
            {
                return SelectedTracks;
            }
        }
        private TrackListViewModel scrolItem;
        void scrol()
        {
            log.log("scroll item->{0}", scrolItem);
            var client = new SimpleClient("DataGriPlayList::scrol()");
            App.Dispatch(() =>
            {
                client.Start();
                if (dg.Items.Count == 0)
                {
                    log.log("scroll sans items");
                    return;
                }

                if (scrolItem == null)
                {
                    log.log("scrollItem null");
                }


                try
                {
                    dg.ScrollIntoView(scrolItem);
                }
                catch (Exception ex)
                {
                    log.Error("erreur scroll " + ex.Message);
                }
                client.End();
            }, client);
        }
        public PlayListViewModel PlayList
        {
            get { return PlayListViewModel.SelectedPlayList; }
        }
        public void doFilter(string filter)
        {
            PlayerViewModel.doFilter((this as ItrackProvider).PresentationTracks, filter);
        }
        private bool IsUserVisible(FrameworkElement element, FrameworkElement container)
        {
            if (!element.IsVisible)
                return false;
            Rect bounds = element.TransformToAncestor(container).TransformBounds(new Rect(0.0, 0.0, element.ActualWidth, element.ActualHeight));
            Rect rect = new Rect(0.0, 0.0, container.ActualWidth, container.ActualHeight);
            return rect.Contains(bounds.TopLeft) || rect.Contains(bounds.BottomRight);
        }

        private static T FindVisualParent<T>(UIElement element) where T : UIElement
        {
            var parent = element;
            while (parent != null)
            {
                var correctlyTyped = parent as T;
                if (correctlyTyped != null)
                {
                    return correctlyTyped;
                }

                parent = VisualTreeHelper.GetParent(parent) as UIElement;
            }
            return null;
        }

        public void redraw()
        {
            var client = new SimpleClient("DataGRiPlayList::redraw");
            App.Dispatch(() =>
            {
                client.Start();
                try
                {
                    // PlayerViewModel.Instance.doFilter(); 
                    var pl = PlayListViewModel.SelectedPlayList;

                    bool isgen = false;
                    if (pl != null && pl.isSubList("gen"))
                        isgen = true;

                    var items = dg.ItemsSource as AllTracksViewModel;

                    if (items == null)
                    {
                        dg.Items.Refresh();
                        client.log(" dg.Items.Refresh();");
                    }
                    else
                    {
                        ICollectionView view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
                        client.log("ICollectionView view = CollectionViewSource.GetDefaultView(dg.ItemsSource);");
                        using (var w = view.DeferRefresh())
                        {
                            SortDescriptionCollection sort = view.SortDescriptions;

                            List<SortDescription> _sort = null;
                            if (sort != null)
                                _sort = new List<SortDescription>(sort);

                            int i = 0;
                            foreach (TrackListViewModel track in items)
                            {
                                i++;
                                if (!isgen)
                                    track.Index = i;
                                //  track.refresh();
                            }

                            dg.ApplySort(_sort, w);
                            client.log("dg.ApplySort(_sort, w);");
                            //if (_sort != null && _sort.Count > 0 && view.SortDescriptions.Count > 0)
                            //{
                            //    view.SortDescriptions.Clear();
                            //    foreach (var _s in _sort)
                            //    {
                            //        view.SortDescriptions.Add(_s);
                            //    }
                            //}
                            //items.refresh();
                            //client.log("items.refresh();");
                        }
#if EXPORT
                        putExportTracks(pl, view);
                         client.log(" putExportTracks(pl, view);");
#endif

                    }
                    client.End();
                    return;


                    //try
                    //{
                    //    isgen = false;

                    //    if (isgen)
                    //    {
                    //        log.log("dg::redraw::init");
                    //        init(pl);
                    //    }
                    //    else
                    //    {
                    //        log.log("dg::redraw::Refresh");
                    //        dg.Items.Refresh();
                    //    }
                    //}
                    //catch
                    //{
                    //    try
                    //    {
                    //        init(pl);
                    //    }
                    //    catch
                    //    {
                    //    }
                    //}
                }
                finally
                {
                    OnRefresh();
                }
            }, client);

        }

        private void MenuItem_Click(object sender, RoutedEventArgs e)
        {
            var items = dg.SelectedItems;
            MessageBox.Show(items.Count.ToString());
        }

        public string folderDialog()
        {
            return App.Instance.folderDialog();
        }


        public System.ComponentModel.ICollectionView PresentationTracks
        {
            get
            {
                return ((ItrackProvider)this).PresentationTracks;
            }
        }






        public bool ModeAlbum
        {
            get { return MessageBox.Show("par albums complets", "export", MessageBoxButton.YesNo) == MessageBoxResult.Yes; }
        }

        public bool Continue
        {
            get { return MessageBox.Show("continuer le marché ?", "export", MessageBoxButton.YesNo) == MessageBoxResult.Yes; }
        }




        public void InfoIHm(string message, string caption)
        {
            App.Instance.InfoIHm(message, caption);
        }

        public bool Confirm(string question, string caption)
        {
            return App.Instance.Confirm(question, caption);
        }

        public bool? TriChoix(string question, string caption)
        {
            return App.Instance.TriChoix(question, caption);
        }

        public Export getConfExport(string question)
        {
            return App.Instance.getConfExport(question);
        }

        public Import getConfImport(string question)
        {
            return App.Instance.getConfImport(question);
        }

        public int getNb(string question)
        {
            return App.Instance.getNb(question);
        }

        public bool changeName(string title, IName data)
        {
            return App.Instance.changeName(title, data);
        }

        public PlayListViewModel selectPlayList(string title)
        {
            return App.Instance.selectPlayList(title);
        }



        //  private List<TrackListViewModel> list = new List<TrackListViewModel>(); 
        public List<TrackListViewModel> ListTrack
        {
            get { return null; }
        }
#if EXPORT
        private void putExportTracks(PlayListViewModel pl, ICollectionView view)
        {
            var list = new List<TrackListViewModel>();
            foreach (TrackListViewModel track in view)
                list.Add(track);
            pl.ExportTracks = list;
            //visibleItems = new List<TrackListViewModel>();

            //foreach (var item in view)
            //{
            //    var row = dg.ItemContainerGenerator.ContainerFromItem(item) as DataGridRow;
            //    if (row != null)
            //    {
            //        visibleItems.Add(item as TrackListViewModel); 
            //    }
            //}


        }
#endif
        //private List<TrackListViewModel> visibleItems = new List<TrackListViewModel>();
        //public List<TrackListViewModel> VisibleItems { get { return new List<TrackListViewModel>(visibleItems); } }

        Point startPoint;
        private void dg_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            startPoint = e.GetPosition(null);
        }

        private void dg_PreviewMouseMove(object sender, MouseEventArgs e)
        {
            var mousePos = e.GetPosition(null);
            var diff = startPoint - mousePos;

            if (Math.Abs(diff.X) > SystemParameters.MinimumHorizontalDragDistance
                || Math.Abs(diff.Y) > SystemParameters.MinimumVerticalDragDistance)
            {
                var treeView = sender as DataGrid;
                var treeViewItem = //(e.OriginalSource as DependencyObject).
                    Util.Util<DataGridRow>.FindAnchestor((DependencyObject)e.OriginalSource);
                //   FindAnchestor<TreeViewItem>((DependencyObject)e.OriginalSource);

                if (treeView == null || treeViewItem == null)
                    return;

                var folderViewModel = treeView.SelectedItem as TrackListViewModel;
                if (folderViewModel == null)
                    return;

                var dragData = new DataObject(folderViewModel);
                DragDrop.DoDragDrop(treeViewItem, dragData, DragDropEffects.Copy);
            }
        }
    }
}]]></content>
  </file>
  <file path="\pdb.player\Vue\PlayerControler.xaml.cs">
    <content><![CDATA[using pdb.player.model;
using pdb.player.ViewModel;
using pdb.player.ViewModel.Commande.PlayList;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;
using System.Windows.Controls.Primitives;
using System.Windows.Automation.Peers;
using pdb.player.Vue.Util;
using pdb.player.ViewModel.Colors;
using System.Threading;
using pdb.util;

namespace pdb.player.Vue
{
    /// <summary>
    /// Logique d'interaction pour PlayerControler.xaml
    /// </summary>
    public partial class PlayerControler : UserControl, IRecordClassmentObserver, IGradiant
    {
        // private Gradient confGradiant;
        public PlayerControler()
        {
            InitializeComponent();


            GradiantBuilder.Instance.Add(this);
            this.Loaded += PlayerControler_Loaded;
        }

        void PlayerControler_Loaded(object sender, RoutedEventArgs e)
        {
            this.MouseDoubleClick += new MouseButtonEventHandler(PlayerControler_MouseDoubleClick);
            DataContext = PlayerViewModel.Instance;
            DataGridPlayList.refreshOk += new EventHandler(DataGridPlayList_refreshOk);
            DetailClassementViewModel.RecordObserver = this;
            txtFilter.MouseDoubleClick += new MouseButtonEventHandler(txtFilter_MouseDoubleClick);
            PlayerViewModel.Instance.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(Instance_PropertyChanged);
            PlayerViewModel.Instance.Volume = 0.5;
        }

        void PlayerControler_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            PlayerViewModel.Instance.focusHelp();
            AlbumCtl.Instance.focusHelp(); 
        }

        void Instance_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "FilterNext")
                doFilter(txtFilter.Text);
        }



        void txtFilter_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            new ConfFilterW(PlayerViewModel.Instance.ConfFilter).Show();
        }

        void DataGridPlayList_refreshOk(object sender, EventArgs e)
        {
            if (_currentPaying != null)
            {
                var tlvc = TrackListViewModel.CurrentPlaying;
                if (tlvc  == _currentPaying
                    || (tlvc != null && tlvc.MasterId == _currentPaying.MasterId))
                    automateNextTrack();
                _currentPaying = null;
            }
        }

        void DetailClassementViewModel_classementChanged(object sender, EventArgs e)
        {
            focus();
        }

        private void focus()
        {
            var client = new SimpleClient("PlayerControler::focus");
            App.Dispatch(() => { client.Start();  b_play.Focus(); client.End(); }, client); 
            //if (!CheckAccess())
            //    Dispatcher.BeginInvoke(new Action(this.focus), App.DISPATCHER_PRIORITY);
            //else
            //{
            //    b_play.Focus();
            //}
        }

        private void automateNextTrack()
        {
            var client = new SimpleClient("PlayerControler::automateNextTrack");
            App.Dispatch(() =>
            {
                client.Start(); 
                ICommand forward = PlayerViewModel.Instance.Forward;
                if (forward.CanExecute(this))
                {
                    forward.Execute(this);
                }
                client.End(); 
            }, client); 
            //if (!CheckAccess())
            //    Dispatcher.BeginInvoke(new Action(this.automateNextTrack), App.DISPATCHER_PRIORITY);
            //else
            //{
            //    ICommand forward = PlayerViewModel.Instance.Forward;
            //    if (forward.CanExecute(this))
            //    {
            //        forward.Execute(this);
            //    }


            //}
        }

        private void txtFilter_KeyUp(object sender, KeyEventArgs e)
        {
            String filter = txtFilter.Text;
            doFilter(filter);
        }

        private void doFilter(String filter)
        {
            PlayerViewModel.Instance.doFilter(filter);
        }

        private void btSort_Click(object sender, RoutedEventArgs e)
        {
            var conf = PlayerViewModel.ConfAlbumSort;
            var dialog = new ConfAlbumSortW(conf);
            dialog.Show();
        }



        public void signalClassementChange()
        {
            focus();
        }

        private TrackListViewModel _currentPaying;
        public void autoNextTrack(TrackListViewModel track)
        {
            _currentPaying = track;
        }



        ViewModel.Colors.Gradient IGradiant.Conf
        {
            get
            {
                try { return Couleurs.Instance.player.gradient; }
                catch
                {
                }
                return null;
            }
        }

        bool IGradiant.sensGradient
        {
            get { return false; }
        }

        void IBackGround.setBackground(Brush brush)
        {
            gmain.Background = brush;
        }

        private void cbNext_Checked(object sender, RoutedEventArgs e)
        {

        }


    }
}
]]></content>
  </file>
  <file path="\pdb.util\Chrono.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Threading;

namespace pdb.util
{
    public class Chrono
    {
        private DateTime begin;
        private DateTime _end;
        private List<ChronoPhase> list = new List<ChronoPhase>();
        private Thread th;
        private DateTime current;
        private string clientName;
        public void reset(string clientName)
        {
            th = Thread.CurrentThread;
            list.Clear();
            this.clientName = clientName;
            begin = DateTime.Now;
            current = begin;
            _end = begin;
        }

        public void reset()
        {
            th = Thread.CurrentThread;
            list.Clear();
            //this.clientName = clientName;
            begin = DateTime.Now;
            current = begin;
            _end = begin;
        }

        public void bip(string clientName, string phase)
        {
            if (!clientName.isNullorEmpty() && clientName != this.clientName)
                return;

            bip(phase);
        }

        public void bip(string phase, bool displayNow)
        {
            if (!displayNow && Thread.CurrentThread != th)
                return;

            var now = DateTime.Now;
            var dt = now - current;
            current = now;
            var cp = new ChronoPhase(phase, dt);
            if (displayNow)
                misc.log(cp);
            list.Add(cp);
        }

        public void bip(string phase)
        {
            bip(phase, false);
        }

        public void end()
        {
            _end = DateTime.Now;
        }

        public TimeSpan Total { get { return _end - begin; } }

        public string display(double seuil, string strFormat)
        {
            var sb = new StringBuilder();
            foreach (ChronoPhase ph in list)
            {
                if (ph.duration.TotalMilliseconds < seuil)
                    continue;
                ph.display(sb, strFormat);
                sb.Append(" ");

            }
            return sb.ToString();
        }

        public override string ToString()
        {
            return display(-1, "{0,2};{0,-3:#}");
        }



    }

    class ChronoPhase
    {
        public readonly string phase;
        public readonly TimeSpan duration;
        public ChronoPhase(string phase, TimeSpan duration)
        {
            this.phase = phase;
            this.duration = duration;
        }

        public override string ToString()
        {
            var sb = new StringBuilder();
            display(sb);
            return sb.ToString();
        }

        public void display(ITextWriter sb, string strFormat)
        {
            sb.Append(string.Format(strFormat, phase, duration.TotalMilliseconds));
        }

        public void display(ITextWriter sb)
        {
            sb.Append(string.Format("{0,2}", phase));
            sb.Append(":");
            sb.Append(string.Format("{0,-3:#}", duration.TotalMilliseconds));
        }
    }



    public class SimpleChrono
    {
        private DateTime begin;
        private DateTime courant;
        private string prefix;
        private ILogger _log;

        public SimpleChrono(DateTime begin, string prefix, ILogger log)
        {
            this.begin = begin;
            this.courant = begin;
            this.prefix = prefix;
            this._log = log;
        }

        public SimpleChrono(string prefix, ILogger log)
            : this(DateTime.Now, prefix, log)
        {
        }

        public SimpleChrono(string prefix) : this(prefix, null)
        {

        }

        public ILogger Log { set { _log = value; } get { return _log; } }

        public void start()
        {
            begin = DateTime.Now;
            courant = begin;
        }

        public void log(string content)
        {
            var now = DateTime.Now;
            var tsPhase = now - courant;
            courant = now;
            var tsTot = now - begin;

            var partial = tsPhase.TotalSeconds.ToString("#.#").Trim();
            while (partial.Length < 3)
                partial += " ";



            var total = tsTot.TotalSeconds.ToString("#.#").Trim();
            while (total.Length < 3)
                total += " ";

            if (_log == null)
            {
            }
            else
                _log.log("{0}{1}\t{2}\t{3}", prefix, partial, total, content);

        }

    }
}
]]></content>
  </file>
  <file path="\pdb.util\IClient.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace pdb.util
{
    /// <summary>
    /// Client pour les tâches longues qui peuvent être interrompues
    /// </summary>
    public interface IClient
    {
        /// <summary>
        /// Log du temps passé à une tâche
        /// </summary>
        /// <param name="phase"></param>
        void log(string phase);
        /// <summary>
        /// Arret de la tâche
        /// </summary>
        bool Cancel { get; }
        void cancel();
        ILogger Log { set; }
        bool HasLog { get; }
        bool isAsync { get; set; }
        void Start();
        void End();
    }

    public class SimpleClient : IClient
    {
        private bool _cancel;
        private SimpleChrono chrono;
        public void cancel() { _cancel = true; }
        public ILogger Log { set { chrono.Log = value; } }
        public bool isAsync { get; set; }
        public void Start() { chrono.start(); }
        public void End() { chrono.log("fin"); }
        public SimpleClient(string prefix)
        {
            if (!prefix.EndsWith("\t"))
                prefix += "\t";
            this.chrono = new SimpleChrono(prefix);
        }
        public SimpleClient(ILogger log)
            : this("", log)
        {

        }
        public SimpleClient(string prefix, ILogger log)
        {
            this.chrono = new SimpleChrono(prefix, log);
        }
        public bool Cancel
        {
            get
            {
                return _cancel;
            }
        }

        public void log(string phase)
        {
            chrono.log(phase);
        }


        public bool HasLog
        {
            get { return chrono.Log != null; }
        }
    }

    public class NUllClient : IClient
    {
        public bool Cancel
        {
            get
            {
                return false;
            }
        }

        public void log(string phase)
        {

        }

        private NUllClient()
        { }



        public static NUllClient NULL = new NUllClient();


        public void cancel()
        {

        }

        public void Start()
        {
           
        }

        public void End()
        {
           
        }

        public ILogger Log
        {

            set
            {

            }
        }


        public bool HasLog
        {
            get { return true; }
        }

        public bool isAsync
        {
            get
            {
                return false;
            }

            set
            {
               
            }
        }
    }


}
]]></content>
  </file>
</db>
