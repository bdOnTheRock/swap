<db path="C:\bernard\db1\db4">
  <file path="\pdb.util\XMLTool.cs">
    <content><![CDATA[using System;
using System.IO;
using System.Xml;
using System.Collections.Generic;


//--------------------------------------------
// CLASSE XMLTool
//--------------------------------------------
// Auteur : B. DUMAS
// Date : 07/08/2008
//
// Description : classe helper pour manipuler XML
// Remarques : 
//--------------------------------------------
namespace pdb.util
{
    public class XMLTool : IEnumerable<XMLTool>
    {
        public const string TOKEN_DELETED = "deleted";
        public const string TRUE = "true";
        //noeud de base
        private XmlElement m_xmlParent;
        public XMLTool(XmlElement a_xmlParent)
        {
            m_xmlParent = a_xmlParent;
        }

        public static void writeDeleted(XmlWriter w)
        {
            w.WriteAttributeString(TOKEN_DELETED, TRUE);
        }

        

        //--------------------------------------------
        // NodeLookUp
        //
        // Description : renvoie le noeud nomm�
        //
        // Entr�es : 
        //	a_token : [String] Nom du noeud
        //
        // Sorties :
        //	[XmlElement] Noeud ou nothing 
        //
        // Auteur : B. DUMAS
        // Date : 07/08/2008
        //
        // 
        // Remarques : (facultatif)
        //--------------------------------------------

        public XmlElement NodeLookUp(string a_token)
        {
            return XMLTool.NodeLookUp(m_xmlParent, a_token);
        }

        public XMLTool getNode(string a_token)
        {
            var x = XMLTool.NodeLookUp(m_xmlParent, a_token);
            return new XMLTool(x);
        }

        public XmlNode Node
        {
            get { return m_xmlParent; }
        }


        //--------------------------------------------
        // getNodeValue
        //
        // Description : renvoie la valeur du noeud nomm�
        //
        // Entr�es : 
        //	a_token : [String] Nom du noeud
        //
        // Sorties :
        //	[String] valeur � l'int�rieur des balises
        //
        // Auteur : B. DUMAS
        // Date : 07/08/2008
        //
        // 
        // Remarques : (facultatif)
        //--------------------------------------------
        public string getNodeValue(string a_token)
        {
            XmlNode l_node = NodeLookUp(a_token);
            if (l_node == null)
                return "";
            return l_node.InnerText;

        }

        public string getAttValue(string token, string attName)
        {
            XmlNode l_node = NodeLookUp(token);
            if (l_node == null)
                return "";
            XmlAttribute att = l_node.Attributes[attName];
            if (att == null)
                return "";
            return att.Value;
        }

       

        public string getAttValue(string attName)
        {

            XmlAttribute att = m_xmlParent.Attributes[attName];
            if (att == null)
                return "";
            return att.Value;
        }

        public double getDoubleAttValue(string attName, double defaultValue)
        {
            var s = getAttValue(attName);
            if (string.IsNullOrEmpty(s))
                return defaultValue;
            return Convert.ToDouble(s);
        }

        public double getDoubleAttValue(string attName)
        {
            return getDoubleAttValue(attName, -1);
        }

        public int getIntAttValue(string attName)
        {
            return getIntAttValue(attName, -1);
        }

        public int getIntAttValue(string attName, int defaultValue)
        {
            var s = getAttValue(attName);
            if (string.IsNullOrEmpty(s))
                return defaultValue;
            return Convert.ToInt32(s);
        }

        public bool getBoolAttValue(string attName)
        {
            var s = getAttValue(attName);
            if (string.IsNullOrEmpty(s))
                return false;
            return bool.Parse(s);
        }

        public bool getDeleted()
        {
            return getBoolAttValue(TOKEN_DELETED); 
        }

         public static bool getDeleted(XmlElement node)
        {
            XMLTool xml = new XMLTool(node);
            return xml.getDeleted(); 
        }

        public bool? getNullableBollAttVAlue(string attName)
        {
            var s = getAttValue(attName);
            if (string.IsNullOrEmpty(s))
                return null;
            return bool.Parse(s);
        }

        public bool getBoolValue(string token, bool defaultValue)
        {
            string value = getNodeValue(token);
            if (string.IsNullOrEmpty(value))
                return defaultValue;
            return bool.Parse(value);
        }
        public bool getBoolValue(string token)
        {
            return getBoolValue(token, false);
        }

        public static string getAttValue(XmlElement node, string attName)
        {
            XMLTool xml = new XMLTool(node);
            return xml.getAttValue(attName);
        }

        public static string getNodeValue(XmlElement a_parent, string a_token)
        {
            XMLTool l_xml = new XMLTool(a_parent);
            return l_xml.getNodeValue(a_token);
        }
        public static XmlElement NodeLookUp(XmlElement a_parent, string a_token)
        {

            foreach (XmlNode l_xmlELt in a_parent)
            {
                if (l_xmlELt is XmlElement && l_xmlELt.Name.Trim().Equals(a_token.Trim(), StringComparison.InvariantCultureIgnoreCase))
                {
                    return (XmlElement)l_xmlELt;
                }

            }

            return null;
        }


        public static void openBalise(ITextWriter a_sw, string a_balise)
        {
            a_sw.Append("<");
            a_sw.Append(a_balise);
            a_sw.Append(">");


        }

        public static void openBalise(ITextWriter a_sw, string a_balise, string attributeName, string attributevalue)
        {
            a_sw.Append("<");
            a_sw.Append(a_balise);
            a_sw.Append(" ");
            a_sw.Append(attributeName);
            a_sw.Append("'");
            a_sw.Append(attributevalue);
            a_sw.Append("'");
            a_sw.Append(">");


        }



        public static void closeBalise(ITextWriter a_sw, string a_balise)
        {
            a_sw.Append("<");
            a_sw.Append("/");
            a_sw.Append(a_balise);
            a_sw.Append(">");

        }

        public static void writeValue(ITextWriter a_sw, string a_balise, string a_value)
        {
            if (a_value.Length == 0)
                return;
            openBalise(a_sw, a_balise);
            a_sw.Append(a_value);
            closeBalise(a_sw, a_balise);
        }

        public static void writeValue(ITextWriter a_sw, string a_balise, string a_value, string attributeName, string attributevalue)
        {
            if (a_value.Length == 0)
                return;
            openBalise(a_sw, a_balise, attributeName, attributevalue);
            a_sw.Append(a_value);
            closeBalise(a_sw, a_balise);
        }


        public static void writeValue(ITextWriter a_sw, string a_balise, int a_value)
        {
            if (a_value < 0)
                return;
            writeValue(a_sw, a_balise, a_value.ToString());
        }
        public static void writeValue(ITextWriter a_sw, string a_balise, System.DateTime a_value)
        {
            if (a_value == System.DateTime.MinValue)
                return;
            writeValue(a_sw, a_balise, a_value.ToString());
        }


        public static string FileToXml(string a_str)
        {
            // Return a_str.Replace("&#60;", "").Replace("&#62;", "").Replace("&", "&#38;")
            return a_str.Replace("&#38;", "&").Replace("&", "&#38;");
        }

        public static string RefToXml(string a_str)
        {
            // Return a_str.Replace("&#60;", "").Replace("&#62;", "").Replace("&", "&#38;")
            // Return FileToXml(a_str).Replace("_", "").Replace("<", "").Replace(">", "")
            return FileToXml(a_str).Replace("<", "").Replace(">", "");
        }

        public static string FromXml(string a_str)
        {
            return a_str.Replace("&#38;", "&");
        }

        public string InnerText { get { return m_xmlParent.InnerText; } }

        private IEnumerator<XMLTool> getEnumerator()
        {
            var list = new List<XMLTool>();
            foreach (XmlNode sub in m_xmlParent.ChildNodes)
            {
                if (sub is XmlElement)
                    list.Add(new XMLTool(sub as XmlElement));
            }
            return list.GetEnumerator();
        }

        public IEnumerator<XMLTool> GetEnumerator()
        {
            return getEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return getEnumerator();
        }


    }
}
]]></content>
  </file>
  <file path="\PieceDb.Consolid\Consolid.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using pdb.gen.albums;
using pdb.gen.conf;
using pdb.gen.stat;
using pdb.obj;
using pdb.ordo;
using pdb.util;
using System.Threading;
using pdb.gen.Virtuel;
using pdb.gen.Tuning;

namespace pdb.gen
{
    /// <summary>
    /// G�re l'application propri�taire
    /// </summary>
    /// <remarks></remarks>ranking
    /// 
    public class Consolid
    {
        private static Logger logger = Logger.getLogger("gen", true);
        private CListPiece m_list;
        private List<Piece> m_listTrackClassed = new List<Piece>();
        /// <summary>
        /// Liste des données consolidées morceaux maitres
        /// </summary>
        private List<Piece> listPiece = new List<Piece>();
        private List<Piece> allClassed = new List<Piece>();
        private List<Piece> allClassedInAlbumEnabled = new List<Piece>();
        private List<Piece> all = new List<Piece>();
        /// <summary>
        /// Liste des morceux avec les enfants 
        /// </summary>
        private List<Piece> listPieceInAlbum = new List<Piece>();
        /// <summary>
        /// Liste des morceux avec les enfants - sans les virtuels 
        /// </summary>
        private List<Piece> listPieceInAlbumReal = new List<Piece>();
        private Albums albums; // = new Albums(CConf.ConfGen.AlbumSortStrict);
        private BgDict<int, Piece> htIds = new BgDict<int, Piece>();

        private static volatile object _lock = new object();
        private bool _consolidEnCours;
        private bool goCompact = true;
        private bool classementChange;
        private bool _firstConsolid = true;
        private bool _albumBuild = false;


        #region navigation
        private static IComponentFactor creator = new TrackListCreator();
        private PlayList root = new PlayList("root", null);
        public PlayList Root { get { return root; } }
        private PlayList musique;
        private PlayList classement;
        private PlayList listes;
        private PlayList genres;
        #endregion

        public DateTime Now { set { CalcDate.refreshDate(value); } }

        private int step;
        public int Step { set { step = value; } }

        public Consolid()
        {
            Piece.Gen = this;
            musique = new PlayList("musique", root);
            classement = new PlayList("classement", root);
            listes = new PlayList("listes", root);
            genres = new PlayList("genres", listes);
            albums = new Albums(this);
        }
        /// <summary>
        /// Lance le compactage à la prochaine génération
        /// </summary>
        public void GoCompact() { goCompact = true; }
        public void ClassementChange() { classementChange = true; }

        private void buildClassTree(IPlayList pl)
        {
            pl.DeleteChilds();
            var l = new List<Piece>(allClassed);
            l.Reverse();
            foreach (Piece piece in l)
            {

                var _class = piece.ClassNameAndRating(false);
                char[] tab = _class.ToCharArray();
                int count = tab.GetLength(0);
                buildClassTree(pl, piece, tab, count, -1);
            }
        }

        //public void buildClassTree()
        //{
        //    buildClassTree(classement);
        //}


        private void buildClassTree(IPlayList parent, Piece piece, char[] strClass, int count, int index)
        {
            if (index == count - 2)
            {
                parent.addObj(piece);
                return;
            }

            var _index = index + 1;
            var pl = parent.getOrCreate(strClass[_index].ToString());
            buildClassTree(pl, piece, strClass, count, _index);

        }

        private bool filterOnlyNext = true;
        public bool FilterNext
        {
            get { return filterOnlyNext; }
            set
            {
                if (value != filterOnlyNext)
                {
                    filterOnlyNext = value;
                }
            }
        }

        private void waitForConsolid()
        {
            bool cango = false;
            try
            {
                do
                {
                    lock (_lock)
                        cango = !_consolidEnCours;
                    if (cango)
                        return;
                    Thread.Sleep(1000);
                } while (!cango);
            }
            finally
            {
                _consolidEnCours = true;
            }
        }

        public Albums Albums { get { return albums; } }
        public void invalidateAlbums()
        {

            albums.invalidateAll(true);
            // pour l'instant ne fonctionne pas 
            return;
            _albumBuild = false;
        }

        public bool AlbumBuild { get { return _albumBuild; } }

        private void buildVirtualFromList(PlayList pl, List<Piece> list)
        {
            string path = pl.getPath(listes, genres);
            foreach (IItem item in pl.Items)
            {
                var piece = htIds[item.ID];
                var v = piece.createVirtualAlbum(path, virtualMode.list, null);
                if (v != null)
                {
                    list.Add(v);
                }
            }

            foreach (PlayList sub in pl.PlayLists)
            {
                buildVirtualFromList(sub, list);
            }
        }

        public void ConsolidInit(IEnumerable<ITrackInfoItunes> dbList)
        {
            if (_albumBuild)
                return;
            allClassed.Clear();
            allClassedInAlbumEnabled.Clear();
            m_listTrackClassed.Clear();

            listPiece.Clear();
            listPieceInAlbum.Clear();
            listPieceInAlbumReal.Clear();
            all.Clear();

            // albums = new Albums(this);
            // VirtualPiece.init();

            //htIds.Clear();

            //  htIds = new BgDict<int, Piece>();
            foreach (ITrackInfoItunes track in dbList)
            {

                if (!track.isPodcast)
                {
                    Piece piece = null;
                    int pieceId = track.PieceId;
                    if (htIds.ContainsKey(pieceId))
                    {
                        piece = htIds[pieceId];
                        piece.initRank();
                    }
                    else
                    {
                        piece = new Piece(track);
                        htIds.Add(pieceId, piece);
                    }

                    all.Add(piece);

                }
            }
            // link
            foreach (Piece piece in all)
            {
                int parentId = piece.PieceParentId;
                if (parentId > 0)
                {
                    piece.setParent(htIds[parentId]);
                }
            }

            // liste FORT + albums


            albums.checkBuild();
            logger.log("build albums");
            foreach (Piece piece in all)
            {

                if (piece.Parent == null)
                {
                    // piece.removeVirtualChilds(); 
                    listPiece.Add(piece);
                    foreach (Piece p in piece)
                    {
                        if (p.Virtual)
                            continue;
                        if (albums.check(p))
                        {
                            listPieceInAlbum.Add(p);
                            listPieceInAlbumReal.Add(p);
                        }
                    }
                }
            }

            var confGen = CConf.ConfGen;
            var min = confGen.AlbumMin;

            if (_albumVirtual)
            {
                logger.log("build albums virtuels");

                var listCandidat = new List<Piece>();
                var dictTmp = new BgDictString<Album>();
                foreach (Piece piece in all)
                {
                    if (piece.Parent == null)
                    {
                        piece.buildVirtualAlbums(listCandidat);
                    }
                }

                if (CConf.ConfGen.ListVirtual)
                {
                    buildVirtualFromList(listes, listCandidat);
                }

                foreach (Piece p in listCandidat)
                    albums.checkVirtual(p, dictTmp);




                min = confGen.PathVirtualMin;
                if (min > 1)
                {
                    // Suppression des albums virtuel par répertoire avec trop peu de morceaux
                    foreach (var key in new List<string>(dictTmp.Keys))
                    {
                        var a = dictTmp[key];
                        if (a.VirtualMode == virtualMode.path || a.VirtualMode == virtualMode.extended)
                        {
                            if (a.Count < min)
                            {
                                a.ClearAndMenage();
                                dictTmp.Remove(key);
                            }
                        }
                    }
                }

                if (confGen.ArtistVirtual)
                {
                    min = confGen.ArtistVirtualMin;
                    if (min > 1)
                    {
                        // Suppression des albums artiste avec trop peu de morceaux
                        foreach (var key in new List<string>(dictTmp.Keys))
                        {
                            var a = dictTmp[key];
                            if (a.VirtualByArtist)
                            {
                                if (a.Count < min)
                                {
                                    a.ClearAndMenage();
                                    dictTmp.Remove(key);
                                }

                            }
                        }
                    }
                }


                if (confGen.WordVirtual)
                {
                    min = confGen.WordVirtualMin;
                    if (min > 1)
                    {
                        // Suppression des albums artiste avec trop peu de morceaux
                        foreach (var key in new List<string>(dictTmp.Keys))
                        {
                            var a = dictTmp[key];
                            if (a.VirtualMode == virtualMode.word)
                            {
                                if (a.Count < min)
                                {
                                    a.ClearAndMenage();
                                    dictTmp.Remove(key);
                                }

                            }
                        }
                    }
                }




                var listAlbums = new List<Album>(dictTmp.Values);

                listAlbums.Sort(new VirtualAlbumComparer());
                albums.checkVirtuals(listAlbums, listPieceInAlbum);

                foreach (Piece piece in all)
                {
                    piece.menageChilds();
                }

            }

            albums.buildDone();

            // Suppression des albums avec trop peu de morceaux
            min = confGen.AlbumMin;
            if (min > 1)
            {
                // Suppression des albums standards avec trop peu de morceaux
                var dict = albums.Dict;
                foreach (var key in new List<string>(dict.Keys))
                {
                    var a = dict[key];
                    if (!a.Virtual)
                    {
                        if (a.Count < min)
                        {
                            a.ClearAndMenage();
                            dict.Remove(key);
                        }
                    }
                }
            }
            albums.sortVirtual();
            _albumBuild = true;

        }


        public void MakeConsolid(IEnumerable<ITrackInfoItunes> dbList, bool makeSort)
        {
            try
            {
                waitForConsolid();
                logger.log("consolid");
                DateTime now = DateTime.Now;
                DateTime debut = now;

                allClassed.Clear();
                allClassedInAlbumEnabled.Clear();
                m_listTrackClassed.Clear();

                ConsolidInit(dbList);
                //if (CConf.ConfGen.LimitAlbums > 0)
                //    _albumBuild = false;
                now = DateTime.Now;

                StackAlbum.Instance.init(all);

                misc.log("StackAlbum.Instance.init(all); {0} ms", (DateTime.Now - now).TotalMilliseconds.ToString("0")); now = DateTime.Now;

                foreach (Piece piece in listPieceInAlbum)
                {
                    if (piece.Classement.isClassed())
                    {
                        allClassed.Add(piece);
                        //if (piece.PieceAlbum != null && piece.PieceAlbum.AtLeastOneEnabled)
                        //    allClassedInAlbumEnabled.Add(piece);
                    }
                }

                foreach (Piece piece in listPieceInAlbumReal)
                {
                    if (piece.Classement.isClassed())
                    {
                        if (piece.PieceAlbum != null && piece.PieceAlbum.AtLeastOneEnabled)
                            allClassedInAlbumEnabled.Add(piece);
                    }
                }

                misc.log("m_listTrackClassed: {0} elt", m_listTrackClassed.Count);
                misc.log("listPieceInAlbum: {0} elt", listPieceInAlbum.Count);
                misc.log("allClassed: {0} elt", allClassed.Count);
                misc.log("allClassedInAlbumEnabled: {0} elt", allClassedInAlbumEnabled.Count);
                // (DateTime.Now - now).TotalMilliseconds.ToString("0")); now = DateTime.Now;
                misc.log("listPieceInAlbumReal; {0} elt {1} ms", listPieceInAlbumReal.Count, (DateTime.Now - now).TotalMilliseconds.ToString("0")); now = DateTime.Now;



                misc.log("makeConsolid:init; {0} ms", (DateTime.Now - debut).TotalMilliseconds.ToString("0")); now = DateTime.Now;
                Ranking(makeSort);
                misc.log("makeConsolid:fin; {0} ms", (DateTime.Now - debut).TotalMilliseconds.ToString("0")); now = DateTime.Now;
            }
            finally
            {
                lock (_lock)
                {
                    _firstConsolid = false;
                    _consolidEnCours = false;
                }
            }

        }

        public void buildMusique()
        {
            misc.log("buildMusique");
            //if (CConf.ConfGen.LimitList > 0)
            //    return;
            var d = new HashSet<int>();
            foreach (Piece piece in all)
            {
                if (d.Add(piece.PieceId))
                    musique.add(piece); // addObj(piece);
            }


            foreach (Piece piece in listPieceInAlbumReal)
            {
                if (d.Add(piece.PieceId))
                    musique.add(piece);
            }


#if GEN_ALBUM

            var _albums = musique.getOrCreate("albums");
            foreach (Album album in albums.List)
            {
                CPlayList _alb = _albums.getOrCreate(album.Name);
                var tracks = album.TrackByNumber;

                foreach (Piece piece in tracks)
                {
                    _alb.addObj(piece);
                }
            }
#endif
            misc.log("fin buildMusique");
        }

        //private void buildMusique(PlayList musique)
        //{
        //    var d = new HashSet<int>();
        //    foreach (Piece piece in all)
        //    {
        //        if (d.Add(piece.PieceId))
        //            musique.add(piece); // addObj(piece);
        //    }


        //    foreach (Piece piece in listPieceInAlbum)
        //    {
        //        if (d.Add(piece.PieceId))
        //            musique.add(piece);
        //    }
        //}

        public void buildMusiqueAgain()
        {
            musique.DeleteBase();
            buildMusique();
        }


        public void buildLists(PlayList listes)
        {
            buildList(this.listes, listes);
        }

        private void buildList(PlayList mine, PlayList ext)
        {
            foreach (PlayList subExt in ext.PlayLists)
            {
                var sub = new PlayList(subExt.Name, mine);
                sub.ID = subExt.ID;
                // mine.add(sub);
                buildList(sub, subExt);
            }

            foreach (IItem t in ext.Items)
            {
                var piece = htIds[t.ID];
                mine.add(piece);
            }


            //foreach (PlComponent c in ext)
            //{
            //    if (c is CPlayList)
            //    {
            //        var subExt = c as CPlayList;
            //        var sub = new CPlayList(subExt.Name, mine);
            //        sub.ID = subExt.ID;
            //        // mine.add(sub);
            //        buildList(sub, subExt);
            //    }
            //    else
            //    {
            //        var t = c as IFile;
            //        var piece = htIds[t.PieceId];
            //        mine.add(new TrackList(piece));
            //    }
            //}
        }



        internal Album getAlbum(Piece track)
        {
            return albums.getAlbum(track);
        }

        public HashList<Piece> getTracksAlbum(Piece track)
        {
            var album = getAlbum(track);
            if (album == null)
                return new HashList<Piece>();
            return album.Tracks;
        }

        public List<Piece> getTracksAlbumReverse(Piece track)
        {
            var album = getAlbum(track);
            if (album == null)
                return null;
            return album.TrackSortedByExportPriority.List;
        }

        public List<Piece> getTracksAlbumByNumber(Piece track)
        {
            var album = getAlbum(track);
            if (album == null)
                return null;
            return album.TrackByNumber;
        }

        //public void buildAlbum(ITrackMetaData track, List<ITrackMetaData> container)
        //{
        //    var album = getAlbum(track);
        //    if (album == null)
        //        return;
        //    foreach (var p in album.Tracks)
        //    {
        //        container.Add(p);
        //    }
        //}

        public List<Piece> sortByClass()
        {
            try
            {
                waitForConsolid();
                var list = new List<Piece>(listPiece);
                list.Sort(new CPieceComparerByQualityAndLength());
                return list;
            }
            finally
            {
                _consolidEnCours = false;
            }
        }

        public List<Piece> sortByAlbum()
        {
            try
            {
                waitForConsolid();

                var list = new List<Piece>();
                var d = new HashSet<int>();
                foreach (Piece piece in all)
                {
                    if (d.Add(piece.PieceId))
                        list.Add(piece);
                }


                foreach (Piece piece in listPieceInAlbum)
                {
                    if (d.Add(piece.PieceId))
                        list.Add(piece);
                }


                list.Sort(new AllPieceComparer2());
                return list;
            }
            finally
            {
                _consolidEnCours = false;
            }
        }

        private void Ranking(bool makeSort)
        {
            albums.buildStack(makeSort);
            QRanking();
            LRanking();
            QLRanking();

            if (Piece.Compact)
            {
                if (goCompact || (classementChange && CConf.ConfGen.AlbumSort.compactAny))
                {
                    lock (Albums.LockSort)
                    {
                        goCompact = false;
                        classementChange = false;
                        //var l = new List<Piece>(this.listPiece);
                        //l.Sort(new CPieceComparerByQualityAndLength2());
                        new Condenseur(listPieceInAlbum).gener2();
                    }
                }
            }


            var list = new List<Piece>(listPiece);
            //logger.log("setTuningDateValues");


            //foreach (Piece piece in list)
            //{
            //    piece.Rank.TimeRest = -1;
            //}
            //foreach (Piece piece in list)
            //{
            //    piece.FirstClass = false;
            //    CRank rank = piece.Rank;
            //    var sortValue = CTuning.Calc(rank, CConf.Sort);
            //    rank.SortValue = sortValue;

            //    ListSelection.setTuningDateValues(piece);
            //}

            logger.log("PieceRestComparer->RankRest ");
            list.Sort(new PieceRestComparer());

            for (int i = 0; i < list.Count; i++)
            {
                list[i].Rank.RankRest = i + 1;
            }

            logger.log("list.Sort(new PieceDeltaComparer());");
            list.Sort(new PieceDeltaComparer());
            list.Reverse();

            for (int i = 0; i < list.Count; i++)
            {
                list[i].Rank.RankDelta = i + 1;
            }

            logger.log("PieceSortComparer->Sort ");
            list.Sort(new PieceSortComparer());
            list.Reverse();

            for (int i = 0; i < list.Count; i++)
            {
                list[i].Rank.Sort = i + 1;
            }
            logger.log("AlbumsSort ");
            var all = new List<Piece>(listPieceInAlbum);
            // if (makeSort)
            albums.makeSort(_firstConsolid);
            logger.log("AllPieceComparer->RankAllAlbum ");
            all.Sort(new AllPieceComparer());
            for (int i = 0; i < all.Count; i++)
            {
                all[i].RankAllAlbum = i + 1;
            }

            // CTuning.Total = listPieceInAlbum.Count;

        }

        BackGroundTaskMgr bg = BackGroundTaskMgr.getMgrlarge("copy");
        bool endCopy = false;
        public void CopyFiles(string defaultDir, IEnumerable<ITrackInfoItunes> trace)
        {
            if (trace == null)
                return;
            string destDir = CConf.CopyTo;
            if (string.IsNullOrEmpty(destDir))
                return;
            bool copyModeFile = CConf.CopyModeFile;

            if (copyModeFile)
            {

                var list = new List<Piece>();
                foreach (ITrackInfoItunes track in trace)
                {

                    list.Add(new Piece(track));
                }


                var l_pieceComparer = new CPieceComparerByQualityAndLength();
                list.Sort(l_pieceComparer);


                //compactage de la liste en tenant compte des mieux not�s
                var remote = new CListPiece(list);

                var l = new List<Piece>(m_listTrackClassed);
                l.Sort(new CPieceComparerByQualityLengthAndEnable());

                using (StreamWriter sr = new StreamWriter(@"..\listCopy.txt", false))
                {
                    bool endCopie = false;
                    int count = m_listTrackClassed.Count;
                    foreach (Piece l_piece in l)
                    {
                        if (endCopie)
                            return;

                        if (!remote.Contains(l_piece) && File.Exists(l_piece.Location))
                        {
                            try
                            {
                                StringBuilder sb = new StringBuilder();

                                sb.Append(l_piece.ClassementValueDecimal(false));
                                //sb.Append(":");
                                //sb.Append(l_piece.Rating / 20);
                                sb.Append(" ");
                                sb.Append(l_piece.Location);
                                if (!l_piece.Enabled)
                                {
                                    sb.Append(" disabled");
                                }
                                sb.Append("==>");
                                sb.Append(destDir);
                                string txt = sb.ToString();
                                sr.WriteLine(txt);
                                sr.Flush();
                                logger.log("copy " + txt);

                                copy(l_piece, defaultDir, destDir);
                            }
                            catch (Exception ex)
                            {
                                logger.log(ex.ToString());
                                sr.WriteLine(ex.ToString());
                                endCopie = true;
                                // endCopie = true;

                            }
                        }

                    }
                }
            }

            else
            {
                BgDictString<DirectoryInfo> directoriesCopied = new BgDictString<DirectoryInfo>();

                Dictionary<string, int> items = new Dictionary<string, int>();


                DirectoryInfo dest = new DirectoryInfo(destDir);
                DirectoryInfo from = new DirectoryInfo(defaultDir);
                List<DirectoryInfo> dirs = new List<DirectoryInfo>();
                StringBuilder sb = new StringBuilder();
                try
                {

                    recordSoon(directoriesCopied, from, dest, dest);
                    deleteSoon(dest);

                    for (int i = 0; i < m_listTrackClassed.Count; i++)
                    {

                        var l_piece = m_listTrackClassed[i];
                        logger.log(">> check {0} {1} {2} ", (i + 1), l_piece.Location, l_piece.ClassNameAndRating(false));
                        FileInfo file = new FileInfo(l_piece.Location);
                        DirectoryInfo dir = file.Directory;
                        string path = dir.FullName;
                        if (!directoriesCopied.ContainsKey(path))
                        {
                            if (!items.ContainsKey(path))
                            {
                                items.Add(path, 1);
                            }
                            else
                                items[path]++;

                            bool go = false;
                            int passes = items[path];
                            int nbfiles = 0;
                            foreach (FileInfo f in dir.GetFiles())
                            {
                                if (f.IsMusic())
                                    nbfiles++;
                            }




                            if (nbfiles > 0)
                            {
                                double rapport = (double)passes / (double)nbfiles;
                                logger.log(" {0} passe(s) / {1} fichiers ({2})", passes, nbfiles, rapport);
                                if (rapport > 0.5)
                                    go = true;
                                //if (nbfiles <= 3) go = true;
                                //if (passes == 3 && nbfiles <= 5) go = true;
                                //if (passes >= 5) go = true;


                                if (go)
                                {
                                    logger.log(">> copy {0} {1} ", (i + 1), l_piece.Location);
                                    dirs.Add(dir);
                                    sb.AppendLine(dir.FullName);
                                    directoriesCopied.Add(dir.FullName, null);
                                }
                            }

                        }
                    }
                    logger.log(sb.ToString());
                    File.WriteAllText(@"..\classementAlbums.txt", sb.ToString());

                    foreach (DirectoryInfo dir in dirs)
                    {

                        copy(from, dir, dest);
                    }
                }
                catch
                {
                    logger.log("fin de copie");
                }
            }


        }

        private void copy(Piece piece, string musicFrom, string dirDest)
        {
            string pathDest = piece.Location.Replace(musicFrom, dirDest);
            string[] elts = pathDest.Split(Path.DirectorySeparatorChar);

            StringBuilder sbPath = new StringBuilder();
            sbPath.Append(elts[0]); sbPath.Append(Path.DirectorySeparatorChar);
            DirectoryInfo current = new DirectoryInfo(sbPath.ToString());
            for (int i = 1; i < elts.GetLength(0) - 1; i++)
            {
                string elt = elts[i];
                sbPath.Append(elt); sbPath.Append(Path.DirectorySeparatorChar);
                DirectoryInfo aux = new DirectoryInfo(sbPath.ToString());

                if (!aux.Exists)
                    aux.Create();
                current = aux;
            }
            if (!File.Exists(pathDest))
                File.Copy(piece.Location, pathDest, true);
        }

        private class BgtaskCopy : BgTaskBase
        {
            private FileInfo file;
            private string dest;
            private Consolid master;
            public BgtaskCopy(Consolid master, FileInfo file, string dest)
                : base(dest)
            {
                success = true;
                this.master = master;
                this.file = file;
                this.dest = dest;
            }

            public override void exec()
            {
                try
                {
                    if (master.endCopy)
                        return;
                    file.CopyTo(dest);
                }
                catch (Exception e)
                {
                    logger.log(e.ToString());
                    master.endCopy = true;

                }
            }
        }


        private void recordSoon(BgDictString<DirectoryInfo> dict, DirectoryInfo from, DirectoryInfo baseDirectory, DirectoryInfo dir)
        {
            string path = dir.FullName.Replace(baseDirectory.FullName, from.FullName);
            if (!string.IsNullOrEmpty(path))
                dict.Add(path, dir);

            foreach (DirectoryInfo sub in dir.GetDirectories())
                recordSoon(dict, from, baseDirectory, sub);
        }

        private void deleteSoon(DirectoryInfo dir)
        {
            try
            {
                foreach (DirectoryInfo sub in dir.GetDirectories())
                    deleteSoon(sub);
                dir.Delete();
            }
            catch (Exception e)
            {
                logger.log(dir.FullName + " " + e.ToString());
            }
        }

        private void copy(DirectoryInfo from, DirectoryInfo dir, DirectoryInfo dest)
        {
            try
            {
                if (endCopy)
                    return;
                logger.log("copy {0} ", dir.FullName);
                string path = dir.FullName.Replace(from.FullName, "");
                string[] elts = path.Split(Path.DirectorySeparatorChar);

                DirectoryInfo current = dest;
                bool toBeCreated = false;
                foreach (string elt in elts)
                {
                    DirectoryInfo sub = new DirectoryInfo(current.FullName + Path.DirectorySeparatorChar + elt);
                    if (!sub.Exists)
                    {
                        toBeCreated = true;
                        sub.Create();
                    }
                    current = sub;
                }

                if (!toBeCreated)
                {
                    bool _continue = true;
                    var aux = current;
                    while (_continue)
                    {
                        try
                        {

                            current.Delete();
                            current = current.Parent;
                            _continue = true;

                        }
                        catch
                        {
                            _continue = false;
                        }
                    }
                    return;
                }

                foreach (FileInfo file in dir.GetFiles())
                {
                    if (endCopy)
                        return;
                    string fileDest = current.FullName + Path.DirectorySeparatorChar + file.Name;
                    logger.log("copy " + fileDest);
                    file.CopyTo(fileDest);
                }
            }
            catch (Exception e)
            {
                logger.log(dir.FullName + " " + e.Message);
                throw;
            }
        }

        private static List<Piece> m_listQL;
        public static List<Piece> QLClassed
        {
            get
            {
                return m_listQL;
            }
        }
        /// <summary>
        /// calcul du classement en fonction des listes 
        /// </summary>
        /// <remarks></remarks>
        private void QRanking()
        {
            logger.log("Qranking");
            DateTime now = DateTime.Now;
            DateTime debut = now;



            var l_pieceComparer = new PieceDeepClassementComparer();

            foreach (Piece piece in listPiece)
            {
                piece.Rank.init();
            }

            misc.log("piece.Rank.init(); {0} ms", (DateTime.Now - now).TotalMilliseconds.ToString("0")); now = DateTime.Now;


            //on ordonne les morceaux top-down => sont privilégiés les plus en vue
            listPiece.Sort(l_pieceComparer);

            misc.log("listPiece.Sort(l_pieceComparer); {0} ms", (DateTime.Now - now).TotalMilliseconds.ToString("0")); now = DateTime.Now;

            //compactage de la liste en tenant compte des mieux notés
            m_list = new CListPiece(listPiece);


            misc.log(" m_list = new CListPiece(listPiece); {0} ms", (DateTime.Now - now).TotalMilliseconds.ToString("0")); now = DateTime.Now;
            logger.log("Qranking:legacyList Compact:" + m_list.Count);

            foreach (Piece l_piece in m_list)
            {
                if (l_piece.Classement.isClassed())
                {
                    m_listTrackClassed.Add(l_piece);
                }
            }

            logger.log("Qranking:track classed : {0} {1} ms", m_listTrackClassed.Count, (DateTime.Now - now).TotalMilliseconds.ToString("0")); ; now = DateTime.Now;
            int l_nbPiece = 0;

            int l_iLast = 0;
            int l_count = m_listTrackClassed.Count;
            for (int i = 0; i <= l_count - 2; i++)
            {
                l_nbPiece += 1;
                Piece l_One = m_listTrackClassed[i];
                Piece l_Two = m_listTrackClassed[i + 1];


                int l_iCmp = l_pieceComparer.Compare(l_One, l_Two);
                if (l_iCmp == 0)
                {
                }
                else
                {
                    int rank = getRank(l_iLast, l_nbPiece);

                    for (int ii = l_iLast; ii <= i; ii++)
                    {
                        m_listTrackClassed[ii].QRank = rank;
                    }

                    l_iLast = l_nbPiece;
                }
            }

            for (int ii = l_iLast; ii <= l_count - 1; ii++)
            {
                int rank = getRank(l_iLast, l_nbPiece);
                m_listTrackClassed[ii].QRank = rank > 0 ? rank : 1;
            }

            CTuning.Total = m_listTrackClassed.Count;

            foreach (Piece piece in listPiece)
            {
                if (piece.QRank <= 0)
                    piece.QRank = CTuning.Total;
            }
            logger.log("fin : {0} {1} ms", m_listTrackClassed.Count, (DateTime.Now - now).TotalMilliseconds.ToString("0")); ; now = DateTime.Now;
            // Console.WriteLine("Qranking:total class�s : " + m_listTrackClassed.Count);

            logger.log("total QRanking {0} ms", (DateTime.Now - debut).TotalMilliseconds.ToString("0"));

        }

        private int getRank(int l_iLast, int l_nbPiece)
        {
            double qRank = l_iLast + 1 + l_nbPiece;
            switch (CConf.RankingType)
            {
                case rankingType.middle: qRank = 0.5 * qRank; break;
                case rankingType.up: qRank = l_iLast + 1; break;
                case rankingType.bottom: qRank = l_nbPiece; break;
                default:
                break;
            }
            return Convert.ToInt32(qRank);
        }
        /// <summary>
        /// Tri des morceaux en fonction de leur longueur
        /// </summary>
        /// <remarks></remarks>
        private void LRanking()
        {
            logger.log("LRanking");
            DateTime now = DateTime.Now;
            DateTime debut = now;

            List<Piece> l_aux = new List<Piece>(listPiece);
            l_aux.Sort(new CPieceComparerByLenght());
            for (int l_iIndex = 0; l_iIndex <= l_aux.Count - 1; l_iIndex++)
            {
                Piece l_piece = l_aux[l_iIndex];
                l_piece.LRank = l_iIndex + 1;
            }

            logger.log("total LRanking {0} ms", (DateTime.Now - debut).TotalMilliseconds.ToString("0"));
        }

        //public void compact()
        //{
        //    if (Piece.Compact)
        //    {
        //        if (goCompact || CConf.ConfGen.AlbumSort.compactAny)
        //        {
        //            goCompact = false;
        //            var l = new List<Piece>(this.listPiece);
        //            l.Sort(new CPieceComparerByQualityAndLength2());
        //            new Condenseur(m_listQL).gener2();
        //        }
        //    }
        //}
        /// <summary>
        /// Tri des morceaux en fonction de leur qualité +longueur en cas d'égalité
        /// </summary>
        /// <remarks></remarks>
        private void QLRanking()
        {
            logger.log("QLRanking");
            DateTime now = DateTime.Now;
            DateTime debut = now;

            m_listQL = new List<Piece>(m_listTrackClassed);
            foreach (Piece p in m_listQL)
                p.invalidateCache(false);
            m_listQL.Sort(new CPieceComparerByQualityAndLength());
            List<Piece> l_aux = new List<Piece>(listPiece);
            l_aux.Sort(new CPieceComparerByQualityAndLength());
            int count = l_aux.Count;
            for (int l_iIndex = 0; l_iIndex <= l_aux.Count - 1; l_iIndex++)
            {
                Piece l_piece = l_aux[l_iIndex];
                l_piece.QLRank = l_iIndex + 1;
            }

            l_aux.Sort(new CPieceComparerByQualityAndLengthInv());

            for (int l_iIndex = 0; l_iIndex <= l_aux.Count - 1; l_iIndex++)
            {
                Piece l_piece = l_aux[l_iIndex];
                l_piece.Rank.TwiceInv = l_iIndex + 1;
            }


            //if (CConf.Condensation)
            //{
            //    var l = new List<Piece>(this.listPiece);
            //    l.Sort(new CPieceComparerByQualityAndLength2());
            //    new Condenseur(m_listQL).gener2();

            //}


            logger.log("total QLRanking {0} ms", (DateTime.Now - debut).TotalMilliseconds.ToString("0"));

        }


        private static volatile object _lockStat = new object();
        //   private static volatile object _lockStat2 = new object();
        private static bool buildingStat;
        const string BUILDING_STATE = @"..\building.txt";
        const string LOADING_EXCEL = @"..\busyExcel.txt";

        private void _buildStat(Action rappel)
        {
            lock (_lockStat)
            {
                if (buildingStat)
                {
                    misc.log("stats building by _lockStat 1");
                    return;
                }


                try
                {
                    if (File.Exists(LOADING_EXCEL))
                    {
                        string content = File.ReadAllText(LOADING_EXCEL);
                        misc.log(content);
                        if (content.Contains("BUSY"))
                        {
                            return;
                        }
                    }
                }
                catch (Exception ex)
                {
                    misc.logError("Impossible de lire le fichier lock excel", ex);
                    return;
                }

                buildingStat = true;
            }



            try
            {
                //bool ok = Monitor.TryEnter(_lockStat2, 60 * 1000);
                //if (!ok)
                //{
                //    misc.log("Pas pu entrer pour générer les stats !!!!!!");
                //    return;
                //}


                File.WriteAllText(BUILDING_STATE, "BUILDING");
                bool generDistrib = step % 10 == 0;
                var list = new List<Piece>(m_listQL);
                list.Sort(new ClassementValueDecimal0Comparer());

                if (_albumSortMode.createCourant)
                {
                    var unselected = list.FindAll(t => !t.Enabled);
                    new StatBuilder(unselected).gener3("courant3.txt", (step % 10 == 0));
                    var stat = new StatBuilder(unselected) { Loupe = 1 };
                    stat.gener4("courant4.txt");
                    stat = new StatBuilder(unselected) { Loupe = 2 };
                    stat.gener4("courant4.txt");
                    //stat = new StatBuilder(unselected) { Loupe = 3 };
                    //stat.gener4("courant4.txt");
                }

                if (_albumSortMode.createInter)
                {
                    var unselected = list.FindAll(t => !t.Enabled || t.ClassementProvisoireRecent); //  ( CalcDate.getLastModif(t.DatesClassement) > _albumSortMode.lastModif && t.ClassementProvisoire));
                    new StatBuilder(unselected).gener3("stats3.txt", (step % 10 == 0));
                    var stat = new StatBuilder(unselected) { Loupe = 1 };
                    stat.gener4("stats4.txt");
                    stat = new StatBuilder(unselected) { Loupe = 2 };
                    stat.gener4("stats4.txt");
                    //stat = new StatBuilder(unselected) { Loupe = 3 };
                    //stat.gener4("courant4.txt");
                }

                if (_albumSortMode.createAll)
                {
                    new StatBuilder(list).gener3("all.txt", generDistrib);


                    //  new StatBuilder(m_listQL).gener3(generDistrib);
                    var stat = new StatBuilder(list) { Loupe = 1 };
                    stat.gener4("all.txt");
                    stat = new StatBuilder(list) { Loupe = 2 };
                    stat.gener4("all.txt");
                    //stat = new StatBuilder(m_listQL) { Loupe = 3 };
                    //stat.gener4("stats4.txt");
                }


            }
            catch (Exception ex)
            {
                logger.log(ex.ToString());
            }
            finally
            {
                lock (_lockStat)
                {
                    buildingStat = false;
                    File.WriteAllText(BUILDING_STATE, "FREE");
                }
                if (rappel != null)
                    rappel();
            }
        }

        public void builStats(Action rappel)
        {
            lock (_lockStat)
            {
                if (buildingStat)
                {
                    misc.log("stats building by _lockStat 0");
                    return;
                }

            }
            //  _buildStat(rappel); 
            new Thread(() => _buildStat(rappel)).Start();

        }


        public DynamicStat generStat(string className, bool onlyDisabled)
        {
            var list = m_listQL;
            if (onlyDisabled)
                list = m_listQL.FindAll(t => !t.Enabled);
            else
                list = m_listQL.FindAll(t => !t.Enabled || t.ClassementProvisoireRecent);
            return new DynamicStatBuilder(list).gener(className);
        }

        public List<Piece> getTracks(string className, bool onlyDisabled)
        {
            var list = m_listQL;
            if (onlyDisabled)
                list = m_listQL.FindAll(t => !t.Enabled);
            else
                list = m_listQL.FindAll(t => !t.Enabled || t.ClassementProvisoireRecent);
            return new DynamicStatBuilder(list).getPieces(className);
        }



        //public void timeRanking()
        //{
        //    logger.log("timeRanking");
        //    foreach (var piece in allClassed)
        //        piece.Rank.TimeRest = -1;
        //    foreach (var piece in allClassed)
        //        ListSelection.setTuningDateValues(piece);


        //}

        ///// <summary>
        ///// redirection des index metier de la table m�tier vers la table locale
        ///// Copie des valeurs pertinentes(classlist)
        ///// </summary>
        ///// <remarks></remarks>
        //public void eraseGrouping()
        //{
        //    thCommentGo = false;
        //    thGroupingGo = false;
        //    logger.log("eraseGrouping");
        //    foreach (Piece piece in listPieceInAlbum)
        //    {
        //        piece.setGrouping("", false);
        //        piece.Comment = "";
        //    }
        //}
        //public void writeGrouping()
        //{
        //    logger.log("writeGrouping");
        //    var list = new List<Piece>(listPieceInAlbum);
        //    // list.Sort(new CPieceComparerByQualityAndLength());
        //    list.Sort(new AllPieceComparer2());

        //    var writeGrouping = CConf.ConfGen.WriteGrouping;
        //    foreach (Piece piece in list)
        //    {
        //        try
        //        {
        //            piece.writeGrouping(writeGrouping);
        //        }
        //        catch (Exception ex)
        //        {
        //            logger.log("writeGrouping::" + ex.ToString());
        //        }

        //    }
        //}


        //private bool thGroupingGo;
        //private bool thCommentGo;

        //public bool GroupinGO
        //{
        //    set
        //    {
        //        thGroupingGo = value;
        //        if (value)
        //        {
        //        }
        //    }
        //}
        //public bool CommentGo
        //{
        //    set
        //    {
        //        thCommentGo = value;
        //        if (value)
        //        {
        //        }
        //    }
        //}



        //private void writeGroupingAsync()
        //{
        //    var writeGrouping = CConf.ConfGen.WriteGrouping;
        //    foreach (Piece piece in listPieceInAlbum)
        //    {
        //        try
        //        {
        //            if (!thGroupingGo)
        //                return;
        //            piece.writeGrouping(writeGrouping);
        //        }
        //        catch (Exception ex)
        //        {
        //            misc.log("writeGrouping::" + ex.ToString());
        //        }

        //    }
        //}

        //private void writeCommentAsync()
        //{
        //    var writeComment = CConf.ConfGen.WriteComment;
        //    foreach (Piece piece in listPiece)
        //    {
        //        try
        //        {
        //            if (!thCommentGo)
        //                return;
        //            piece.writeComment(writeComment);
        //        }
        //        catch (Exception ex)
        //        {
        //            misc.log("writeComment::" + ex.ToString());
        //        }
        //    }
        //}

        //public void writeGrouping(Piece piece)
        //{
        //    var writeGrouping = CConf.ConfGen.WriteGrouping;
        //    piece.writeGrouping(writeGrouping);

        //}
        // private bool _sortByAlbum = true;
        //   public bool SortByAlbum { get { return _albumSortMode.Enabled; } }

        private ConfAlbumSort _albumSortMode;
        public ConfAlbumSort SortAlbumMode { set { _albumSortMode = value; } get { return _albumSortMode; } }

        private bool _albumVirtual = CConf.ConfGen.AlbumVirtual;
        public bool AlbumVirtual { get { return _albumVirtual; } set { _albumVirtual = value; } }

        //public void writeComment()
        //{
        //    logger.log("writeComment");
        //    var list = new List<Piece>(listPiece);
        //    list.Sort(new CPieceComparerByQualityAndLength());

        //    var writeComment = CConf.ConfGen.WriteComment;
        //    foreach (Piece piece in list)
        //    {
        //        try
        //        {
        //            piece.writeComment(writeComment);
        //        }
        //        catch (Exception ex)
        //        {
        //            logger.log("writeComment::" + ex.ToString());
        //        }
        //    }




        //}

        //public void writeComment(Piece piece)
        //{
        //    var writeComment = CConf.ConfGen.WriteComment;
        //    try
        //    {
        //        piece.writeComment(writeComment);
        //    }
        //    catch (Exception ex)
        //    {
        //        logger.log("writeComment::" + ex.ToString());
        //    }
        //}



        #region "rot"
        private CLegacyListWriter m_listWriter;
        private CLegacyListWriter m_listWriterAlb;
        private CLegacyListWriter listWriterAll;
        // Private m_rotTotalDuration As Integer = 0

        // private int m_rotPeriod = 0;
        public static object Lock { get { return _lock; } }
        public void createRot(string a_baseName, params IListWriter[] writers)
        {
            lock (_lock)
            {
                var conf = CConf.ConfGen;

                logger.log("Clegacy:createRot {0}", a_baseName);
                List<Piece> l_list = new List<Piece>(m_listTrackClassed);
                List<Piece> l_listAlb = new List<Piece>(allClassedInAlbumEnabled);
                var l_all = new List<Piece>(listPieceInAlbum);
                //  List<Piece> source = null;
                ////  if (SortByAlbum)
                //      source = allClassedInAlbumEnabled;
                //  else
                //      source = m_listTrackClassed;
                //  foreach (Piece l_piece in source)
                //  {
                //      //if (l_piece.belongsTo(a_baseName))
                //      //{
                //      l_list.Add(l_piece);
                //      // }
                //  }





                listWriterAll = new CLegacyListWriter(this, l_all);






                //      m_listWriter.reset();
                m_listWriter = new CLegacyListWriter(this, l_list);
                foreach (IListWriter writer in writers)
                    m_listWriter.addWriter(writer);
                //    logger.log("fin creation des writers 0");
                if (conf.Modes.Count > 0 && conf.Listes.Count > 0)
                {
                    foreach (var mode in conf.Modes) //  Enum.GetValues(typeof(datesMode)))
                    {
                        foreach (Piece piece in l_listAlb)
                        {
                            piece.Rank.TimeRest = -1;
                        }

                        foreach (Piece piece in l_listAlb)
                        {
                            ListSelection.setTuningDateValues(piece, mode.item);
                        }
                        foreach (var duration in conf.Listes)
                        {
                            m_listWriter.writeGen(mode, duration, "g", false, false);
                            if (conf.GenE)
                                m_listWriter.writeGen(mode, duration, "e", true, false);
                        }
                    }
                }

                if (conf.GenCheck)
                    m_listWriter.writeCheckClassement(0);

                for (int precision = conf.PrecisionMin.item; precision <= conf.PrecisionMax.item && precision > 0; precision++)
                {
                    m_listWriter.writePrecisionClassement("g", precision, false, conf.PrecisionMin.extend);
                    if (conf.GenE)
                        m_listWriter.writePrecisionClassement("e", precision, true, conf.PrecisionMin.extend);
                }
                m_listWriterAlb = new CLegacyListWriter(this, l_listAlb);

                foreach (IListWriter writer in writers)
                    m_listWriterAlb.addWriter(writer);

                //  logger.log("fin creation des writers alb");
                if (conf.Modes.Count > 0 && conf.Listes.Count > 0)
                {
                    foreach (var mode in conf.Modes) //  Enum.GetValues(typeof(datesMode)))
                    {

                        foreach (Piece piece in l_listAlb)
                        {
                            piece.Rank.TimeRest = -1;
                        }

                        foreach (Piece piece in l_listAlb)
                        {
                            ListSelection.setTuningDateValues(piece, mode.item);
                        }
                        foreach (var duration in conf.Listes)
                        {
                            m_listWriterAlb.writeGen(albums, mode, duration, "g", false);
                        }
                    }
                }

                foreach (IListWriter writer in writers)
                    listWriterAll.addWriter(writer);
                listWriterAll.writeGen(albums, null, null, "all", false);
                //  misc.log("Clegacy:fin createRot {0}", a_baseName);
                return;

                writeRot(1);

                m_listWriter.writeCheckClassement(1);

                m_listWriter.reset();
                writeRotMin(-1);
                writeRotMin(10);
                writeRotMin(1);
            }
        }
        private void writeRotMin(int a_nbHour)
        {
            logger.log("----------------------");
            m_listWriter.writeRotMin(a_nbHour);
        }
        private void writeRot(int a_base)
        {
            m_listWriter.writeRot(a_base);

        }
        #endregion
    }
}



]]></content>
  </file>
  <file path="\PieceDb.Consolid\albums\Album.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using pdb.gen.conf;
using pdb.gen.medianne;
using pdb.gen.Tuning;
using pdb.obj;
using pdb.util;
using System.IO;

namespace pdb.gen.albums
{
    public enum virtualMode
    {
        none = 0,
        artist = 1,
        path = 2,
        year = 3,
        extended = 4,
        added = 5,
        list = 6,
        word = 7
    }

    public class Album : IEnumerable<Piece>
    {

        const decimal EPSILON = 0.001m * 0.001m * 0.001m * 0.001m * 0.001m * 0.001m;
        const int A_REFAIRE_CAUSE_COMPACT = -10;
        private static Logger logger = Logger.getLogger("album");
        private string name;
        private string key;
        private static decimal medianne = 0.5m;
        private static decimal medianneRest = 0.5m;
        // public static decimal Medianne { get { return medianne; } set { medianne = value; } }
        private decimal classementValue;
        private decimal classementValueLight;
        private decimal classementValueLightSt = -1;
        private decimal classementValueLightZero = -1;
        private decimal classementValueLightZeroSt = -1;

        private bool sortDone;
        private bool sort0Done;
        private int nbRecent;
        private int nbDone;
        public int Recents { get { return nbRecent; } }
        public int NbDone { get { return nbDone; } }
        //public void invalidate(bool silent = false) { sortDone = false; if (!silent) misc.log("invalidate {0}", this); }

        public decimal getSt(decimal classementValueLight)
        {
            var ret = classementValueLight;
            if (confAlbumSort != null && confAlbumSort.stackEnabled && confAlbumSort.stackSize > 1 && stackValue < confAlbumSort.stackSize && stackValue > 0)
            {
                if (next == null || !confAlbumSort.stackOnlyNew || next.LastClassementRecent)
                {
                    //      1       10      50      99
                    //      0.99    0.9     0.5     0.01
                    //1.    0.01    0.1     0.5     0.99
                    //2.    0.02    0.19    0.75    0.9999
                    //10    0.095   0.65    0.999   0.99999999999
                    //0.5   0.005   0.05    0.29    0.9
                    var delta = 1 - ((decimal)stackValue / (decimal)stackSize);
                    // 1 - 10/100=> 0.9-> 0.81 ==> 1/0.19
                    if (delta != 1)
                        delta = pdb.util.Math.Pow(delta, stackPower);
                    delta = 1 - delta;

                    if (delta < 0.001m)
                        delta = 0.001m;

                    ret = classementValueLight / delta;
                }
            }


            return ret; ;
        }
        /// <summary>
        /// classementValue redressé par la quarantaine
        /// </summary>     
        public decimal ClassementValueLightSt
        {
            get
            {
                if (classementValueLightSt >= 0)
                    return classementValueLightSt;
                return getSt(classementValueLight);

                if (confAlbumSort != null && confAlbumSort.stackEnabled && confAlbumSort.stackSize > 1 && stackValue < confAlbumSort.stackSize && stackValue > 0)
                {
                    //      1       10      50      99
                    //      0.99    0.9     0.5     0.01
                    //1.    0.01    0.1     0.5     0.99
                    //2.    0.02    0.19    0.75    0.9999
                    //10    0.095   0.65    0.999   0.99999999999
                    //0.5   0.005   0.05    0.29    0.9
                    var delta = 1 - ((decimal)stackValue / (decimal)stackSize);
                    // 1 - 10/100=> 0.9-> 0.81 ==> 1/0.19
                    if (delta != 1)
                        delta = pdb.util.Math.Pow(delta, stackPower);
                    delta = 1 - delta;

                    if (delta < 0.001m)
                        delta = 0.001m;

                    classementValueLightSt = classementValueLight / delta;
                }
                else
                    classementValueLightSt = classementValueLight;

                return classementValueLightSt;
            }
        }

        public decimal ClassementValueLightZeroSt
        {
            get
            {
                if (classementValueLightZeroSt < 0)
                    classementValueLightZeroSt = getSt(classementValueLightZero);
                return classementValueLightZeroSt;
            }
        }
        private decimal classMoy; public decimal ClassementMoy { get { return classMoy; } }
        public decimal ClassementValue { get { return classementValue; } }
        public decimal ClassementValueLight { get { return classementValueLight; } }
        public decimal ClassementValueLightZero { get { return classementValueLightZero; } }
        public decimal Rendement { get { if (classementValueLight == 0) return 1; return classementValueLightZero / classementValueLight; } }
        private decimal durationValue = 0;
        public decimal DurationValue { get { return durationValue; } }
        private static ConfGen conf = CConf.ConfGen;
        private virtualMode mode;
        public virtualMode VirtualMode { get { return mode; } }
        //  private bool _virtual;
        public bool Virtual { get { return mode > virtualMode.none; } }
        public void setVirtual(virtualMode mode) { this.mode = mode; }
        private bool _virtualByArtist;
        public bool VirtualByArtist { get { return this.mode == virtualMode.artist; } }
        private Piece pluspetitEnabled;
        public Piece PlusPetitEnabled { get { return pluspetitEnabled; } }
        private int stackValue;

        public int StackValue
        {
            get
            {

                return stackValue;
            }
            set
            {
                if (value > 0 && this.Name == "\\")
                {
                }
                else
                    stackValue = value;
            }
        }
        public int StackIndex { get; set; }
        //  private int rankCorrig; public int Rank2 { get { return rankCorrig; } set { rankCorrig = value; } }
        private Piece next;


        public Piece Next
        {
            get { return next; }
            set
            {
                next = value;
            }
        }




        private HashSet<Piece> list = new HashSet<Piece>();
        private HashSet<Piece> masters = new HashSet<Piece>();

        #region cache
        HashList<Piece> trackSortedByExportPriority;
        private HashList<Piece> _tracksSortByClassement;
        #endregion

        private static int _sID = 0;
        private int _dID;

        public string Key
        {
            // set { key = value; }
            get
            {
                if (key == null)
                    key = getKey(name, mode);
                return key;
            }
        }

        public Album(string name, string key)
        {
            _sID++;
            _dID = _sID;
            this.name = name;
            this.key = key;

            m_rank.init();
        }

        public string Name { get { return name; } }

        public override string ToString()
        {
            return string.Format("{0} {1} {2} elts", name, mode, Count);
        }

        // private string equiv = "";
        public string Equiv { get { return Piece.getClassementEquiv(classementValue); } }

        //  private string equivLight = "";
        public string EquivLight { get { return Piece.getClassementEquiv(classementValueLight); ; } }
        public string EquivLightSt { get { return Piece.getClassementEquiv(ClassementValueLightSt); ; } }

        //private string equivLight0 = "";
        public string EquivLight0 { get { return Piece.getClassementEquiv(classementValueLightZero); } }

        // private string moyenne = "";
        public string Moyenne { get { return Piece.getClassementEquiv(classMoy); } }

        public bool Moved { get; set; }
        /// <summary>
        /// Empeché par la quarantaine
        /// </summary>
        public bool Empeached
        {
            get
            {
                return nbEmpeached > 0;
            }
            set
            {
                if (value)
                    nbEmpeached = stackPeremption;
                else
                    nbEmpeached = 0;
            }
        }

        public void empeachedDecrement() { nbEmpeached--; }

        public int EmpeachedNb { get { return nbEmpeached; } }

        private int nbEmpeached;
        /// <summary>
        /// Premier empêché
        /// </summary>
        public bool Empeached1 { get; set; }
        private static int stackSize = 20;
        private static int stackPeremption = 10;
        private static decimal stackPower = 2.0m;
        private static ConfAlbumSort confAlbumSort;
        public static ConfAlbumSort ConfAlbumSort
        {
            set
            {
                confAlbumSort = value;
                if (confAlbumSort != null)
                {
                    stackSize = confAlbumSort.stackSize;
                    stackPeremption = confAlbumSort.stackPeremption;
                    stackPower = confAlbumSort.stackPower;
                }
            }
        }

        public bool AlmostFree { get { return StackIndex == stackSize; } }
        public bool AlmostFree1 { get { return StackIndex == stackSize - 1; } }

        //private Piece equiv;



        public bool add(Piece piece)
        {
            if (build)
                throw new ApplicationException("déjà buildé");
            piece.PieceAlbum = this;


            // misc.log("{0} ajout {1}", name, piece); 
            //if (list.Contains(piece))
            //{
            //    int yoyo = 0;
            //}
            if (!masters.Add(piece.Master))
            {
                //var status = "";
                //if (_virtual)
                //    status = "v";
                //if (_virtualByArtist)
                //    status = "va";
                //logger.log("{0}\t{1}:doublon id=\"{2}\" parent=\"{3}\" Nom={4} {5}", status, name, piece.PieceId, piece.MasterId, piece.Name, piece);
                return false;
            }
            if (piece.Enabled)
                atLeastOneEnabled = true;
            list.Add(piece);

            return true;
        }

        private bool build;

        public void checkBuild()
        {
            if (!build)
            {
                Clear();
                m_rank.init();
            }
        }

        public void Clear()
        {
            //misc.log("album.Clear {0}",name);
            //foreach (Piece p in this)
            //{
            //    if (p.Virtual)
            //        p.Parent = null; 
            //}
            list.Clear();
            masters.Clear();
        }

        public void ClearAndMenage()
        {
            if (mode == virtualMode.word && name == "029")
            {
            }
            if (mode != virtualMode.none)
            {
                foreach (Piece p in list)
                    p.setParent(null);
            }
            Clear();
        }

        public void ConsolidChilds()
        {
            foreach (Piece p in list)
                p.consolidChild();
        }

        public bool buildDone()
        {
            build = true;
            return list.Count > 0;
        }


        public HashList<Piece> Tracks
        {
            get
            {
                if (_tracksSortByClassement == null)
                {
                    var l = new List<Piece>(list);
                    l.Sort(new PieceVirtualClassementComparer());
                    _tracksSortByClassement = new HashList<Piece>(l);
                }
                return _tracksSortByClassement;
            }
        }

        public int Count { get { return list.Count; } }

        //public int IndexClass(Piece p)
        //{
        //    return Tracks.IndexOf(p);
        //}

        //public List<Piece> TracksReverse
        //{
        //    get
        //    {
        //        var l = new List<Piece>(list);
        //        l.Sort(new PieceClassementComparerInv());
        //        return l;
        //    }
        //}

        private class PieceExportComparer : IComparer<Piece>
        {
            private HashList<Piece> source;
            private Piece next;
            private int inext = -1;
            private int ifirstZero = -1;
            private bool sortlasts;
            private bool sortFirsts;
            private Album album;
            public PieceExportComparer(Album album, HashList<Piece> source, Piece next)
            {
                this.album = album;
                this.source = source;
                this.next = next;
                if (next != null)
                    inext = source.IndexOf(next);
                sortlasts = CConf.Export.sortLasts;
                sortFirsts = CConf.Export.sortFirsts;
                int count = source.Count;
                for (int i = 0; i < count; i++)
                {
                    var p = source[i];
                    if (p.Enabled && p.RapportClassement(false) == 0)
                    {
                        ifirstZero = i;
                        break;
                    }
                }

            }
            public int Compare(Piece x, Piece y)
            {
                //    t = 1.CompareTo(2) -> -1              
                //  t = true.CompareTo(false) ->1
                if (x == y)
                    return 0;
                if (x == next)
                    return -1;
                if (y == next)
                    return 1;
                int ix = source.IndexOf(x);
                int iy = source.IndexOf(y);
                if (ix == iy)
                    return 0;

                if (next != null)
                {
                    int cmp = 0;


                    cmp = (x.Enabled.CompareTo(y.Enabled));
                    if (cmp != 0)
                    {
                        if (sortFirsts)
                        {
                            //true puis false;
                            return -cmp;
                        }
                        if (sortlasts)
                        {
                            if (!x.Enabled && x.VirtualClassement < album.ClassementValueLight)
                                return 1;
                            if (!y.Enabled && y.VirtualClassement < album.ClassementValueLight)
                                return -1;
                        }
                    }

                    //if (dx * dy < 0)
                    //{
                    //    if (sortlasts)
                    //    {
                    //        if (dx > 0 && !x.Enabled)
                    //            return 1;
                    //        if (dy > 0 && !y.Enabled)
                    //            return -1;
                    //    }
                    //    if (sortFirsts)
                    //    {
                    //        if (dx < 0 && !x.Enabled)
                    //            return 1;
                    //        if (dy < 0 && !y.Enabled)
                    //            return -1;
                    //    }
                    //}

                    int dx = ix - inext;
                    int dy = iy - inext;
                    dx *= dx;
                    dy *= dy;

                    if (ifirstZero >= 0)
                    {
                        dx += ((ix - ifirstZero) * (ix - ifirstZero));
                        dy += ((iy - ifirstZero) * (iy - ifirstZero));
                    }

                    cmp = dx.CompareTo(dy);
                    if (cmp != 0)
                        return cmp;
                    //ici même distance
                    cmp = x.Enabled.CompareTo(y.Enabled);
                    if (cmp != 0) return -cmp;

                    cmp = ix.CompareTo(iy);
                    return cmp;
                }

                return source.IndexOf(x).CompareTo(source.IndexOf(y));
            }
        }
        public HashList<Piece> TrackSortedByExportPriority
        {
            get
            {
                if (trackSortedByExportPriority == null)
                {

                    var source = new HashList<Piece>(Tracks);
                    if (next == null)
                        trackSortedByExportPriority = source;
                    else
                    {
                        var cmp = new PieceExportComparer(this, source, next);
                        var l = source.List;
                        l.Sort(cmp);

                        trackSortedByExportPriority = new HashList<Piece>(l);


                    }



                    //var source = Tracks;
                    //if (next == null)
                    //    trackSortedByExportPriority = new HashList<Piece>(source);
                    //else
                    //{
                    //    trackSortedByExportPriority = new HashList<Piece>();
                    //    int indexNext = source.IndexOf(next);
                    //    trackSortedByExportPriority.Add(next);

                    //    int count = source.Count;
                    //    int offset = 0;
                    //    while (true)
                    //    {
                    //        offset++;
                    //        bool _continue = false;
                    //        // on prend le précédent et le suivant
                    //        var index = indexNext - offset;

                    //        if (index >= 0 && index < count)
                    //        {
                    //            trackSortedByExportPriority.Add(source[index]); _continue = true;
                    //        }
                    //        index = indexNext + offset;
                    //        if (index >= 0 && index < count)
                    //        {
                    //            trackSortedByExportPriority.Add(source[index]); _continue = true;
                    //        }

                    //        if (!_continue)
                    //            break;
                    //  }

                    //}
                }
                return trackSortedByExportPriority;
            }

        }



        public int IndexExport(Piece p)
        {
            return TrackSortedByExportPriority.IndexOf(p);
        }
        public List<Piece> TrackByNumber
        {
            get
            {
                var l = new List<Piece>(list);
                l.Sort(new PieceTrackNumberComparer());
                return l;
            }
        }
        /// <summary>
        /// Au moins un track est classé
        /// </summary>
        private bool classed;
        /// <summary>
        /// Au moins un track est classé
        /// </summary>
        public bool Classed { get { return classed; } }

        /// <summary>
        /// Le track Selectionné est malheureusement absent
        /// </summary>
        public bool Absent
        {
            get
            {
                if (next == null)
                    return true;
                var exists = FileRegister.Exist(next.Location);
                return false == exists;
            }
        }

        //public int nbInAlbum(exportState state)
        //{
        //    return list.Count(p => p.ExportStatus == state); 
        //}

        public int NbExportPresents { get { return list.Count(p => p.ExportStatus == exportState.present || p.ExportStatus == exportState.copy); } }

        private bool? atLeastOneEnabled;
        public bool AtLeastOneEnabled
        {
            get
            {
                if (atLeastOneEnabled == null)
                {
                    atLeastOneEnabled = false;
                    foreach (Piece p in list)
                    {
                        if (p.Enabled)
                        {
                            atLeastOneEnabled = true;
                            break;
                        }
                    }
                }

                return atLeastOneEnabled.Value;
            }
        }

        /// <summary>
        /// Facon dont est séléectionné le Next
        /// </summary>
        private selectedCoeff selectedCoeff;
        public selectedCoeff SelectedCoeff { get { return selectedCoeff; } }

        /// <summary>
        /// Empecher la dégradation du selectedCoeff
        /// </summary>
        private bool selectedSure;
        public bool DontTouchSelectedCoeff { get { return false; } }// selectedSure; } }
        public void InvalidateMain()
        {
            if (selectedCoeff > selectedCoeff.noCoeff)
                selectedCoeff = selectedCoeff.noCoeff;
        }


        //  private bool sortDone;
        //  DecimalIndex _med0 = null;
        DecimalPiece med = null;


        private decimal makeSort(List<PieceExtended> list, ConfMedianne mode, bool real)
        {
            decimal classementValueLight = 0m;
            try
            {
                #region calcul virtuel



                DecimalPiece med = null;
                DecimalPiece med1 = null;
                DecimalPiece med2 = null;



                bool? resultGlobalMin = null;
                var _albumMedianne = new AlbumMedianne(list, mode);
                // bool combineNow = mode.combine && mode.simple;
                if (real)
                    _albumMedianne.buildVirtual(mode.combine, mode.simple);
                else
                {
                    list.Sort(new PieceClassementComparer(false));
                }


                if (!real || (mode.combine && mode.simple || (!mode.Min.Use)))
                {
                    if (real && mode.combine && mode.simple)
                        med = _albumMedianne.getMedianneLight(mode.Main, PieceExtended.mode.combine);
                    else
                        med = _albumMedianne.getMedianneLight(mode.Main, PieceExtended.mode.main);
                    med1 = med; med2 = med;
                }

                else
                {


                    med2 = _albumMedianne.getMedianneLight(mode.Min, PieceExtended.mode.min);  //AlbumMedianne.getMedianneLight(list, mode, mode.Min, false, false);
                    med1 = _albumMedianne.getMedianneLight(mode.Main, PieceExtended.mode.main);

                    //comparaison des médiannes
                    if (med2.d < med1.d && med2.d > 0)
                    {
                        resultGlobalMin = true;
                        med = med2;
                    }
                    else
                    {
                        resultGlobalMin = false;
                        med = med1;
                    }

                    if (mode.combine && !mode.simple)
                    {
                        med = _albumMedianne.getMedianneLight(mode.Main, PieceExtended.mode.combine);
                    }


                }



                if (mode.combine && mode.simple)
                {

                    var median = med.index;

                    if (median != null)
                    {
                        resultGlobalMin = median.getSimpleCause();
                    }

                }













                #endregion


                var modeMin = mode.cmpMin;
                ////comparaison du premier non null
                //bool? resultByFirstMin = null;
                //// comparaison du premier null
                //bool? resultZeroMin = null;

                //// résultat : min ou main
                //bool? selectedMotifMin = null;

                AutoCause cause = null;

                if (modeMin == modeMin.orphelin)
                {
                    throw new NotImplementedException();
                    //PieceExtended min = null;
                    //decimal _min = int.MaxValue;
                    //foreach (PieceExtended p in list)
                    //{
                    //    var v = p.RapportClassement;

                    //    if (p.Enabled) // && FileRegister.Exist(p.Location))
                    //    {
                    //        if (v < _min)
                    //        {
                    //            _min = v;
                    //            min = p;
                    //        }
                    //    }
                    //}

                    //if (min != null)
                    //{
                    //    Next = min.Piece;
                    //    _min = min.VirtualClassement2;
                    //    if (_min > classementValueLight)
                    //        classementValueLight = _min;
                    //}
                }
                else if (modeMin == modeMin.toujours)
                {

                    if (mode.Main.oldAsZero)
                        list.Sort(new PieceClassementComparer(true, PieceExtended.mode.main));

                    cause = checkCause(list, mode, real, resultGlobalMin, med.d);
                    #region deporte
                    //    PieceExtended nextZero1 = null;
                    //    PieceExtended nextZero2 = null;

                    //    PieceExtended min1 = null;
                    //    PieceExtended min2 = null;
                    //    PieceExtended min = null;
                    //    decimal _min1 = int.MaxValue;
                    //    decimal _min2 = int.MaxValue;
                    //    decimal _minzero1 = int.MaxValue;
                    //    decimal _minzero2 = int.MaxValue;
                    //    bool realZero = false;
                    //    PieceExtended Next = null;
                    //    foreach (PieceExtended p in list)
                    //    {
                    //        var v1 = p.VirtualClassement;
                    //        var v2 = p.VirtualClassement2;

                    //        if (p.Enabled) // && FileRegister.Exist(p.Location))
                    //        {
                    //            if (v1 == 0 || (mode.Main.oldAsZero && !p.LastClassementRecent))
                    //            {
                    //                if (v1 < _minzero1)
                    //                {
                    //                    _minzero1 = v1;
                    //                    nextZero1 = p;
                    //                    if (v1 == 0)
                    //                        realZero = true;
                    //                }
                    //            }

                    //            if (v2 == 0 || (mode.Main.oldAsZero && !p.LastClassementRecent))
                    //            {
                    //                if (v2 < _minzero2)
                    //                {
                    //                    _minzero2 = v2;
                    //                    nextZero2 = p;
                    //                    if (v2 == 0)
                    //                        realZero = true;
                    //                }

                    //            }



                    //            if (v1 > 0 && v1 < _min1)
                    //            {
                    //                _min1 = v1;
                    //                min1 = p;
                    //            }

                    //            if (v2 > 0 && v2 < _min2)
                    //            {
                    //                _min2 = v2;
                    //                min2 = p;
                    //            }
                    //        }
                    //    }
                    //    decimal _min = 0;
                    //    if (_min1 <= _min2)
                    //    {
                    //        if (_min1 < _min2)
                    //            resultByFirstMin = false;
                    //        min = min1;
                    //        _min = _min1;
                    //    }
                    //    else
                    //    {
                    //        resultByFirstMin = true;
                    //        min = min2;
                    //        _min = _min2;
                    //    }

                    //    PieceExtended nextZero = null;
                    //    decimal _minzero = int.MaxValue;
                    //    if (_minzero1 <= _minzero2)
                    //    {
                    //        nextZero = nextZero1; _minzero = _minzero1; if (_minzero1 < _minzero2) resultZeroMin = false;
                    //    }
                    //    else
                    //    {
                    //        nextZero = nextZero2; _minzero = _minzero2; resultZeroMin = true;
                    //    }

                    //    if (nextZero != null)
                    //    {

                    //        if (realZero)
                    //        {
                    //            // le min trouvé est éventuellement tres élevé (pas prise en compte des éléments non encore notés
                    //            // j'applique le seuil que s'il est inférieur à la médiane
                    //            if (_min < classementValueLight)
                    //            {
                    //                if (min != null)
                    //                {
                    //                    classementValueLight = _min;
                    //                    if (real)
                    //                    {
                    //                        Next = min;
                    //                        selectedMotifMin = resultByFirstMin;
                    //                        //if (!resultMin && Next.CoeffVirtuel > 1 + EPSILON)
                    //                        //    selectedCoeff = selectedCoeff.main;
                    //                        //if (resultMin && Next.CoeffVirtuel2 > 1 + EPSILON)
                    //                        //    selectedCoeff = selectedCoeff.min;
                    //                        //if (_min < _min1 - EPSILON)
                    //                        //    selectedCoeff = selectedCoeff.min; // selectedByCoeff2 = true;
                    //                    }
                    //                }
                    //            }
                    //            else
                    //            {
                    //                if (real)
                    //                {

                    //                    if (_med0.d > med.d + EPSILON) // if (p.CoeffVirtuel > 1)
                    //                        selectedMotifMin = resultGlobalMin;
                    //                    // selectedCoeff = selectedCoeff.main; // selectedByCoeff = true; 
                    //                    Next = nextZero;

                    //                }
                    //            }
                    //        }
                    //        else
                    //        {
                    //            if (_min < classementValueLight)
                    //            {
                    //                if (min != null)
                    //                {
                    //                    classementValueLight = _min;
                    //                    if (real)
                    //                    {
                    //                        Next = min;
                    //                        selectedMotifMin = resultByFirstMin;
                    //                        //if (!resultMin && Next.CoeffVirtuel > 1 + EPSILON)
                    //                        //    selectedCoeff = selectedCoeff.main;
                    //                        //if (resultMin && Next.CoeffVirtuel2 > 1 + EPSILON)
                    //                        //    selectedCoeff = selectedCoeff.min;
                    //                        //if (_min < _min1 - EPSILON)
                    //                        //    selectedCoeff = selectedCoeff.min; // selectedByCoeff2 = true;
                    //                    }
                    //                }

                    //            }
                    //            else if (_minzero < classementValueLight)
                    //            {
                    //                if (real)
                    //                {
                    //                    Next = nextZero;
                    //                    classementValueLight = _minzero;
                    //                    selectedMotifMin = resultZeroMin;

                    //                    //if (!resultMin && Next.CoeffVirtuel > 1 + EPSILON)
                    //                    //    selectedCoeff = selectedCoeff.main;
                    //                    //if (resultMin && Next.CoeffVirtuel2 > 1 + EPSILON)
                    //                    //    selectedCoeff = selectedCoeff.min;
                    //                    //if (_min < _min1 - EPSILON)
                    //                    //    selectedCoeff = selectedCoeff.min; // selectedByCoeff2 = true;
                    //                }
                    //            }

                    //            else
                    //            {
                    //                classementValueLight = _min;
                    //                if (real)
                    //                {
                    //                    Next = min;
                    //                    selectedMotifMin = resultGlobalMin;

                    //                    //    //  var p = list[med.index];
                    //                    //    if (!resultMin && Next.CoeffVirtuel > 1 + EPSILON)
                    //                    //        selectedCoeff = selectedCoeff.main;
                    //                    //    if (resultMin && Next.CoeffVirtuel2 > 1 + EPSILON)
                    //                    //        selectedCoeff = selectedCoeff.min;
                    //                    //    if (_med0.d > med.d + EPSILON) // if (p.CoeffVirtuel > 1)
                    //                    //        selectedCoeff = selectedCoeff.main; // selectedByCoeff = true; 
                    //                }

                    //            }
                    //        }
                    //    }
                    //    else
                    //    {
                    //        // tous notés => on prend le plus faible
                    //        if (real)
                    //            Next = min;
                    //        if (min != null)
                    //        {
                    //            classementValueLight = _min;
                    //            selectedMotifMin = resultByFirstMin;
                    //        }

                    //    }

                    //}

                    #endregion
                }

                var cnext = cause.Next;
                if (cnext != null)
                {
                    if (cnext.UseCompact && !cnext.Empty)
                    {
                        if (cnext.Piece.ClassementRecentCompact)
                        {
                            cnext.UseCompact = false;
                            return A_REFAIRE_CAUSE_COMPACT;
                        }
                    }
                }
                classementValueLight = med.d;
                var selectedMotifMin = cause.selectedMotifMin;
                classementValueLight = cause.classementValueLight;

                if (real)
                {

                    //if (mode.combine && !mode.simple)
                    //{
                    //    _albumMedianne.buildVirtual(true);
                    //    med = _albumMedianne.getMedianneLight(mode.Main, PieceExtended.mode.combine); // AlbumMedianne.getMedianneLight(list, mode, mode.Main, true, true);
                    //    cause = checkCause(list, mode, real, resultGlobalMin, med.d);
                    //}
                    //else
                    //{
                    //    if (true == cause.selectedMotifMin)
                    //        med = med2;
                    //    else
                    //        med = med1;
                    //}




                    this.Next = cause.Next == null ? null : cause.Next.Piece;
                    classementValueLight = cause.classementValueLight;
                    selectedSure = cause.motifSure;

                    foreach (var p in list)
                        p.finalyse();



                    if (cause.motifUp)
                    {
                        if (cause.selectedMotifMin.HasValue)
                        {
                            if (true == cause.selectedMotifMin)
                                selectedCoeff = selectedCoeff.min;
                            else
                                selectedCoeff = selectedCoeff.main;
                        }
                        else if (selectedMotifMin.HasValue)
                        {
                            if (true == selectedMotifMin)
                                selectedCoeff = selectedCoeff.min;
                            else
                                selectedCoeff = selectedCoeff.main;
                        }
                        else
                        {
                            if (true == resultGlobalMin)
                                selectedCoeff = selectedCoeff.min;
                            else
                                selectedCoeff = selectedCoeff.main;
                        }


                    }

                    try
                    {
                        if (med.index != null)
                            pluspetitEnabled = med.index.Piece;
                        if (med.index != null) med.index.Piece.MedianneLight = true;
                        if (med.indexBorder != null) med.indexBorder.Piece.Border = true;
                        if (med.indexBorderEffect != null) med.indexBorderEffect.Piece.BorderEffect = true;
                        if (med.indexBorderMin != null) med.indexBorderMin.Piece.BorderMin = true;

                    }
                    catch { }
                }



            }
            catch (Exception ex)
            {
                misc.log("impossible de faire le makeSort de l'album " + name + " " + ex.ToString());
            }

            return classementValueLight;


        }

        private class AutoCause
        {

            //comparaison du premier non null
            public bool? resultByFirstMin = null;
            // comparaison du premier null
            public bool? resultZeroMin = null;

            // résultat : min ou main
            public bool? selectedMotifMin = null;
            public PieceExtended Next = null;
            public bool motifUp;
            /// <summary>
            /// interdiction de dégradation en noCoeff
            /// </summary>
            public bool motifSure;
            public decimal classementValueLight;
        }

        private AutoCause checkCause(List<PieceExtended> list, ConfMedianne mode, bool real, bool? resultGlobalMin, decimal d)
        {
            var classementValueLight = d;


            // PieceExtended median = null;
            AutoCause cause = new AutoCause();
            //if (med.index > 0 && med.index < list.Count)
            //{
            //    median = list[med.index];
            //    if (mode.simple && resultGlobalMin == null)
            //    {
            //        resultGlobalMin = median.getSimpleCause();
            //    }
            //}
            var modeMin = mode.cmpMin;



            PieceExtended nextZero1 = null;
            PieceExtended nextZero2 = null;

            PieceExtended min1 = null;
            PieceExtended min2 = null;
            PieceExtended min = null;
            decimal _min1 = int.MaxValue;
            decimal _min2 = int.MaxValue;
            decimal _minzero1 = int.MaxValue;
            decimal _minzero2 = int.MaxValue;
            bool realZero = false;
            PieceExtended Next = null;
            foreach (PieceExtended p in list)
            {
                var v1 = p.VirtualClassement;
                var v2 = p.VirtualClassement2;

                if (p.Enabled) // && FileRegister.Exist(p.Location))
                {
                    if (v1 == 0 || (mode.Main.oldAsZero && !p.LastClassementRecent))
                    {
                        if (v1 < _minzero1)
                        {
                            _minzero1 = v1;
                            nextZero1 = p;
                            if (v1 == 0)
                                realZero = true;
                        }
                    }

                    if (v2 == 0 || (mode.Main.oldAsZero && !p.LastClassementRecent))
                    {
                        if (v2 < _minzero2)
                        {
                            _minzero2 = v2;
                            nextZero2 = p;
                            if (v2 == 0)
                                realZero = true;
                        }

                    }



                    if (v1 > 0 && v1 < _min1)
                    {
                        _min1 = v1;
                        min1 = p;
                    }

                    if (v2 > 0 && v2 < _min2)
                    {
                        _min2 = v2;
                        min2 = p;
                    }

                    if (p.Empty)
                        break;
                }
            }
            decimal _min = 0;
            if (_min1 <= _min2)
            {
                if (_min1 < _min2)
                    cause.resultByFirstMin = false;
                min = min1;
                _min = _min1;

            }
            else
            {
                cause.resultByFirstMin = true;
                min = min2;
                _min = _min2;
            }

            PieceExtended nextZero = null;
            decimal _minzero = int.MaxValue;
            if (_minzero1 <= _minzero2)
            {
                nextZero = nextZero1; _minzero = _minzero1; if (_minzero1 < _minzero2) cause.resultZeroMin = false;
            }
            else
            {
                nextZero = nextZero2; _minzero = _minzero2; cause.resultZeroMin = true;
            }

            if (nextZero != null)
            {

                if (realZero)
                {
                    // le min trouvé est éventuellement tres élevé (pas prise en compte des éléments non encore notés
                    // j'applique le seuil que s'il est inférieur à la médiane
                    if (_min < classementValueLight)
                    {
                        if (min != null)
                        {
                            classementValueLight = _min;
                            if (real)
                            {
                                Next = min;
                                cause.selectedMotifMin = cause.resultByFirstMin;
                                cause.motifUp = Next.getCauseUp(cause.selectedMotifMin);

                                //if (mode.simple)
                                //{
                                //    cause.selectedMotifMin = !min.EffectMain;
                                //}
                                //if (!resultMin && Next.CoeffVirtuel > 1 + EPSILON)
                                //    selectedCoeff = selectedCoeff.main;
                                //if (resultMin && Next.CoeffVirtuel2 > 1 + EPSILON)
                                //    selectedCoeff = selectedCoeff.min;
                                //if (_min < _min1 - EPSILON)
                                //    selectedCoeff = selectedCoeff.min; // selectedByCoeff2 = true;
                            }
                        }
                    }
                    else
                    {
                        if (real)
                        {
                            //if (_med0 == null)
                            //    _med0 = AlbumMedianne.getMedianneLight(new List<PieceExtended>(list), mode0, mode0.Main, true, false);
                            if (this.classementValueLightZero > classementValueLight + EPSILON || (classementValueLight > 0 && this.classementValueLightZero / classementValueLight > 1 + EPSILON)) // if (p.CoeffVirtuel > 1)
                            {
                                cause.selectedMotifMin = resultGlobalMin;
                                cause.motifUp = true;
                                cause.motifSure = true;

                                //if (mode.simple)
                                //{
                                //    cause.selectedMotifMin = !median.EffectMain;
                                //}
                            }
                            // selectedCoeff = selectedCoeff.main; // selectedByCoeff = true; 
                            Next = nextZero;

                        }
                    }
                }
                else
                {
                    if (_min < classementValueLight)
                    {
                        if (min != null)
                        {
                            classementValueLight = _min;
                            if (real)
                            {
                                Next = min;
                                cause.selectedMotifMin = cause.resultByFirstMin;
                                cause.motifUp = Next.getCauseUp(cause.selectedMotifMin);
                                //if (!resultMin && Next.CoeffVirtuel > 1 + EPSILON)
                                //    selectedCoeff = selectedCoeff.main;
                                //if (resultMin && Next.CoeffVirtuel2 > 1 + EPSILON)
                                //    selectedCoeff = selectedCoeff.min;
                                //if (_min < _min1 - EPSILON)
                                //    selectedCoeff = selectedCoeff.min; // selectedByCoeff2 = true;

                                //if (mode.simple)
                                //{
                                //    cause.selectedMotifMin = !min.EffectMain;
                                //}
                            }
                        }

                    }
                    else if (_minzero < classementValueLight)
                    {
                        classementValueLight = _minzero;
                        if (real)
                        {
                            Next = nextZero;

                            cause.selectedMotifMin = cause.resultZeroMin;
                            cause.motifUp = Next.getCauseUp(cause.selectedMotifMin);

                            //if (!resultMin && Next.CoeffVirtuel > 1 + EPSILON)
                            //    selectedCoeff = selectedCoeff.main;
                            //if (resultMin && Next.CoeffVirtuel2 > 1 + EPSILON)
                            //    selectedCoeff = selectedCoeff.min;
                            //if (_min < _min1 - EPSILON)
                            //    selectedCoeff = selectedCoeff.min; // selectedByCoeff2 = true;

                            //if (mode.simple)
                            //{
                            //    if (nextZero != null)
                            //        cause.selectedMotifMin = !nextZero.EffectMain;
                            //}
                        }
                    }

                    else
                    {
                        classementValueLight = _min;
                        if (real)
                        {
                            Next = min;
                            cause.selectedMotifMin = resultGlobalMin;

                            cause.selectedMotifMin = Next.getSimpleCause();
                            cause.motifUp = Next.getCauseUp(cause.selectedMotifMin);
                            //    //  var p = list[med.index];
                            //    if (!resultMin && Next.CoeffVirtuel > 1 + EPSILON)
                            //        selectedCoeff = selectedCoeff.main;
                            //    if (resultMin && Next.CoeffVirtuel2 > 1 + EPSILON)
                            //        selectedCoeff = selectedCoeff.min;
                            //    if (_med0.d > med.d + EPSILON) // if (p.CoeffVirtuel > 1)
                            //        selectedCoeff = selectedCoeff.main; // selectedByCoeff = true; 

                            //if (mode.simple)
                            //{
                            //    cause.selectedMotifMin = !min.EffectMain;
                            //}
                        }

                    }
                }
            }
            else
            {
                // tous notés => on prend le plus faible
                if (real)
                    Next = min;
                if (min != null)
                {
                    classementValueLight = _min;
                    cause.selectedMotifMin = cause.resultByFirstMin;
                    if (Next != null)
                    {
                        cause.motifUp = Next.getCauseUp(cause.selectedMotifMin);
                        //if (mode.simple)
                        //{
                        //    cause.selectedMotifMin = !Next.EffectMain;
                        //}
                    }
                }

            }

            cause.Next = Next;
            cause.classementValueLight = classementValueLight;
            if (real && min != null)
                this.pluspetitEnabled = min.Piece;
            return cause;



        }


        private bool makesort(List<Piece> list, List<PieceExtended> listE, ConfMedianne mode, ConfMedianne mode0, int nbrepeat)
        {
            int count = list.Count;

            if (!sort0Done)
            {
                list.Sort(new PieceSortComparer());
                var listSortedValues = new List<decimal>();
                classed = false;
                for (int i = 0; i < count; i++)
                {
                    listSortedValues.Add(list[i].Rank.SortValue);
                    if (!classed && list[i].isClassListNumeric) // && FileRegister.Exist(list[i].Location))
                        classed = true;
                }
                //misc.log("make sort Duration {0}", name); 
                m_rank.SortValue = CalcMedianne.getMedianne(listSortedValues, medianne).d;

                listSortedValues = new List<decimal>();
                list.Sort(new PieceDurationValueComparer());
                for (int i = 0; i < count; i++)
                    listSortedValues.Add(list[i].Duration.TotalMilliseconds());
                durationValue = CalcMedianne.getMedianne(listSortedValues, medianne).d;
                //}
                decimal moy = 0m;
                decimal offset = Album.conf.AlbumMoyOffset;

                for (int i = 0; i < count; i++)
                {
                    var p = list[i];
                    var rapportClassement = p.RapportClassement(true);

                    p.setClassementVirtuel(rapportClassement);


                    moy += rapportClassement;
                    if (offset > 0m && rapportClassement > 0.0m)
                        moy += offset;
                }

                if (count > 0)
                    moy /= count;
                classMoy = moy;


                listE.Sort(new PieceClassementComparer(false));
                this.med = AlbumMedianne.getMedianne(listE, true, medianne);


                //   _med0 = AlbumMedianne.getMedianneLight(new List<PieceExtended>(listE), mode0, mode0.Main, true, false);


                classementValue = this.med.d;
                if (classementValue > 0m)
                {
                    if (med.index != null)
                        med.index.Piece.Medianne = true;
                    //if (this.med.index > 0 && this.med.index < list.Count)
                    //    list[this.med.index].Medianne = true;
                }

                sort0Done = true;

            }


            if (sortDone)
                return false;

            trackSortedByExportPriority = null;
            _tracksSortByClassement = null;
            classementValueLightSt = -1;
            classementValueLightZeroSt = -1;
            selectedCoeff = selectedCoeff.noCoeff;
            selectedSure = false;
            classementValueLightZero = makeSort(listE, mode0, false);
            if (classementValueLightZero == A_REFAIRE_CAUSE_COMPACT)
            {
                sort0Done = false; return makesort(list, listE, mode, mode0, nbrepeat);
            }
            classementValueLight = makeSort(listE, mode, true);
            if (classementValueLight == A_REFAIRE_CAUSE_COMPACT)
            {
                sort0Done = false; return makesort(list, listE, mode, mode0, nbrepeat);
            }

            //   classementValueLightZero = A_REFAIRE_CAUSE_COMPACT;


            //   while (classementValueLightZero == A_REFAIRE_CAUSE_COMPACT)
            //   {
            //       classementValueLightZero = makeSort(listE, mode0, false);
            //   }

            ////   var _classementValueLight = makeSort(listE, mode, true);

            //   while (classementValueLight == A_REFAIRE_CAUSE_COMPACT)
            //   {
            //       classementValueLight = makeSort(listE, mode, true);
            //   }
            var coeff1 = mode.Main.coeffVirt;
            var coeff2 = mode.Min.CoeffOld;
            var rendementmax = 1m;

            if (mode.combine)
                rendementmax = coeff1 * coeff2;
            else
                rendementmax = pdb.util.Math.Max(coeff1, coeff2);
            if (Rendement > 6 * rendementmax + 1e-6m)
            {
                nbrepeat++; sort0Done = false;
                if (nbrepeat >= 3)
                {
                    // classementValueLight = classementValueLightZero;
                    return true;
                }
                return makesort(list, listE, mode, mode0, nbrepeat);

            }
            return true;
        }

        public bool makeSort(ConfMedianne mode, ConfMedianne mode0) //IList<double> reference, IList<Piece> pieces)
        {
            if (this.Name == @"\bib20")
            {
            }
            if (sortDone && sort0Done)
                return false;

            try
            {

                var list = this.list.ToList<Piece>();
                int count = list.Count;
                if (count == 0)
                    return false;

                var listE = new List<PieceExtended>(count);

                //if (CConf.ResetOneCl)
                //{

                //    // CPieceClassement.DateMin = DateTime.MinValue;
                //    decimal zer0d = 0;
                //    Piece oldKeep = null;


                //    foreach (Piece t in list)
                //    {
                //        if (t.Keep)
                //        {
                //            t.Keep = false;
                //            oldKeep = t;
                //            break;
                //        }
                //    }


                //    decimal pluspetitNonNull = int.MaxValue;
                //    Piece min = null;
                //    foreach (Piece t in list)
                //    {
                //        var cl = t.DeepClassement; // p.Classement.DbValue;
                //        decimal clValue = Piece.classementHash.getCache(cl).ClassementValueDecimal; // t.ClassementValueDecimal(false);
                //        if (clValue > zer0d)
                //        {

                //            if (t.LastClassementRecent || !t.Enabled)
                //            {
                //                min = null;
                //                break;
                //            }
                //            if (clValue < pluspetitNonNull)
                //            {
                //                pluspetitNonNull = clValue;
                //                min = t;
                //            }
                //        }

                //    }

                //    if (min != null)
                //    {
                //        min.Keep = true;
                //        var r = min.RapportClassement(true);
                //        if (r <= 0)
                //        {
                //        }
                //    }



                //    if (oldKeep != null && !oldKeep.Keep)
                //    {
                //        oldKeep.resetMedianneCompact();
                //        oldKeep.invalidateCache(true);
                //    }
                //}


                atLeastOneEnabled = false;
                int _nbr = 0;
                int _nbdone = 0;


                for (int i = 0; i < count; i++)
                {
                    var p = list[i];


                    if (!sortDone)
                        p.resetMedianneCompact();
                    if (p.Enabled)
                    {
                        atLeastOneEnabled = true;

                    }
                    if (!p.Enabled && p.ClassementValueDecimal(false) > 0)
                        _nbdone++;
                    if (p.LastClassementRecent)
                        _nbr++;
                    var pp = new PieceExtended(p);
                    listE.Add(pp);
                }

                nbRecent = _nbr;
                nbDone = _nbdone;


                bool ret = makesort(list, listE, mode, mode0, 0);

                sortDone = true;
                return ret;
            }
            catch (Exception ex)
            {
                misc.log("impossible de faire le makeSort de l'album " + name + " " + ex.ToString());
            }


            return false;
        }



        public void mustRefresh()
        {
            build = false;
            sortDone = false;
            sort0Done = false;
            selectionDone = false;
            atLeastOneEnabled = null;
            _tracksSortByClassement = null;
            // misc.log("invalidation {0}", this); 
            albumAdded = DateTime.MaxValue;
        }

        public void refreshLight()
        {
            sortDone = false;
            albumAdded = DateTime.MaxValue;
        }



        public decimal getTrackSortValue(int index, List<Piece> list)
        {
            if (index < 0 || index >= list.Count)
                return 0;
            return list[index].RapportClassement(true);
        }

        decimal firstTrackSortValue = -1;
        public decimal getFirstTrackSortValue()
        {
            if (firstTrackSortValue == -1)
            {
                int count = list.Count;
                if (count == 0)
                    return -1;
                var _list = new List<Piece>(list);
                _list.Sort(new PieceSortComparer());
                firstTrackSortValue = _list[count - 1].Rank.SortValue;
            }
            return firstTrackSortValue;
        }
        private bool selectionDone;
        public void makeSelection()
        {
            Moved = false;

            if (selectionDone)
                return;
            var list = this.list.ToList<Piece>();
            list.Sort(new PieceRestComparer());
            var listSortedValues = new List<decimal>();
            for (int i = 0; i < list.Count; i++)
                listSortedValues.Add(list[i].Rank.TimeRest);
            m_rank.TimeRest = CalcMedianne.getMedianne(listSortedValues, medianneRest).d;
            selectionDone = true;
        }

        public List<Piece> Sort()
        {
            var _list = new List<Piece>(list);
            _list.Sort(new PieceInAlbumComparer());
            return _list;
        }

        public TimeSpan Duration
        {
            get
            {
                TimeSpan d = new TimeSpan();
                foreach (Piece piece in list)
                    d += piece.Duration;
                return d;
            }
        }


        #region Rank
        private CRank m_rank = new CRank();

        public CRank Rank { get { return m_rank; } }



        private int rankStack = -1;
        public int RankSt { get { return rankStack; } set { rankStack = value; } }

        private int rankZero = -1;
        public int RankZero { get { return rankZero; } set { rankZero = value; } }

        private int rankZeroSt = -1;
        public int RankZeroSt { get { return rankZeroSt; } set { rankZeroSt = value; } }

        private void initRank()
        {
            m_rank.init();
            // rankStack = -1;
        }

        public int QRank
        {
            get { return m_rank.Quality; }
            set { m_rank.Quality = value; }
        }

        public int LRank
        {
            get { return m_rank.Lenght; }
            set { m_rank.Lenght = value; }
        }

        public int QLRank
        {
            get { return m_rank.Twice; }
            set { m_rank.Twice = value; }
        }


        #endregion

        #region tri



        #endregion

        [Flags]
        private enum unsortMode : byte
        {
            album = 1,
            artist = 2

        }
        const char SEP = '\\';
        const int MAX_PATH_LEVEL = 10;

        public void addPath(Piece pp, HashSet<string> paths, int pathlevel)
        {
            foreach (string path in pp.RelativesPath)
            {
                bool go = VirtualByArtist;
                if (!VirtualByArtist)
                {
                    var _name = Name.Remove(0);
                    if (string.IsNullOrEmpty(_name) || path.StartsWith(_name))
                        go = true;
                }

                if (go)
                {
                    var tab = path.Split(SEP);
                    int ilevel = 0;
                    var sb = new StringBuilder();
                    foreach (string d in tab)
                    {
                        if (string.IsNullOrEmpty(d))
                            continue;
                        if (sb.Length > 0)
                            sb.Append(SEP);
                        sb.Append(d);
                        if (ilevel >= pathlevel)
                        {
                            var p = sb.ToString();
                            paths.Add(p);
                        }
                        ilevel++;
                    }
                    // paths.Add(path);
                }
            }
        }

        public bool containsPath(Piece pp, HashSet<string> paths, int pathlevel)
        {
            foreach (string path in pp.RelativesPath)
            {
                bool go = VirtualByArtist;
                if (!VirtualByArtist)
                {
                    var _name = Name.Remove(0);
                    if (string.IsNullOrEmpty(_name) || path.StartsWith(_name))
                        go = true;
                }

                if (go)
                {
                    if (paths.Contains(path))
                        return true; //paths.Add(path);
                    var tab = path.Split(SEP);
                    int ilevel = 0;
                    var sb = new StringBuilder();
                    foreach (string d in tab)
                    {
                        if (string.IsNullOrEmpty(d))
                            continue;
                        if (sb.Length > 0)
                            sb.Append(SEP);
                        sb.Append(d);
                        if (ilevel >= pathlevel)
                        {
                            var p = sb.ToString();
                            if (paths.Contains(p))
                                return true;
                        }
                        ilevel++;
                    }

                }
            }
            return false;
        }
        public void sortVirtual()
        {
            if (this.VirtualMode == virtualMode.none)
                return;
            var list = this.list.ToList<Piece>();
            int count = list.Count;
            if (count == 0)
                return;
            list.Sort((x, y) =>
            {
                var cmp = x.MasterTrackNumberForTri.CompareTo(y.MasterTrackNumberForTri);
                if (cmp != 0)
                    return cmp;
                return x.Location.CompareTo(y.Location);
            });
            var dictArtist = new Dictionary<string, List<Piece>>();
            var dictAlbum = new Dictionary<int, string>();
            var dictDir = new Dictionary<string, List<Piece>>();
            DirSort.reset();
            foreach (Piece p in list)
            {

                DirSort.record(p);
            }

            DirSort.go();


            foreach (Piece p in list)
            {
                if (p.TrackNumber == 0)
                {
                    p.TrackNumber = list.Count + p.MasterTrackNumber;
                }
            }

            list.Sort((x, y) => x.TrackNumber.CompareTo(y.TrackNumber));
            //foreach (Piece p in list)
            //{
            //    if (p.MasterTrackNumber > 0)
            //        continue;
            //    try
            //    {
            //        var file = new System.IO.FileInfo(p.Location);
            //        var key = file.DirectoryName;

            //        if (!dictDir.ContainsKey(key))
            //            dictDir.Add(key, new List<Piece>());
            //        dictDir[key].Add(p);
            //    }
            //    catch
            //    {
            //    }
            //}

            //foreach (List<Piece> l in dictDir.Values)
            //{
            //    l.Sort((x, y) => x.Location.CompareTo(y.Location));
            //    for (int i = 0; i < l.Count; i++)
            //    {
            //        l[i].TrackNumber = i + 1;
            //    }
            //}

            //list.Sort(new PieceInVirtualAlbumComparer());
            //int nb = 0;

            //foreach (var piece in list)
            //{
            //    nb++;
            //    piece.TrackNumber = nb;
            //}

            //var list2 = new List<Piece>(list);
            //list2.Sort(new VirtualPieceComparer());

            var hs = new HashSet<int>();
            var unsorted = new List<Piece>();
            Piece pp = list[0];
            hs.Add(pp.PieceId); unsorted.Add(pp);
            //string currentArtist = pp.Artist;
            //string currentAlbum = pp.Master.Album;


            int indexC = 0;
            //  bool singleAlbum = false;
            string currentArtist = Album.getKey(pp.Artist, virtualMode.artist);
            unsortMode mode = unsortMode.album | unsortMode.artist;
            if (VirtualByArtist)
                mode = unsortMode.album;

            HashSet<string> artists = new HashSet<string>();
            HashSet<string> albums = new HashSet<string>();
            artists.Add(currentArtist);
            albums.Add(pp.Master.PieceAlbum.Key);
            //  HashSet<string> paths = new HashSet<string>();
            //int pathlevel = 0;
            //  bool found = false;
            int nbc = 0;
            while (unsorted.Count < count)
            {
                nbc++;
                //int indexAlbum = -1;
                //int indexArtist = -1;


                // addPath(pp, paths, pathlevel);

                artists.Clear();
                albums.Clear();
                //    paths.Clear();
                artists.Add(currentArtist);
                albums.Add(pp.Master.PieceAlbum.Key);


                for (int i = 0; i < count; i++)
                {

                    var p = list[i];
                    if (hs.Contains(p.PieceId))
                        continue;

                    if (mode == 0)
                    {
                        hs.Add(p.PieceId);
                        unsorted.Add(p);
                        pp = p;
                        // indexAlbum = -1;
                        indexC = i;
                        continue;
                    }
                    if (mode.HasFlag(unsortMode.artist))
                    {
                        var artist = p.Artist;
                        if (p.Artist != pp.Artist)
                        {
                            var cartist = Album.getKey(p.Artist, virtualMode.artist);
                            if (currentArtist != cartist)
                            {
                                if (!artists.Contains(cartist))
                                {
                                    if (mode.HasFlag(unsortMode.album))
                                    {
                                        if (albums.Contains(p.Master.PieceAlbum.Key))
                                        {
                                            //if (albums.Count <= 1)
                                            //    indexArtist = i;
                                            continue;
                                        }
                                    }

                                    //if (pathlevel <= MAX_PATH_LEVEL)
                                    //{
                                    //    if (containsPath(p, paths, pathlevel))
                                    //        continue;
                                    //}

                                    hs.Add(p.PieceId);
                                    unsorted.Add(p);
                                    pp = p;
                                    //indexAlbum = -1;
                                    //indexArtist = -1;

                                    albums.Add(pp.Master.PieceAlbum.Key);
                                    artists.Add(cartist);
                                    //  addPath(pp, paths, pathlevel); 
                                    indexC = i;
                                    currentArtist = cartist;
                                    //   found = true;
                                    continue;

                                }
                            }
                        }
                    }
                    else if (mode.HasFlag(unsortMode.album))
                    {
                        var album = p.Master.PieceAlbum.Key;
                        if (!albums.Contains(album))
                        {
                            //if (pathlevel <= MAX_PATH_LEVEL)
                            //{
                            //    if (containsPath(p, paths, pathlevel))
                            //        continue;
                            //}
                            hs.Add(p.PieceId);
                            unsorted.Add(p);
                            pp = p;
                            indexC = i;
                            //indexAlbum = -1;
                            albums.Add(album);
                            var cartist = Album.getKey(p.Artist, virtualMode.artist);
                            artists.Add(cartist);
                            currentArtist = cartist;
                            //   found = true;
                            //  addPath(pp, paths, pathlevel); 
                        }
                    }
                }


                //if (indexAlbum >= 0)
                //{
                //    // pas trouvé d'autre artiste, on se rabat sur l'album
                //    var p = list2[indexAlbum];
                //    hs.Add(p.PieceId);
                //    unsorted.Add(p);
                //    pp = p;
                //    indexC = indexAlbum;
                //    indexAlbum = -1;
                //    albums.Add(pp.Master.PieceAlbum.Key);
                //    var cartist = Album.getKey(p.Artist, true);
                //    artists.Add(cartist);
                //    currentArtist = cartist;
                //}
                //else if (indexArtist >= 0)
                //{
                //    // on a trouvé un autre artiste sur le même album. pas si mal
                //    var p = list2[indexArtist];
                //    hs.Add(p.PieceId);
                //    unsorted.Add(p);
                //    pp = p;
                //    indexC = indexArtist;
                //    indexAlbum = -1;
                //    albums.Add(pp.Master.PieceAlbum.Key);
                //    var cartist = Album.getKey(p.Artist, true);
                //    artists.Add(cartist);
                //    currentArtist = cartist;
                //}
                //else
                //{
                //    // rien trouvé de spécial
                //    if (indexC == 0 && !singleAlbum)
                //    {
                //        singleAlbum = true;
                //    }
                //    indexC = 0;

                //}

                if (indexC == 0)
                {

                    //if (found)
                    //{
                    //    found = false;
                    //}
                    //else
                    //{
                    //{
                    //    if (paths.Count == 0)
                    //    {
                    //        pathlevel = MAX_PATH_LEVEL; 
                    //    }
                    //    if (pathlevel < MAX_PATH_LEVEL)
                    //    {
                    //        pathlevel++;
                    //    }
                    //    else
                    //    {
                    if (mode.HasFlag(unsortMode.artist))
                    {
                        if (mode.HasFlag(unsortMode.album))
                            // on cherche les artistes différents ( éventuellement même album ) 
                            mode &= ~unsortMode.album;
                        else
                        {
                            // on abandonne la recherche artiste et on réactive la recherche album
                            mode &= ~unsortMode.artist;
                            mode |= unsortMode.album;
                        }
                    }
                    else if (mode.HasFlag(unsortMode.album))
                        // on est en mode single album; 
                        mode &= ~unsortMode.album;

                    //pathlevel = 0;
                    //  }
                }
                //}
                // }
                indexC = 0;

            }

            for (int i = 0; i < unsorted.Count; i++)
            {
                unsorted[i].TrackNumber = i + 1;
            }



            //foreach (Piece p in list)
            //{
            //    if (p == null)
            //        continue;
            //    var artist = p.Artist;
            //    FileInfo file = null;
            //    try
            //    {
            //        file = new System.IO.FileInfo(p.Location);
            //    }
            //    catch
            //    {
            //        continue;
            //    }
            //    var dirAlbum = file.Directory;
            //    var dirArtist = dirAlbum.Parent;
            //    if (string.IsNullOrEmpty(artist))
            //        artist = dirArtist.FullName;
            //    if (string.IsNullOrEmpty(artist))
            //        artist = "-";
            //    if (!dictArtist.ContainsKey(artist))
            //        dictArtist.Add(artist, new List<Piece>());
            //    dictArtist[artist].Add(p);

            //    var _album = p.Master.Album;
            //    if (string.IsNullOrEmpty(_album))
            //        _album = dirAlbum.FullName;
            //    dictAlbum.Add(p.PieceId, _album);

            //    //if (!dictAlbum.ContainsKey(_album))
            //    //    dictAlbum.Add(_album, new List<Piece>());
            //    //dictAlbum[_album].Add(p);


            //}

            //foreach (List<Piece> l in dictArtist.Values)
            //{
            //    //
            //    for (int i = 0; i < l.Count; i++)
            //    {
            //        l[i].TrackNumber = i + 1;
            //    }
            //}

            //var listUnSortArtist = new List<Piece>(list);
            //listUnSortArtist.Sort((x, y) => x.TrackNumber.CompareTo(y.TrackNumber));

            //var listUnSortAlbum = new List<Piece>();

            //List<Piece> aux = new List<Piece>();
            //int current = 0;

            //foreach (Piece p in listUnSortArtist)
            //{
            //    var tn = p.TrackNumber;
            //    if (tn == current)
            //    {
            //        //aux.Add(p);
            //    }
            //    else
            //    {
            //        current = tn;
            //        aux.Sort((x, y) =>
            //        {
            //            if (x.PieceId == y.PieceId)
            //                return 0;
            //            string xa = x.Master.Album;
            //            string ya = y.Master.Album;
            //            if (dictAlbum.ContainsKey(x.PieceId))
            //                xa = dictAlbum[x.PieceId];
            //            else
            //            { }
            //            if (dictAlbum.ContainsKey(y.PieceId))
            //                ya = dictAlbum[y.PieceId];
            //            else
            //            { }
            //            var cmp = xa.CompareTo(ya);
            //            return cmp;
            //        });

            //        listUnSortAlbum.AddRange(aux);
            //        aux.Clear();

            //    }
            //    aux.Add(p);
            //}

            //aux.Sort((x, y) =>
            //{
            //    if (x.PieceId == y.PieceId)
            //        return 0;
            //    string xa = x.Master.Album;
            //    string ya = y.Master.Album;
            //    if (dictAlbum.ContainsKey(x.PieceId))
            //        xa = dictAlbum[x.PieceId];
            //    else
            //    { }
            //    if (dictAlbum.ContainsKey(y.PieceId))
            //        ya = dictAlbum[y.PieceId];
            //    else
            //    { }
            //    var cmp = xa.CompareTo(ya);
            //    return cmp;
            //});

            //listUnSortAlbum.AddRange(aux);
            //aux.Clear();



            //for (int i = 0; i < listUnSortAlbum.Count; i++)
            //{
            //    listUnSortAlbum[i].TrackNumber = i + 1;
            //}

            //aux.Clear();
            //current = 0;
            //var listUnsortTrack = new List<Piece>();

            //foreach (Piece p in listUnSortAlbum)
            //{
            //    var tn = p.TrackNumber;
            //    if (tn == current)
            //    {

            //    }
            //    else
            //    {
            //        current = tn;
            //        aux.Sort((x, y) =>
            //        {
            //            if (x.PieceId == y.PieceId)
            //                return 0;
            //            var xt = x.MasterTrackNumber;
            //            var yt = y.MasterTrackNumber;
            //            int cmp = 0;
            //            if (xt <= 0 || yt <= 0)
            //            {
            //                try
            //                {
            //                    cmp = x.Location.CompareTo(y.Location);
            //                }
            //                catch
            //                {
            //                }
            //            }
            //            cmp = xt.CompareTo(yt);
            //            return cmp;
            //        });

            //        listUnsortTrack.AddRange(aux);
            //        aux.Clear();
            //    }
            //    aux.Add(p);
            //}

            //aux.Sort((x, y) =>
            //{
            //    if (x.PieceId == y.PieceId)
            //        return 0;
            //    var xt = x.MasterTrackNumber;
            //    var yt = y.MasterTrackNumber;
            //    int cmp = 0;
            //    if (xt <= 0 || yt <= 0)
            //    {
            //        try
            //        {
            //            cmp = x.Location.CompareTo(y.Location);
            //        }
            //        catch
            //        {
            //        }
            //    }
            //    cmp = xt.CompareTo(yt);
            //    return cmp;
            //});

            //listUnsortTrack.AddRange(aux);
            //aux.Clear();



            //for (int i = 0; i < listUnsortTrack.Count; i++)
            //{
            //    listUnsortTrack[i].TrackNumber = i + 1;
            //}




            //foreach (Piece p in list)
            //{
            //    if (p.MasterTrackNumber > 0)
            //        continue;
            //    try
            //    {
            //        var file = new System.IO.FileInfo(p.Location);
            //        var key = file.DirectoryName;

            //        if (!dictDir.ContainsKey(key))
            //            dictDir.Add(key, new List<Piece>());
            //        dictDir[key].Add(p);
            //    }
            //    catch
            //    {
            //    }
            //}

            //foreach (List<Piece> l in dictDir.Values)
            //{
            //    l.Sort((x, y) => x.Location.CompareTo(y.Location));
            //    for (int i = 0; i < l.Count; i++)
            //    {
            //        l[i].TrackNumber = i + 1;
            //    }
            //}

            //list.Sort(new PieceInVirtualAlbumComparer());
            //int nb = 0;
            //foreach (var piece in list)
            //{
            //    nb++;
            //    piece.TrackNumber = nb;
            //}
        }

        public bool isSameOf(Album o)
        {
            if (o == this)
                return false;
            if (list.Count != o.list.Count)
                return false;

            foreach (Piece p in masters)
            {
                if (!o.masters.Contains(p))
                    return false;
            }
            return true;

        }

        public override bool Equals(object obj)
        {
            var o = obj as Album;
            if (o == null)
                return false;
            return Key.Equals(o.Key) && mode == o.mode;
        }
        public override int GetHashCode()
        {
            return Key.GetHashCode();
        }

        public DateTime? UpdateClassement
        {
            get
            {
                DateTime? dt = null;
                foreach (Piece p in new List<Piece>(list))
                {

                    var _dt = p.UpdateClassement; // CalcDate.getLastModif(p.DatesClassement);
                    if (_dt != null && (dt == null || _dt > dt))
                        dt = _dt;
                }
                return dt;
            }
        }

        public DateTime? LastRead
        {
            get
            {
                DateTime? dt = null;
                foreach (Piece p in list)
                {
                    var _dt = p.LastRead; // CalcDate.getLastModif(p.DatesClassement);
                    if (_dt != null && (dt == null || _dt > dt))
                        dt = _dt;
                }
                return dt;
            }
        }

        public IEnumerator<Piece> GetEnumerator()
        {
            return list.GetEnumerator();
        }
        private DateTime albumAdded = DateTime.MaxValue;
        public DateTime AlbumAdded
        {
            get
            {
                if (albumAdded < DateTime.MaxValue)
                    return albumAdded;
                DateTime min = DateTime.MaxValue;
                foreach (Piece p in list)
                {
                    var dt = p.Added;
                    if (dt > DateTime.MinValue)
                    {
                        if (dt < min)
                            min = dt;
                    }
                    else
                    {
                        dt = p.FirstAcces;
                        if (dt < min && dt > DateTime.MinValue)
                            min = dt;
                    }

                }
                albumAdded = min;
                return albumAdded;
            }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return list.GetEnumerator();
        }

        public static string getKey(string _album, virtualMode mode)
        {
            string __album = "-";
            if (!string.IsNullOrEmpty(_album))
            {
                __album = _album.Trim().ToLower();

                if (mode == virtualMode.word)
                {
                    __album = string.Format("¤¤[{0}]", __album);
                    return __album;
                }
                if (mode == virtualMode.list)
                {
                    __album = string.Format("/{0}", __album);
                    return __album;
                }

                if (__album.StartsWith("the "))
                    __album = Regex.Replace(__album, @"the\ ", "");
                if (__album.StartsWith("les "))
                    __album = Regex.Replace(__album, @"les\ ", "");
                if (__album.Contains(" et "))
                    __album = __album.Replace(" et ", " ");
                if (__album.Contains(" and "))
                    __album = __album.Replace(" and ", " & ");
                __album = __album.removeAccent();
                __album = Regex.Replace(__album, @"\ +", " ");
                if (mode == virtualMode.artist)
                {
                    __album = string.Format("$[{0}]", __album);
                }
                else if (mode == virtualMode.year)
                {
                    if (_album.Length == 3)
                        __album = string.Format("£[{0}0']", __album);
                    else
                        __album = string.Format("£[{0}]", __album);
                }
                else if (mode == virtualMode.extended)
                {
                    __album = string.Format("¤[{0}]", __album);
                }
                else if (mode == virtualMode.added)
                {
                    __album = string.Format("<{0}>", __album);
                }

            }
            return __album;

        }



    }
}
]]></content>
  </file>
  <file path="\PieceDb.Db\CFIle.cs">
    <content><![CDATA[using System;
using System.IO;
using pdb.obj;
using pdb.util;
namespace pdb.db
{
    public class CFile : IData, IEquatable<CFile>
    {
        private const string TOKEN_FILE = "file";

        private string m_file = "";
        // private bool? _exists;
        // private String path = "";
        // private String ext;
        private FileType fileType = FileType.none;
        // private long size = 0;
        //private bool _extern = false;
        // private FileInfo infos;
        public static String DefaultFolder = "";
        public readonly bool deleted;


        FileValue fi;

        public string getPath()
        {
            if (isExtern())
                return m_file;
            return DefaultFolder + m_file;
        }

        private FileValue Info
        {
            get
            {
                if (fi == null)
                {
                    string path = getPath();
                    fi = FileRegister.Get(path);
                }
                return fi;
            }
        }   

        public CFile(string a_file) : this(a_file, false)
        {
        }
        public CFile(string a_file, bool deleted)
        {
            try
            {
                this.deleted = deleted;
                m_file = a_file.TrimSafe();
                if (a_file.Contains(@"/"))
                {
                    m_file = XMLTool.FromXml(a_file.Trim());
                    string prefix = "file://";
                    string l_legacyDefaultFolder = new Uri(DefaultFolder).AbsoluteUri;
                    //if (l_legacyDefaultFolder != null && l_legacyDefaultFolder.Contains(l_defaultFolder))
                    //{
                    //    l_defaultFolder = l_legacyDefaultFolder;
                    //}
                    if (!m_file.StartsWith(prefix))
                    {
                        m_file = l_legacyDefaultFolder + m_file;
                    }
                    string l_path = new Uri(m_file).LocalPath;
                    m_file = l_path.Replace("\\\\localhost\\", "");


                }
                m_file = m_file.Replace(DefaultFolder, "");
                string path = getPath();
                FileRegister.Push(path);

                //path = getPath();

                //  _exists = true;


                // FileInfo infos = new FileInfo(path);
                //var _exists = FileRegister.Exist(path); // infos.Exists;
                //if (false.Equals(_exists))
                //    path = FileRegister.FullName(path); // infos.FullName;




                //String ext = System.IO.Path.GetExtension(path).Replace(".", "").ToLower();
                //fileType = getFileType(ext);
                //if (_exists)
                //    size = infos.Length;

            }
            catch (Exception e)
            {
                String message = String.Format("impossible de construire CFile {0}", m_file);
                throw new ApplicationException(message, e);
            }
        }
        public void write(ITextWriter a_sw)
        {
            XMLTool.writeValue(a_sw, TOKEN_FILE, XMLTool.FileToXml(m_file));
        }

        public void write(System.Xml.XmlWriter w)
        {
            w.WriteElementString(TOKEN_FILE, m_file);
        }

        public void writeDeleted(System.Xml.XmlWriter w)
        {
            w.WriteStartElement(TOKEN_FILE);
            XMLTool.writeDeleted(w);
            w.WriteString(m_file);
            w.WriteEndElement();
        }
        public string File
        {
            get { return m_file; }
        }
        public bool? exists()
        {
            return Info.Exists;
        }
        //public string getUri()
        //{
        //    return new Uri(path).AbsoluteUri;
        //}
        //private string getPath()
        //{
        //    if (isExtern())
        //        return m_file;
        //    return DefaultFolder + m_file;
        //}

        public override string ToString()
        {
            return Info.FullName;
        }



        public bool isExtern()
        {
            return m_file.Substring(1, 2).Equals(@":\");
        }

        public string Path
        {
            get
            {
                if (fi != null)
                    return fi.FullName;
                return getPath();
                //string l_file = "";
                ////if (m_file.Contains("\\"))
                ////{
                //// chemin windows D:\
                //if (m_file.Substring(1, 2).Equals(@":\"))
                //{
                //    //chemin absolu
                //    l_file = m_file;
                //}
                //else
                //{
                //    //chemin relatif
                //    l_file = CLegacy.DefaultFolder + m_file;
                //}
                //return l_file;
            }
            //else
            //{


            //    if (m_file.Contains("file://"))
            //    {
            //        l_file = m_file;
            //    }
            //    else
            //    {
            //        string l_defaultFolder = "file://";
            //        string l_legacyDefaultFolder =  new Uri( CLegacy.DefaultFolder).AbsoluteUri;
            //        if (l_legacyDefaultFolder != null && l_legacyDefaultFolder.Contains(l_defaultFolder))
            //        {
            //            l_defaultFolder = l_legacyDefaultFolder;
            //        }
            //        l_file = l_defaultFolder + m_file;
            //    }

            //    string l_path = new Uri(l_file).LocalPath;
            //    l_path = l_path.Replace("\\\\localhost\\", "");
            //    return l_path;
            //}
            //}
        }
        public bool Equals(CFile other)
        {
            if (other == null)
                return false;

            return m_file.ToLower().Equals(other.m_file.ToLower());
        }
        public bool isPodcast
        {
            get
            {
                if (m_file.StartsWith("Podcasts/"))
                    return true;
                return false;
            }
        }
        public FileType FileType
        {
            get
            {
                if (fileType == FileType.none)
                {
                    fileType = FileType.unknown;
                    String ext = System.IO.Path.GetExtension(m_file).Replace(".", "").ToLower();


                    try
                    {
                        fileType = (FileType)Enum.Parse(typeof(FileType), ext, true);
                    }
                    catch
                    {
                    }
                }
                return fileType;
            }
        }

        public long Size
        {
            get
            {

                return Info.Length;
            }
        }

        //public string DirAndFileName
        //{
        //    get
        //    {
        //        var ret = getPath();
        //        try
        //        {
        //            var infos = FileRegister.Check(ret); // new FileInfo(path);
        //            return infos.DirAndFileName;
        //        }
        //        catch
        //        {

        //        }
        //        return ret;
        //    }
        //}





    }
}

]]></content>
  </file>
  <file path="\PieceDb.Db\CListPiece.cs">
    <content><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using pdb.db.obj;
using pdb.obj;
using pdb.util;
/// <summary>
/// Liste de pieces contenues dans un fichier
/// Liste de pieces � sauvegarder
/// </summary>
/// <remarks>
/// La liste doit s'assurer de l'absence de doublons
/// maintenir une r�f�rence unique pour un morceau
/// 
/// 
/// </remarks>
namespace pdb.db
{
    public interface IReference
    {
        void referenceChange(CPiece piece);
    }

    public class CListPiece : IData, IReference
    {

        public const string TOKEN_LISTS = "lists";
        public const string TOKEN_LIST = "l";
        public const string TOKEN_FOLDER = "f";
        public const string TOKEN_LIST_NAME = "n";
        public const string TOKEN_LIST_TRACK = "t";

        private System.DateTime m_date = System.DateTime.MinValue;

        private DictRef<CPiece> ht = new DictRef<CPiece>();
        private BgDict<int, CPiece> htIds = new BgDict<int, CPiece>();
        private BgDictString<CPiece> htLoc = new BgDictString<CPiece>();
        private PlayList listes = new PlayList("listes");
        public PlayList Listes { get { return listes; } }

        public const string PIECES = "pieces";
        #region "constructeurs"
        /// <summary>
        /// Création à partir d'une simple collection de Piece
        /// </summary>
        /// <param name="a_list"></param>
        /// <remarks>recherche doublons - merge manuel �ventuel</remarks>
        public CListPiece(ICollection<CPiece> a_list, System.DateTime a_date)
            : this()
        {
            m_date = a_date;
            init(a_list);

            //foreach (CPiece l_file in a_list)
            //{
            //    htIds[l_file.PieceId] = l_file;
            //    foreach (CFile file in l_file.Files)
            //    {
            //        htLoc[file.Path] = l_file;
            //    }
            //}
            foreach (CPiece piece in a_list)
            {
                int parentId = piece.PieceParentId;
                if (parentId > 0)
                {
                    var parent = htIds[parentId];
                    if (parent == null)
                        log(string.Format("id={0} parentid={1} parent NULL", piece.PieceId, piece.PieceParentId));
                    else
                        piece.setParent(parent);
                }

                //if (!piece.Exists)
                //{
                //    misc.log("absent: {0}", piece.PathAndRef + " " + piece.Comment);
                //}
            }



            //DateTime maxEnabled = DateTime.MinValue;
            //foreach (CPiece l_file in a_list)
            //{
            //    Add(l_file);
            //    //if (l_file.Enabled)
            //    //{
            //    //    var t = l_file.LastModifClass;
            //    //    if (t > maxEnabled)
            //    //        maxEnabled = t;
            //    //}
            //}
            //misc.log("***********************************************************");
            //misc.log("maxEnabled: {0}", maxEnabled);
            //misc.log("***********************************************************");
        }


        public void refresh()
        {
            var list = getList();
            ht = new DictRef<CPiece>();
            htIds = new BgDict<int, CPiece>();
            htLoc = new BgDictString<CPiece>();

            init(list);
        }

        private void init(ICollection<CPiece> a_list)
        {
            foreach (CPiece l_file in a_list)
            {
                htIds[l_file.PieceId] = l_file;
                foreach (CFile file in l_file.Files)
                {
                    htLoc[file.Path] = l_file;
                }
            }

            foreach (CPiece l_file in a_list)
            {
                Add(l_file);
            }
        }

        public CListPiece()
        {

        }

        #endregion


        public void checkId(CPiece toCheck)
        {
            foreach (CFile f in toCheck.Files)
            {
                if (htLoc.ContainsKey(f.Path))
                {
                    var pOrg = htLoc[f.Path];
                    toCheck.setId(pOrg.PieceId);
                    toCheck.PieceParentId = pOrg.PieceParentId;
                }
            }
        }

        /// <summary>
        /// merge de la base locale et distante
        /// </summary>
        /// <param name="a_remote"></param>
        /// <remarks></remarks>
        public void Consolid(CListPiece a_remote)
        {
            log("ListPiece:Consolid");
            mergePriority l_remotePriority = mergePriority.none;
            System.DateTime l_remoteDate = a_remote.m_date;
            if (l_remoteDate > System.DateTime.MinValue && l_remoteDate.AddSeconds(-3) > m_date)
                l_remotePriority = mergePriority.right;
            foreach (CPiece l_file in a_remote)
            {
                Consolid(l_file, l_remotePriority);
            }

        }

        //public void bilanNatives()
        //{
        //    misc.log("Bilan Natives");
        //    foreach (CPiece piece in this)
        //    {
        //        if (piece.HasNoNative)
        //            misc.logNoDate(piece.ToString());
        //    }
        //}

        //private void merge(CPiece org, CPiece cand)
        //{
        //    misc.log("CList:Add MERGE with key {0}: {1} // {2}", org.Key, org, cand);
        //    org.merge(cand);
        //}

        public void AddOrMerge(CPiece piece, CPiece org)
        {
            if (org != null)
            {
                org.consolid(piece, mergePriority.right);
            }
            else
            {
                ht.set(piece, piece.Key);

                piece.addReferenceObs(this);
                CDb.checkId(piece);
            }
            htIds[piece.PieceId] = piece;
            foreach (CFile file in piece.Files)
            {
                htLoc[file.Path] = piece;
            }


        }


        public void Add(CPiece piece)
        {
            TrackIdentity key = piece.Key;

            CPiece org = null;

            // recherche d'une piece avec un niveau de d�tail �gal ou inf�rieur
            org = ht[key];


            if (org != null)
            {
                misc.log("CList:Add MERGE {0}", key);
                org.merge(piece);
            }
            else
            {
                ht.set(piece, piece.Key);

                piece.addReferenceObs(this);
                CDb.checkId(piece);
                htIds[piece.PieceId] = piece;
                foreach (CFile file in piece.Files)
                {
                    htLoc[file.Path] = piece;
                }

            }
        }


        public void fusion(CPiece master, CPiece toDelete)
        {
            if (master == null)
                return;
            if (toDelete == null)
                return;
            if (master == toDelete)
                return;
            misc.log("CList:Fusion  {0}  {1}", master, toDelete);
            master.MasterPiece.addDataLink(toDelete.MasterPiece);
            ht.Remove(toDelete);
            htIds.Remove(toDelete.PieceId);

        }

        public void delete(CPiece toDelete)
        {
            if (toDelete == null)
                return;
            ht.Remove(toDelete);
            htIds.Remove(toDelete.PieceId);
            foreach (CFile file in toDelete.Files)
            {
                htLoc.Remove(file.Path);
            }
        }

        public void referenceChange(CPiece piece)
        {
            piece.keyGener();
            ht.Remove(piece);

            piece.keyGener();
            ht.set(piece, piece.Key);

        }






        public bool Contains(CPiece piece)
        {
            var key = piece.Key;
            return ht[key] != null;
        }

        public void Consolid(CPiece remote, mergePriority a_priority)
        {
            //if (remote.PieceParentId > 0)
            //{
            //    if (remote.Parent == null)
            //        remote.Parent = htIds[remote.PieceParentId];


            //}
            CPiece l_pieceOrg = getPiece(remote);

            if (l_pieceOrg == null)
            {
                if (!remote.Deleted)
                {
                    l_pieceOrg = new CPiece();
                    l_pieceOrg.consolid(remote, a_priority);
                    Add(l_pieceOrg);
                }
                else
                    misc.log("remote deleted!! Pourquoi je le trouve pas ?? {0}", remote);
            }
            else
            {
                if (remote.Deleted && a_priority == mergePriority.right)
                {
                    l_pieceOrg.Deleted = true;
                    return;
                }
                if (l_pieceOrg.PieceParentId != remote.PieceParentId)
                {
                    if (remote.PieceParentId > 0)
                    {
                        if (l_pieceOrg.PieceParentId > 0)
                        {
                            misc.log("ououh! changement de parent {0} de {1} vers {2} ", l_pieceOrg, l_pieceOrg.PieceParentId, remote.PieceParentId);
                            l_pieceOrg.setParent(htIds[remote.PieceParentId]); 
                        }
                        else
                        {
                            misc.log(l_pieceOrg + " a maintenant un parent: " + remote.PieceParentId);
                             l_pieceOrg.setParent(htIds[remote.PieceParentId]); 
                        }

                        //var parent = htIds[remote.PieceParentId];
                        //misc.log(l_pieceOrg + " a maintenant un parent: " + parent);
                        //l_pieceOrg.PieceParentId = remote.PieceParentId;
                        //l_pieceOrg.Parent = parent;
                    }
                    else
                    {
                        misc.log("ououh! suppression de parent {0} -> {1} ", l_pieceOrg, l_pieceOrg.PieceParentId);
                        l_pieceOrg.Parent = null; 
                    }
                    //if (remote.PieceId > 0 && l_pieceOrg.PieceId < 0)
                    //    l_pieceOrg.Parent = htIds[remote.PieceParentId];
                    l_pieceOrg.PieceParentId = remote.PieceParentId;
                   
                }

                 l_pieceOrg.consolid(remote, a_priority);
            }
        }

        ///// <summary>
        ///// synchro enrte base locale et liste native
        ///// </summary>
        ///// <param name="native"></param>
        ///// <remarks></remarks>
        //public void legacyConsolid(CPiece native)
        //{
        //    CPiece l_pieceOrg = getPiece(native);

        //    if (l_pieceOrg == null)
        //    {
        //        log("add from business:" + native.ToString());
        //        l_pieceOrg = new CPiece(native);
        //        l_pieceOrg.legacyConsolid(native);
        //        Add(l_pieceOrg);
        //    }
        //    else
        //    {
        //        l_pieceOrg.legacyConsolid(native);
        //    }

        //}

        private CPiece getPiece(TrackIdentity key)
        {
            return ht[key];
        }

        public CPiece getPiece(ITrackMetaData a_piece)
        {
            TrackIdentity key = a_piece.Key;
            return getPiece(key);
        }

        public CPiece getPiece(CPiece a_piece)
        {
            TrackIdentity key = a_piece.Key;
            return getPiece(key);
        }

        public CPiece tryGetPiece(CPiece a_piece)
        {
            TrackIdentity key = a_piece.Key;
            return ht.Try(key);
        }

        public CPiece tryGetPieceWithoutId(CPiece a_piece)
        {
            TrackIdentity key = a_piece.Key;
            return ht.TryWithoutId(key);
        }

        public CPiece getPiece(string location)
        {
            return htLoc[location];
        }

        public CPiece getPiece(int id)
        {
            return htIds[id];
        }

        public void moveId(int oldId, CPiece piece)
        {

        }

        private bool exists(CPiece a_piece)
        {
            return getPiece(a_piece) != null;
        }

        #region IData Members
        //public void write(ITextWriter a_sw)
        //{
        //    XMLTool.openBalise(a_sw, PIECES);
        //    foreach (CPiece l_piece in this)
        //    {
        //        l_piece.write(a_sw);
        //    }
        //    XMLTool.closeBalise(a_sw, PIECES);
        //}

        public void write(System.Xml.XmlWriter w)
        {
            w.WriteStartElement(PIECES);

            foreach (CPiece l_piece in getList())
            {
                l_piece.write(w);
            }
            w.WriteEndElement();
            w.WriteStartElement(TOKEN_LISTS);
            writeList(w, listes);
            w.WriteEndElement();
        }

        public void writeDiff(System.Xml.XmlWriter w, CListPiece lastFull)
        {
            w.WriteStartElement(PIECES);

            foreach (CPiece l_piece in getList())
            {
                var org = lastFull.getPiece(l_piece.PieceId);
                try
                {
                    l_piece.writeDiff(w, org);
                }
                catch (Exception ex)
                {
                    misc.log("impossible d'enregistrer les modifs de " + l_piece, ex.ToString());
                }
            }

            foreach (CPiece org in lastFull)
            {
                var newP = this.getPiece(org.PieceId);
                if (newP == null)
                {
                    org.Deleted = true;
                    org.writeDeleted(w);
                }
            }
            w.WriteEndElement();
        }

        #endregion


        public IEnumerator GetEnumerator()
        {
            return ht.GetEnumerator();
        }

        public int Count
        {
            get { return ht.Count; }
        }
        //public System.Collections.Generic.IEnumerator<CPiece> GetEnumerator1()
        //{
        //    return ht.GetEnumerator1();
        //}
        //System.Collections.Generic.IEnumerator<CPiece> System.Collections.Generic.IEnumerable<CPiece>.GetEnumerator()
        //{
        //    return GetEnumerator1();
        //}

        public List<CPiece> getList()
        {
            var list = new List<CPiece>(ht.Count);
            foreach (CPiece p in ht)
            {
                if (!p.Deleted)
                    list.Add(p);
            }

            Sort(list);

            return list;
        }

        public void Sort(List<CPiece> list)
        {
            list.Sort(new PieceComparer());
        }

        private class PieceComparer : IComparer<CPiece>
        {
            public int Compare(CPiece x, CPiece y)
            {
                if (x.PieceId == 43565 || y.PieceId == 43565)
                {

                }
                int cmp = x.MasterId.CompareTo(y.MasterId);
                if (cmp != 0)
                    return cmp;
                cmp = x.PieceParentId.CompareTo(y.PieceParentId);
                if (cmp != 0)
                    return cmp;
                return x.PieceId.CompareTo(y.PieceId);
            }
        }

        private void log(String txt)
        {
            misc.log(txt);
        }


        #region listes
        public void loadListes(XmlElement xml)
        {
            if (xml == null)
                return;
            buildList(xml, listes);
        }

        private void buildList(XmlElement xparent, PlayList parent)
        {
            foreach (XmlElement xsub in xparent.ChildNodes)
            {
                var tool = new XMLTool(xsub);
                if (xsub.Name == TOKEN_LIST)
                {
                    string name = tool.getAttValue(TOKEN_LIST_NAME);
                    int id = tool.getIntAttValue("id");
                    PlayList sub = new PlayList(name, parent);
                    sub.ID = id;
                    CDb.checkId(sub);
                    buildList(xsub, sub);
                }
                else if (xsub.Name == TOKEN_LIST_TRACK)
                {
                    int id = tool.getIntAttValue("id");
                    var piece = htIds[id];

                    // var tl = new TrackList(piece);
                    parent.add(piece);
                }
            }
        }

        private void writeList(XmlWriter w, PlayList parent)
        {
            foreach (PlayList pl in parent.PlayLists)
            {
                w.WriteStartElement(TOKEN_LIST);
                w.WriteAttributeString("id", pl.ID.ToString());
                w.WriteAttributeString(TOKEN_LIST_NAME, pl.Name);
                writeList(w, pl);
                w.WriteEndElement();
            }

            foreach (IItem t in parent.Items)
            {
                w.WriteStartElement(TOKEN_LIST_TRACK);
                w.WriteAttributeString("id", t.ID.ToString());
                w.WriteEndElement();
            }
            //foreach (PlComponent c in parent)
            //{
            //    if (c is CPlayList)
            //    {
            //        var pl = c as CPlayList;
            //        w.WriteStartElement(TOKEN_LIST);
            //        w.WriteAttributeString("id", pl.ID.ToString());
            //        w.WriteAttributeString(TOKEN_LIST_NAME, pl.Name);
            //        writeList(w, pl);
            //        w.WriteEndElement();
            //    }
            //    else if (c is TrackList)
            //    {
            //        var t = c as TrackList;
            //        w.WriteStartElement(TOKEN_LIST_TRACK);
            //        w.WriteAttributeString("id", t.PieceId.ToString());
            //        w.WriteEndElement();
            //    }
            //}
        }

        public void buildLists(PlayList listes)
        {
            this.listes.DeleteChilds();
            buildList(this.listes, listes);
        }

        private void buildList(PlayList mine, PlayList ext)
        {
            foreach (PlayList subExt in ext.PlayLists)
            {
                var sub = new PlayList(subExt.Name, mine);
                sub.ID = subExt.ID;
                CDb.checkId(sub);
                subExt.ID = sub.ID;

                buildList(sub, subExt);
            }

            foreach (IItem t in ext.Items)
            {
                var piece = htIds[t.ID];
                mine.add(piece);
            }
        }
        #endregion
    }

}






]]></content>
  </file>
  <file path="\PieceDb.Db\MasterPiece.cs">
    <content><![CDATA[using pdb.db.obj;
using pdb.db.piece.data;
using pdb.obj;
using pdb.util;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;

namespace pdb.db
{
    public class MasterPiece : IMasterPiece, IData
    {
        private const string TOKEN_DISABLED = "disabled";
        public const string TOKEN_DURATION = "duration";
        //durée en ms du titre
        private TimeSpan m_duration = new TimeSpan();
        private CPieceClassement m_classement;
        private CListDate m_dates;
        private CListFile m_files;
        private CPieceChecked m_Enabled;
        private static MasterPiece _NULL = new MasterPiece();
        public static MasterPiece NULL { get { return _NULL; } }

        public MasterPiece()
        {
            m_dates = new CListDate();
            m_files = new CListFile();
            m_classement = new CPieceClassement(this);
            m_Enabled = new CPieceChecked();
        }
        public MasterPiece(XmlElement a_xml)
        {
            var xmlTool = new XMLTool(a_xml);

            m_dates = new CListDate(a_xml);
            m_files = new CListFile(a_xml);
            m_classement = new CPieceClassement(this, a_xml);
            m_Enabled = new CPieceChecked();
            var xDisabled = xmlTool.NodeLookUp(TOKEN_DISABLED);

            if (xDisabled != null)
            {
                if (xDisabled.InnerText == "false")
                    Checked.Enable();
                else
                    Checked.Disable();
            }

            string strDur = "";
            var attDuration = a_xml.Attributes[TOKEN_DURATION];
            if (attDuration != null)
                strDur = attDuration.Value;
            else
                strDur = xmlTool.getNodeValue(TOKEN_DURATION);




            if (!string.IsNullOrEmpty(strDur))
            {
                var ms = Convert.ToDouble(strDur);
                if (ms > 1)
                    m_duration = TimeSpan.FromMilliseconds(ms);
            }

        }
        public CPieceClassement Classement { get { return m_classement; } }
        public CListFile Files { get { return m_files; } }
        public CListDate ListDates { get { return m_dates; } }
        internal CPieceChecked Checked { get { return m_Enabled; } }

        Classement IMasterPiece.Classement
        {
            get { return m_classement.Value; }
        }

        Classement IMasterPiece.DeepClassement
        {
            get { return m_classement.DbValue; }
        }

        Classement IMasterPiece.MaxClassement { get { return m_classement.MaxClassement(); } }


        public void setClassement(string className, int rating)
        {
            m_classement.setClassement(className, rating);
        }


        public void setClassement(string strClassement)
        {
            var cl = pdb.obj.Classement.create(strClassement);
            if (cl == null)
                throw new ApplicationException("input classement invalide " + strClassement);

            m_classement.Value = cl;
        }



        public void write(XmlWriter w)
        {

            if (!Checked.Enabled)
                w.WriteElementString(TOKEN_DISABLED, "");
            Classement.write(w);
            Files.write(w);
            ListDates.write(w);




        }

        public bool HasChange(MasterPiece lastFull)
        {
            if (m_classement.HasChange(lastFull.m_classement))
                return true;
            if (m_files.HasChange(lastFull.m_files))
                return true;
            if (m_dates.HasChange(lastFull.m_dates))
                return true;
            return false; 
        }

        public void writeDiff(XmlWriter w, MasterPiece lastFull)
        {
            m_classement.writeDiff(w, lastFull.m_classement);
            m_files.writeDiff(w, lastFull.m_files);
            m_dates.writeDiff(w, lastFull.m_dates);

            if (!Checked.Enabled && lastFull.Checked.Enabled)
                w.WriteElementString(TOKEN_DISABLED, "");

            if (Checked.Enabled && !lastFull.Checked.Enabled)
                w.WriteElementString(TOKEN_DISABLED, "false");


            if (Duration.TotalMilliseconds > 1 && lastFull.DurationInSec != DurationInSec)
                w.WriteElementString(TOKEN_DURATION, ((int)Duration.TotalMilliseconds).ToString());
        }

        private exportState _exportState;
        public exportState ExportStatus
        {
            get
            {
                return _exportState;
            }
            set
            {
                _exportState = value;
            }
        }

        public string Location
        {
            get
            {
                return m_files.Path;
            }
        }


        public List<string> RelativesPath
        {
            get
            {

                var _RelativesPath = new List<string>();
                foreach (CFile f in m_files)
                {
                    _RelativesPath.Add(f.File);
                }
                return _RelativesPath;
            }
        }

        public DateTime PlayedDate
        {
            get { return m_dates.LastModif; }
        }

        public List<DateTime> Dates
        {
            get { return m_dates.Dates; }
        }

        public List<DateTime> DatesClassementBrut
        {
            get
            {
                return m_classement.getDates();
            }
        }

        public List<DateTime> DatesClassement
        {
            get
            {
                return m_classement.getDates();
            }
        }


        public bool Enabled
        {
            get
            {
                return m_Enabled.Enabled;
            }

            set
            {
                if (value)
                    m_Enabled.Enable();
                else
                    m_Enabled.Disable();
            }
        }

        public void consolid(MasterPiece remote, mergePriority a_priority)
        {

            m_classement.Consolid(remote.m_classement, a_priority);
            Checked.Consolid(remote.Checked, a_priority);

            if (m_duration.TotalMilliseconds < 2)
                this.m_duration = remote.m_duration;
            else if (remote.m_duration.TotalMilliseconds < 2)
                remote.m_duration = this.m_duration;
            else if (a_priority == mergePriority.right)
                m_duration = remote.m_duration;

            addData(remote);
        }

        public void addData(MasterPiece other)
        {
            m_dates.merge(other.m_dates);
          //  other.ListDates.merge(ListDates);

            m_files.merge(other.m_files);
           // other.Files.merge(Files);
        }


        public void addDataLink(MasterPiece other)
        {
            ListDates.merge(other.ListDates);
            other.ListDates.merge(ListDates);

            Files.merge(other.Files);
            other.Files.merge(Files);


            Classement.mergeOnlyVersion(other.Classement);
            other.Classement.mergeOnlyVersion(Classement);
        }

        public TimeSpan Duration
        {
            get { return m_duration; }
            set
            {
                if (value.TotalMilliseconds > 1)
                {
                    m_duration = value;
                }

            }
        }
        public int DurationInSec
        {
            get { return Convert.ToInt32(Duration.TotalSeconds); }
        }

        public String ClassEvol
        {
            get { return getClassementEvol(); }
        }
        public String getClassementEvol()
        {
            DateTime playedCorr = ListDates.LastModif;
            try
            {
                if (playedCorr > DateTime.MinValue)
                    playedCorr -= Duration;
            }
            catch (Exception)
            {
                // logTrack.log("{0} impossible de corriger la date jouée {1} avec la durée {2}", this, ListDates.LastModif, Duration);
            }
            if (Classement.LastModif > playedCorr)
            {
                return Classement.Evol;
            }
            return "";

        }

    }
}
]]></content>
  </file>
  <file path="\PieceDb.Db\piece\CListDate.cs">
    <content><![CDATA[using pdb.util;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;

namespace pdb.db.obj
{

    /// <summary>
    /// liste des dates d'écoute d'un morceau
    /// </summary>
    /// <remarks></remarks>
    /// 

    class ListenDate : IComparable, IEquatable<ListenDate>
    {
        public readonly DateTime date;
        public readonly bool deleted;
        public ListenDate(XmlElement node)
        {
            deleted = XMLTool.getDeleted(node);
            date = Convert.ToDateTime(node.InnerText);
        }
        public ListenDate(DateTime dt)
        {
            this.date = dt;
        }

        public int CompareTo(object obj)
        {
            var o = obj as ListenDate;
            if (o == null)
                return -1;
            return -this.date.CompareTo(o.date);
        }

        public bool Equals(ListenDate other)
        {
            if (other ==null)
                return false; 
            return date.Equals(other.date); 
        }

        public override bool Equals(object obj)
        {           
            return Equals(obj as ListenDate); 
        }

        public override int GetHashCode()
        {
            return date.GetHashCode();
        }
        public override string ToString()
        {
            return date.ToString();
        }
    }

    public class CListDate : IData
    {

        private const string DATES = "dates";

        private const string DATE = "date";
        private List<ListenDate> m_list = new List<ListenDate>();
        public static int Period = 30;

        private static CDateComparer c_comparer = new CDateComparer();
        private static DateTime min = new DateTime(1970, 3, 27);
        public CListDate(XmlElement a_xml)
        {
            XmlElement l_xml = XMLTool.NodeLookUp(a_xml, DATES);
            if (l_xml == null)
                return;
            foreach (XmlElement l_xmlDate in l_xml)
            {
                m_list.Add(new ListenDate(l_xmlDate));
            }
        }
        public CListDate()
        {
        }



        public CListDate(List<DateTime> dates)
        {
            foreach (DateTime dt in dates)
                m_list.Add(new ListenDate(dt));
        }

        public void recordJustReadTrack()
        {
            m_list.Add(new ListenDate(DateTime.Now));
        }

        //public void check(System.DateTime a_date)
        //{
        //    if (a_date > min)
        //    {
        //        if (!m_list.Contains(a_date))
        //        {
        //            if (!isDateInList(a_date))
        //            {
        //                m_list.Add(a_date);
        //            }
        //        }
        //    }
        //}

        //private bool isDateInList(System.DateTime a_date)
        //{
        //    foreach (System.DateTime l_date in m_list)
        //    {
        //        if (l_date == a_date)
        //            return true;
        //        //string refe = l_date.ToString();
        //        //if (refe == a_date.ToString())
        //        //    return true;
        //        //if (refe == a_date.AddHours(1).ToString())
        //        //    return true;
        //        //if (refe == a_date.AddHours(-1).ToString())
        //        //    return true;
        //    }
        //    return false;
        //}

        private void check(ListenDate other)
        {
            if (!other.deleted && !m_list.Contains(other))
                m_list.Add(other);
            else if (other.deleted && m_list.Contains(other))
                m_list.Remove(other);

        }

        public void merge(CListDate other)
        {
            foreach (ListenDate o in other.m_list)
                check(o);
        }

        private void sort()
        {
            m_list.Sort((x, y) => -x.date.CompareTo(y.date));
        }


        #region IData Members




        public void write(XmlWriter w)
        {
            sort();
            w.WriteStartElement(DATES);

            foreach (ListenDate dt in m_list)
            {
                w.WriteElementString(CListDate.DATE, dt.date.ToString());
            }
            w.WriteEndElement();
        }
        public bool HasChange(CListDate lastFull)
        {
            if (m_list.Count != lastFull.m_list.Count)
                return true;
            sort();
            lastFull.sort();
            int count = m_list.Count;
            for (int i = 0; i < count; i++)
            {
                if (!m_list[i].Equals(lastFull.m_list[i]))
                    return true;
            }
            return false;
        }
        public void writeDiff(XmlWriter w, CListDate lastFull)
        {
            if (!HasChange(lastFull))
                return;
            sort();
            lastFull.sort();
            w.WriteStartElement(DATES);

            foreach (var l_date in m_list)
            {
                if (lastFull.m_list.Contains(l_date))
                    continue;
                w.WriteElementString(CListDate.DATE, l_date.ToString());
            }

            foreach (var l_date in lastFull.m_list)
            {
                if (m_list.Contains(l_date))
                    continue;
                w.WriteStartElement(CListDate.DATE);
                XMLTool.writeDeleted(w);
                w.WriteString(l_date.ToString());
                w.WriteEndElement();
            }


            w.WriteEndElement();
        }


        #endregion
        public int Count
        {
            get { return m_list.Count; }
        }


        public DateTime LastModif
        {
            get
            {
                if (m_list.Count == 0)
                    return System.DateTime.MinValue;
                sort();
                return m_list[0].date;
            }
        }
        public List<DateTime> Dates
        {
            get
            {
                return (from dt in m_list select dt.date).ToList();
            }
        }

        public class CDateComparer : IComparer<System.DateTime>
        {

            public int Compare(System.DateTime x, System.DateTime y)
            {
                return -1 * System.DateTime.Compare(x, y);
            }
        }

        public void removeLast()
        {
            int count = m_list.Count;
            if (count == 0)
                return;
            m_list.RemoveAt(0);
        }


    }
}





]]></content>
  </file>
  <file path="\PieceDb.Db\piece\CListFile.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Xml;
using pdb.util;
using pdb.obj;

using pdb.db.piece;

namespace pdb.db.obj
{
    /// <summary>
    /// liste des fichiers accédant au même morceau
    /// </summary>
    /// <remarks></remarks>
    public class CListFile : IEnumerable<CFile>, IData
    {


        //  private static CFileComparer c_comparer = new CFileComparer();
        private const string TOKEN_FILES = "files";
        private List<CFile> m_list = new List<CFile>();
        private CFile pertinentFile;
        // private bool? _exists;
        public CListFile(XmlElement a_xml)
        {
            XmlElement l_xml = XMLTool.NodeLookUp(a_xml, TOKEN_FILES);
            if (l_xml == null)
                return;
            bool deleted = false;
            var att = l_xml.Attributes["f"];
            if (att != null)
            {
                deleted = XMLTool.getDeleted(l_xml);
                CFile f = new CFile(att.Value, deleted);
                @add(f);
                return;
            }
            foreach (XmlElement l_xmlFile in l_xml)
            {
                deleted = XMLTool.getDeleted(l_xmlFile);
                CFile l_file = new CFile(l_xmlFile.InnerText, deleted);
                @add(l_file);
            }
        }
        public CListFile()
        {
        }

        public CListFile(CListFile o)
        {
            foreach (CFile f in o)
                @add(f);
        }

        private void check(CFile other)
        {
            if (!other.deleted && !m_list.Contains(other))
                m_list.Add(other);
            else if (other.deleted && m_list.Contains(other))
                m_list.Remove(other);

        }

        public void @add(CFile a_file)
        {
            //if (!a_file.exists()) return; //TODO provisoire
            bool l_bFound = false;
            foreach (CFile l_file in m_list)
            {
                if (a_file.Equals(l_file))
                {
                    l_bFound = true;
                    break;
                }
            }
            if (l_bFound)
                return;
            if (a_file.FileType.typeMusic())
            {
                m_list.Add(a_file);
                pertinentFile = null;
            }
        }
        //   private CFile _pertinent; 
        public CFile getPertinentFile()
        {
            if (pertinentFile != null)
                return pertinentFile;
            //  var list = m_list.FindAll(delegate(CFile file) { return file.exists(); }); 
            bool checkEnd = true;
            var list = new List<CFile>();
            foreach (CFile f in m_list)
            {
                var exist = f.exists();
                if (exist == null)
                    checkEnd = false;
                else if (true == exist)
                    list.Add(f);
            }

            CFile ret = null;
            if (list.Count == 1)
            {
                ret = list[0];
            }
            else
            {

                try
                {
                    list.Sort(new CFileComparer());
                }
                catch (Exception e)
                {
                    Console.WriteLine("impossible de comparer les fichiers");
                    foreach (CFile file in list)
                    {
                        Console.Write(file.File + ";");
                    }
                    Console.WriteLine(e.ToString());
                }

                ret = list.Count == 0 ? null : list[0];
            }

            if (checkEnd)
                pertinentFile = ret;


            return ret;
            //if (m_list.Count == 1)
            //    return m_list[0];


            //foreach (CFile l_file in m_list)
            //{
            //    if (l_file.exists())
            //        return l_file;
            //}
            //return m_list[0];
        }

        private CFile getFirstFile()
        {
            var pertinent = getPertinentFile();
            if (pertinent != null)
                return pertinent;
            //if (_pertinent != null)
            //    return _pertinent; 
            //  var list = m_list.FindAll(delegate(CFile file) { return file.exists(); }); 
            var list = m_list; // m_list.FindAll(file => file.exists());


            if (list.Count == 1)
                return list[0];

            try
            {
                list.Sort(new CFileComparer());
            }
            catch (Exception e)
            {
                Console.WriteLine("impossible de comparer les fichiers");
                foreach (CFile file in list)
                {
                    Console.Write(file.File + ";");
                }
                Console.WriteLine(e.ToString());
            }

            var _pertinent = list.Count == 0 ? null : list[0];
            return _pertinent;
            //if (m_list.Count == 1)
            //    return m_list[0];


            //foreach (CFile l_file in m_list)
            //{
            //    if (l_file.exists())
            //        return l_file;
            //}
            //return m_list[0];
        }

        //public void getSecondaryFiles(List<CFile> list)
        //{
        //    if (m_list.Count <= 1)
        //        return;
        //    var pertinent = getPertinentFile();

        //    foreach (CFile f in m_list)
        //    {
        //        if (f.exists() && f != pertinent)
        //            list.Add(f);
        //    }

        //}

        //public string File
        //{
        //    get
        //    {
        //        CFile l_file = getPertinentFile();
        //        if (l_file == null)
        //        {
        //            if (m_list.Count > 0) return m_list[0].File;
        //            return "";
        //        }
        //        return l_file.File;
        //    }
        //}

        public string PathReduc
        {
            get
            {
                CFile l_file = getFirstFile();
                if (l_file == null)
                    return "";
                return l_file.File;
            }
        }

        public CFile File
        {
            get
            {
                CFile l_file = getFirstFile();
                if (l_file == null)
                    return null;
                return l_file;
            }
        }

        public string Path
        {
            get
            {
                CFile l_file = getFirstFile();
                if (l_file == null)
                    return "";
                return l_file.Path;
            }
        }

        public string getLocation()
        {
            if (pertinentFile != null)
                return pertinentFile.Path;
            if (m_list.Count > 0)
                return m_list[0].getPath();
            return "";
        }
        //public String getUri()
        //{
        //    CFile l_file = getPertinentFile();
        //    if (l_file == null)
        //        return "";
        //    return l_file.getUri();
        //}

        public bool? Exists
        {
            get
            {
                //if (_exists.HasValue)
                //    return _exists.Value;
                if (pertinentFile != null && pertinentFile.exists().HasValue)
                {
                    //  _exists = true;
                    return pertinentFile.exists();
                }

                bool? ret = null;
                bool endCheck = true;
                foreach (CFile f in m_list)
                {
                    var exist = f.exists();
                    if (true == exist)
                    {
                        return true;
                    }
                    else if (false == exist)
                        ret = false;
                    else
                        endCheck = false;
                }

                if (endCheck)
                    return ret;
                else
                    return null;

            }
        }

        public bool ExistsNow()
        {
            if (pertinentFile != null && pertinentFile.exists().HasValue)
            {
                //  _exists = true;
                return pertinentFile.exists().Value;
            }

            foreach (CFile f in m_list)
            {
                var exist = f.exists();
                if (true == exist)
                {
                    return true;
                }
                else if (false == exist)
                {
                }
                else
                {
                    if (FileRegister.ExistNow(f.Path)) ;
                    return true;
                }

            }
            return false;
        }

        public void merge(CListFile a_list)
        {
            CFile aux = getPertinentFile();
            foreach (CFile l_file in a_list)
            {
                check(l_file);
            }


            CFile _new = getPertinentFile();

            if (aux == null)
            {
                if (_new != null)
                    onChange();

            }
            else
            {
                if (!aux.Equals(_new))
                    onChange();
            }

        }

        //private IDataObserver observer;
        //public IDataObserver Observer { set { observer = value; } }
        private void onChange() { }// if (observer != null) observer.RefChange(); }


        /// <summary>
        /// teste s'il existe un fichier en commun entre deux listes
        /// </summary>
        /// <param name="other"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        public bool HasOnePathInCommonWith(CListFile other)
        {
            foreach (CFile l_myFile in m_list)
            {
                foreach (CFile l_outFile in other.m_list)
                {
                    if (l_myFile.Equals(l_outFile))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public bool HasOnePathInCommonWith(String path)
        {

            foreach (CFile l_myFile in m_list)
            {

                if (l_myFile.Path.Equals(path))
                {
                    return true;
                }

            }
            return false;
        }


        public int Count
        {
            get { return m_list.Count; }
        }

        public System.Collections.Generic.IEnumerator<CFile> GetEnumerator()
        {
            return m_list.GetEnumerator();
        }

        public System.Collections.IEnumerator GetEnumerator1()
        {
            return GetEnumerator();
        }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return GetEnumerator1();
        }

        public bool isPodcast
        {
            get
            {
                foreach (CFile l_file in new List<CFile>(m_list))
                {
                    if (l_file.isPodcast)
                        return true;
                }
                return false;
            }
        }


        #region IData Members


        public void write(ITextWriter a_sw)
        {
            //   m_list.Sort(c_comparer)
            XMLTool.openBalise(a_sw, TOKEN_FILES);
            foreach (CFile l_file in this)
            {
                l_file.write(a_sw);
            }
            XMLTool.closeBalise(a_sw, TOKEN_FILES);
        }


        public void write(XmlWriter w)
        {
            m_list.Sort(new CFileComparerName());
            w.WriteStartElement(TOKEN_FILES);
            if (m_list.Count == 1 && m_list[0] != null)
            {
                w.WriteAttributeString("f", m_list[0].File);
            }
            else
            {

                foreach (CFile l_file in this)
                {
                    l_file.write(w);
                }
            }
            w.WriteEndElement();
        }
        public bool HasChange(CListFile lastFull)
        {
            if (m_list.Count != lastFull.m_list.Count)
                return true;
            m_list.Sort(new CFileComparerName());
            lastFull.m_list.Sort(new CFileComparerName());
            int count = m_list.Count;
            for (int i = 0; i < count; i++)
            {
                if (!m_list[i].Equals(lastFull.m_list[i]))
                    return true;
            }
            return false;
        }

        public bool contains(CFile file)
        {
            return m_list.Contains(file);
        }
        public void writeDiff(XmlWriter w, CListFile lastFull)
        {
            if (!HasChange(lastFull))
                return;
            m_list.Sort(new CFileComparerName());
            lastFull.m_list.Sort(new CFileComparerName());

            w.WriteStartElement(TOKEN_FILES);
            foreach (CFile l_file in this)
            {
                if (!lastFull.contains(l_file))
                    l_file.write(w);
            }

            foreach (CFile l_file in lastFull)
            {
                if (!this.contains(l_file))
                    l_file.writeDeleted(w);
            }

            w.WriteEndElement();
        }

        #endregion

        public CFile this[int a_index]
        {
            get
            {
                if (a_index < 0 || a_index >= Count)
                {
                    throw new ApplicationException("bad index:" + a_index + " / " + Count);
                }
                else
                {
                    return m_list[a_index];
                }
            }
        }

        public void Sort()
        {
            try
            {
                m_list.Sort(new CFileComparer());
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
            }
        }
        //private class CFileComparer : IComparer<CFile>
        //{

        //    public int Compare(CFile x, CFile y)
        //    {
        //        return string.Compare(x.File.Trim().ToUpper(), y.File.Trim().ToUpper());
        //    }
        //}

        // private long size = -1;
        public long Size
        {
            get
            {
                var file = getPertinentFile();
                if (file == null)
                    return 0;
                return file.Size;

            }

        }

        //public string DirAndFileName
        //{
        //    get
        //    {
        //        var file = getFirstFile();
        //        if (file == null)
        //            return "";
        //        return file.DirAndFileName;
        //    }
        //}


    }
}


]]></content>
  </file>
  <file path="\PieceDb.Db\piece\CPiece.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Xml;
using pdb.db.piece.data;
using pdb.obj;
using pdb.util;
using pdb.db.piece;
using System.Diagnostics;


namespace pdb.db.obj
{

    /// <summary>
    /// Métadonnées d'un fichier
    /// </summary>
    /// <remarks>On veut pouvoir merger les modifications venant de deux sources
    /// exemeple : un modifie le classement, l'autre l'année
    /// Pour cela, il est envisagé d'enregistrer pour chaque modification effectué par le client
    /// tout simplement la date de cette modification
    /// le merge se baserait ainsi sur la comparaison entre les dates de modification
    /// source 1 date modif d1' pour classement > d1
    /// source 2 date modif d2' pour année > d2
    /// 
    /// On pourrait aussi se baser sur un flag => mettre à jour
    /// ainsi on gagnerait de la place, mais on perdrait la date de derniere mise à jour
    /// et se poserait aussi la question de quand retirer le flaf "mettre à jour"
    /// 
    /// On peut aussi établir un historique
    ///
    ///</remarks>
    /// 

    // public class CPiece : IData, ITrackMetaData, ITrackNativeDates, ITrackPlayListRecorder, ITrackPlayListReport, IDataObserver, ITrackInfoItunes, IItem
    public class CPiece : IData, ITrackMetaData, ITrackInfoItunes, IItem
    {
        private static Logger logTrack = Logger.getLogger("Track");
        //  private static NullTrack NullTrack = new NullTrack();
        private const string TOKEN_PIECE = "piece";


        //  private const string TOKEN_ARTWORK = "artWork";

        private const string TOKEN_ADDED = "added";

        #region "Composants"

        private CPieceReference m_ref;
        private CPieceInfo m_infos;

        ////durée en ms du titre
        //private TimeSpan m_duration = new TimeSpan();
        private DateTime added;
        // private CPieceChecked m_Enabled = new CPieceChecked();


        private MasterPiece masterPiece;


        //private String m_comment = "";
        //private string grouping = ""; 
        // private string artWork = "";
        #endregion

        //private class StringEventArgs : EventArgs
        //{
        //    public StringEventArgs(String value) { this.Value = value; }
        //    readonly public String Value;
        //}


        public DateTime Added { get { return added; } }
        public void setAdded(DateTime dt) { added = dt; }

        private void checkNative()
        {
            //if (native == null)
            //{
            //    StackTrace st = new StackTrace();
            //    logTrack.logNoDate("native null " + this + " " + st.ToString());
            //}
        }
        //   public void makeFirstClass() { if (native == null) return; native.makeFirstClass(); }
        //public bool FirstClass
        //{
        //    get
        //    {
        //        if (native == null) return false;
        //        return native.FirstClass;
        //    }
        //    set { if (native == null) return; native.FirstClass = value; }
        //}
        //public bool HasNoNative { get { return native == null; } }
        //private void OnCommentChange(String value)
        //{
        //    checkNative();
        //    if (native == null)
        //        return;
        //    native.Comment = value;
        //}
        //private void OnGroupingChange(String value, bool prior)
        //{
        //    checkNative();
        //    if (native == null)
        //        return;
        //    native.setGrouping(value, prior);
        //}
        //private void OnNameChange(string value) { if (native == null) return; native.Name = value; }
        //private void OnAlbumChanged(String value) { if (native == null) return; native.Album = value; }
        //private void OnArtistChanged(String value) { if (native == null) return; native.Artist = value; }
        //private void OnUncheck() { if (native == null) return; native.Enabled = false; }



        //private EventHandler<StringEventArgs> commentChanged;
        //private EventHandler<StringEventArgs> groupingChanged;
        //private EventHandler<StringEventArgs> albumChanged;
        //private EventHandler<StringEventArgs> artistChanged;


        private List<IReference> referenceObs = new List<IReference>();
        public void addReferenceObs(IReference obs) { if (!referenceObs.Contains(obs)) referenceObs.Add(obs); }
        public void removeReferenceObs(IReference obs) { referenceObs.Remove(obs); }
        private void OnReferenceChanged() { for (int i = 0; i < referenceObs.Count; i++) { referenceObs[i].referenceChange(this); } }


        #region logs
        private void valueChangedHandler()
        {

            //m_ref.AlbumData.changeLocalValueByRemote += (o, args) => { logChangeByRemote("Album", args); };
            //m_ref.ArtistData.changeLocalValueByRemote += (o, args) => { logChangeByRemote("Artist", args); };
            //m_ref.NameData.changeLocalValueByRemote += (o, args) => { logChangeByRemote("Name", args); };
            //m_infos.YearData.changeLocalValueByRemote += (o, args) => { logChangeByRemote("Year", args); };
            //Classement.changeLocalValueByRemote += (o, args) => { logChangeByRemote("Classement", args); };

            //m_ref.AlbumData.changeLocalValueByNative += (o, args) => { langChangeByNative("Album", args); };
            //m_ref.ArtistData.changeLocalValueByNative += (o, args) => { langChangeByNative("Artist", args); };
            //m_ref.NameData.changeLocalValueByNative += (o, args) => { langChangeByNative("Name", args); };
            //m_infos.YearData.changeLocalValueByNative += (o, args) => { langChangeByNative("Year", args); };
            //Classement.changeLocalValueByNative += (o, args) => { langChangeByNative("Classement", args); };

            //m_ref.AlbumData.change += new EventHandler(Ref_change);
            //m_ref.NameData.change += new EventHandler(Ref_change);
            //m_ref.ArtistData.change += new EventHandler(Ref_change);
            ////m_ref.TrackData.change += new EventHandler(Ref_change);
            //Files.Observer = this;
            //m_ref.Observer = this;
            //m_infos.Observer = this;
            //Classement.Observer = this;
            //Checked.Observer = this;
        }


        private void logChange(String typeChange, String typeData, object Old, object New)
        {
            logTrack.log("{0}:{1} from '{2}' to '{3}' {4}", typeChange, typeData, Old, New, this);
        }
        //private void logChangeByRemote(String typeData, object Old, object New)
        //{
        //    logChange("change by remote", typeData, Old, New);
        //}
        //private void langChangeByNative(String typeData, object Old, object New)
        //{
        //    logChange("change by native", typeData, Old, New);
        //}
        //private void logChangeByRemote(String typeData, CPieceData<String>.PieceDataChangeLocalEventArgs args)
        //{
        //    logChangeByRemote(typeData, args.Old, args.New);
        //}
        //private void logChangeByRemote(String typeData, CPieceData<int>.PieceDataChangeLocalEventArgs args)
        //{
        //    logChangeByRemote(typeData, args.Old, args.New);
        //}
        //private void logChangeByRemote(String typeData, CPieceData<Classement>.PieceDataChangeLocalEventArgs args)
        //{
        //    logChangeByRemote(typeData, args.Old, args.New);
        //}

        //private void langChangeByNative(String typeData, CPieceData<String>.PieceDataChangeLocalEventArgs args)
        //{
        //    langChangeByNative(typeData, args.Old, args.New);
        //}
        //private void langChangeByNative(String typeData, CPieceData<int>.PieceDataChangeLocalEventArgs args)
        //{
        //    langChangeByNative(typeData, args.Old, args.New);
        //}
        //private void langChangeByNative(String typeData, CPieceData<Classement>.PieceDataChangeLocalEventArgs args)
        //{
        //    langChangeByNative(typeData, args.Old, args.New);
        //}

        #endregion


        #region key
        private TrackIdentity key;
        public TrackIdentity Key
        {
            get
            {
                if (key == null)
                    keyGener();
                return key;
            }
        }
        public void keyGener()
        {
            try
            {
                key = new TrackIdentity(this);
            }
            catch
            {
                logTrack.log("pb de clé " + this);
                throw;
            }
        }

        #endregion

        #region constructeurs





        /// <summary>
        /// création d'un morceau vide
        /// </summary>
        /// <remarks></remarks>
        public CPiece()
        {
            masterPiece = new db.MasterPiece();
            //m_dates = new CListDate();
            //m_files = new CListFile();
            m_ref = new CPieceReference();
            m_infos = new CPieceInfo();
            // m_classement = new CPieceClassement(this);
            valueChangedHandler();
        }

        //public CPiece(string location, string baseClassement)
        //    : this()
        //{
        //    m_files.add(new CFile(location));
        //    m_classement = new CPieceClassement(this, baseClassement);
        //    valueChangedHandler();
        //}

        public CPiece(string location)
            : this()
        {
            masterPiece.Files.add(new CFile(location));
            valueChangedHandler();
        }



        public void initClassementIfEmpty(string classement)
        {
            masterPiece.Classement.initClassementIfEmpty(classement);
        }


        public void eraseClassement()
        {
            masterPiece.Classement.eraseClassement();
        }


        // private ITrackInfoItunes native = null;

        public void recordJustReadTrack()
        {
            ListDates.recordJustReadTrack();
        }

        //        public CPiece(ITrackInfoItunes ext)
        //        {
        //            native = ext;
        //            //  ext.registerDependency(this); 

        //            m_classPlayLists = ext.ClassPlayLists;
        //            //m_playList = ext.PLayLists;

        //            //  string className = ext.ClassName; // getClassName(ext); 

        //            m_dates = new CListDate();
        //            ListDates.check(ext.PlayedDate);

        //            m_files = new CListFile();
        //            Files.add(new CFile(ext.Location));
        //            m_ref = new CPieceReference(ext.Artist, ext.Album, ext.Name, ext.TrackNumber);
        //#if VOL
        //            m_infos = new CPieceInfo(ext.Year, ext.Volume);
        //#else
        //            m_infos = new CPieceInfo(ext.Year);
        //#endif
        //            // this.artWork = ext.ArtWork;

        //            m_classement = new CPieceClassement(this, ext.Classement);
        //            //m_comment = ext.Comment;
        //            //grouping = ext.Grouping; 

        //            m_duration = ext.Duration;

        //            bool enabled = ext.Enabled;
        //            if (enabled)
        //                Checked.Enable();
        //            else
        //                Checked.Disable();

        //            //m_ref.AlbumData.changeNativeValue += (o, args) =>  { if (native == null) return; native.Album = args.Value; };
        //            //m_ref.ArtistData.changeNativeValue += (o, args) => { if (native == null) return; native.Artist = args.Value; };
        //            //m_ref.NameData.changeNativeValue += (o, args) => { if (native == null) return; native.Name = args.Value; };
        //            //m_ref.TrackData.changeNativeValue += (o, args) => { if (native == null) return; native.TrackNumber = args.Value; };
        //            //m_infos.YearData.changeNativeValue += (o, args) => { if (native == null) return; native.Year = args.Value; };
        //            //Classement.changeNativeValue += (o, args) => { if (native == null) return; native.Rating = args.Value.Rating; native.ClassName = args.Value.ClassList; };

        //            m_ref.Observer = this;
        //            Classement.Observer = this;
        //            Checked.Observer = this;
        //            //  m_Enabled.checkedChanged += (o, args) => { if (native == null) return; native.Enabled = false; };





        //            valueChangedHandler();


        //        }

        ///// <summary>
        ///// Tri des listes classement et détermination de la liste classement pertinente
        ///// </summary>
        //public void setClassPlayList(ITrackNative track)
        //{
        //    List<CPlayList> classLists = track.ClassPlayLists;
        //    if (classLists.Count > 0)
        //    {
        //        classLists.Sort(new CPlayListComparer());
        //        className = classLists[0].Name;
        //    }
        //}

        /// <summary>
        /// construction à partir de la base maison 
        /// </summary>
        /// <param name="a_xml"></param>
        /// <remarks></remarks>
        public CPiece(XmlElement a_xml)
        {
            var xmlTool = new XMLTool(a_xml);
            m_id = xmlTool.getIntAttValue("id");
            deleted = xmlTool.getDeleted();
            m_ref = new CPieceReference(a_xml);
            m_infos = new CPieceInfo(a_xml);

            parentID = xmlTool.getIntAttValue("parent");
            if (parentID < 0)
            {
                masterPiece = new db.MasterPiece(a_xml);
            }
            else
            {
                masterPiece = db.MasterPiece.NULL;
            }






            //  artWork = xtool.getNodeValue(TOKEN_ARTWORK);
            //Comment = xtool.getNodeValue("classement");
            //_grouping = xtool.getNodeValue("grouping");

            string strAdded = "";
            var attAdded = a_xml.Attributes[TOKEN_ADDED];
            if (attAdded != null)
                strAdded = attAdded.Value;
            else
                strAdded = xmlTool.getNodeValue(TOKEN_ADDED);

            if (!string.IsNullOrEmpty(strAdded))
            {
                try
                {
                    added = Convert.ToDateTime(strAdded);
                }
                catch (Exception ex)
                {
                    log(string.Format("impossible de parser {0} {1} {2}", strAdded, this, ex));
                }
            }


            //m_ref.Observer = this;
            //Classement.Observer = this;
            //Checked.Observer = this;
            //valueChangedHandler();

        }


        ///// <summary>
        ///// construction à partir de la base propriétaire
        ///// </summary>
        ///// <param name="a_ref"></param>
        ///// <param name="a_file"></param>
        ///// <param name="a_info"></param>
        ///// <param name="a_rating"></param>
        ///// <param name="a_date"></param>
        ///// <remarks></remarks>
        //public CPiece(CPieceReference a_ref, string a_file, CPieceInfo a_info, int a_rating, System.DateTime a_date, TimeSpan a_duration, bool a_bEnabled)
        //{

        //    m_dates = new CListDate();
        //    ListDates.check(a_date);

        //    m_files = new CListFile();
        //    Files.@add(new CFile(a_file));

        //    m_ref = a_ref;
        //    m_infos = a_info;

        //    m_classement = new CPieceClassement(a_rating);
        //    m_duration = a_duration;
        //    if (a_bEnabled)
        //    {
        //        m_Enabled.True();
        //    }
        //    else
        //    {
        //        m_Enabled.False();
        //    }
        //    valueChangedHandler();

        //}

        #endregion


        /// <summary>
        /// vérifie si les deux pieces n'en sont qu'une
        /// </summary>
        /// <param name="other"></param>
        /// <returns>True si doublon</returns>
        /// <remarks></remarks>
        //public bool checkIdentity(ITrackMetaData other)
        //{
        //    return (Files.HasOnePathInCommonWith(other.Location) || m_ref.DefinedEquals(other.Artist, other.Album, other.Name, other.TrackNumber));
        //}


        /// <summary>
        /// vérifie si les deux pieces n'en sont qu'une
        /// </summary>
        /// <param name="other"></param>
        /// <returns>True si doublon</returns>
        /// <remarks></remarks>
        //public bool checkIdentity(CPiece other)
        //{
        //    return (Files.HasOnePathInCommonWith(other.m_files) || m_ref.DefinedEquals(other.m_ref));
        //}

        public bool checkFile(CPiece other)
        {
            return Files.HasOnePathInCommonWith(other.Files);
        }



        private void raiseChangeRefEvent()
        {
            if (isRefchanged)
            {
                isRefchanged = false;
                OnReferenceChanged();
            }
        }

        /// <summary>
        /// rapatrie les info d'une piece vers l'autre
        /// </summary>
        /// <param name="other"></param>
        /// <remarks>cas d'égalité enre les deux : doublons de la même liste</remarks>

        public void merge(CPiece other)
        {

            if (!m_ref.AlbumData.choose(other.m_ref.AlbumData))
            {
                log("merge album between " + this.PathAndRef + " and " + other.PathAndRef);
                m_ref.AlbumData.mergeManual(other.m_ref.AlbumData);
            }

            if (!m_ref.ArtistData.choose(other.m_ref.ArtistData))
            {
                log("merge artist between " + this.PathAndRef + " and " + other.PathAndRef);
                m_ref.ArtistData.mergeManual(other.m_ref.ArtistData);
            }
            if (!m_ref.NameData.choose(other.m_ref.NameData))
            {
                log("merge name between " + this.PathAndRef + " and " + other.PathAndRef);
                m_ref.NameData.mergeManual(other.m_ref.NameData);
            }
            if (!m_ref.TrackData.choose(other.m_ref.TrackData))
            {
                log("merge trackNumber between " + this.PathAndRef + " and " + other.PathAndRef);
                m_ref.TrackData.mergeManual(other.m_ref.TrackData);
            }




            if (!m_infos.YearData.choose(other.m_infos.YearData))
            {
                log("merge infos between " + this.ToString() + "[" + this.Year + "]" + " and " + other.ToString() + "[" + other.Year + "]");
                m_infos.YearData.mergeManual(other.m_infos.YearData);
            }

            if (!Classement.choose(other.Classement))
            {
                log("merge classement between " + this.ToString() + "[" + this.ClassList + ":" + this.Rating + "]" + " and " + other.ToString() + "[" + other.ClassList + ":" + other.Rating + "]");
                Classement.mergeManual(other.Classement);
            }

            masterPiece.addData(other.masterPiece);
            raiseChangeRefEvent();
        }


        ///// <summary>
        ///// Simple ajout de données venant du doublon
        ///// </summary>
        ///// <param name="other"></param>
        ///// <remarks>Utilisé par legacy pour génération d'une liste propre à partir de la liste native
        ///// Les fichiers auront préalablement été triés par classement</remarks>
        //public void mergeDataFrom(CPiece other)
        //{
        //    try
        //    {
        //        m_ref.mergeDataFrom(other.m_ref);
        //        m_infos.YearData.mergeAll(other.m_infos.YearData, mergePriority.none);
        //        Classement.mergeAll(other.Classement, mergePriority.none);

        //        addData(other);
        //        raiseChangeRefEvent();
        //    }
        //    catch (Exception e)
        //    {
        //        log("unable to merge " + this.ToString() + @"\r\n" + other.ToString() + @"\r\n" + e.ToString());
        //    }
        //}


        // <summary>
        // addition sans collision des dates et fichiers
        // </summary>

        // <remarks></remarks>






        public void consolid(CPiece remote, mergePriority a_priority)
        {

            try
            {
                m_ref.consolid(remote.m_ref, a_priority);
                // Classement.Consolid(remote.Classement, a_priority);
                m_infos.consolid(remote.m_infos, a_priority);

                if (remote.added > DateTime.MinValue && remote.added < DateTime.MaxValue && remote.added != added)
                    added = remote.added;

                masterPiece.consolid(remote.masterPiece, a_priority);

                //  Checked.Consolid(remote.Checked, a_priority);

                //if (m_duration.TotalMilliseconds < 2)
                //    this.m_duration = remote.m_duration;
                //else if (remote.m_duration.TotalMilliseconds < 2)
                //    remote.m_duration = this.m_duration;
                //else if (a_priority == mergePriority.right)
                //    m_duration = remote.m_duration;

                // addData(remote);
                raiseChangeRefEvent();
            }
            catch (Exception e)
            {
                log("unable to merge " + this.ToString() + "\r\n" + remote.ToString() + "\r\n" + e.ToString());
            }
        }


        public mergePriority checklegacyModifString(CPieceData<String> data, String native)
        {

            mergePriority l_consistencyComp = data.Value.compareByConsistency(native);
            if (l_consistencyComp != mergePriority.none)
                return l_consistencyComp;

            if (data.Imported) return mergePriority.right;
            return mergePriority.left;
        }


        ///// <summary>
        ///// piece de la liste native consolidée ou mise à jour 
        ///// suivant le cas par le fichier maison
        ///// </summary>
        ///// <param name="native"></param>
        ///// <remarks></remarks>
        //public void legacyConsolid(CPiece l_native)
        //{



        //    //TODO éviter de créer un objet juste pour la comparaison
        //    //en fait très complexe de casser le modèle. A la place, on abonne le track natif aux modifications éventuelles de la DB



        //    //this.grouping = l_native.Grouping;
        //    //this.m_comment = l_native.Comment; 







        //    l_native.m_ref.legacyConsolid(this.m_ref);
        //    l_native.m_infos.legacyConsolid(this.m_infos);

        //    l_native.setClassPlayList(this);
        //    l_native.Classement.LegacyConsolid(this.Classement);
        //    l_native.Checked.LegacyConsolid(this.Checked);

        //    //   native.synchroLegacy(this);  //plus besoin de synchro dans l'autre sens, on n'utilise pas l'objet créé ==> en fait si : on modifie directement le track

        //    addData(l_native);

        //    this.m_playList = l_native.PLayLists;
        //    this.m_classPlayLists = l_native.ClassPlayLists;
        //    this.m_duration = l_native.Duration;
        //    raiseChangeRefEvent();

        //    //On court-circuite la liste intermédiaire pour toujours pointer directement vers le trackInfoItunes
        //    this.native = l_native.native;

        //    checkNative();
        //}

        //        /// <summary>
        //        /// Synchro directe entre la Db et le track Itunes (mode daemon)
        //        /// </summary>
        //        public void SynchroNative()
        //        {
        //            checkNative();
        //            if (native == null)
        //                return;

        //            m_ref.SynchroNative(native);
        //#if VOL
        //            m_infos.SynchroNative(native.Year, native.Volume);
        //#else
        //            m_infos.SynchroNative(native.Year);
        //#endif
        //            var newClassList = getClassName(native);
        //            Classement newCl = pdb.obj.Classement.create(native.Classement); //  new Classement(newClassList, native.Rating);
        //            Classement.SynchroNative(newCl);
        //            Checked.SynchroNative(native.Enabled);

        //            this.ListDates.merge(native.PlayedDate);



        //            //  this.m_playList = native.PLayLists;
        //            this.m_classPlayLists = native.ClassPlayLists;
        //            if (native.Duration.TotalMilliseconds > 1)
        //                this.m_duration = native.Duration;
        //            raiseChangeRefEvent();
        //        }

        //public void removeVersions()
        //{
        //    m_ref.removeVersions();
        //    Classement.removeVersions();
        //}



        //public void Menage()
        //{
        //    //  misc.log("ménage {0}", this); 
        //    Classement.Menage(this);
        //}




        //public void synchroLegacy(CPiece native)
        //{
        //    this.m_classPlayLists = native.m_classPlayLists;

        //    this.ID = native.ID;
        //}

        //private List<CPlayList> m_classPlayLists = new List<CPlayList>();
        //private List<CPlayList> m_playList = new List<CPlayList>();
        //public void AddPlayList(CPlayList a_playList)
        //{
        //    if (a_playList.isClassSubList())
        //    {
        //        m_classPlayLists.Add(a_playList);
        //    }
        //    m_playList.Add(a_playList);
        //}
        //public void removePlayList(CPlayList list)
        //{
        //    if (list.isClassSubList())
        //        m_classPlayLists.Remove(list);
        //    m_playList.Remove(list);
        //}

        //public bool belongsTo(string a_list)
        //{
        //    foreach (CPlayList l_pl in m_playList)
        //    {
        //        if (l_pl.isSubList(a_list))
        //            return true;
        //    }
        //    return false;
        //}

        ////définit la liste qui le classe
        //public void setClassPlayList()
        //{
        //    int count =  m_classPlayLists.Count; 
        //    if (count > 0)
        //    {
        //        if (count > 1)
        //        {
        //            m_classPlayLists.Sort(new CPlayListComparer());
        //        }
        //        Classement.ClassList = m_classPlayLists[0].Name;
        //    }
        //}


        //private void setClassPlayList(ITrackNative pieceDb)
        //{
        //    string dbClasslist = pieceDb.Classement.ClassList;
        //    int count = m_classPlayLists.Count;
        //    if (count > 0)
        //    {
        //        string className = m_classPlayLists[0].Name;
        //        if (count > 1)
        //        {
        //            m_classPlayLists.Sort(new CPlayListComparer());
        //            foreach (var list in m_classPlayLists)
        //            {
        //                className = list.Name;
        //                if (className == dbClasslist)
        //                    continue;
        //                break;
        //            }
        //        }

        //        if (!className.Equals(Classement.Value.ClassList) && className.Equals(Classement.LastValue.ClassList))
        //        {
        //            misc.log("Classement:setClassPlayList {0} / {1} interdiction de revenir en arrière {2}", dbClasslist, Classement.LastValue.ClassList, this);
        //            return;
        //        }
        //        if (Classement.Value.ClassList != className)
        //        {
        //            throw new NotImplementedException("gloups"); 
        //        }


        //    }
        //}

        //public string getClassName(ITrackNative native)
        //{
        //    string dbClasslist = this.ClassName;
        //    var firstStep = getClassName_(native);
        //    if (!firstStep.Equals(Classement.Value.ClassList) && firstStep.Equals(Classement.LastValue.ClassList))
        //    {
        //        misc.log("Classement:getClassName {0} / {1} interdiction de revenir en arrière {2}", dbClasslist, Classement.LastValue.ClassList, this);
        //        return dbClasslist;
        //    }
        //    else
        //        return firstStep;
        //}

        //public string getClassName_(ITrackNative native)
        //{
        //    string dbClasslist = this.ClassName;
        //    string className = dbClasslist;
        //    int count = native.ClassPlayLists.Count;
        //    if (count > 0)
        //    {
        //        className = native.ClassPlayLists[0].Name;
        //        if (count > 1)
        //        {
        //            native.ClassPlayLists.Sort(new CPlayListComparer());
        //            foreach (var list in native.ClassPlayLists)
        //            {
        //                className = list.Name;
        //                if (className.Equals(dbClasslist))
        //                    continue;
        //                break;
        //            }
        //        }
        //    }
        //    return className;
        //}

        ////utilisé par le player maison
        //public void setClassPlayList(String name)
        //{
        //    Classement.ClassList = name;
        //    // TODO Gérer l'absence de classList
        //}

        //private CPlayList ClassPlayList
        //{
        //    get
        //    {
        //        if (m_classPlayLists.Count > 0)
        //            return m_classPlayLists[0];
        //        return null;
        //    }
        //}

        //public List<CPlayList> PLayLists { get { return m_playList; } }

        //public String ClassName { get { return Classement.Value.ClassList; } set { } }

        //public List<CPlayList> ClassPlayLists
        //{
        //    get
        //    {
        //        return m_classPlayLists;
        //    }
        //}



        /// <summary>
        /// 
        /// </summary>
        /// <param name="a_sw"></param>
        /// <remarks></remarks>
        /// 
        #region IData Members
        //public void write(ITextWriter a_sw)
        //{
        //    XMLTool.openBalise(a_sw, TOKEN_PIECE);

        //    m_ref.write(a_sw);
        //    m_infos.write(a_sw);

        //    Classement.write(a_sw);

        //    Files.write(a_sw);
        //    ListDates.write(a_sw);

        //    if (!Checked.Enabled)
        //        XMLTool.writeValue(a_sw, TOKEN_DISABLED, true.ToString());
        //    //if (artWork.NotNullOrEmpty())
        //    //    XMLTool.writeValue(a_sw, TOKEN_ARTWORK, artWork);
        //    if (m_duration.TotalMilliseconds > 1)
        //        XMLTool.writeValue(a_sw, TOKEN_DURATION, (int)m_duration.TotalMilliseconds);
        //    if (added > DateTime.MinValue)
        //        XMLTool.writeValue(a_sw, TOKEN_ADDED, added.ToString());

        //    XMLTool.closeBalise(a_sw, TOKEN_PIECE);
        //}




        public void write(XmlWriter w)
        {
            try
            {
                w.WriteStartElement(TOKEN_PIECE);
                if (PieceId > 0)
                    w.WriteAttributeString("id", PieceId.ToString());
                if (parent != null)
                    w.WriteAttributeString("parent", parent.PieceId.ToString());
                if (added > DateTime.MinValue)
                    w.WriteAttributeString(TOKEN_ADDED, added.ToString());

                if (Duration.TotalMilliseconds > 1)
                    w.WriteAttributeString(MasterPiece.TOKEN_DURATION, ((int)Duration.TotalMilliseconds).ToString());


                m_ref.write(w);
                m_infos.write(w);

                if (parent == null)
                {
                    masterPiece.write(w);
                }



                //if (artWork.NotNullOrEmpty())
                //    w.WriteElementString(TOKEN_ARTWORK, artWork);



                w.WriteEndElement();
            }
            catch (Exception ex)
            {
                misc.log("immpossible de sérialiser {0} {1}", this, ex);
                throw;
            }
        }


        public void writeDeleted(XmlWriter w)
        {
            w.WriteStartElement(TOKEN_PIECE);
            if (PieceId > 0)
                w.WriteAttributeString("id", PieceId.ToString());
            XMLTool.writeDeleted(w);

            w.WriteEndElement();

        }

        public void writeDiff(XmlWriter w, CPiece lastFull)
        {
            if (lastFull == null)
            {
                write(w);
                return;
            }

            if (!HasChange(lastFull))
                return;

            w.WriteStartElement(TOKEN_PIECE);
            if (PieceId > 0)
                w.WriteAttributeString("id", PieceId.ToString());
            if (parent != null)
                w.WriteAttributeString("parent", parent.PieceId.ToString());
            if (added != lastFull.added)
                w.WriteAttributeString("added", added.ToString());

            m_ref.writeDiff(w, lastFull.m_ref);
            m_infos.writeDiff(w, lastFull.m_infos);

            if (parent == null)
            {
                masterPiece.writeDiff(w, lastFull.masterPiece);
            }






            w.WriteEndElement();
        }

        public bool HasChange(CPiece lastFull)
        {
            if (lastFull == null)
            {
                return true;
            }
            if (PieceParentId != lastFull.PieceParentId)
                return true;

            if (m_ref.HasChanged(lastFull.m_ref))
                return true;
            if (m_infos.HasChange(lastFull.m_infos))
                return true;

            if (parent == null)
            {
                if (masterPiece.HasChange(lastFull.masterPiece))
                    return true;
            }

            if (Checked.Enabled != lastFull.Checked.Enabled)
                return true;

            if (added != lastFull.Added)
                return true;

            //if (m_duration.TotalMilliseconds > 1 && (int)lastFull.m_duration.TotalMilliseconds != (int)m_duration.TotalMilliseconds)
            //    return true;

            return false;
        }

        #endregion

        public void setClassement(string strClassement)
        {
            var cl = pdb.obj.Classement.create(strClassement);
            if (cl == null)
                throw new ApplicationException("input classement invalide " + strClassement);
            if (cl.Equals(Classement.Value))
                return;
            Classement.Value = cl;

        }




        public CListFile Files
        {

            get
            {
                if (masterPiece == null)
                {
                }
                return masterPiece.Files;
            }
        }


        public IList<DateTime> Dates
        {
            get { return ListDates.Dates; }
        }

        public DateTime PlayedDate
        {
            get { return ListDates.LastModif; }
        }

        public string ClassList
        {
            get { return Classement.Value.ClassList; }
        }

        public int Rating
        {
            get { return Classement.Rating * 20; }
            set
            {
                if (Classement.Rating * 20 != value)
                {
                    throw new NotImplementedException();
                }
            }
        }

        public int RatingCmp
        {
            get
            {
                if (Rating < 0)
                    return 0;
                return Rating;
            }
        }
        public CPieceReference Reference
        {
            get { return m_ref; }
        }
        public string Name
        {
            get { return m_ref.Name; }
            set { m_ref.Name = value; }
        }
        public string Album
        {
            get { return m_ref.Album; }
            set
            {
                if (!m_ref.Album.Equals(value))
                {
                    m_ref.Album = value;
                    //  OnAlbumChanged(value);
                }
            }
        }
        public string Artist
        {
            get { return m_ref.Artist; }
            set
            {
                if (!m_ref.Artist.Equals(value))
                {
                    m_ref.Artist = value;
                    //OnArtistChanged(value);
                }
            }
        }
        public int TrackNumber { get { return m_ref.TrackNumber; } set { m_ref.TrackNumber = value; } }
        public int DurationInSec
        {
            get { return Convert.ToInt32(Duration.TotalSeconds); }
        }
        //public TimeSpan Duration
        //{
        //    get { return m_duration; }
        //    set
        //    {
        //        if (value.TotalMilliseconds > 1)
        //            m_duration = value;
        //    }
        //}
        public int Year
        {
            get { return m_infos.Year; }
            set { m_infos.Year = value; }
        }
#if VOL
        public int Volume { get { return m_infos.Volume; } set { m_infos.Volume = value; } }
#endif
        public bool Enabled
        {
            get { return Checked.Enabled; }
            set
            {
                if (value)
                    Checked.Enable();
                else
                    Checked.Disable();
            }
        }
        public CPieceInfo Infos
        {
            get { return m_infos; }
        }

        // public string ArtWork { get { return artWork; } set { artWork = value; } }


        /// <summary>
        /// ID interne
        /// </summary>
        /// <remarks></remarks>
        private int m_id = -1;
        private int parentID = -1;
        public int PieceId
        {
            get { return m_id; }
        }

        public int PieceParentId
        {
            get { return parentID; }
            set
            {
                if (value < 0)
                { }
                else
                    parentID = value;
            }
        }

        public int MasterId
        {
            get
            {
                if (parentID < 0)
                {
                    if (parent != null)
                    {
                        return parent.PieceId; 
                    }
                    return m_id;
                }
                if (parent == null)
                {

                }
                return parentID;
            }
        }

        public CPiece Master
        {
            get
            {
                if (parent == null)
                {
                    if (parentID > 0)
                    { }
                    return this;
                }
                return parent;
            }
        }


        public void setId(int value)
        {
            if (m_id == value)
                return;
            if (value > 0)
            {
                key = null;
                if (m_id > 0)
                    misc.log("id from {0} to {1} {2}", m_id, value, this);
                m_id = value;
            }
        }

        private CPieceClassement Classement { get { return masterPiece.Classement; } }
        //Classement ITrackNative.Classement { get { return Classement.Value; } }
        public TimeSpan Duration
        {
            get { return masterPiece.Duration; }
            set { masterPiece.Duration = value; }
        }
        private CListDate ListDates { get { return masterPiece.ListDates; } }
        private CPieceChecked Checked { get { return masterPiece.Checked; } }
        //  private CListFile Files { get { if (parent == null) return m_files; return parent.m_files; } }
        //public Classement getClassement() { return Classement.Value; }





        //Sub synchroClassFrom(ByVal a_list As CListPiece)
        //    Dim l_piece As CPiece = a_list.getPiece(Me)
        //    m_classement = l_piece.m_classement
        //End Sub

        public override string ToString()
        {
            var parent = " ";
            if (PieceParentId >= 0)
                parent = string.Format(" ({0}) ", PieceParentId);
            return string.Format("{0} {1}{2}{3} {4} {5}", Classement.Value, PieceId, parent, Name, Album, getLocation());
            //String location = Location;
            //return location == "" ? Files.File : location;
        }
        //public string File
        //{
        //    get { return Files.File; }
        //}
        public string PathAndRef
        {
            get { return getLocation() + " " + m_ref.ToString(); }
        }
        //private string _location;
        public string Location
        {

            get
            {
                return Files.Path;
                //if (_location == null)
                //_location =  Files.Path;
                //return _location; 


            }
        }
        public string getLocation()
        {
            return Files.getLocation();
        }

        public bool? Exists { get { return Files.Exists; } }
        public bool ExistsNow { get { return Files.ExistsNow(); } }

        //public bool classListToUpdate()
        //{
        //    string l_strList = "";
        //    if (ClassPlayList != null)
        //        l_strList = ClassPlayList.Name;

        //    //if (Classement.Imported)
        //    //{
        //    if (l_strList != ClassList)
        //    {
        //        return true;
        //    }
        //    //}
        //    return false;
        //}

        //private string _comment;
        //public string Comment
        //{
        //    get
        //    {
        //        if (parent != null)
        //            return "";
        //        if (_comment == null)
        //        {
        //            if (native != null)
        //                _comment = native.Comment;
        //        }
        //        return _comment;

        //        //string l_pref = "";
        //        //string l_str = "";

        //        //string l_strList = "";
        //        //if (ClassPlayList != null)
        //        //    l_strList = ClassPlayList.Name;

        //        //if (Classement.Imported)
        //        //{
        //        //    if (l_strList != ClassList)
        //        //    {
        //        //        l_pref = "m (" + ClassList + ") ";
        //        //    }
        //        //}
        //        //int l_rank = m_rank.Twice;
        //        //if (l_rank > 0)
        //        //{
        //        //    if (l_rank < 1000)
        //        //    {
        //        //        if (CTuning.Total > 1000)
        //        //        {
        //        //            l_str += "0";
        //        //        }
        //        //        if (l_rank < 100)
        //        //        {
        //        //            l_str += "0";
        //        //            if (l_rank < 10)
        //        //            {
        //        //                l_str += "0";
        //        //            }
        //        //        }
        //        //    }

        //        //    double l_tx = Convert.ToInt32(100 * CTuning.RapportNorm(m_rank.Goodness, CConf.Sort.Quality));
        //        //    double l_tx2 = Convert.ToInt32(100 * CTuning.RapportNorm(m_rank.Lenght, CConf.Sort.Length));
        //        //    //CInt(100 * CDbl(1 + CTuning.Total - m_rank.Lenght) / CTuning.Total)
        //        //    //getTx(m_rank.Lenght)
        //        //    l_str += l_rank.ToString() + "  " + l_tx.ToString() + " " + l_tx2.ToString() + "  " + l_strList + "." + (RatingCmp / 20).ToString();
        //        //}

        //        //return l_pref + l_str + getClassementEvol();

        //    }
        //    set
        //    {
        //        if (parent != null)
        //            return;
        //        if (value != _comment)
        //        {
        //            _comment = value;
        //            //if (value != Comment)
        //            //{
        //            // m_comment = value;
        //            OnCommentChange(value);
        //        }
        //        // }
        //    }
        //}
        //private string _grouping;
        //public string Grouping
        //{
        //    get
        //    {
        //        if (_grouping == null)
        //        {
        //            if (native != null)

        //                _grouping = native.Grouping;
        //        }
        //        return _grouping;
        //    }
        //    //set
        //    //{
        //    //    //if (value != Grouping)
        //    //    //{
        //    //    //  grouping = value;
        //    //    OnGroupingChange(value);
        //    //    //}
        //    //}
        //}

        //public void setGrouping(string value, bool prior)
        //{
        //    if (value != _grouping)
        //    {
        //        _grouping = value;
        //        OnGroupingChange(value, prior);
        //    }
        //}

        //private static double getTx(int rank)
        //{
        //    if (rank <= 0)
        //        return 0;
        //    return (Math.Log(Convert.ToDouble(CTuning.Total) / Convert.ToDouble(rank)) / Math.Log(2));
        //}

        //public int QRank
        //{
        //    get { return m_rank.Goodness; }
        //    set { m_rank.Goodness = value; }
        //}

        //public int LRank
        //{
        //    get { return m_rank.Lenght; }
        //    set { m_rank.Lenght = value; }
        //}

        //public int QLRank
        //{
        //    get { return m_rank.Twice; }
        //    set { m_rank.Twice = value; }
        //}




        /// <summary>
        /// la classList est-elle numérique?
        /// </summary>
        public bool isClassListNumeric
        {
            get
            {
                return Classement.isClassListNumeric;
            }
        }

        //  public String ClassNameAndRating { get { return Classement.ClassNameAndRating; } }



        #region "calcul liste dynamiques"
        // Private m_bCanPlay As Boolean = True
        public delegate bool canPlayDel(int a_base);
        //public bool canPlay(int a_base)
        //{
        //    if (m_rank.Goodness < 1)
        //        return false;

        //    if (a_base <= 0)
        //        return true;
        //    DateTime now = DateTime.Now;
        //    bool l_bRet = ListDates.canPlay(now, Delta, a_base);
        //    if (!l_bRet)
        //    {
        //        Console.WriteLine(" " + Comment + " " + Location);
        //    }

        //    return l_bRet;
        //}

        //// private CListDate m_datesModifClassement = null;
        //private CListDate DatesClassement_
        //{
        //    get
        //    {
        //        //if (m_datesModifClassement == null)
        //        //    m_datesModifClassement = Classement.Dates;
        //        return Classement.Dates;
        //    }
        //}

        //public bool mustPlayToPreciseClassement(DateTime now, int a_base)
        //{
        //    if (m_rank.Goodness < 1)
        //        return false;

        //    bool bRet = !DatesClassement.canPlay(now, Delta, a_base);
        //    bool bLastModif = DatesClassement.LastModif > DatesPlayed.LastModif;


        //    if (CConf.CheckModifStrict)
        //        // on ne retient que s'i n'a pas été lu depuis la dernière modif.
        //        // encore en cours : j'écoute puis je modifie
        //        bRet = bRet && bLastModif;

        //    if (a_base == 0)
        //        return bLastModif;
        //    return bRet;
        //}



        public static double LogBase = 2.0;
        public static double Scale = 0.1;
        //private TimeSpan Delta
        //{

        //    get
        //    {
        //        if (m_rank.Goodness < 0)
        //            return TimeSpan.MaxValue;
        //        long l_ticks = Convert.ToInt64(new TimeSpan(1, 0, 0, 0).Ticks * Scale);

        //        double r = CPieceInListComparer.Calc(this, CConf.Select);
        //        //     Rapport(m_rank.Goodness, CConf.Sort.Quality)
        //        if (r == -1)
        //            return TimeSpan.MaxValue;

        //        long l_nt = long.MaxValue;
        //        try
        //        {
        //            l_nt = Convert.ToInt64(l_ticks / r);
        //        }
        //        catch (Exception ex)
        //        {
        //        }

        //        return new TimeSpan(l_nt);
        //    }
        //}



        //Sub reinitCanPlay()
        //    m_bCanPlay = True
        //End Sub

        #endregion

        #region "COM"

        //public void checkComRating(ITrackMetaData a_track)
        //{
        //    try
        //    {
        //        if (Rating < 0)
        //            return;
        //        //if (!Classement.Imported)
        //        //    return;

        //        int l_trackRating = a_track.Rating;
        //        if (l_trackRating != Rating)
        //        {
        //            log("change rating from " + l_trackRating + " to " + Rating + " " + Location);
        //            a_track.Rating = Rating;
        //        }
        //    }
        //    catch (Exception e)
        //    {
        //        misc.log("unable to change Rating {0} for {1}", Rating, this);
        //    }

        //}


        //public void checkComInfo(ITrackMetaData a_track)
        //{
        //    try
        //    {
        //        //if (!m_infos.YearData.Imported)
        //        //    return;
        //        if (Year <= 0) return;
        //        if (a_track.Year != Year)
        //        {
        //            log("change year from " + a_track.Year + " to " + Year + " " + Location);
        //            a_track.Year = Year;
        //        }
        //    }
        //    catch (Exception e)
        //    {
        //        misc.log("unable to change Year {0} for {1}", Year, this);
        //    }

        //}

        //public void checkComRef(ITrackMetaData a_track)
        //{

        //    if (m_ref == null)
        //        return;


        //    string l_trackArtist = a_track.Artist.TrimSafe();
        //    string l_trackAlbum = a_track.Album.TrimSafe();
        //    string l_trackName = a_track.Name.TrimSafe();
        //    int l_trackNumber = a_track.TrackNumber;

        //    if (l_trackArtist != m_ref.Artist)// && m_ref.ArtistData.Imported)
        //    {
        //        log("change Artist from " + l_trackArtist + " to " + m_ref.Artist + " " + Location);
        //        try { a_track.Artist = m_ref.Artist.TrimSafe(); }
        //        catch { misc.log("unable to change Artist {0} for {1}", Artist, this); }
        //    }
        //    if (l_trackAlbum != m_ref.Album) // && m_ref.AlbumData.Imported)
        //    {
        //        log("change Album from " + l_trackAlbum + " to " + m_ref.Album + " " + Location);
        //        try { a_track.Album = m_ref.Album; }
        //        catch { misc.log("unable to change Album {0} for {1}", Album, this); }
        //    }
        //    if (l_trackName != m_ref.Name) // && m_ref.NameData.Imported)
        //    {
        //        log("change Name from " + l_trackName + " to " + m_ref.Name + " " + Location);
        //        try
        //        {
        //            a_track.Name = m_ref.Name.TrimSafe();
        //        }
        //        catch { misc.log("unable to change Name {0} for {1}", Name, this); }
        //    }
        //    if (l_trackNumber != m_ref.TrackNumber && TrackNumber >= 0)//&& m_ref.TrackData.Imported)
        //    {
        //        log("change Track from " + l_trackNumber + " to " + m_ref.TrackNumber + " " + Location);
        //        try { a_track.TrackNumber = TrackNumber; }
        //        catch { misc.log("unable to change TrackNumber {0} for {1}", TrackNumber, this); }
        //    }


        //}


        //public void checkComComment(ITrackMetaData a_track)
        //{
        //    try
        //    {

        //        string l_pieceComment = Comment.Trim();
        //        String l_trackComment = a_track.Comment;
        //        if (l_trackComment == null) l_trackComment = "";
        //        l_trackComment = l_trackComment.Trim();
        //        if (l_trackComment != l_pieceComment)
        //        {
        //            misc.logNoDate("write comment from " + a_track.Comment + " to " + l_pieceComment + " " + Location);
        //            // If l_pieceComment.Trim = "" Then Throw New ApplicationException(Me.ToString() & " set comment to null")
        //            a_track.Comment = l_pieceComment;
        //        }

        //    }
        //    catch (Exception e)
        //    {
        //        misc.log("unable to change Comments {0} for {1}", Comment, this);
        //    }
        //}

        //public void checkComEnabled(ITrackMetaData a_track)
        //{
        //    if (m_Enabled.isFalse && a_track.Enabled)
        //    {
        //        misc.log("disable {0}", this);
        //        a_track.Enabled = false;
        //    }
        //}

        //public void checkComDate(ITrackInfo a_track)
        //{
        //    //Dim l_date As String = a_track.EQ

        //}
        #endregion


        public bool isPodcast
        {
            get { return Files.isPodcast; }
        }
        private void log(String txt)
        {
            logTrack.log(txt);
        }



        //List<DateTime> ITrackPlayedDates.Dates
        //{
        //    get { return new List<DateTime>(ListDates); }
        //}

        //public List<DateTime> DatesClassement
        //{
        //    get { return new List<DateTime>(DatesClassement_.Dates); }
        //}

        //public DateTime LastModifClass { get { return m_classement.LastModif; } }

        public string ClassEvol
        {
            get { return masterPiece.ClassEvol; }
        }





        //public void changeNativeValueAlbum(string value)
        //{
        //    if (native == null)
        //        return;
        //    native.Album = value;
        //}

        //public void changeNativeValueArtist(string value)
        //{
        //    if (native == null) return; native.Artist = value;
        //}

        //public void changeNativeValueName(string value)
        //{
        //    if (native == null) return; native.Name = value;
        //}

        //public void changeNativeValueTrack(int value)
        //{
        //    if (native == null) return; native.TrackNumber = value;
        //}

        //public void changeNativeValueYear(int value)
        //{
        //    if (native == null) return; native.Year = value;
        //}

        //public void changeNativeValueClassement(Classement value)
        //{
        //    if (native == null)
        //        return;
        //    throw new NotImplementedException();

        //    //  native.Rating = value.Rating; native.Classement.ClassList = value.ClassList;
        //}
#if VOL
        public void changeNativeValueVolume(int value)
        {
            if (native == null) return;
            native.Volume = value;
        }
#endif

        public void changeByRemote(string type, object Old, object New)
        {
            logChange("change by remote", type, Old, New);
        }

        public void changeByNative(string type, object Old, object New)
        {
            logChange("change by native", type, Old, New);
        }

        private bool isRefchanged;
        public void RefChange()
        {
            isRefchanged = true;
        }

        //public void unCheck()
        //{
        //    if (native == null) return; native.Enabled = false;
        //}

        public void changeLocalValueByRemoteAlbum(string Old, string New)
        {
            throw new NotImplementedException();
        }

        public void changeLocalValueByRemoteArtist(string Old, string New)
        {
            throw new NotImplementedException();
        }

        public void changeLocalValueByRemoteName(string Old, string New)
        {
            throw new NotImplementedException();
        }

        public void changeLocalValueByRemoteTrack(int Old, int New)
        {
            throw new NotImplementedException();
        }

        public void changeLocalValueByRemoteYear(int Old, int New)
        {
            throw new NotImplementedException();
        }

        public void changeLocalValueByRemoteClassement(Classement Okd, Classement New)
        {
            throw new NotImplementedException();
        }

        public void changeLocalValueByNativeAlbum(string Old, string New)
        {
            throw new NotImplementedException();
        }

        public void changeLocalValueByNativeArtist(string Old, string New)
        {
            throw new NotImplementedException();
        }

        public void changeLocalValueByNativeName(string Old, string New)
        {
            throw new NotImplementedException();
        }

        public void changeLocalValueByNativeTrack(int Old, int New)
        {
            throw new NotImplementedException();
        }

        public void changeLocalValueByNativeYear(int Old, int New)
        {
            throw new NotImplementedException();
        }

        public void changeLocalValueByNativeClassement(Classement Okd, Classement New)
        {
            throw new NotImplementedException();
        }

        public void cannotMergeAlbum(string Old, string New)
        {
            throw new NotImplementedException();
        }

        public void cannotMergeArtist(string Old, string New)
        {
            throw new NotImplementedException();
        }

        public void cannotMergeName(string Old, string New)
        {
            throw new NotImplementedException();
        }

        public void cannotMergeTrack(int Old, int New)
        {
            throw new NotImplementedException();
        }

        public void cannotMergeYear(int Old, int New)
        {
            throw new NotImplementedException();
        }

        public void cannotMergeClassement(Classement Okd, Classement New)
        {
            throw new NotImplementedException();
        }

        public void change()
        {
            throw new NotImplementedException();
        }

        public void setClassement(string className, int rating)
        {
            Classement.setClassement(className, rating);
        }

        public string StrClassement
        {
            get
            {
                return Classement.ToString();
            }
            set
            {
                setClassement(value);
            }
        }

        public long Size
        {
            get
            {
                var ret = Files.Size;
                if (ret <= 0)
                    return 0;
                return ret;
            }
        }


        private CPiece parent;

        public void setParent(CPiece parent)
        {
            this.parent = parent;
            this.parentID = parent.PieceId;
            this.masterPiece = parent.masterPiece;
        }
        public CPiece Parent
        {
            get { return parent; }
            set
            {
                if (value == null)
                    parentID = -1;
                else
                    PieceParentId = value.PieceId;

                if (value == parent)
                    return;
                var _oldParent = parent;

                if (value == null)
                {

                    // PieceParentId = -1;
                    if (_oldParent != null)
                    {
                        masterPiece.addDataLink(_oldParent.masterPiece);
                    }
                    parent = null;
                    return;
                }
                else
                {
                    value.Master.masterPiece.addDataLink(this.masterPiece);
                    parent = value.Master;
                  //  parentID = parent.PieceId;
                    masterPiece = parent.masterPiece;
                }



            }
        }

        private bool deleted;
        public bool Deleted
        {
            get { return deleted; }
            set
            {
                if (value != deleted)
                {
                    if (value)
                        misc.log("Suppression de {0}", this);
                    deleted = value;
                }
            }
        }






        public List<DateTime> DatesClassementBrut
        {
            get
            {
                return Classement.getDates();
            }
        }

        int IItem.ID
        {
            get
            {
                return PieceId;
            }
            set
            {
                throw new NotImplementedException();
            }
        }


        public bool Played
        {
            get { return Dates.Count > 0; }
        }


        public string strClassement
        {
            get { return Classement.ToString(); }
        }




        public MasterPiece MasterPiece
        {
            get
            {
                return masterPiece;
            }

            set
            {
                masterPiece = value;
            }
        }

        IMasterPiece ITrackInfoItunes.MasterPiece
        {
            get
            {
                return masterPiece;
            }
        }
    }
}






]]></content>
  </file>
  <file path="\PieceDb.Db\piece\CPieceInfo.cs">
    <content><![CDATA[using System.Xml;
using pdb.db.piece.data;
using pdb.db.piece;
using pdb.util;
namespace pdb.db.obj
{
    public class CPieceInfo : IData
    {
        //private IDataObserver observer;


        private CPieceDataYear m_annee;
#if VOL
        private CPieceDataVolume m_volume;
#endif


        public IDataObserver Observer
        {
            set
            {
                m_annee.Observer = value;
#if VOL
                m_volume.Observer = value; 
#endif
            }
        }
        //  const string ANNEE = "year";

        // const string INFOS = "infos";

        public CPieceInfo(XmlElement a_xml)
        {
            m_annee = new CPieceDataYear(a_xml);
#if VOL
            m_volume = new CPieceDataVolume(a_xml);
#endif
        }

        public CPieceInfo()
            : base()
        {
            m_annee = new CPieceDataYear();
#if VOL
            m_volume = new CPieceDataVolume();
#endif
        }

#if VOL
        public CPieceInfo(int a_year, int volume)
        {
            m_annee = new CPieceDataYear(a_year <= 0 ? -1 : a_year);
            m_volume = new CPieceDataVolume(volume);
        }
#endif

        public CPieceInfo(int a_year)
        {
            m_annee = new CPieceDataYear(a_year <= 0 ? -1 : a_year);
        }

        public int Year
        {
            get { return m_annee.Value; }
            set { m_annee.Value = value; }
        }
#if VOL
        public int Volume
        {
            get { return m_volume.Value; }
            set { m_volume.Value = value; }
        }
#endif

        public CPieceData<int> YearData
        {
            get { return m_annee; }
        }
        public void consolid(CPieceInfo remote, mergePriority a_priority)
        {
            m_annee.Consolid(remote.m_annee, a_priority);
#if VOL
            m_volume.Consolid(remote.m_volume, a_priority);
#endif
        }
        public void legacyConsolid(CPieceInfo local)
        {
            m_annee.LegacyConsolid(local.m_annee);
#if VOL
            m_volume.LegacyConsolid(local.m_volume);
#endif
        }
#if VOL
        public void SynchroNative(int year, int volume)
        {
            m_annee.SynchroNative(year);
            m_volume.SynchroNative(volume);
        }
#else
        public void SynchroNative(int year)
        {
            m_annee.SynchroNative(year);
        }
#endif
        public override bool Equals(object obj)
        {
            if (obj is CPieceInfo)
            {
                CPieceInfo l_obj = (CPieceInfo)obj;
#if VOL
                return m_annee.Equals(l_obj.m_annee) && m_volume.Equals(l_obj.m_volume);
#else
                return m_annee.Equals(l_obj.m_annee);
#endif
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return m_annee.GetHashCode(); 
        }

        public bool Empty
        {
#if VOL
            get { return m_annee.Empty && m_volume.Empty; }
#else
            get { return m_annee.Empty; }
#endif
        }
       

        #region IData Members


        public void write(XmlWriter w)
        {
            m_annee.write(w);
#if VOL
            m_volume.write(w);
#endif
        }

        public void writeDiff(XmlWriter w, CPieceInfo lastFull)
        {
            m_annee.writeDiff(w, lastFull.m_annee); 
        }

        public bool HasChange(CPieceInfo lastFull)
        {
            return m_annee.HasChange(lastFull.m_annee); 
        }

        #endregion
    }
}



]]></content>
  </file>
  <file path="\PieceDb.Db\piece\CPieceReference.cs">
    <content><![CDATA[using System;
using System.Xml;
using pdb.db.piece.data;
using pdb.util;
using pdb.db.piece;
using pdb.obj;
namespace pdb.db.obj
{
    /// <summary>
    /// quadriGramme Artiste-Album-nom permettant de déterminer le fichier indépendamment de sa localisation phyique
    /// </summary>
    /// <remarks></remarks>
    public class CPieceReference : IData
    {
        private const string REFERENCE = "reference";
        private const string TOKEN_ALBUM = "album";
        private const string TOKEN_ARTIST = "artist";
        private const string TOKEN_NAME = "name";
        private const string TRACK_NUMBER = "track";
        private CPieceDataArtist m_artist;
        private CPieceDataAlbum m_album;
        private CPieceDataPieceName m_name;
        private CPieceDataTrackNumber m_trackNumber;
        protected IDataObserver observer;


        public void OnRefChange() { if (observer != null) observer.RefChange(); }

        public CPieceReference()
            
        {
            m_name = new CPieceDataPieceName();
            m_artist = new CPieceDataArtist();
            m_album = new CPieceDataAlbum();
            m_trackNumber = new CPieceDataTrackNumber();
        }

        public CPieceReference(string a_artist, string a_name)
            : this(a_artist.TrimSafe(), "", a_name.TrimSafe(), -1)
        {
        }

        public CPieceReference(string a_artist, string a_album, string a_name, int a_rank)
        {
            m_name = new CPieceDataPieceName(a_name.TrimSafe());
            m_artist = new CPieceDataArtist(a_artist.TrimSafe());
            m_album = new CPieceDataAlbum(a_album.TrimSafe());
            m_trackNumber = new CPieceDataTrackNumber(a_rank <= 0 ? -1 : a_rank);
        }



        public CPieceReference(XmlElement a_xml)
        {
            m_artist = new CPieceDataArtist(a_xml);
            m_album = new CPieceDataAlbum(a_xml);
            m_name = new CPieceDataPieceName(a_xml);
            m_trackNumber = new CPieceDataTrackNumber(a_xml);

        }

        public IDataObserver Observer
        {
            set
            {
                this.observer = value;
                m_name.Observer = value;
                m_album.Observer = value;
                m_trackNumber.Observer = value;
                m_artist.Observer = value; 
            }
        }


        public bool DefinedEquals(CPieceReference other)
        {
            if (!CUtil.DefinedEquals(m_artist.Value, other.m_artist.Value))
                return false;
            if (!CUtil.DefinedEquals(m_album.Value, other.m_album.Value))
                return false;
            if (!CUtil.DefinedEquals(m_name.Value, other.m_name.Value))
                return false;
            // pour le quatrieme, on n'exige pas la caractérisation des 2 valeurs ' Maintenant si
            if (!CUtil.DefinedEquals(m_trackNumber.Value, other.m_trackNumber.Value))
                return false;
            //  If CUtil.DefinedDiff(m_trackNumber.Value, other.m_trackNumber.Value) Then Return False
            return true;
        }

        public bool DefinedEquals(String artist, String album, String name, int trackNumber)
        {
            if (!CUtil.DefinedEquals(m_artist.Value, artist))
                return false;
            if (!CUtil.DefinedEquals(m_album.Value, album))
                return false;
            if (!CUtil.DefinedEquals(m_name.Value, name))
                return false;
            // pour le quatrieme, on n'exige pas la caractérisation des 2 valeurs ' Maintenant si
            if (!CUtil.DefinedEquals(m_trackNumber.Value, trackNumber))
                return false;
           
            return true;
        }

        public override bool Equals(object obj)
        {
            if (obj is CPieceReference)
            {
                CPieceReference l_remote = (CPieceReference)obj;
                if (CUtil.diff(m_artist.Value, l_remote.m_artist.Value))
                    return false;
                if (CUtil.diff(m_album.Value, l_remote.m_album.Value))
                    return false;
                if (CUtil.diff(m_name.Value, l_remote.m_name.Value))
                    return false;
                if (m_trackNumber.Value != l_remote.m_trackNumber.Value)
                    return false;
                return true;
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return m_name.GetHashCode() + m_album.GetHashCode() + m_artist.GetHashCode() + m_trackNumber.GetHashCode(); 
        }


        public void removeVersions()
        {
            m_name.removeVersions();
            m_album.removeVersions();
            m_artist.removeVersions();
            m_trackNumber.removeVersions(); 
        }

        public string Name
        {
            get { return m_name.Value; }
            set { m_name.Value = value; }
        }
        public string Album
        {
            get { return m_album.Value; }
            set { m_album.Value = value; }
        }
        public string Artist
        {
            get { return m_artist.Value; }
            set { m_artist.Value = value; }
        }
        public int TrackNumber
        {
            get { return m_trackNumber.Value; }
            set { m_trackNumber.Value = value; }
        }
        public CPieceData<string> NameData
        {
            get { return m_name; }
        }
        public CPieceData<string> AlbumData
        {
            get { return m_album; }
        }
        public CPieceData<string> ArtistData
        {
            get { return m_artist; }
        }
        public CPieceData<int> TrackData
        {
            get { return m_trackNumber; }
        }

        public override string ToString()
        {
            return m_artist.Value.ToString() + " " + m_album.Value.ToString() + " " + m_name.Value.ToString();
        }

        public void mergeDataFrom(CPieceReference other)
        {
            m_album.mergeAll(other.m_album, mergePriority.none);
            m_artist.mergeAll(other.m_artist, mergePriority.none);
            m_name.mergeAll(other.m_name, mergePriority.none);
            m_trackNumber.mergeAll(other.m_trackNumber, mergePriority.none);

        }


        public void consolid(CPieceReference remote, mergePriority a_priority)
        {
            m_artist.Consolid(remote.m_artist, a_priority);
            m_album.Consolid(remote.m_album, a_priority);
            m_name.Consolid(remote.m_name, a_priority);
            m_trackNumber.Consolid(remote.m_trackNumber, a_priority);
        }


        public void legacyConsolid(CPieceReference local)
        {
            m_artist.LegacyConsolid(local.m_artist);
            m_album.LegacyConsolid(local.m_album);
            m_name.LegacyConsolid(local.m_name);
            m_trackNumber.LegacyConsolid(local.m_trackNumber);
        }

        public void SynchroNative(ITrackReference native)
        {
            m_artist.SynchroNative(native.Artist);
            m_album.SynchroNative(native.Album);
            m_name.SynchroNative(native.Name);
            m_trackNumber.SynchroNative(native.TrackNumber); 
        }

        #region IData Members
      



      


        public void write(XmlWriter w)
        {
            m_artist.write(w);
            m_album.write(w);
            m_name.write(w);
            m_trackNumber.write(w);
        }

       public bool HasChanged(CPieceReference lastFull)
        {
           if ( m_artist.HasChange(lastFull.m_artist))
               return true; 
           if ( m_album.HasChange( lastFull.m_album))
               return true; 
           if ( m_name.HasChange( lastFull.m_name))
               return true;
           if (m_trackNumber.HasChange(lastFull.m_trackNumber))
               return true; 
            return false; 
        }
        public void writeDiff(XmlWriter w, CPieceReference lastFull)
        {
            m_artist.writeDiff(w,lastFull.m_artist);
            m_album.writeDiff(w,lastFull.m_album);
            m_name.writeDiff(w, lastFull.m_name);
            m_trackNumber.writeDiff(w, lastFull.m_trackNumber);
        }

        #endregion
    }
}

]]></content>
  </file>
  <file path="\PieceDb.Db\piece\data\CPieceData.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Xml;
using pdb.db.obj;
using pdb.db.piece.value;
using pdb.db.piece.version;
using pdb.util;



namespace pdb.db.piece.data
{

    /// <summary>
    /// Donnée + liste des versions
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public abstract class CPieceData<T> : IData, IEnumerable<CPieceDataVersion<T>>
    {

        /// <summary>
        /// Liste des versions
        /// </summary>
        protected List<CPieceDataVersion<T>> m_list = new List<CPieceDataVersion<T>>();
        private static CDataVersionComparerInv c_comparerInv = new CDataVersionComparerInv();


        private bool m_bOverride = false;
        private bool deleted = false;
        public abstract string getToken();
        public abstract T getNullValue();
        public abstract CPieceDataValue<T> createPieceDataValue(XmlElement a_node);
        public abstract CPieceDataValue<T> createPieceDataValue(string a_value);
        public abstract CPieceDataValue<T> createPieceDataValueT(T value);
        // protected Bool empty = Bool.not_defined;
        //   protected static DateTime _now = DateTime.Now;

        protected IDataObserver observer;
        public IDataObserver Observer { set { observer = value; } }

        public bool Override { get { return m_bOverride; } }


        public static DateTime Now
        {
            get
            {
                return ChronoData.Now;
            }
        }

        #region signaux

        //public class PieceDataChangeNativeEventArgs : EventArgs
        //{
        //    public PieceDataChangeNativeEventArgs(T value) { this.Value = value; }
        //    readonly public T Value;
        //}

        //public class PieceDataChangeLocalEventArgs : EventArgs
        //{
        //    public PieceDataChangeLocalEventArgs(T Old, T New) { this.Old = Old; this.New = New; }
        //    readonly public T Old;
        //    readonly public T New;
        //}

        //  public event EventHandler<PieceDataChangeNativeEventArgs> changeNativeValue;
        private void OnchangeNativeValue(T value) { if (observer != null) changeNativeValue(value); }
        protected abstract void changeNativeValue(T value);

        //  public event EventHandler<PieceDataChangeLocalEventArgs> changeLocalValueByRemote;
        private void OnChangeLocalByRemote(T Old, T New)// { if (changeLocalValueByRemote != null) changeLocalValueByRemote(this, new PieceDataChangeLocalEventArgs(Old, New)); }
        {
            if (observer != null)
                observer.changeByRemote(getToken(), Old, New);
        }
        //  public event EventHandler<PieceDataChangeLocalEventArgs> changeLocalValueByNative;
        private void OnChangeLocalByNative(T Old, T New) // { if (changeLocalValueByNative != null) changeLocalValueByNative(this, new PieceDataChangeLocalEventArgs(Old, New)); }
        {
            if (observer != null)
                observer.changeByNative(getToken(), Old, New);
        }
        //public event EventHandler<PieceDataChangeLocalEventArgs> cannotMerge;
        private void OnCannotMerge(T Old, T New) { }

        // public event EventHandler change;
        private void onChange() { if (observer != null) observer.RefChange(); }
        #endregion


        //public CPieceData(CPieceData<T> o)
        //{
        //    foreach (CPieceDataVersion<T> v in o.m_list)
        //        m_list.Add(new CPieceDataVersion<T>(v));
        //}

        public CPieceData(string a_value)
        {
            CPieceDataVersion<T> l_version = new CPieceDataVersion<T>(a_value, this);
            m_list.Add(l_version);

        }

        public CPieceData(T value)
        {
            CPieceDataVersion<T> l_version = new CPieceDataVersion<T>(value, this);
            m_list.Add(l_version);
        }

        public CPieceData()
        {
        }






        /// <summary>
        /// Ajoute si nécessaire les versions réciproques 
        /// </summary>
        /// <param name="a_list"></param>
        /// <remarks>On ne prend en compte que les versions de date définie</remarks>
        /// 




        public void mergeOnlyVersion(CPieceData<T> a_list)
        {
            foreach (CPieceDataVersion<T> l_version in a_list.m_list)
            {
                check(l_version);
            }
            sortAndCompact();
            foreach (CPieceDataVersion<T> l_remote in this.m_list)
            {
                a_list.check(l_remote);
            }
            a_list.sortAndCompact();
        }

        public void mergeAll(CPieceData<T> other, mergePriority a_priority)
        {
            T valueOrg = Value;
            mergeOnlyVersion(other);
            if (!this.Equals(other))
            {
                mergePriority l_ret = this.isMaster(other, a_priority);
                if (l_ret == mergePriority.left)
                {
                    OnChangeLocalByNative(other.Value, this.Value);
                    other.eraseSingleFrom(this);
                }
                else if (l_ret == mergePriority.right)
                {
                    this.eraseSingleFrom(other);
                }
                else
                {
                    OnCannotMerge(this.Value, other.Value);
                }
            }

            if (!Value.Equals(valueOrg))
            {
                onChange();
            }
        }

        /// <summary>
        /// Synchronise les infos de deux pieces (local-distant)
        /// </summary>
        /// <param name="remote">Piece sur fichier pdb_export</param>
        /// <remarks>on teste le cgangement de valeur</remarks>
        public virtual void Consolid(CPieceData<T> remote, mergePriority a_priority)
        {
            sortAndCompact();
            remote.sortAndCompact();
            T l_valueOrg = Value;
            mergeAll(remote, a_priority);

            if (!l_valueOrg.Equals(Value))
            {
                m_bOverride = true;
                OnChangeLocalByRemote(l_valueOrg, Value);
            }

            sortAndCompact();
            remote.sortAndCompact();

        }

        public bool Imported
        {
            get { return m_bOverride; }
        }

        protected virtual void LegacyConsolidByNative(CPieceData<T> local)
        {
            local.eraseSingleFrom(this);
        }

        protected virtual bool canErase()
        {
            return false;
        }

        public void removeVersions()
        {
            sortAndCompact();
            if (m_list.Count > 1)
            {
                m_list = new List<CPieceDataVersion<T>> { m_list[0] };
            }
        }






        public virtual void LegacyConsolid(CPieceData<T> local)
        {
            if (!this.Equals(local))
            {
                mergePriority l_merge = checklegacyModif(local);

                if (l_merge == mergePriority.right)
                {
                    this.m_bOverride = true;
                    this.eraseSingleFrom(local);
                    // this.empty = Bool.not_defined;
                    OnchangeNativeValue(Value);
                }
                else
                {
                    OnChangeLocalByNative(local.Value, this.Value);
                    if ((local.Significant || canErase()) && Now != local.LastModif)
                    {
                        CPieceDataVersion<T> l_version = new CPieceDataVersion<T>(Now, m_list[0].Data);
                        local.m_list.Add(l_version);
                        local.sortAndCompact();
                    }
                    else
                    {
                        local.eraseSingleFrom(this);
                    }
                    //    local.empty = Bool.not_defined;
                }

            }
        }

        public virtual void SynchroNative(T native)
        {
            if (native != null && isSignificant(native) && !Value.Equals(native))
            {
                bool update = true;
                if (native is string)
                {
                    if (native.ToString().Trim().Equals(Value.ToString().Trim()))
                        update = false;
                }

                if (update)
                {
                    OnChangeLocalByNative(this.Value, native);
                    CPieceDataValue<T> newValue = createPieceDataValueT(native);
                    CPieceDataVersion<T> l_version = new CPieceDataVersion<T>(Now, newValue);
                    m_list.Add(l_version);
                    sortAndCompact();
                }
            }
        }

        /// <summary>
        /// Dans le cas d'une égalité de principe, tenter une comparaison basée sur la complétude
        /// </summary>
        /// <param name="remote "></param>
        /// <returns>Indique si la comparaison a été faite</returns>
        /// <remarks></remarks>
        public bool choose(CPieceData<T> remote)
        {
            mergeAll(remote, mergePriority.none);
            // si le merge est effectif (ie l'un des deux a une date définie alors le erge est fait
            // pour provoquer un merge manuel il faut que les deux soient sans date et différents
            return Equals(remote);
        }
        public void mergeManual(CPieceData<T> other)
        {
            //Console.WriteLine("master ? 1 (final:1)   2 ( final:2 ) n:no");
            //string l_resp = Console.ReadLine();
            //if (l_resp == "1")
            //{
            //    Console.WriteLine("merge from first to second");
            //    //Console.WriteLine("merge from second to first")
            //    other.eraseSingleFrom(this);

            //}
            //else if (l_resp == "2")
            //{
            //    Console.WriteLine("merge from second to first");
            //    this.eraseSingleFrom(other);
            //}
            //else
            //{
            Console.WriteLine("abort merge");
            //Return choice.no
            //}
        }

        /// <summary>
        /// Parfois, des valeurs identiques sont indiquées commme des modifications. 
        /// Ordonnancement par ordre chronomogique, et élimination des doublons
        /// </summary>
        protected void sortAndCompact()
        {
            if (m_list.Count < 2) return;
            m_list.Sort(c_comparerInv);
            //CPieceDataVersion<T> last = m_list[m_list.Count - 1];
            // List<CPieceDataVersion<T>> aux = new List<CPieceDataVersion<T>>(m_list);
            // finalement on ne supprime pas les doublons, rapport 
            //for (int i = m_list.Count - 2; i >= 0; i--)
            //{
            //    CPieceDataVersion<T> current = m_list[i];
            //    if (current.Data.Equals(last.Data))
            //        aux.Remove(current);
            //    last = current;
            //}
            // m_list = aux;

        }

        private void eraseSingleFrom(CPieceData<T> a_list)
        {

            if (a_list.deleted)
                m_list.Clear();
            else
            {
                if (m_list.Count == 0)
                {
                    CPieceDataVersion<T> l_version = new CPieceDataVersion<T>(a_list.m_list[0].Date, a_list.m_list[0].Data);
                    m_list.Add(l_version);

                }
                else
                {
                    m_list[0].Data = a_list.m_list[0].Data;
                }
                //  empty = Bool.not_defined;
            }

            onChange();


        }



        public bool Equals(CPieceData<T> obj)
        {
            return Value.Equals(obj.Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        /// <summary>
        /// détermine quelle info est maitre dans la perspective de les merger
        /// </summary>
        /// <param name="remote"></param>
        /// <param name="a_priority"></param>
        /// <returns>True  : Je suis maître</returns>
        /// <remarks>Pre-condition:  me != remote</remarks>
        private mergePriority isMaster(CPieceData<T> remote, mergePriority a_priority)
        {
            if (remote.deleted && a_priority == mergePriority.right)
                return mergePriority.right;
            if (this.Equals(remote))
                throw new PieceDbException(this.ToString() + " and " + remote.ToString() + " are equivalent");

            mergePriority l_consistencyComp = compareByConsistency(remote);
            if (l_consistencyComp != mergePriority.none)
                return l_consistencyComp;

            if (LastModif == System.DateTime.MinValue && remote.LastModif == System.DateTime.MinValue)
            {
                return a_priority;
            }
            else
            {
                return mergePriority.none;
                //  throw new PieceDbException("meme date de modif pourtant les fichiers sont différents!");
            }
        }
        protected virtual bool CheckLegacyConsistency()
        {
            return true;
        }
        private mergePriority checklegacyModif(CPieceData<T> local)
        {
            if (CheckLegacyConsistency())
            {
                mergePriority l_consistencyComp = compareByConsistency(local);
                if (l_consistencyComp != mergePriority.none)
                    return l_consistencyComp;
            }

            if (local.Imported) return mergePriority.right;
            return mergePriority.left;
        }

        private mergePriority checklegacyModif(T native)
        {
            if (CheckLegacyConsistency())
            {
                mergePriority l_consistencyComp = compareByConsistency(native);
                if (l_consistencyComp != mergePriority.none)
                    return l_consistencyComp;
                //right = native qui est master
            }
            if (this.Imported) return mergePriority.left;
            return mergePriority.right;
        }


        private mergePriority compareByConsistency(CPieceData<T> other)
        {
            if (!Significant && other.Significant)
                return mergePriority.right;
            if (Significant && !other.Significant)
                return mergePriority.left;

            if (Empty && !other.Empty)
                return mergePriority.right;
            if (!Empty && other.Empty)
                return mergePriority.left;

            return mergePriority.none;
        }

        private mergePriority compareByConsistency(T native)
        {
            if (!Significant && isSignificant(native))
                return mergePriority.right;
            if (Significant && !isSignificant(native))
                return mergePriority.left;

            return mergePriority.none;
        }

        public System.DateTime LastModif
        {
            get
            {
                if (Empty)
                    return System.DateTime.MinValue;
                //  sortAndCompact();
                return m_list[0].Date;
            }
        }

        protected virtual T getPlainValue()
        {
            return m_list[0].Data.Value;
        }

        public T Value
        {
            get
            {
                if (Empty)
                    return getNullValue();
                //sortAndCompact();
                //int i = 0;
                //while (true)
                //{
                //    var version = m_list[i];
                //    if (!version.Consider)
                //    {
                //        i++;
                //        continue;
                //    }
                //    return version.Data.Value;
                //}
                return getPlainValue();

            }
            set
            {
                if (value.Equals(Value)) return;
                m_list.Insert(0, new CPieceDataVersion<T>(Now, createPieceDataValueT(value)));
                sortAndCompact();

            }
        }

        public T DbValue
        {
            get
            {
                if (Empty)
                    return getNullValue();
                return m_list[0].Data.Value;
            }
        }

        public void removeLastVersion()
        {
            int count = m_list.Count;
            if (count <= 1)
                return;
            m_list.RemoveAt(0);
            sortAndCompact();
        }

        public T LastValue
        {
            get
            {
                if (Empty)
                    return getNullValue();
                int count = m_list.Count;
                if (count < 2)
                    return getNullValue();
                int i = 1;
                while (true)
                {
                    var version = m_list[i];
                    //if (!version.Consider)
                    //{
                    //    i++;
                    //    if (i >= count)
                    //    {
                    //        return getNullValue();
                    //    }
                    //    continue;
                    //}
                    return version.Data.Value;
                }

            }

        }


        private bool Simple
        {
            get { return (m_list.Count == 1 && m_list[0].Date == System.DateTime.MinValue) || Empty; }
        }
        public bool Empty
        {
            get
            {
                //if (empty == Bool.not_defined)
                //{
                bool ret = m_list.Count == 0 || m_list[0].Empty;
                return ret;
                //    empty = ret ? Bool.True : Bool.False;
                //    return ret;
                //}
                //return empty == Bool.True;

            }
        }

        public bool Significant
        {
            get
            {
                if (m_list.Count > 1)
                    return true;
                return m_list.Count == 1 && m_list[0].Significant;
            }
        }
        public abstract bool isSignificant(T value);



        public void checkList(CPieceData<T> other)
        {
            foreach (CPieceDataVersion<T> version in other)
            {
                check(version);
            }
            sortAndCompact();
        }


        /// <summary>
        /// indique si la liste contient déja la version
        /// </summary>
        /// <param name="a_version">version testée</param>
        /// <returns>True : si version connue</returns>
        /// <remarks>On ne prend en compte que les dates définies</remarks>
        private bool Contains(CPieceDataVersion<T> a_version)
        {
            return m_list.Contains(a_version);
            //foreach (CPieceDataVersion<T> l_elt in this)
            //{
            //    System.DateTime l_date = l_elt.Date;
            //    if (l_date > System.DateTime.MinValue && a_version.Date == l_date)
            //    {
            //        return true;
            //    }
            //}
            //return false;
        }


        private void check(CPieceDataVersion<T> a_version)
        {

            if (!a_version.deleted && !Contains(a_version))
            {
                if (a_version.Date > System.DateTime.MinValue)
                {
                    //if (a_version.Consider)
                    //{
                    m_list.Add(a_version);
                    //     empty = Bool.not_defined;
                    //}
                }
            }
            else if (a_version.deleted && Contains(a_version))
                m_list.Remove(a_version);

        }


        public CPieceData(System.Xml.XmlElement a_node)
        {

            bool l_bSingle = false;

            XmlElement l_Mynode = XMLTool.NodeLookUp(a_node, getToken());

            if (l_Mynode == null)
                return;

            var attDeleted = l_Mynode.Attributes[XMLTool.TOKEN_DELETED];
            if (attDeleted != null && XMLTool.TRUE.Equals(attDeleted.Value))
                deleted = true;

            XmlAttribute att = l_Mynode.Attributes[CPieceDataValue<T>.TOKEN];
            if (att != null)
            {
                l_bSingle = true;
            }




            foreach (XmlNode l_node in l_Mynode)
            {
                if (!l_bSingle)
                {

                    if (l_node is XmlElement && l_node.Name == CPieceDataVersion<T>.VERSION)
                    {
                        XmlElement l_elt = (XmlElement)l_node;
                        CPieceDataVersion<T> l_version = new CPieceDataVersion<T>(l_elt, this);
                        if ((!l_version.Data.Empty || canErase()))
                        {
                            m_list.Add(l_version);
                        }
                    }
                    else
                    {
                        l_bSingle = true;
                        // break; // TODO: might not be correct. Was : Exit For
                    }
                }
            }

            if (l_bSingle)
            {
                CPieceDataVersion<T> l_version = null;
                if (l_Mynode != null)
                    l_version = new CPieceDataVersion<T>(l_Mynode, this);
                else
                    l_version = new CPieceDataVersion<T>(att.Value, this);
                m_list.Add(l_version);
            }
            sortAndCompact();
        }





        public static void writeDeleted(XmlWriter w)
        {
            XMLTool.writeDeleted(w);
        }
        protected virtual void writeSimple(XmlWriter w)
        {
            if (m_list.Count == 0)
            {
                w.WriteStartElement(getToken());
                writeDeleted(w);
                w.WriteEndElement();
            }
            else
                w.WriteElementString(getToken(), m_list[0].Data.ToString());
            //  w.WriteAttributeString(getToken(), m_list[0].Data.ToString()); 
        }

        public void write(XmlWriter w)
        {
            if (Empty)
                return;
            //  w.WriteStartElement(getToken()); 

            if (Simple)
            {
                writeSimple(w);


            }
            else
            {
                w.WriteStartElement(getToken());
                sortAndCompact();
                //    m_list.Sort(c_comparerInv); 
                foreach (CPieceDataVersion<T> l_version in new List<CPieceDataVersion<T>>(m_list))
                {
                    l_version.write(w);
                }
                w.WriteEndElement();
            }

        }

        public bool HasChange(CPieceData<T> lastFull)
        {
            if (m_list.Count != lastFull.m_list.Count)
                return true;
            if (lastFull.DbValue == null || !lastFull.DbValue.Equals(DbValue))
                return true;
            sortAndCompact();
            lastFull.sortAndCompact();
            if (m_list.Count != lastFull.m_list.Count)
                return true;
            int count = m_list.Count;
            for (int i = 0; i < count; i++)
            {
                if (!m_list[i].Equals(lastFull.m_list[i]))
                    return true;
            }
            return false;
        }

        public void writeDiff(XmlWriter w, CPieceData<T> lastFull)
        {
            //if (Empty)
            //    return;
            ////  w.WriteStartElement(getToken()); 
            if (!HasChange(lastFull))
                return;

            sortAndCompact();
            lastFull.sortAndCompact();

            if (DbValue == null)
            {
                if (lastFull.DbValue == null)
                    return;
            }

            //if (lastFull.DbValue == null || !lastFull.DbValue.Equals(DbValue))
            //{

            if (Simple)
            {
                if (lastFull.m_list.Count < 1 || m_list.Count < 1 || !(lastFull.m_list[0].Data.Value.Equals(m_list[0].Data.Value)))
                {
                    writeSimple(w);
                    return;
                }


            }
            else
            {
                w.WriteStartElement(getToken());

                //    m_list.Sort(c_comparerInv); 

                //int count = lastFull.m_list.Count;
                //int count0 = count; 
                //if (m_list.Count > count)
                //    count = m_list.Count;

                //for (int i = count -1 ; i >=0; i++)
                //{
                //    CPieceDataVersion<T> my = m_list[i];
                //    CPieceDataVersion<T> old = null;
                //    if (i < count0 - 1)
                //        old = lastFull.m_list[i]; 

                //    if (old == null)



                //}
                foreach (CPieceDataVersion<T> l_version in new List<CPieceDataVersion<T>>(m_list))
                {
                    bool found = false;
                    foreach (CPieceDataVersion<T> l_version_old in new List<CPieceDataVersion<T>>(lastFull.m_list))
                    {
                        if (l_version_old.Date == l_version.Date && l_version_old.Data.Equals(l_version.Data))
                        {
                            found = true;
                            break;
                        }
                    }

                    if (found)
                        continue;
                    l_version.write(w);
                }


                foreach (CPieceDataVersion<T> l_version_old in new List<CPieceDataVersion<T>>(lastFull.m_list))
                {
                    bool found = false;
                    foreach (CPieceDataVersion<T> l_version in new List<CPieceDataVersion<T>>(m_list))
                    {
                        if (l_version_old.Date == l_version.Date && l_version_old.Data.Equals(l_version.Data))
                        {
                            found = true;
                            break;
                        }
                    }

                    if (found)
                        continue;
                    l_version_old.writeDeleted(w);
                }
                w.WriteEndElement();
                //}
            }

        }

     

        //public virtual CListDate Dates
        //{
        //    get
        //    {
        //        CListDate dates = new CListDate();
        //        foreach (CPieceDataVersion<T> data in m_list)
        //        {
        //            dates.check(data.Date);
        //        }
        //        return dates;
        //    }
        //}
        //private class CDataVersionComparer : IComparer<CPieceDataVersion<T>>
        //{


        //    public int Compare(CPieceDataVersion<T> x, CPieceDataVersion<T> y)
        //    {
        //        return System.DateTime.Compare(x.Date, y.Date);
        //    }
        //}
        private class CDataVersionComparerInv : IComparer<CPieceDataVersion<T>>
        {
            public int Compare(CPieceDataVersion<T> x, CPieceDataVersion<T> y)
            {
                //if (!x.Consider)
                //{
                //    if (!y.Consider)
                //        return -1 * System.DateTime.Compare(x.Date, y.Date);
                //    return 1;
                //}
                //if (!y.Consider)
                //    return -1;

                return -System.DateTime.Compare(x.Date, y.Date);
            }
        }

        public System.Collections.IEnumerator GetEnumerator1()
        {
            return m_list.GetEnumerator();
        }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return GetEnumerator1();
        }

        public System.Collections.Generic.IEnumerator<CPieceDataVersion<T>> GetEnumerator()
        {
            return m_list.GetEnumerator();
        }
    }
}
]]></content>
  </file>
  <file path="\PieceDb.Db\piece\data\CPieceDataClassement.cs">
    <content><![CDATA[using System;
using pdb.obj;
using pdb.db.piece.value;
using pdb.db.piece.version;
using pdb.util;
using pdb.db.obj;
using System.Collections.Generic;
using System.Xml;
namespace pdb.db.piece.data
{


    public class CPieceClassement : CPieceData<Classement>
    {
        private IMasterPiece piece;
        private const string TOKEN_CLASSEMENT = "classement";


        public CPieceClassement(IMasterPiece piece, System.Xml.XmlElement a_node)
            : base(a_node)
        {
            this.piece = piece;
            if (XMLTool.NodeLookUp(a_node, getToken()) == null)
            {
                CPieceDataValueClassement l_data = new CPieceDataValueClassement(a_node);
                m_list.Add(new CPieceDataVersion<Classement>(DateTime.MinValue, l_data));
            }
            //  int count = m_list.Count;
            //            if (count > 0)
            //            {
            //                var version = m_list[count - 1];
            //                if (string.IsNullOrEmpty(version.Data.Value.ClassList))
            //                {
            //                    version.Consider = false;
            //                    //  empty = Bool.not_defined; 
            //                }
            //#if ASC
            //                var versionF = m_list[0];
            //                var valueOrg = versionF.Data;
            //                var classOrg = valueOrg.Value.ClassList;
            //                var rating = valueOrg.Value.Rating;
            //                if (classOrg.StartsWith("0"))
            //                {
            //                    classOrg = "1";
            //                    rating = 0; 
            //                  //  classOrg = classOrg.Remove(0, 1);
            //                }

            //                valueOrg.Value = new Classement(classOrg, rating); 

            //#endif
            //            }


        }

        public void initClassementIfEmpty(string classement)
        {
            if (m_list.Count > 0)
                return;
            var cl = pdb.obj.Classement.create(classement);
            m_list.Add(new CPieceDataVersion<Classement>(Now, new CPieceDataValueClassement(cl)));
        }

        public void eraseClassement()
        {
            m_list = new List<CPieceDataVersion<Classement>>();
            initClassementIfEmpty("0.0");
        }


        public CPieceClassement(IMasterPiece piece, string strClassement)
        {
            this.piece = piece;
            var cl = pdb.obj.Classement.create(strClassement);
            m_list.Add(new CPieceDataVersion<Classement>(Now, new CPieceDataValueClassement(cl)));
        }

        public CPieceClassement(IMasterPiece piece, Classement o)
        {
            this.piece = piece;
            //   var cl = pdb.obj.Classement.create(o);
            m_list.Add(new CPieceDataVersion<Classement>(Now, new CPieceDataValueClassement(o)));
        }

        //public CPieceClassement(CPiece piece, string a_class, int a_rating)
        //{
        //    this.piece = piece;
        //    Classement l_class = Classement.create(a_class, a_rating);
        //    m_list.Add(new CPieceDataVersion<Classement>(Now, new CPieceDataValueClassement(l_class)));
        //    // empty = Bool.not_defined; 

        //}

        //public CPieceClassement(CPiece piece, int a_rating)
        //    : this(piece, "", a_rating)
        //{
        //}
        public CPieceClassement(IMasterPiece piece)
            : base()
        {
            this.piece = piece;
        }

        protected override bool CheckLegacyConsistency()
        {
            return false;
        }
        public override CPieceDataValue<Classement> createPieceDataValue(System.Xml.XmlElement a_node)
        {
            return new CPieceDataValueClassement(a_node);
        }

        public override string getToken()
        {
            return TOKEN_CLASSEMENT;
        }

        public override CPieceDataValue<Classement> createPieceDataValue(string a_str)
        {
            return null;
        }

        public override Classement getNullValue()
        {
            return Classement.NULL;
        }
        public override CPieceDataValue<Classement> createPieceDataValueT(Classement value)
        {
            return new CPieceDataValueClassement(value);
        }

        public override bool isSignificant(Classement value)
        {
            return value.ClassList != "";
        }


        protected override void writeSimple(XmlWriter w)
        {
            w.WriteStartElement(getToken());
            m_list[0].Data.write(w);
            w.WriteEndElement();
        }

        public void setClassement(string className, int rating)
        {
            Classement cl = Classement.create(className, rating);
            if (m_list.Count == 0)
                m_list.Add(new CPieceDataVersion<Classement>(Now, new CPieceDataValueClassement(cl)));
            else
                m_list[0].Data.Value = cl;
            sortAndCompact();
        }

        public void eraseClassement2()
        {
            Classement cl = Classement.create("0.0");
            eraseClassement2(cl);
        }

        public void eraseClassement2(Classement cl)
        {
            m_list = new List<CPieceDataVersion<Classement>>();
            m_list.Add(new CPieceDataVersion<Classement>(DateTime.MinValue, new CPieceDataValueClassement(cl)));
        }

        public int Rating
        {
            get { return Value.Rating; }
            //set { Value.Rating = value; }
        }



        protected override bool canErase()
        {
            return true;
        }

        public override void Consolid(CPieceData<Classement> remote, mergePriority a_priority)
        {
            base.Consolid(remote, a_priority);
            this.checkList(remote);
        }

        public override void LegacyConsolid(CPieceData<Classement> local)
        {
            base.LegacyConsolid(local);
            this.checkList(local);
        }

        public bool isClassListNumeric { get { return Value.isClassListNumeric; } }



        public String Evol
        {
            get
            {

                if (m_list.Count <= 1) return "++";

                Classement last = m_list[0].Data.Value;
                Classement before = m_list[1].Data.Value;

                String strLast = last.ClassNameAndRating;
                String strBefore = before.ClassNameAndRating;

                int cmp = compareClassNameAndRating(strLast, strBefore);
                if (cmp == 0)
                    return "=";  // normalement impossible
                if (cmp < 0) return "+";
                return "-";
            }

        }

        public static int compareClassNameAndRating(string strX, string strY)
        {
            int max = strX.Length > strY.Length ? strX.Length : strY.Length;
            for (int i = 0; i < max; i++)
            {
                int iX = strX.getInt(i); // CUtil.getInt(strX, i);
                int iY = strY.getInt(i);//CUtil.getInt(strY, i);
                if (iX != iY)
                    return -iX.CompareTo(iY);
            }
            return 0;
        }

        public List<DateTime> getDates()
        {
            var list = new List<DateTime>();
            foreach (var version in new List<CPieceDataVersion<Classement>>(m_list))
            {
                list.Add(version.Date);
            }
            return list;

        }

        //public override CListDate Dates
        //{
        //    get
        //    {
        //        var list = new List<DateTime>();
        //        //    double current = -1;
        //        // sortAndCompact();
        //        foreach (var version in new List<CPieceDataVersion<Classement>>(m_list))
        //        {
        //            //double aux = version.Data.Value.getNormValue();
        //            //if (aux != current)
        //            //{
        //            list.Add(version.Date);
        //            // current = aux; 
        //            //}
        //        }
        //        return new CListDate(list);
        //    }
        //}

        public void Menage(CPiece piece)
        {
            sortAndCompact();
            //   misc.log("ménage " + this); 

            var aux = new List<CPieceDataVersion<Classement>>(m_list);


            //// 1. parcours jusqu'à trouver 1.0
            //int index1 = -1;
            //int count = aux.Count;

            //for (int i = 0; i < count; i++)
            //{
            //   CPieceDataVersion <Classement> clv = aux[i];
            //   if (clv.Data.Value.getNormValue() == 1)
            //   {
            //       index1 = i;
            //       break; 
            //   }
            //}

            //if (index1 >= 0)
            //{
            //    while (aux.Count > index1 + 1)
            //    {
            //        misc.log( piece  + " suppression " + aux[index1 + 1] + " cause départ à 1");
            //        aux.RemoveAt(index1 + 1);
            //    }
            //}

            //2. vérification des allez-retours 
            int count = aux.Count;

            while (count > 2)
            {
                for (int i = 0; i < count; i++)
                {
                    var clv0 = aux[i].Data.Value;
                    if (i + 2 >= count)
                    {
                        count = -1;
                        break;
                    }
                    var clv2 = aux[i + 2].Data.Value;
                    if (clv2.getNormValue() == clv0.getNormValue())
                    {
                        misc.log(piece + "suppression " + aux[i] + " cause doublon avec " + aux[i + 2]);
                        aux.RemoveAt(i);
                        count = aux.Count;
                        break;
                    }
                }

            }

            m_list = aux;
            sortAndCompact();



        }

        public override string ToString()
        {
            return Value.ToString();
        }

        protected override void changeNativeValue(Classement value)
        {
            observer.changeNativeValueClassement(value);
        }

        #region on repart de zero
        private static DateTime dateMin;
        public static DateTime DateMin { set { dateMin = value; } }
        //private bool keep;
        //public bool Keep { get { return keep; } set { keep = value; } }

        protected override Classement getPlainValue()
        {
            if (piece.Enabled && m_list[0].Date < dateMin) //&& !keep
            {
                if (m_list[0].Data.Empty)
                    return getNullValue();
                return Classement.ZERO;
            }
            return base.getPlainValue();
        }
        #endregion


        public Classement MaxClassement()
        {
            if (m_list.Count == 0)
                return getNullValue();
            Classement max = null;
            foreach (var p in m_list)
            {
                var cand = p.Data.Value;
                if (max == null || max.CompareTo(cand) < 0)
                    max = cand;
            }
            return max;
        }
    }
}
]]></content>
  </file>
  <file path="\PieceDb.Db\piece\version\CPieceDataVersion.cs">
    <content><![CDATA[using System;
using System.Xml;
using pdb.db.piece.data;
using pdb.db.piece.value;
using pdb.util;
namespace pdb.db.piece.version
{

    /// <summary>
    /// Enregistrement d'une version d'une valeur
    /// deux parties = date de modif et valeur (générique)
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <remarks></remarks>
    public class CPieceDataVersion<T> : IData, IEquatable<CPieceDataVersion<T>>
    {
        public const string VERSION = "version";
        private const string TOKEN_DATE = "date";
        private System.DateTime m_date;
        public readonly bool deleted; 

        protected CPieceDataValue<T> m_value;
        public CPieceDataVersion(System.DateTime a_date, CPieceDataValue<T> a_value)
        {
            m_date = a_date;
            m_value = a_value;
        }

        //public CPieceDataVersion(CPieceDataVersion<T> o)
        //{
        //    m_date = o.m_date;
        //    m_value = o.m_value.createCopy();
        //}



        //private bool _consider = true;
        //public bool Consider { get { return _consider; } set { _consider = value; } }



        public CPieceDataVersion(XmlElement a_node, CPieceData<T> a_pieceData)
        {
            System.DateTime l_date = System.DateTime.MinValue;
            XMLTool l_xml = new XMLTool(a_node);
            string l_strDate = l_xml.getNodeValue(TOKEN_DATE);
            deleted = l_xml.getDeleted(); 
            if (string.IsNullOrEmpty(l_strDate))
            {
                var att = a_node.Attributes[TOKEN_DATE];
                if (att != null)
                    l_strDate = att.Value;
            }
            if (!string.IsNullOrEmpty(l_strDate))
                l_date = Convert.ToDateTime(l_strDate);
            m_date = l_date;
            m_value = a_pieceData.createPieceDataValue(a_node);
        }


        public CPieceDataVersion(string a_value, CPieceData<T> a_pieceData)
        {
            m_date = System.DateTime.MinValue;
            m_value = a_pieceData.createPieceDataValue(a_value.TrimSafe());
        }

        public CPieceDataVersion(T value, CPieceData<T> a_pieceData)
        {
            m_date = System.DateTime.MinValue;
            m_value = a_pieceData.createPieceDataValueT(value);
        }

        public bool Significant
        {
            get { return m_value.Significant; }
        }
        public bool Empty
        {
            get { return (m_date == System.DateTime.MinValue && m_value.Empty); } //|| (!_consider); }
        }
        public System.DateTime Date
        {
            get { return m_date; }
        }
        public CPieceDataValue<T> Data
        {
            get { return m_value; }
            set { m_value = value; }
        }

        public override string ToString()
        {
            return m_date + ":" + m_value.Value;
        }

     

        #region IData Members


        private void write(XmlWriter w, bool deleted)
        {
            if (Empty && !deleted)
                return;

            w.WriteStartElement(VERSION);
            if (m_date > System.DateTime.MinValue)
                w.WriteAttributeString(TOKEN_DATE, m_date.ToString());
            //  w.WriteElementString(TOKEN_DATE, m_date.ToString()); 

            m_value.write(w);
            if (deleted)
                XMLTool.writeDeleted(w);
            w.WriteEndElement();
        }

        public void write(XmlWriter w)
        {
            write(w, false);
        }
        public void writeDeleted(XmlWriter w)
        {
            write(w, true);
        }

        public override bool Equals(object obj)
        {
            if (obj is CPieceDataVersion<T>)
                return Equals(obj as CPieceDataVersion<T>);
            return false;
        }

        public bool Equals(CPieceDataVersion<T> other)
        {
            return m_date.Equals(other.m_date) && m_value.Equals(other.m_value);
        }
        public override int GetHashCode()
        {
            return m_date.GetHashCode() + m_value.GetHashCode();
        }

        #endregion
    }
}
]]></content>
  </file>
  <file path="\PieceDb.obj\Classement.cs">
    <content><![CDATA[using System;
using pdb.util;
using System.Text.RegularExpressions;

namespace pdb.obj
{
    public enum Bool
    {
        not_defined = 0,
        False = 1,
        True = 2
    }


    /// <summary>
    /// type de base de la donnée classement : 
    /// paire : liste / rating 
    /// 
    /// </summary>
    /// <remarks>utilisé comme une valeur simple (entier - string)</remarks>
    public class Classement : IComparable<Classement>, IComparable
    {
        private static Dict<string, Classement> dict = new Dict<string, Classement>();
        public static Regex regClassement = new Regex(@"([0-5]+)\.([0-5])");
        public static Regex regClassement2 = new Regex(@"([0-5]+)");
        private static bool isClassement(string input) { return string.IsNullOrEmpty(input) || regClassement.IsMatch(input); }
        private static Classement _NULL = new Classement("", 0);
        private static Classement _ZERO = new Classement("0", 0);
        public static Classement NULL { get { return _NULL; } }
        public static Classement ZERO { get { return _ZERO; } }
        public static bool canBeClassement(string input)
        {
            if (string.IsNullOrEmpty(input))
                return true;
            if (regClassement2.IsMatch(input))
                return true;
            if (regClassement.IsMatch(input))
                return true;
            return false;

        }
        public static Classement create(string input)
        {
            if (input != null)
                input = input.Replace(" ", "");
            if (input == "0")
                return new Classement("0", 0);

            if (string.IsNullOrEmpty(input))
                return _NULL;
            if ("0.0".Equals(input))
                return ZERO;

            if (!isClassement(input))
                return null;
            if (dict.ContainsKey(input))
            {
                return dict[input];
            }
            var groups = regClassement.Match(input).Groups;
            var cl = new Classement(groups[1].Value, (Convert.ToInt32(groups[2].Value)));
            dict[input] = cl;
            return cl;
        }

        public static Classement create(string className, int rating)
        {
            if (rating < 0)
                return _NULL;
            var input = string.Format("{0}.{1}", className, rating);
            return create(input);

        }






        public decimal RapportClassement
        {
            get
            {
                decimal resultat = 0;
                try
                {
                    string str = ClassNameAndRating;
                    char[] tab = str.ToCharArray();

                    decimal K = 1;
                    int count = tab.GetLength(0);


                    for (int i = 0; i < count; i++)
                    {
                        K = K * 6;
                        int c = Convert.ToInt32(tab[i].ToString());
                        resultat += (decimal)c / K;
                    }
                }
                catch
                {
                }
                return resultat;
            }
        }
        private string m_class = "";
        private int m_rating = -1;
        private Classement(string a_class, int a_rating)
        {
            m_class = a_class;
            m_rating = a_rating;
        }

        private Classement(Classement o)
        {
            m_class = o.m_class;
            m_rating = o.m_rating;

        }
        public string ClassList
        {
            get { return m_class; }
            // set { m_class = value; }
        }
        public int Rating
        {
            get { return m_rating; }
            //   set { m_rating = value; }
        }
        public override bool Equals(object obj)
        {
            if (obj is Classement)
            {
                Classement l_obj = (Classement)obj;
                return m_class.Equals(l_obj.m_class) && m_rating == l_obj.m_rating;
            }
            else
            {
                return false;
            }
        }
        public override int GetHashCode()
        {
            return m_class.GetHashCode() + m_rating.GetHashCode();
        }

        #region rang
        private Bool m_numericClassList;
        //private String m_classNameAndRating = "";
        /// <summary>
        /// la classList est-elle numérique?
        /// </summary>
        public bool isClassListNumeric
        {
            get
            {
                if (m_numericClassList == Bool.not_defined)
                {
                    if (String.IsNullOrEmpty(m_class)) return false;
                    bool res = m_class.isInteger();  //CUtil.isInteger(m_class);
                    m_numericClassList = res ? Bool.True : Bool.False;
                    return res;
                }
                else
                {
                    return m_numericClassList == Bool.True ? true : false;
                }
            }
        }
        public String ClassNameAndRating
        {
            get
            {
                if (!isClassListNumeric) return "." + m_rating;
                return m_class + m_rating;
            }
        }

        public String ClassNameAndRatingWithPt
        {
            get
            {
                if (!isClassListNumeric) return "." + m_rating;
                return m_class + "." + m_rating;
            }
        }
        /// <summary>
        /// Donne la valeur du classement. Pratique pour la comparaison
        /// </summary>
        /// <returns></returns>
        public double getNormValue()
        {
            if (!isClassListNumeric)
                return -1;
            string classNameAndRating = ClassNameAndRating;
            string strDouble = classNameAndRating.Insert(1, ",");
            return Convert.ToDouble(strDouble);
        }

        //private String getNbStars() { return (m_rating / 20).ToString(); }
        public override string ToString()
        {
            if (!isClassListNumeric) return m_class;
            return String.Format("{0}.{1}", m_class, m_rating);
        }




        public decimal ClassementValueDecimal
        {
            get
            {
                if (!isClassListNumeric) return 0;
                string classNameAndRating = ClassNameAndRating.Insert(1, ",");
                return Convert.ToDecimal(classNameAndRating);
            }
        }

        public bool isNull()
        { return this == _NULL; }

        public bool isClassed()
        {
            return this != _NULL;
        }

        public bool isPositive()
        {
            return isClassed() && this != _ZERO;
        }

        //public static bool operator ==(Classement c1, Classement c2)
        //{
        //    if ( Object.ReferenceEquals(c1,c2))
        //        return true;
        //    if (Object.ReferenceEquals(c1,null))
        //        return false;
        //    return c1.CompareTo(c2) == 0;
        //}
        //public static bool operator !=(Classement c1, Classement c2)
        //{
        //   return !(c1 == c2); 
        //}


        public static bool operator >(Classement c1, Classement c2)
        {
            if (c1 == null)
                return false;
            if (c2 == null)
                return false;
            return c1.CompareTo(c2) > 0;
        }
        public static bool operator >=(Classement c1, Classement c2)
        {
            if (c1 == null)
                return false;
            if (c2 == null)
                return false;
            return c1.CompareTo(c2) >= 0;
        }
        public static bool operator <(Classement c1, Classement c2)
        {
            if (c1 == null)
                return false;
            if (c2 == null)
                return false;
            return c1.CompareTo(c2) < 0;
        }
        public static bool operator <=(Classement c1, Classement c2)
        {
            if (c1 == null)
                return false;
            if (c2 == null)
                return false;
            return c1.CompareTo(c2) <= 0;
        }

        #endregion


        public int CompareTo(Classement other)
        {
            if (other == this)
                return 0;
            if (other == null)
                return 1;
            if (m_class.isNullorEmpty())
            {
                if (other.m_class.isNullorEmpty())
                    return 0;
                return -1;
            }
            if (other.m_class.isNullorEmpty())
                return 1;
            int cmp = 0;
            int count = m_class.Length;
            int ocount = other.m_class.Length;
            for (int i = 0; i < count && i < ocount; i++)
            {
                var c = m_class[i];
                var oc = other.m_class[i];
                cmp = c.CompareTo(oc);
                if (cmp != 0)
                    return cmp;
            }
            if (count < ocount)
            {

                var otherC = Convert.ToInt32(other.m_class[count].ToString());
                cmp = m_rating.CompareTo(otherC);
                if (cmp != 0)
                    return cmp;
                return -1;
            }
            else if (count > ocount)
            {
                var rating = other.m_rating;
                var value = Convert.ToInt32(m_class[ocount].ToString());
                cmp = value.CompareTo(rating);
                if (cmp != 0)
                    return cmp;
                return 1;
            }
            else
            {
                var rating = this.m_rating;
                var orating = other.m_rating;
                cmp = rating.CompareTo(orating);
                return cmp;
            }
        }

        public int CompareTo(object obj)
        {
            var o = obj as Classement;
            if (o == null)
                return 1;
            return CompareTo(o);
        }
    }
}
]]></content>
  </file>
</db>
