<db path="C:\Bernard\db1\pdb4">
  <file path="\pdb.player\Vue\ConfAlbumSortW.xaml">
    <content><![CDATA[<Window x:Class="pdb.player.Vue.ConfAlbumSortW"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="ConfAlbumSortW" Loaded="Window_Loaded">
    <Grid  IsSharedSizeScope="True">

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid Grid.Row="0" Name="gfirst" IsSharedSizeScope="True"/>

        <Grid Grid.Row="1" Name="gsecond"  IsSharedSizeScope="True"/>
        <!--<Grid Grid.ColumnSpan="2" Margin="0,0,-172,0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="236*" />
            </Grid.ColumnDefinitions>
            <CheckBox Grid.Row="0" Grid.Column="0" Name="cb_enabled" ToolTip="utilisé" Margin="5" Padding="2" />
            <ComboBox Grid.Row="0" Grid.Column="1" Name="cbxSort" Height="22" Padding="4" >
                <ComboBoxItem ToolTip="pas de conf" Name="none"></ComboBoxItem>
                <ComboBoxItem ToolTip="tri sur moyenne quand aucun des albums n'a défini sa médianne" Name="strict">strict</ComboBoxItem>
                <ComboBoxItem ToolTip="calcul Médianne moins strict" Name="light" >light</ComboBoxItem>
                <ComboBoxItem ToolTip="tri uniquement sur la moyenne" Name="moy" >moy</ComboBoxItem>
            </ComboBox>

            <TextBox  Grid.Row="0" Grid.Column="2" Name="tb_medianne" Width="30" ToolTip="medianne" Margin="5" />
            <CheckBox  Grid.Row="0" Grid.Column="3" Name="cb_quasi" ToolTip="quasi" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="4" Name="cb_lissage" ToolTip="lissage" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="5" Name="cb_removeEpsilon" ToolTip="removeEpsilon" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="6" Name="cb_reSort" ToolTip="reSort" Margin="5" Padding="2" />
            <TextBox  Grid.Row="0" Grid.Column="7" Name="tb_safe" Width="30" ToolTip="safe" Margin="5" KeyUp="tb_safe_KeyUp" />
            <TextBox  Grid.Row="0" Grid.Column="8" Name="tb_coeff" Width="40" ToolTip="coeff des morceaux virtuels" Margin="5" KeyUp="tb_safe_KeyUp" />
            <TextBox  Grid.Row="0" Grid.Column="9" Name="tb_coeffT" Width="40" ToolTip="coeff total des morceaux virtuels" Margin="5" KeyUp="tb_coeffT_KeyUp" />
            <CheckBox  Grid.Row="0" Grid.Column="10" Name="cb_removeFirst" ToolTip="mise à zero des premiers" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="11" Name="cb_deleteFirst" ToolTip="suppression des premiers" Margin="5" Padding="2" />
            <ComboBox ToolTip="removelast" Grid.Row="0" Grid.Column="12" Name="cbx1_removeLast" Height="22" Padding="4" >
                <ComboBoxItem>non</ComboBoxItem>
                <ComboBoxItem>unselected</ComboBoxItem>
                <ComboBoxItem>virtuels</ComboBoxItem>
                <ComboBoxItem>tous</ComboBoxItem>
            </ComboBox>
            <CheckBox  Grid.Row="0" Grid.Column="13" Name="cb_cumul" ToolTip="cumul" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="14" Name="cb_noAdd" ToolTip="pas d'ajout" Margin="5" Padding="2" />
            <TextBox  Grid.Row="0" Grid.Column="15" Name="tb_exp" Width="30" ToolTip="exposant proportion des morceaux gérés" Margin="5" />
            <CheckBox  Grid.Row="0" Grid.Column="16" Name="cb_removeEnabled" ToolTip="remove enabled" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="17" Name="cb_virtOnlyDisabled" ToolTip="virtuel: seulement les décochés" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="18" Name="cb_forceCoeffVirt" ToolTip="virtuel: coeff forcé" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="19" Name="cb_virtAlignSelected" ToolTip="virtuel: aligné sur le coché" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="20" Name="cb_virtAlignPrec" ToolTip="virtuel: aligné sur le précédent" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="21" Name="cb_coeffVirtAdjust" ToolTip="coeffvirt ajusté sur coeff selected" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="22" Name="cb_coeffVirtAuto" ToolTip="coeffvirt automatique" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="23" Name="cb_noaddEnd" ToolTip="en fin d'alum pas de virtuel" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="24" Name="cb_noaddAll" ToolTip="tout virtuel" Margin="5" Padding="2" />

            <ComboBox ToolTip="ajusté avec le plus mauvais coché si besoin" Grid.Row="0" Grid.Column="25" Name="cbx_cmpMinn" Height="22" Padding="4" >
                <ComboBoxItem ToolTip="pas géré" >non</ComboBoxItem>
                <ComboBoxItem ToolTip="ce qui reste dispo est plus grand que la médianne">orphelin</ComboBoxItem>
                <ComboBoxItem ToolTip="tou ce qui est noté et coché">toujours</ComboBoxItem>
            </ComboBox>
            <TextBox  Grid.Row="0" Grid.Column="26" Name="tb_zero" Width="120" ToolTip="zéro" Margin="5" />

            <CheckBox Grid.Row="1" Grid.Column="0"  Name="cb2_enabled" ToolTip="utilisé" Margin="5" Padding="2" />
            <ComboBox Grid.Row="1" Grid.Column="1" Name="cbx2Sort" Height="22" Padding="4" >
                <ComboBoxItem ToolTip="pas de conf" Name="none2"></ComboBoxItem>
                <ComboBoxItem ToolTip="tri sur moyenne quand aucun des albums n'a défini sa médianne" Name="strict2">strict</ComboBoxItem>
                <ComboBoxItem ToolTip="calcul Médianne moins strict" Name="light2" >light</ComboBoxItem>
                <ComboBoxItem ToolTip="tri uniquement sur la moyenne" Name="moy2" >moy</ComboBoxItem>
            </ComboBox>

            <TextBox Grid.Row="1" Grid.Column="2"  Name="tb2_medianne" Width="30" ToolTip="medianne" Margin="5" />
            <CheckBox Grid.Row="1" Grid.Column="3" Name="cb2_quasi" ToolTip="quasi" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="4" Name="cb2_lissage" ToolTip="lissage" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="5" Name="cb2_removeEpsilon" ToolTip="removeEpsilon" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="6" Name="cb2_reSort" ToolTip="reSort" Margin="5" Padding="2" />
            <TextBox  Grid.Row="1" Grid.Column="7" Name="tb2_safe" Width="30" ToolTip="safe" Margin="5" />
            <TextBox  Grid.Row="1" Grid.Column="8" Name="tb2_coeff" Width="40" ToolTip="coeff des morceaux virtuels" Margin="5" />
            <TextBox  Grid.Row="1" Grid.Column="9" Name="tb2_coeffT" Width="40" ToolTip="coeff total des morceaux virtuels" Margin="5"  />
            <CheckBox  Grid.Row="1" Grid.Column="10" Name="cb2_removeFirst" ToolTip="removeFirst" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="11" Name="cb2_deleteFirst" ToolTip="deleteFirst" Margin="5" Padding="2" />
            <ComboBox ToolTip="removelast" Grid.Row="1" Grid.Column="12" Name="cbx2_removeLast" Height="22" Padding="4" >
                <ComboBoxItem>non</ComboBoxItem>
                <ComboBoxItem>unselected</ComboBoxItem>
                <ComboBoxItem>virtuels</ComboBoxItem>
                <ComboBoxItem>tous</ComboBoxItem>
            </ComboBox>
            <CheckBox  Grid.Row="1" Grid.Column="13" Name="cb2_cumul" ToolTip="cumul" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="14" Name="cb2_noAdd" ToolTip="pas d'ajout" Margin="5" Padding="2" />
            <TextBox  Grid.Row="1" Grid.Column="15" Name="tb2_exp" Width="30" ToolTip="exposant proportion des morceaux gérés" Margin="5" />
            <CheckBox  Grid.Row="1" Grid.Column="16" Name="cb2_removeEnabled" ToolTip="remove enabled" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="17" Name="cb2_virtOnlyDisabled" ToolTip="virtuel: seulement les décochés" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="18" Name="cb2_forceCoeffVirt" ToolTip="virtuel: coeff forcé" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="19" Name="cb2_virtAlignSelected" ToolTip="virtuel: aligné sur le coché" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="20" Name="cb2_virtAlignPrec" ToolTip="virtuel: aligné sur le précédent" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="21" Name="cb2_coeffVirtAdjust" ToolTip="coeffvirt ajusté sur coeff selected" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="22" Name="cb2_coeffVirtAuto" ToolTip="coeffvirt automatique" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="23" Name="cb2_noaddEnd" ToolTip="en fin d'alum pas de virtuel" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="24" Name="cb2_noaddAll" ToolTip="tout virtuel" Margin="5" Padding="2" />
            <ComboBox ToolTip="ajusté avec le plus mauvais coché si besoin" Grid.Row="1" Grid.Column="25" Name="cbx2_cmpMinn" Height="22" Padding="4" >
                <ComboBoxItem ToolTip="pas géré" >non</ComboBoxItem>
                <ComboBoxItem ToolTip="ce qui reste dispo est plus grand que la médianne">orphelin</ComboBoxItem>
                <ComboBoxItem ToolTip="tou ce qui est noté et coché">toujours</ComboBoxItem>
            </ComboBox>
            <TextBox  Grid.Row="1" Grid.Column="26" Name="tb2_zero" Width="120" ToolTip="zéro" Margin="5" />
        </Grid>-->
        <Grid Grid.Row="2" Height="65" Margin="0,0,0,-30">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <StackPanel Grid.Row="2" Grid.Column="0" Orientation="Horizontal"  HorizontalAlignment="Left"  Margin="0,5" >
                <CheckBox Name="cb_createCourant" ToolTip="générer stats en cours (désactivés)"  Margin="5" Padding="2"></CheckBox>
                <CheckBox Name="cb_createInter" ToolTip="générer stats en cours + provisoire"  Margin="5" Padding="2"></CheckBox>
                <CheckBox Name="cb_createAll" ToolTip="générer stats de tout"  Margin="5" Padding="2"></CheckBox>
                <DatePicker Name="dp_date" ToolTip="Date seuil pour considérer un classement provisoire" />
            </StackPanel>
            <StackPanel Orientation="Horizontal"  HorizontalAlignment="Right" Margin="5,5,8,5"  Width="326">
                <TextBox Grid.Row="2" Name="tb_stackSize" Width="30"  VerticalAlignment="Center" Text="10" ToolTip="taille de la pile d'exclusion" Margin="5" Padding="2"/>
                <CheckBox Grid.Row="2" Name="cb_stackEnabled" Width="30"  VerticalAlignment="Center" ToolTip="Utiliser la pile d'exclusion" Margin="5" Padding="2" />
                <CheckBox Grid.Row="2" Name="cb_checkStack" Width="30"  VerticalAlignment="Center" ToolTip="Ne pas prendre en compte les albums retardés dans la file d'attente pour la cinématique" Margin="5" Padding="2" />
                <CheckBox Grid.Row="2" Name="cb_idem" Width="30"  VerticalAlignment="Center" ToolTip="Lier les items" Margin="5" Padding="2" Click="cb_idem_Click" />

                <Button Grid.Row="2" Name="bt_cancel" IsCancel="true" Height="25" HorizontalAlignment="Right" Content="Cancel" Click="bt_cancel_Click"   Margin="5" Padding="2"/>
                <Button Grid.Row="2" Name="bt_ok" Height="25" HorizontalAlignment="Right" Content="Ok" Click="bt_ok_Click"   Margin="5" Padding="2"/>
                <Button Grid.Row="2" Name="bt_coul" Height="25" HorizontalAlignment="Right" Content="Couleurs" Click="bt_coul_Click"   Margin="5" Padding="2"/>
            </StackPanel>
        </Grid>
    </Grid>

</Window>
]]></content>
  </file>
  <file path="\pdb.player\Vue\ConfAlbumSortW.xaml.cs">
    <content><![CDATA[using System;
using System.Windows;
using pdb.gen.Tuning;
using pdb.gen;
using pdb.db.piece.type;
using pdb.player.Vue.Conf;
using System.Windows.Controls;

namespace pdb.player.Vue
{
    /// <summary>
    /// Interaction logic for ConfAlbumSortW.xaml
    /// </summary>
    public partial class ConfAlbumSortW : Window, IConfSort
    {
        private ConfAlbumSort conf;
        private ConfMedianneW first;
        private ConfMedianneW second;
        private static bool _idem;
        public ConfAlbumSortW()
        {
            InitializeComponent();
            this.Loaded += new RoutedEventHandler(ConfAlbumSortW_Loaded);
        }

        void ConfAlbumSortW_Loaded(object sender, RoutedEventArgs e)
        {
            bt_ok.IsDefault = true;

            display();
        }

        public ConfAlbumSortW(ConfAlbumSort conf)
            : this()
        {
            this.conf = conf;
            first = new ConfMedianneW(conf.Composants[0], this);
            gfirst.Children.Add(first);
            if (conf.Composants.Count > 1)
            {
                second = new ConfMedianneW(conf.Composants[1], this);
                gsecond.Children.Add(second);
            }

            InitializeComponent();
        }

        void display()
        {
          
            tb_stackSize.Text = conf.stackSize.ToString();
            cb_createAll.IsChecked = conf.createAll;
            cb_createInter.IsChecked = conf.createInter;
            cb_createCourant.IsChecked = conf.createCourant;
            dp_date.SelectedDate = conf.lastModif;
            cb_idem.IsChecked = _idem;
            cb_checkStack.IsChecked = conf.checkStack;
            cb_stackEnabled.IsChecked = conf.stackEnabled; 
         

            first.display();
            if (second != null)
                second.display();


            //var list = conf.Composants;
            //var item1 = list[0];
            //cb_enabled.IsChecked = item1.enabled;
            //cbxSort.SelectedIndex = (int)item1.type;
            //tb_medianne.Text = item1.medianne.ToString();
            //cb_quasi.IsChecked = item1.quasi;
            //cb_lissage.IsChecked = item1.lissage;
            //cb_removeEpsilon.IsChecked = item1.removeEpsilon;
            //cb_reSort.IsChecked = item1.reSort;
            //cb_removeFirst.IsChecked = item1.removeFirst;
            //cb_deleteFirst.IsChecked = item1.deleteFirst;
            //cbx1_removeLast.SelectedIndex = (int)item1.removeLast;
            //cb_cumul.IsChecked = item1.cumul;
            //cb_noAdd.IsChecked = item1.noAdd;
            //tb_safe.Text = item1.safe.ToString();
            //tb_coeff.Text = item1.coeffVirt.ToString();
            //tb_exp.Text = item1.expEnabled.ToString();
            //tb_zero.Text = Piece.getClassementEquiv(item1.zero);
            //cb_removeEnabled.IsChecked = item1.removeEnabled;
            //cb_virtOnlyDisabled.IsChecked = item1.virtOnlyDisabled;
            //cb_forceCoeffVirt.IsChecked = item1.forceCoeffVirt;
            //cb_virtAlignPrec.IsChecked = item1.virtAlignPrec;
            //cb_virtAlignSelected.IsChecked = item1.virtAlignSelected;
            //cb_coeffVirtAdjust.IsChecked = item1.coeffVirtAdjust;
            //cb_coeffVirtAuto.IsChecked = item1.coeffVirtAuto;
            //cbx_cmpMinn.SelectedIndex = (int)item1.cmpMin;
            //cb_noaddEnd.IsChecked = item1.noAddEnd;
            //cb_noaddAll.IsChecked = item1.noAddAll; 





            //if (list.Count > 1)
            //{
            //    item1 = list[1];
            //    cb2_enabled.IsChecked = item1.enabled;
            //    cbx2Sort.SelectedIndex = (int)item1.type;
            //    tb2_medianne.Text = item1.medianne.ToString();
            //    cb2_quasi.IsChecked = item1.quasi;
            //    cb2_lissage.IsChecked = item1.lissage;
            //    cb2_removeEpsilon.IsChecked = item1.removeEpsilon;
            //    cb2_reSort.IsChecked = item1.reSort;
            //    cb2_removeFirst.IsChecked = item1.removeFirst;
            //    cb2_deleteFirst.IsChecked = item1.deleteFirst;
            //    cbx2_removeLast.SelectedIndex = (int)item1.removeLast;
            //    cb2_cumul.IsChecked = item1.cumul;
            //    cb2_noAdd.IsChecked = item1.noAdd;
            //    tb2_safe.Text = item1.safe.ToString();
            //    tb2_coeff.Text = item1.coeffVirt.ToString();
            //    tb2_exp.Text = item1.expEnabled.ToString();
            //    tb2_zero.Text = Piece.getClassementEquiv(item1.zero);
            //    cb2_removeEnabled.IsChecked = item1.removeEnabled;
            //    cb2_virtOnlyDisabled.IsChecked = item1.virtOnlyDisabled;
            //    cb2_forceCoeffVirt.IsChecked = item1.forceCoeffVirt;
            //    cb2_virtAlignPrec.IsChecked = item1.virtAlignPrec;
            //    cb2_virtAlignSelected.IsChecked = item1.virtAlignSelected;
            //    cb2_coeffVirtAdjust.IsChecked = item1.coeffVirtAdjust;
            //    cb2_coeffVirtAuto.IsChecked = item1.coeffVirtAuto;
            //    cbx2_cmpMinn.SelectedIndex = (int)item1.cmpMin;
            //    cb2_noaddEnd.IsChecked = item1.noAddEnd;
            //    cb2_noaddAll.IsChecked = item1.noAddAll; 
            //}
        }
        void record()
        {
          
            conf.stackSize = Convert.ToInt32(tb_stackSize.Text);
            conf.createCourant = cb_createCourant.IsChecked.Value;
            conf.createInter = cb_createInter.IsChecked.Value;
            conf.createAll = cb_createAll.IsChecked.Value;
            conf.lastModif = dp_date.SelectedDate.Value;
            conf.checkStack = cb_checkStack.IsChecked.Value;
            conf.stackEnabled = cb_stackEnabled.IsChecked.Value; 
          

            first.record();
            if (second != null)
                second.record();

           


            //var list = conf.Composants;
            //var item1 = list[0];
            //item1.enabled = cb_enabled.IsChecked.Value;
            //item1.type = (util.medianneMode)cbxSort.SelectedIndex;
            //item1.medianne = Convert.ToDecimal(tb_medianne.Text);
            //item1.quasi = cb_quasi.IsChecked.Value;
            //item1.lissage = cb_lissage.IsChecked.Value;
            //item1.removeEpsilon = cb_removeEpsilon.IsChecked.Value;
            //item1.reSort = cb_reSort.IsChecked.Value;
            //item1.removeFirst = cb_removeFirst.IsChecked.Value;
            //item1.deleteFirst = cb_deleteFirst.IsChecked.Value;
            //item1.removeLast = (util.removeLast)cbx1_removeLast.SelectedIndex;
            //item1.cumul = cb_cumul.IsChecked.Value;
            //item1.noAdd = cb_noAdd.IsChecked.Value;
            //item1.safe = Convert.ToInt32(tb_safe.Text);
            //item1.coeffVirt = Convert.ToDecimal(tb_coeff.Text);
            //item1.expEnabled = Convert.ToDecimal(tb_exp.Text);
            //var cl = Classement.create(tb_zero.Text);
            //item1.zero = cl.RapportClassement;
            //item1.removeEnabled = cb_removeEnabled.IsChecked.Value;
            //item1.virtOnlyDisabled = cb_virtOnlyDisabled.IsChecked.Value;
            //item1.forceCoeffVirt = cb_forceCoeffVirt.IsChecked.Value;
            //item1.virtAlignPrec = cb_virtAlignPrec.IsChecked.Value;
            //item1.virtAlignSelected = cb_virtAlignSelected.IsChecked.Value;
            //item1.coeffVirtAuto = cb_coeffVirtAuto.IsChecked.Value;
            //item1.coeffVirtAdjust = cb_coeffVirtAdjust.IsChecked.Value;
            //item1.cmpMin = (util.modeMin)cbx_cmpMinn.SelectedIndex;
            //item1.noAddEnd = cb_noaddEnd.IsChecked.Value;
            //item1.noAddAll = cb_noaddAll.IsChecked.Value; 

            //if (list.Count > 1)
            //{
            //    if (cbx2Sort.SelectedIndex == 0)
            //    {
            //        list.RemoveAt(1);
            //        return;
            //    }
            //}
            //else
            //{
            //    if (cbx2Sort.SelectedIndex > 0)
            //    {
            //        item1 = new util.ConfMedianne();
            //        list.Add(item1);
            //    }
            //}

            //if (list.Count > 1)
            //{
            //    item1 = list[1];

            //    item1.enabled = cb2_enabled.IsChecked.Value;
            //    item1.type = (util.medianneMode)cbx2Sort.SelectedIndex;
            //    item1.medianne = Convert.ToDecimal(tb2_medianne.Text);
            //    item1.quasi = cb2_quasi.IsChecked.Value;
            //    item1.lissage = cb2_lissage.IsChecked.Value;
            //    item1.removeEpsilon = cb2_removeEpsilon.IsChecked.Value;
            //    item1.reSort = cb2_reSort.IsChecked.Value;
            //    item1.removeFirst = cb2_removeFirst.IsChecked.Value;
            //    item1.deleteFirst = cb2_deleteFirst.IsChecked.Value;
            //    item1.removeLast = (util.removeLast)cbx2_removeLast.SelectedIndex;
            //    item1.cumul = cb2_cumul.IsChecked.Value;
            //    item1.noAdd = cb2_noAdd.IsChecked.Value;
            //    item1.safe = Convert.ToInt32(tb2_safe.Text);
            //    item1.coeffVirt = Convert.ToDecimal(tb2_coeff.Text);
            //    item1.expEnabled = Convert.ToDecimal(tb2_exp.Text);
            //    item1.zero = Convert.ToDecimal(tb2_zero.Text);

            //    cl = Classement.create(tb2_zero.Text);
            //    item1.zero = cl.RapportClassement;
            //    item1.removeEnabled = cb2_removeEnabled.IsChecked.Value;
            //    item1.virtOnlyDisabled = cb2_virtOnlyDisabled.IsChecked.Value;
            //    item1.forceCoeffVirt = cb2_forceCoeffVirt.IsChecked.Value;
            //    item1.virtAlignPrec = cb2_virtAlignPrec.IsChecked.Value;
            //    item1.virtAlignSelected = cb2_virtAlignSelected.IsChecked.Value;
            //    item1.coeffVirtAuto = cb2_coeffVirtAuto.IsChecked.Value;
            //    item1.coeffVirtAdjust = cb2_coeffVirtAdjust.IsChecked.Value;
            //    item1.cmpMin = (util.modeMin)cbx2_cmpMinn.SelectedIndex;
            //    item1.noAddEnd = cb2_noaddEnd.IsChecked.Value;
            //    item1.noAddAll = cb2_noaddAll.IsChecked.Value; 
            //}
        }

        private void bt_cancel_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        private void bt_ok_Click(object sender, RoutedEventArgs e)
        {
            record();
            Close();
            conf.Calcul();
            App.go();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {

        }




        //public string CoeffEnabled
        //{
        //    get { return tb_coeffEnabled.Text; }
        //}

        public bool DuplicateItem
        {
            get
            {
                bool ret = cb_idem.IsChecked.Value;
                _idem = ret;
                return ret;
            }
        }
        private void tb_safe_KeyUp(object sender, System.Windows.Input.KeyEventArgs e)
        {
            first.onchange();

            if (second != null)
                second.onchange();
        }

        private void bt_coul_Click(object sender, RoutedEventArgs e)
        {
            new ConfCouleurs().Show();
        }

        private void cb_idem_Click(object sender, RoutedEventArgs e)
        {
            first.checkIdem();
            if (second != null)
                second.checkIdem();
        }

    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\Conf\ConfVirt.xaml">
    <content><![CDATA[<UserControl x:Class="pdb.player.Vue.Conf.ConfVirt"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="103.332" Width="2537.578">
    <Grid Grid.IsSharedSizeScope="True" >
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" SharedSizeGroup="V1" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V2" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V3" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V4" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V5" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V6" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V7" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V8" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V9" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V10" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V11" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V12" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V13" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V14" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V15" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V16" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V17" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V18" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V19" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V20" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V21" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V22" />

            <ColumnDefinition Width="Auto" SharedSizeGroup="V23" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V24" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V25" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V26" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V27" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V28" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V29" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V30" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V31" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V32" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V33" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V34" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V35" />
        </Grid.ColumnDefinitions>

        <WrapPanel>
            <CheckBox Height="20" VerticalAlignment="Center" Name="cb_lissage" ToolTip="lissage" Margin="5,22" Padding="2" Grid.RowSpan="2" />
            <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="1" Name="cb_removeEpsilon" ToolTip="removeEpsilon" Margin="5,22" Padding="2" Grid.RowSpan="2" />
            <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="2" Name="cb_reSort" ToolTip="reSort" Margin="5,22" Padding="2" Grid.RowSpan="2" />
            <TextBox Grid.Column="3" Name="tb_safe" ToolTip="safe" Margin="6,22,5,22" KeyUp="tb_safe_KeyUp" Grid.RowSpan="2" />
            <TextBox Grid.Column="4" Name="tb_coeff" ToolTip="coeff des morceaux virtuels" Margin="5,22,6,22" KeyUp="tb_safe_KeyUp" Grid.RowSpan="2" />
            <TextBox  Grid.Column="5" Name="tb_coeffT" ToolTip="coeff total des morceaux virtuels" Margin="6,22,5,22" KeyUp="tb_coeffT_KeyUp" Grid.RowSpan="2" />


            <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="6" Name="cb_cumul" ToolTip="cumul" Margin="5,22" Padding="2" Grid.RowSpan="2" />
            <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="7" Name="cb_noAdd" ToolTip="pas d'ajout" Margin="5,22" Padding="2" Grid.RowSpan="2" />


            <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="8" Name="cb_virtOnlyDisabled" ToolTip="virtuel: seulement les décochés" Margin="5,22" Padding="2" Grid.RowSpan="2" />
            <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="9" Name="cb_forceCoeffVirt" ToolTip="virtuel: coeff forcé" Margin="5,22" Padding="2" Grid.RowSpan="2" />
            <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="10" Name="cb_virtAlignSelected" ToolTip="virtuel: aligné sur le coché" Margin="5,22" Padding="2" Grid.RowSpan="2" />
            <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="11" Name="cb_virtAlignPrec" ToolTip="virtuel: aligné sur le précédent" Margin="5,22" Padding="2" Grid.RowSpan="2" />
            <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="12" Name="cb_coeffVirtAdjust" ToolTip="coeffvirt ajusté sur coeff selected" Margin="5,22" Padding="2" Grid.RowSpan="2" />
            <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="13" Name="cb_coeffVirtAuto" ToolTip="coeffvirt automatique" Margin="5,22" Padding="2" Grid.RowSpan="2" />
            <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="14" Name="cb_noaddEnd" ToolTip="en fin d'alum pas de virtuel" Margin="5,22" Padding="2" Grid.RowSpan="2" />
            <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="15" Name="cb_noaddAll" ToolTip="tout virtuel" Margin="5,22" Padding="2" Grid.RowSpan="2" />
            <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="16" Name="cb_auto" ToolTip="pilotage auto" Margin="5,22" Padding="2" Grid.RowSpan="2" />
            <TextBox Grid.Column="17" Name="tb_dcoeffp" ToolTip="delta en montée" Margin="5,22,6,22" Grid.RowSpan="2" KeyUp="tb_dcoeffp_KeyUp" />
            <TextBox Grid.Column="18" Name="tb_serialp" ToolTip="série en montée" Margin="6,22,5,22" Grid.RowSpan="2" />
            <TextBox Grid.Column="19" Name="tb_dcoeffm" ToolTip="delta en descente" Margin="5,22,6,22" Grid.RowSpan="2" />
            <TextBox Grid.Column="20" Name="tb_serialm" ToolTip="série en descente" Margin="6,22,5,22" Grid.RowSpan="2" />
            <TextBox Grid.Column="21" Name="tb_serial" ToolTip="série en cours" Margin="5,22,6,22" Grid.RowSpan="2" ToolTipService.ShowOnDisabled="True" />
            <TextBox Grid.Column="22" Name="tb_convergence" ToolTip="convergence" Margin="6,22,5,22" Grid.RowSpan="2" KeyUp="tb_convergence_KeyUp" />
            <TextBox Grid.Column="23" Name="tb_dconvdeltap" ToolTip="evol convergent +" Margin="5,22,6,22" Grid.RowSpan="2" />
            <TextBox Grid.Column="24" Name="tb_dconvdeltam" ToolTip="cevol convergent -" Margin="6,22,5,22" Grid.RowSpan="2" />

            <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="25" Name="cb_link" ToolTip="aligner convergence et coeff" Margin="5,22" Padding="2" Grid.RowSpan="2" Click="cb_link_Click" />
            <TextBox Grid.Column="26" Name="tb_prod" ToolTip="produit de convergence" Margin="5,22,6,22" Grid.RowSpan="2" KeyUp="tb_prod_KeyUp" ToolTipService.ShowOnDisabled="True" />
            <TextBox Grid.Column="27" Name="l_prod" ToolTip="produit de convergence effectif" Margin="6,22,5,22" Grid.RowSpan="2" ToolTipService.ShowOnDisabled="True"  IsReadOnly="True"/>
            <TextBox Grid.Column="28" Name="tb_anti" ToolTip="anti-convergence" Margin="5,22,6,22" Grid.RowSpan="2" />
            <TextBox Grid.Column="29" Name="tb_antideltap" ToolTip="evol anti-convergent +" Margin="6,22,5,22" Grid.RowSpan="2" />
            <TextBox Grid.Column="30" Name="tb_antideltam" ToolTip="evol anti-convergent -" Margin="5,22,6,22" Grid.RowSpan="2" />
            <TextBox  Height="20" Grid.Column="31" Name="tb_coeffOld"  VerticalAlignment="Center" Text="1" ToolTip="Coeff des vieux morceaux" Margin="6,22,5,22" Grid.RowSpan="2" />
            <CheckBox Height="20" Grid.Column="32" Name="cb_oldAsZero" VerticalAlignment="Center" ToolTip="Vieux comme null" Margin="5,22,6,22" Padding="2" Grid.RowSpan="2" />
            <CheckBox Height="20" Grid.Column="33" Name="cb_coeffOldAuto" VerticalAlignment="Center" ToolTip="Vieux comme null" Margin="6,22,5,22" Padding="2" Grid.RowSpan="2" />

            <TextBox  Height="20" Grid.Column="34" Name="tb_coeffAutoLevel"  VerticalAlignment="Center" Text="4" ToolTip="Niveau des vieux" Margin="6,22,5,22" Grid.RowSpan="2" />


        </WrapPanel>
    </Grid>
</UserControl>
]]></content>
  </file>
  <file path="\pdb.player\Vue\Conf\ConfVirt.xaml.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using pdb.util;
using Math = System.Math; 
namespace pdb.player.Vue.Conf
{
    public interface IConfSort
    {
     //   string CoeffEnabled { get; }
        bool DuplicateItem { get; }
    }
    /// <summary>
    /// Interaction logic for ConfVirt.xaml
    /// </summary>
    public partial class ConfVirt : UserControl
    {
        private ConfMedianneVirt conf;
        private IConfSort parent;
    


        decimal coeffp;
        decimal prod;
        decimal conv; 
        

        public ConfVirt()
        {
            InitializeComponent();
        }

        public ConfVirt(ConfMedianneVirt conf, IConfSort parent)
            : this()
        {
            this.conf = conf;
            this.parent = parent;
            //display();
            //onchange();
        }

        public ConfMedianneVirt Conf
        {
            set
            {
                this.conf = value; 
            }
        }


        public void display()
        {

           
            cb_lissage.IsChecked = conf.lissage;
            cb_removeEpsilon.IsChecked = conf.removeEpsilon;
            cb_reSort.IsChecked = conf.reSort;


            cb_cumul.IsChecked = conf.cumul;
            cb_noAdd.IsChecked = conf.noAdd;
            tb_safe.Text = conf.safe.ToString();
            tb_coeff.Text = conf.coeffVirt.ToString();


            cb_virtOnlyDisabled.IsChecked = conf.virtOnlyDisabled;
            cb_forceCoeffVirt.IsChecked = conf.forceCoeffVirt;
            cb_virtAlignPrec.IsChecked = conf.virtAlignPrec;
            cb_virtAlignSelected.IsChecked = conf.virtAlignSelected;
            cb_coeffVirtAdjust.IsChecked = conf.coeffVirtAdjust;
            cb_coeffVirtAuto.IsChecked = conf.coeffVirtAuto;


            cb_noaddEnd.IsChecked = conf.noAddEnd;
            cb_noaddAll.IsChecked = conf.noAddAll;

            cb_auto.IsChecked = conf.auto;
            coeffp = conf.dcoeffp;
            tb_dcoeffp.Text = coeffp.ToString(); //"0.#####");
            tb_dcoeffm.Text = conf.dcoeffm.ToString(); //  ("0.#####");
            conv = conf.dconvergence;
            tb_convergence.Text = conv.ToString(); //  ("0.######");
            tb_dconvdeltap.Text = conf.dconvdeltap.ToString(); //  ("0.######");
            tb_dconvdeltam.Text = conf.dconvdeltam.ToString(); //  ("0.######");

            tb_anti.Text = conf.danticonvergence.ToString(); //  ("0.#####");
            tb_antideltap.Text = conf.danticonvdeltap.ToString(); //  ("0.######");
            tb_antideltam.Text = conf.danticonvdeltam.ToString(); //  ("0.######");

            cb_link.IsChecked = conf.linkconv;

            prod = conf.LinkProduct;
            tb_prod.Text = prod.ToString("0.######");
            tb_prod.Visibility = conf.linkconv ? System.Windows.Visibility.Visible : System.Windows.Visibility.Collapsed; 
            l_prod.Text = conf.calcProduct(conf.dcoeffp, conf.dconvergence).ToString("0.######");
            tb_prod.IsEnabled = conf.linkconv;

            tb_serialp.Text = conf.serialp.ToString();
            tb_serialm.Text = conf.serialm.ToString();
            tb_serial.Text = conf.Serial.ToString();

            cb_oldAsZero.IsChecked = conf.oldAsZero;
            cb_coeffOldAuto.IsChecked = conf.coeffOldAuto;
            tb_coeffOld.Text = conf.coeffOld.ToString("0.######");
            tb_coeffAutoLevel.Text = conf.coeffOldAutoLevel.ToString(); 


           
          

        }

       

        public void record()
        {


            conf.lissage = cb_lissage.IsChecked.Value;
            conf.removeEpsilon = cb_removeEpsilon.IsChecked.Value;
            conf.reSort = cb_reSort.IsChecked.Value;

            conf.cumul = cb_cumul.IsChecked.Value;
            conf.noAdd = cb_noAdd.IsChecked.Value;
            conf.safe = Convert.ToInt32(tb_safe.Text);
            conf.coeffVirt = Convert.ToDecimal(tb_coeff.Text);

            conf.virtOnlyDisabled = cb_virtOnlyDisabled.IsChecked.Value;
            conf.forceCoeffVirt = cb_forceCoeffVirt.IsChecked.Value;
            conf.virtAlignPrec = cb_virtAlignPrec.IsChecked.Value;
            conf.virtAlignSelected = cb_virtAlignSelected.IsChecked.Value;
            conf.coeffVirtAuto = cb_coeffVirtAuto.IsChecked.Value;
            conf.coeffVirtAdjust = cb_coeffVirtAdjust.IsChecked.Value;

            conf.noAddEnd = cb_noaddEnd.IsChecked.Value;
            conf.noAddAll = cb_noaddAll.IsChecked.Value;

            conf.auto = cb_auto.IsChecked.Value;
            conf.dcoeffp = coeffp; // Convert.ToDecimal(tb_dcoeffp.Text);
            conf.dcoeffm = Convert.ToDecimal(tb_dcoeffm.Text);
            conf.dconvergence = conv; // Convert.ToDecimal(tb_convergence.Text);
            conf.dconvdeltap = Convert.ToDecimal(tb_dconvdeltap.Text);
            conf.dconvdeltam = Convert.ToDecimal(tb_dconvdeltam.Text);

            conf.danticonvergence = Convert.ToDecimal(tb_anti.Text);
            conf.danticonvdeltap = Convert.ToDecimal(tb_antideltap.Text);
            conf.danticonvdeltam = Convert.ToDecimal(tb_antideltam.Text);


            conf.linkconv = cb_link.IsChecked.Value;

            conf.serialp = Convert.ToInt32(tb_serialp.Text);
            conf.serialm = Convert.ToInt32(tb_serialm.Text);
            conf.Serial = Convert.ToInt32(tb_serial.Text);

            conf.oldAsZero = cb_oldAsZero.IsChecked.Value;
            conf.coeffOldAuto = cb_coeffOldAuto.IsChecked.Value;

            conf.coeffOld = Convert.ToDecimal(tb_coeffOld.Text);
            conf.coeffOldAutoLevel = Convert.ToInt32(tb_coeffAutoLevel.Text);

        }



        private void onchange2()
        {
            try
            {
                var safe = Convert.ToInt32(tb_safe.Text);
                var coeffT = Convert.ToDouble(tb_coeffT.Text);
                var coeff = Math.Pow(coeffT, (1.0 / (double)safe));
                tb_coeff.Text = coeff.ToString();
            }
            catch
            {
            }
        }

        private void tb_safe_KeyUp(object sender, System.Windows.Input.KeyEventArgs e)
        {
            onchange();
        }

        private void tb_coeffT_KeyUp(object sender, System.Windows.Input.KeyEventArgs e)
        {
            onchange2();
        }

        public void onchange()
        {



            //if (true == cb_coeffVirtAdjust.IsChecked)
            //{
            //    try
            //    {
            //        var safe = Convert.ToInt32(tb_safe.Text);
            //        var coeffEnabled = Convert.ToDecimal(parent.CoeffEnabled);
            //        var coeffVirt = Math.Pow((double)coeffEnabled, 1.0 / (safe + 1.0));
            //        tb_coeff.Text = coeffVirt.ToString();
            //    }
            //    catch
            //    {
            //    }
            //}

            //try
            //{
            //    var safe = Convert.ToInt32(tb_safe.Text);
            //    var coeff = Convert.ToDouble(tb_coeff.Text);
            //    var coeffT = Math.Pow(coeff, (double)safe);
            //    tb_coeffT.Text = coeffT.ToString("0.#####");
            //}
            //catch
            //{
            //}

        }

        private void cb_link_Click(object sender, RoutedEventArgs e)
        {
            tb_prod.IsEnabled = cb_link.IsChecked.Value;
            tb_prod.Visibility = cb_link.IsChecked.Value ? System.Windows.Visibility.Visible : System.Windows.Visibility.Collapsed; 
          
        }


       
        private void tb_prod_KeyUp(object sender, KeyEventArgs e)
        {
            try
            {
                prod = Convert.ToDecimal(tb_prod.Text);
                conv = conf.calcConv(coeffp, prod); 
                tb_convergence.Text = conv.ToString("0.######");
            }
            catch 
            {
                
                
            }
        }

        private void tb_dcoeffp_KeyUp(object sender, KeyEventArgs e)
        {
            try
            {
                coeffp = Convert.ToDecimal(tb_dcoeffp.Text);
                prod = conf.calcProduct(coeffp, conv);
                tb_prod.Text = prod.ToString("0.######");


            }
            catch
            {
            }
            
        }

        private void tb_convergence_KeyUp(object sender, KeyEventArgs e)
        {
            try
            {
                conv = Convert.ToDecimal(tb_convergence.Text);
                prod = conf.calcProduct(coeffp, conv);
                tb_prod.Text = prod.ToString("0.######");
            }
            catch
            {
            }
        }

        //private void calcProduct()
        //{
        //    try
        //    {
        //        var coeffp = Convert.ToDecimal(tb_dcoeffp.Text);
        //        var convergence = Convert.ToDecimal(tb_convergence.Text);
        //        tb_prod.Text = conf.calcProduct(coeffp, convergence).ToString("0.###");
        //    }
        //    catch
        //    {
        //    }
        //}

    }
}
]]></content>
  </file>
 
  <file path="\PieceDb.Consolid\albums\Albums.cs">
    <content><![CDATA[using pdb.util;
using System.Collections.Generic;
using System;
using pdb.obj;
using pdb.gen.conf;

namespace pdb.gen.albums
{
    public class Albums : IAlbumInit
    {
        public Albums(Consolid consolid)
        {
            this.consolid = consolid;
        }
        private BgDictString<Album> dict = new BgDictString<Album>();
        private Consolid consolid;
        private StackAlbum stack = StackAlbum.Instance;
        private void check_(Piece piece)
        {
            string __album = "-";
            var _album = piece.Album;
            if (!string.IsNullOrEmpty(_album))
            {
                __album = _album.Trim();
                var album = dict[__album];
                if (album == null)
                {
                    album = new Album(__album);
                    album.Virtual = piece.Virtual;
                    dict.Add(__album, album);
                }
                album.add(piece);

            }


        }

        public int Count { get { return dict.Count; } }

        private string getKey(string _album)
        {
            string str = "-";
            if (!string.IsNullOrEmpty(_album))
            {
                str = _album.Trim();
            }
            return str;
        }

        public void sortVirtual()
        {
            foreach (Album album in dict.Values)
            {
                if (album.Virtual)
                    album.sortVirtual();
            }
        }

        public void check(Piece piece)
        {
            check_(piece);
            foreach (Piece child in piece.Childs)
                check_(child);
        }

        public Album getAlbum(TrackList piece)
        {
            return piece.Piece.PieceAlbum;
            string __album = "-";
            var _album = piece.Album;
            if (!string.IsNullOrEmpty(_album))
            {
                __album = _album.Trim();
                return dict[__album];
            }
            return null;
        }

        public void makeSort()
        {

            var confSort = consolid.SortAlbumMode;
            stack.Capacity = confSort.stackSize;
            stack.Enabled = confSort.stackEnabled; 
            ///check to find first light
            ConfMedianne confMedianne = null;
            foreach (var cmp in confSort.ComposantsUtiles)
            {
                if (cmp.type == medianneMode.light || confMedianne == null)
                    confMedianne = cmp;
            }

            var conf0 = new ConfMedianne(confMedianne,true);
           

          

            var list = new List<Album>(dict.Values);
            foreach (Album album in list)
            {
                album.makeSort(confSort, confMedianne, conf0); //listRef, reference); 
            }

            list.Sort(new AlbumClassComparer(consolid.SortAlbumMode));
            list.Reverse();
            for (int i = 0; i < list.Count; i++)
            {
                list[i].Rank.Sort = i + 1;
            }
            // prise en compte de la stack
            stack.build();
            var listStack = stack.Albums;
            foreach (Album s in listStack)
            {
                string key = getKey(s.Name);
                var alb = dict[key];
                stack.merge(s, alb);
            }
            //list.Sort(new AlbumClassComparerStack());
            //for (int i = 0; i < list.Count; i++)
            //{
            //    list[i].Rank2 = i + 1; 
            //}
        }

        public List<Album> makeSelection()
        {
            var list = new List<Album>(dict.Values);
            foreach (Album album in list)
            {
                album.makeSelection();
            }
            list.Sort(new AlbumRestComparer());
            for (int i = 0; i < list.Count; i++)
            {
                list[i].Rank.RankRest = i + 1;
            }
            return list;
        }


        public List<Album> List
        {
            get
            {
                var list = new List<Album>();
                foreach (Album album in dict.Values)
                    list.Add(album);
                list.Sort(new AlbumNameComparer());
                return list;
            }
        }
        public List<Album> ListByUpdate
        {
            get
            {
                var list = new List<Album>();
                foreach (Album album in dict.Values)
                    list.Add(album);
                list.Sort(new AlbumLastModifClassementComparer());

                return list;
            }
        }

        public void signalClassChange(TrackList track)
        {
            var album = getAlbum(track);
            if (album == null)
                return;
            stack.Add(album);
        }



    }
}
]]></content>
  </file>
  <file path="\PieceDb.Consolid\albums\StackAlbum.cs">
    <content><![CDATA[using System.Collections.Generic;
using pdb.util;
using System.IO;

namespace pdb.gen.albums
{
    interface IAlbumInit
    {
        List<Album> ListByUpdate { get; }
    }
    class StackAlbum
    {
        private static AsyncFileWriter asyncFw = AsyncFileWriter.Instance; 
        const string PATH = @"..\stack.txt"; 
        private StackAlbum()
        {
            try
            {
                //string[] lines = File.ReadAllLines(PATH);
                //foreach (string line in lines)
                //{
                //    if (string.IsNullOrEmpty(line))
                //        continue;
                //    Add(new Album(line));
                //}
            }
            catch
            {
            }

        }
        private static StackAlbum _instance;
        private static volatile object _lock = new object();
        public void init(IAlbumInit provider)
        {
            if (list != null)
                return;
           
            var _list = provider.ListByUpdate;
            this.list = new HashList<Album>(_list); 
            foreach (Album album in _list)
                Add(album); 
        }
        public static StackAlbum Instance
        {
            get
            {
                if (_instance == null)
                {
                    lock (_lock)
                    {
                        if (_instance == null)
                            _instance = new StackAlbum();
                    }
                }
                return _instance;
            }
        }
        private HashList<Album> list; 
        private int capacity;
        public int Capacity
        {
            set
            {
                if (capacity != value)
                {
                    capacity = value;
                }
            }
        }


        private bool enabled;
        public bool Enabled { set { enabled = value; } }

        public void build()
        {
            int i = list.Count - 1;
            int nb = 0;
            int ii = list.Count;

            for (; i >= 0; i--)
            {
                nb++;
                if (!enabled || nb <= capacity)
                    list[i].StackValue = nb;
                else
                    list[i].StackValue = 0;
                list[i].StackIndex = nb;
            }
            //for (; i >= 0 && nb < capacity; i--)
            //{
            //    nb++;
            //    list[i].StackValue = nb;
            //    list[i].StackIndex = i + 1;
            //}
            //for (; i >= 0; i--)
            //{
            //    list[i].StackValue = 0;
            //    list[i].StackIndex = i+1;
            //}

            var sb = new StringBuilder(); 
            foreach (var album in list)
            {
                sb.AppendLine(album.Name); 
            }

            asyncFw.post(PATH, sb.ToString()); 
        }

        public void Add(Album album)
        {
            if (list.Contains(album))
                list.Remove(album);
            list.Add(album);
        }

        public List<Album> Albums { get { return new List<Album>(list); } }
        public void merge(Album mine, Album their)
        {
            if (mine == null || their == null)
                return; 
            int index = list.IndexOf(mine);
            their.StackValue = mine.StackValue;
            their.StackIndex = mine.StackIndex;
            list[index] = their;

        }
    }
}
]]></content>
  </file>
  <file path="\PieceDb.Consolid\Tuning\ConfAlbumSort.cs">
    <content><![CDATA[using System.Collections.Generic;
using System.Xml;
using pdb.util;
using System;
using pdb.gen.albums;

namespace pdb.gen.Tuning
{
    [Serializable]
    /// <summary>
    /// Configuration sort Albums
    /// </summary>
    public class ConfAlbumSort : TuningBase
    {

        private List<ConfMedianne> composants = new List<ConfMedianne>();
        private List<ConfMedianne> composantsUtiles = new List<ConfMedianne>();
        public List<ConfMedianne> Composants { get { return composants; } }
        public List<ConfMedianne> ComposantsUtiles { get { return composantsUtiles; } }
        // public decimal coeffEnabled = 1m;
        public int stackSize = 0;
        public bool checkStack = false;
        public bool stackEnabled = true; 
        public DateTime lastModif;
        public bool createCourant = true;
        public bool createInter = true;
        public bool createAll;
        // public bool oldAsZero; 
        public void Calcul()
        {
            composantsUtiles = new List<ConfMedianne>();
            foreach (var cmp in composants)
            {
                if (cmp.enabled)
                    composantsUtiles.Add(cmp);
            }
            if (composantsUtiles.Count == 0)
                composantsUtiles.Add(composants[0]);
        }
        public ConfAlbumSort()
        {
        }

        public ConfAlbumSort(XmlElement node)
            : base(node)
        {

            composants.Clear();
            foreach (XmlNode sub in node.ChildNodes)
            {
                if (sub is XmlElement)
                {
                    var cmp = new ConfMedianne(node, sub as XmlElement);
                    composants.Add(cmp);
                }
            }


            buildi("stackSize", v => stackSize = v);
            buildb("stackEnabled", v => stackEnabled = v);
            buildb("checkStack", v => checkStack = v);
            buildDate("lastModif", v => lastModif = v);
            buildb("createCourant", v => createCourant = v);
            buildb("createInter", v => createInter = v);
            buildb("createAll", v => createAll = v);


            
            Calcul();

        }

        public override void save(XmlWriter w)
        {
            base.save(w);
            writeStart("albumSort");

            write("stackSize", stackSize);
            write("stackEnabled", stackEnabled); 
            write("checkStack", checkStack);
            write("lastModif", lastModif);
            write("createCourant", createCourant);
            write("createInter", createInter);
            write("createAll", createAll);

            foreach (var cmp in composants)
                cmp.save(w);
            writeEnd();
        }
        public bool Enabled
        {
            get
            {
                foreach (var cmp in composants)
                {
                    if (cmp.enabled)
                        return true;
                }
                return false;
            }
        }

        public void auto(Piece p)
        {
            if (checkStack && p.StackIndex > 0 && p.StackIndex <= stackSize + 1)
                return;
            var motif = p.SelectedMotif;
            if (p.SelectedMotif == selectedCoeff.none)
                return;
            foreach (var cmp in composants)
            {
                cmp.auto(motif);
            }
        }
    }


}
]]></content>
  </file>
</db>
