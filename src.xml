<db path="C:\Bernard\db1\PieceDb3Ref">
  <file path="\pdb.player\App.xaml">
    <content><![CDATA[<Application x:Class="pdb.player.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:util="clr-namespace:pdb.player.Vue.Util"
             StartupUri="Player.xaml">
    <Application.Resources>
        <util:StringFormatConverter x:Key="StringFormater" />
        <util:TimeFormatConverter x:Key="TimeSpan" />
        <util:IntFormatConverter x:Key="Int" />
        <util:DecimalFormatConverter x:Key="decimal" />
        <util:ClFormatConverter x:Key="cl" />
        <util:BgColorFormatConverter x:Key="colorExport" />
        <util:ForeColorFormatConverter x:Key="foreColor" />
        <util:ColorDispoConverter x:Key="dispo" />
        <util:BoolToVis x:Key="boolVis" />
        <util:SortModeConverter x:Key="sortAlbum" />
        <util:DateConverter  x:Key="date" />
        <util:DateToDelaiConverter x:Key="delai" />
    </Application.Resources>
</Application>
]]></content>
  </file>
  <file path="\pdb.player\pdb.player.csproj">
    <content><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">x86</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4166FA60-B33F-4496-9352-EDD8F3214021}</ProjectGuid>
    <OutputType>Exe</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>pdb.player</RootNamespace>
    <AssemblyName>pdb.player</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
    <FileAlignment>512</FileAlignment>
    <ProjectTypeGuids>{60dc8134-eba5-43b8-bcc9-bb4bc16c2548};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
    <PlatformTarget>x86</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>TRACE;DEBUG;NONI</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
    <PlatformTarget>x86</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug|AnyCPU'">
    <DebugSymbols>true</DebugSymbols>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DebugType>full</DebugType>
    <PlatformTarget>x86</PlatformTarget>
    <CodeAnalysisLogFile>bin\pdb.player.exe.CodeAnalysisLog.xml</CodeAnalysisLogFile>
    <CodeAnalysisUseTypeNameInSuppression>true</CodeAnalysisUseTypeNameInSuppression>
    <CodeAnalysisModuleSuppressionsFile>GlobalSuppressions.cs</CodeAnalysisModuleSuppressionsFile>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSetDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\\Rule Sets</CodeAnalysisRuleSetDirectories>
    <CodeAnalysisIgnoreBuiltInRuleSets>true</CodeAnalysisIgnoreBuiltInRuleSets>
    <CodeAnalysisRuleDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\FxCop\\Rules</CodeAnalysisRuleDirectories>
    <CodeAnalysisIgnoreBuiltInRules>true</CodeAnalysisIgnoreBuiltInRules>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|AnyCPU'">
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <Optimize>true</Optimize>
    <DebugType>pdbonly</DebugType>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <CodeAnalysisLogFile>bin\Release\pdb.player.exe.CodeAnalysisLog.xml</CodeAnalysisLogFile>
    <CodeAnalysisUseTypeNameInSuppression>true</CodeAnalysisUseTypeNameInSuppression>
    <CodeAnalysisModuleSuppressionsFile>GlobalSuppressions.cs</CodeAnalysisModuleSuppressionsFile>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSetDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\\Rule Sets</CodeAnalysisRuleSetDirectories>
    <CodeAnalysisIgnoreBuiltInRuleSets>false</CodeAnalysisIgnoreBuiltInRuleSets>
    <CodeAnalysisRuleDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\FxCop\\Rules</CodeAnalysisRuleDirectories>
    <CodeAnalysisIgnoreBuiltInRules>true</CodeAnalysisIgnoreBuiltInRules>
  </PropertyGroup>
  <PropertyGroup>
    <StartupObject>pdb.player.App</StartupObject>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Interop.AXVLC, Version=1.0.0.0, Culture=neutral, processorArchitecture=x86">
      <SpecificVersion>False</SpecificVersion>
      <EmbedInteropTypes>False</EmbedInteropTypes>
      <HintPath>bin\Interop.AXVLC.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.Xaml">
      <RequiredTargetFramework>4.0</RequiredTargetFramework>
    </Reference>
    <Reference Include="WindowsBase" />
    <Reference Include="PresentationCore" />
    <Reference Include="PresentationFramework" />
    <Reference Include="Xceed.Wpf.Toolkit">
      <HintPath>libs\Extended WPF Toolkit Binaries\Xceed.Wpf.Toolkit.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <ApplicationDefinition Include="App.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </ApplicationDefinition>
    <Compile Include="MainWindow.xaml.cs">
      <DependentUpon>MainWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="model\Equalization.cs" />
    <Compile Include="ViewModel\AllTracksViewModel.cs" />
    <Compile Include="ViewModel\BibViewModel.cs" />
    <Compile Include="ViewModel\BibViewModelBase.cs" />
    <Compile Include="ViewModel\Colors\ColorViewModel.cs" />
    <Compile Include="ViewModel\Colors\Couleurs.cs" />
    <Compile Include="ViewModel\Colors\MementoColor.cs" />
    <Compile Include="ViewModel\Commande\CommandeBase.cs" />
    <Compile Include="ViewModel\Commande\CoulHistoryBack.cs" />
    <Compile Include="ViewModel\Commande\CreateListCmd.cs" />
    <Compile Include="ViewModel\Commande\DeleteCmd.cs" />
    <Compile Include="ViewModel\Commande\ImportCmd.cs" />
    <Compile Include="ViewModel\Commande\InfoCmd.cs" />
    <Compile Include="ViewModel\Commande\Link\LinkRegister.cs" />
    <Compile Include="ViewModel\Commande\Link\RecordFather.cs" />
    <Compile Include="ViewModel\Commande\Play.cs" />
    <Compile Include="ViewModel\Commande\PlayList\AddToList.cs" />
    <Compile Include="ViewModel\Commande\PlayList\CheckCmd.cs" />
    <Compile Include="ViewModel\Commande\PlayList\ExportCmd.cs" />
    <Compile Include="ViewModel\Commande\PlayList\ExportCompress.cs" />
    <Compile Include="ViewModel\Commande\PlayList\PlayListCommande.cs" />
    <Compile Include="ViewModel\Commande\RecordClassement.cs" />
    <Compile Include="ViewModel\DetailAlbumViewModel.cs" />
    <Compile Include="ViewModel\DetailClassementViewModel.cs" />
    <Compile Include="ViewModel\gen\ListWriter.cs" />
    <Compile Include="ViewModel\InfoViewModel.cs" />
    <Compile Include="ViewModel\Interfaces.cs" />
    <Compile Include="ViewModel\PieceViewModel.cs" />
    <Compile Include="ViewModel\PlayerViewModel.cs" />
    <Compile Include="ViewModel\StatItemViewModel.cs" />
    <Compile Include="ViewModel\TrackListViewModel.cs" />
    <Compile Include="ViewModel\PlayListViewModel.cs" />
    <Compile Include="ViewModel\ViewModelBase.cs" />
    <Compile Include="Vue\Adorn\AdornedControl.cs" />
    <Compile Include="Vue\Adorn\AdornerPlacement.cs" />
    <Compile Include="Vue\Adorn\FrameworkElementAdorner.cs" />
    <Compile Include="Vue\AlbumCtl.xaml.cs">
      <DependentUpon>AlbumCtl.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\BarAdorner.cs" />
    <Compile Include="Vue\BibCtl.xaml.cs">
      <DependentUpon>BibCtl.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\BrowsePlayList.xaml.cs">
      <DependentUpon>BrowsePlayList.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\ClassementCtl.xaml.cs">
      <DependentUpon>ClassementCtl.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\ConfAlbumSortW.xaml.cs">
      <DependentUpon>ConfAlbumSortW.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\ConfExport.xaml.cs">
      <DependentUpon>ConfExport.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\ConfImport.xaml.cs">
      <DependentUpon>ConfImport.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\Conf\ConfMedianneW.xaml.cs">
      <DependentUpon>ConfMedianneW.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\Conf\ConfVirt.xaml.cs">
      <DependentUpon>ConfVirt.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\ConfCouleurs.xaml.cs">
      <DependentUpon>ConfCouleurs.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\DataGridPlayList.xaml.cs">
      <DependentUpon>DataGridPlayList.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\EnhancedDataGrid.cs" />
    <Compile Include="Vue\FolderBrowserDialog.xaml.cs">
      <DependentUpon>FolderBrowserDialog.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\FolderBrowserDialogW.xaml.cs">
      <DependentUpon>FolderBrowserDialogW.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\getNb.xaml.cs">
      <DependentUpon>getNb.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\Info.xaml.cs">
      <DependentUpon>Info.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\Memento.cs" />
    <Compile Include="Vue\PlayerControler.xaml.cs">
      <DependentUpon>PlayerControler.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\RoutedCommandWrapper.cs" />
    <Compile Include="Vue\StatCtl.xaml.cs">
      <DependentUpon>StatCtl.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\StateBar.xaml.cs">
      <DependentUpon>StateBar.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\StringDialog.xaml.cs">
      <DependentUpon>StringDialog.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\Util\BaseConverter.cs" />
    <Compile Include="Vue\Util\GradiantBuilder.cs" />
    <Compile Include="Vue\Util\StringFormatConverter.cs" />
    <Compile Include="Vue\Util\Utils.cs" />
    <Page Include="MainWindow.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Page Include="Player.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Compile Include="App.xaml.cs">
      <DependentUpon>App.xaml</DependentUpon>
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="Player.xaml.cs">
      <DependentUpon>Player.xaml</DependentUpon>
      <SubType>Code</SubType>
    </Compile>
    <Page Include="Vue\AlbumCtl.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\BibCtl.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\BrowsePlayList.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\ClassementCtl.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\ConfAlbumSortW.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\ConfExport.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\ConfImport.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\Conf\ConfMedianneW.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\Conf\ConfVirt.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\ConfCouleurs.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\DataGridPlayList.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\FolderBrowserDialog.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\FolderBrowserDialogW.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\getNb.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Page Include="Vue\Info.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\PlayerControler.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\StatCtl.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\StateBar.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\StringDialog.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <None Include="app.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <AppDesigner Include="Properties\" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\engine\pdb.player.engine.build\pdb.player.engine.build.csproj">
      <Project>{0F3BC2CF-E69D-4019-B6EA-A4B50A7FEB54}</Project>
      <Name>pdb.player.engine.build</Name>
    </ProjectReference>
    <ProjectReference Include="..\engine\pdb.player.engine\pdb.player.engine.csproj">
      <Project>{778B94A9-80ED-4440-9AC3-7E6E6F4AD49D}</Project>
      <Name>pdb.player.engine</Name>
    </ProjectReference>
    <ProjectReference Include="..\pdb.ordo\pdb.ordo.csproj">
      <Project>{30823d1d-851c-456b-ac4c-b0beec173361}</Project>
      <Name>pdb.ordo</Name>
    </ProjectReference>
    <ProjectReference Include="..\pdb.util\pdb.util.csproj">
      <Project>{c2b34ca9-3bb2-464f-8691-5f5b7cb2b997}</Project>
      <Name>pdb.util</Name>
    </ProjectReference>
    <ProjectReference Include="..\PieceDb.Consolid\pdb.gen.csproj">
      <Project>{DFC524F3-50BB-40E3-BAC0-CA56950BBB5A}</Project>
      <Name>pdb.gen</Name>
    </ProjectReference>
    <ProjectReference Include="..\PieceDb.Db\pdb.db.csproj">
      <Project>{43D27B47-E615-451D-AD25-67C5B8447C4A}</Project>
      <Name>pdb.db</Name>
    </ProjectReference>
    <ProjectReference Include="..\PieceDb.obj\pdb.obj.csproj">
      <Project>{9B849072-2B8E-4CE4-8AD7-D173724A9644}</Project>
      <Name>pdb.obj</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <Resource Include="Vue\images\Toolbar-MP3-Forward-icon.png">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Resource>
    <Resource Include="Vue\images\Toolbar-MP3-Pause-icon.png" />
    <Resource Include="Vue\images\Toolbar-MP3-Play-icon.png">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Resource>
    <Resource Include="Vue\images\Toolbar-MP3-Rewind-icon.png">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Resource>
    <Resource Include="Vue\images\Toolbar-MP3-Stop-icon.png">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Resource>
  </ItemGroup>
  <ItemGroup />
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>]]></content>
  </file>
  <file path="\pdb.player\ViewModel\Colors\ColorViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Media;

namespace pdb.player.ViewModel.Colors
{
    public delegate bool colorvm(ColorViewModel vm);

    /// <summary>
    /// Paramètre de couleur
    /// </summary>
    public class ColorViewModel : BibViewModelBase, IEnumerable<ColorViewModel>
    {
        /// <summary>
        /// Nom du paramètre
        /// </summary>
        protected string name;
        /// <summary>
        /// Code couleur
        /// </summary>
        private string code;

        public readonly string defaultCode;

        public string Description { get; private set; }


        /// <summary>
        /// Propriétaire (père dans l'arborescence)
        /// </summary>
        private ColorViewModel owner;

        private static ColorViewModel selected;
        public static event EventHandler selectedChanged;
        public event EventHandler colorChange;
        public static event EventHandler colorChangeTree;

        public ColorViewModel Selected
        {
            get
            {
                return selected;
            }

            set
            {
                if (value != selected)
                {
                    selected = value;
                    OnPropertyChanged("Selected");
                    if (selectedChanged != null)
                        selectedChanged(this, EventArgs.Empty);
                }
            }
        }

        public override bool IsSelected
        {
            get
            {
                return base.IsSelected;
            }
            set
            {
                base.IsSelected = value;
                if (value)
                    Selected = this;
            }
        }



        /// <summary>
        /// Père pour l'évaluation des paramètres 
        /// </summary>
        public ColorViewModel Parent { get { return _parent as ColorViewModel; } }
        protected List<ColorViewModel> subs = new List<ColorViewModel>();


        public ColorViewModel(string name, string description, ColorViewModel parent, ColorViewModel prop)
            : base(parent)
        {
            this.name = name;
            this.Description = description;
            this.owner = prop;
            if (prop != null)
                prop.subs.Add(this);
        }

        public ColorViewModel(string name, string description, string defaultCode, ColorViewModel parent, ColorViewModel prop)
            : this(name, description, parent, prop)
        {

            this.defaultCode = defaultCode;
            this.Code = "";

        }

        public string Name { get { return name; } }
        protected  void OncolorChangeTree()
        {
            if (colorChangeTree != null)
                colorChangeTree(this, EventArgs.Empty);

        }
        public string Code
        {
            get
            {
                return code;
            }
            set
            {
                if (value != code)
                {
                    code = value;
                    if (code == defaultCode)
                        code = "";
                    else if (Parent != null && Parent.ArboCode == ArboCode)
                        code = "";
                    //_color = default(Color);
                    //_brush = null;
                    OnPropertyChanged("Code");
                    OnPropertyChanged("ArboCode");
                    OnPropertyChanged("Color");
                    OnPropertyChanged("Brush");
                    OnPropertyChanged("Ancestor"); 

                    if (colorChange != null)
                        colorChange(this, EventArgs.Empty);

                    OncolorChangeTree();


                }
            }
        }

        ColorViewModel ancestor;

        public string Ancestor
        {
            get
            {
                var v = ArboCode;
                if (v == defaultCode)
                    return "valeur par defaut";
                if (ancestor == this)
                    return "";
                return "Hérité de " +ancestor.ArboName; 
            }
        }

        public double getDouble() { try { return Convert.ToDouble(ArboCode); } catch { return 0; } }
        public double geint() { try { return Convert.ToInt32(ArboCode); } catch { return 0; } }

        public string ArboCode
        {
            get
            {
                string ret = null;
                ColorViewModel current = this;

                while (current != null)
                {
                    ancestor = current; 
                    if (string.IsNullOrEmpty(current.code) || defaultCode == current.code)
                    {
                        current = current.Parent;
                    }
                    else
                    {
                        ret = current.code;
                        break; 
                    }
                }

                if (string.IsNullOrEmpty(ret))
                    return defaultCode; 

                return ret;
            }
        }

        public string ArboName
        {
            get
            {

                if (owner == null || string.IsNullOrEmpty(owner.Name))
                    return name;
                return owner.ArboName + "." + name;
            }
        }

        public void reset()
        {
            Code = "" ;
        }
        public void resetTree()
        {
            tree((vm) => { vm.reset(); return false; });
        }

        public bool tree(colorvm action)
        {
            if (action(this))
                return true;
            foreach (ColorViewModel sub in subs)
            {
                if (sub.tree(action))
                    return true;
            }
            return false;
        }




        public IEnumerator<ColorViewModel> GetEnumerator()
        {
            return subs.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return subs.GetEnumerator();
        }

    //    private Color _color;
        public Color Color
        {
            get
            {
                //if (_color == default(Color))
                //{
                    var code = ArboCode;
                    if (!string.IsNullOrEmpty(code) && code.Length > 3)
                    {
                        try
                        {
                         return  (Color)ColorConverter.ConvertFromString(code);
                        }
                        catch { }

                    }
                //}
                return default(Color);
            }
        }

     //   private SolidColorBrush _brush;
        public SolidColorBrush Brush
        {
            get
            {
                //if (_brush == null)
                //{
                //    _brush = new SolidColorBrush(Color);
                //}
                return new SolidColorBrush(Color); ;
            }
        }

        public override string ToString()
        {
            return string.Format("{0}={1} ({2} {3})", ArboName, Code, ArboCode, Color); 
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\Colors\Couleurs.cs">
    <content><![CDATA[
using System.Windows.Input;
using pdb.player.ViewModel.Commande;
namespace pdb.player.ViewModel.Colors
{
    /// <summary>
    /// Arborescence des couleurs
    /// </summary>
    public class Couleurs : ColorViewModel
    {
        public static Couleurs Instance = new Couleurs();

        public readonly General general; 
        public readonly Simple player;
        public readonly Simple bib;
        public readonly General main;
        public readonly General album;
        public readonly General classement;
        private readonly ICommand prec;
        private readonly ICommand next; 
        private Couleurs()
            : base("", null, null, null)
        {
            general = new General(this, this,"general", "paramètres valables pour toute l'application"); 
            player = new Simple(general.gradient, this,"player", "configuration du chapeau");
            bib = new Simple(general.gradient, this, "bibliotheque", "configuration de la bibliothèque (partie gauche");
            main = new General(general, this, "main", "configuration de la grille de lecture");
            album = new General(general, this, "album", "vue album");
            classement = new General(general, this, "classement", "partie classement");

            prec = new CoulHistoryBack();
            next = new CoulHistoryForward(); 
        }

        public ICommand Prec { get { return prec; } }
        public ICommand Suiv { get { return next; } }

        public static ColorViewModel get(string path)
        {
            ColorViewModel found = null;
            Instance.tree((vm) =>
            {
                if (vm.ArboName == path)
                {
                    found = vm;
                    return true;
                }
                return false;
            });

            return found;
        }
      

    }

    public class General : ColorViewModel
    {
        public General(Couleurs parent, ColorViewModel owner, string name, string desc)
            : base(name, desc, parent, owner)
        {
            track = new TrackColor(null, this);
            grille = new Grille(null, this);
            gradient = new Gradient(null, this);
        }
        public General(General parent, ColorViewModel owner, string name, string desc)
            : base(name, desc, parent, owner)
        {
            track = new TrackColor(parent.track, this);
            grille = new Grille(parent.grille, this);
            gradient = new Gradient(parent.gradient, this);
        }

        public readonly TrackColor track;
        public readonly Grille grille;
        public readonly Gradient gradient;
    }

    public class Simple : ColorViewModel
    {
        public readonly Gradient gradient;
        public Simple(Gradient parent, ColorViewModel owner, string name, string desc) : base(name,desc,parent, owner)
        {
            this.gradient = new Gradient(parent, this); 
        }
    }

    /// <summary>
    /// Arrière-plan des morceaux
    /// </summary>
    public class TrackColor : ColorViewModel
    {

        private ColorViewModel selected; new public ColorViewModel Selected { get { return selected; } }
        private ColorViewModel moved; public ColorViewModel Moved { get { return moved; } }
        private ColorViewModel next; public ColorViewModel Next { get { return next; } }
        private ColorViewModel nextAbsent; public ColorViewModel NextAbsent { get { return nextAbsent; } }
        public readonly Export export;

        public TrackColor(TrackColor parent, ColorViewModel prop)
            : base("track", "couleur des morceaux", parent, prop)
        {
            selected = new ColorViewModel("selected", "morceau sélectionné", "#3399ff", parent == null ? null : parent.selected, this);
            moved = new ColorViewModel("moved", "morceau déplacé pour éviter répétition (quarantaine)", "#93c8ce", parent == null ? null : parent.moved, this);
            next = new ColorViewModel("next", "prochain morceau dans l'album en mode automatique", "#b5eaf0", parent == null ? null : parent.next, this);
            nextAbsent = new ColorViewModel("nextAbsent", "prochain morceau dans l'album en mode automatique malheureusement absent", "#c4dfe3", parent == null ? null : parent.nextAbsent, this);
            Export _parentExport = null; 
            if (parent != null)
                _parentExport = parent.export; 
            export = new Export(_parentExport, this);
        }
    }

    /// <summary>
    /// Arrière-plan des morceaux fondé sur le statut
    /// </summary>
    public class Export : ColorViewModel
    {
        public readonly ColorViewModel none;
        public readonly ColorViewModel miss;
        public readonly ColorViewModel present;
        public readonly ColorViewModel copy;
        public readonly ColorViewModel delete;
        public Export(Export parent, ColorViewModel prop)
            : base("export", "statut export", parent, prop)
        {
            none = new ColorViewModel("none", "pas de statut", "#FFFFFFFF", parent == null ? null : parent.none, this);
            miss = new ColorViewModel("miss", "absent", "#FFD3D3D3", parent == null ? null : parent.miss, this);
            present = new ColorViewModel("present", "présent", "#FFFFFFFF", parent == null ? null : parent.present, this);
            copy = new ColorViewModel("copy", "le morcveau a été copié", "#FF90EE90", parent == null ? null : parent.copy, this);
            delete = new ColorViewModel("delete", "le morceau a été supprimé", "#FFA9A9A9", parent == null ? null : parent.delete, this);
        }
    }

    /// <summary>
    /// Couleur des traits de grille
    /// </summary>
    public class Grille : ColorViewModel
    {
        public readonly ColorViewModel lignes;
        public readonly ColorViewModel colonnes;

        public Grille(Grille parent, ColorViewModel prop)
            : base("grille", "couleur des grilles", parent, prop)
        {
            var black = System.Windows.Media.Colors.Black.ToString();
            lignes = new ColorViewModel("lignes", "traits de lignes", black, parent == null ? null: parent.lignes, this);
            colonnes = new ColorViewModel("colonnes", "traits de colonnes", black, parent == null ? null : parent.colonnes, this);
        }
    }

    /// <summary>
    /// Données Gradient (couleur + autres paarmètres)
    /// </summary>
    public class Gradient : ColorViewModel
    {
        public readonly StartPoint depart;
        public readonly EndPoint arrivee;
        public Gradient(Gradient parent, ColorViewModel prop)
            : this(parent, prop, "gradient", "paramètre des gradiants")
        {

        }

        public Gradient(Gradient parent, ColorViewModel prop, string name, string desc)
            : base(name, desc, parent, prop)
        {
        
            this.depart = new StartPoint(parent == null ? null: parent.depart, this);
            this.arrivee = new EndPoint(parent == null ? null: parent.arrivee, this);
        }
    }

    public class StartPoint : ColorViewModel
    {
        public readonly Pt pt;
        public readonly ColorViewModel couleur;
        public readonly ColorViewModel offset;

        public StartPoint(StartPoint parent, ColorViewModel prop)
            : base("StartPoint", "StartPoint", parent, prop)
        {
            this.pt = new Pt(parent == null? null: parent.pt, this, 0, 0);
            this.couleur = new ColorViewModel("couleur", "couleur", "#dfdfdf", parent == null ?  null: parent.couleur, this);
            this.offset = new ColorViewModel("offset", "offset", "0", parent == null ? null : parent.offset, this);
        }
    }

    public class EndPoint : ColorViewModel
    {
        public readonly Pt pt;
        public readonly ColorViewModel couleur;
        public readonly ColorViewModel offset;

        public EndPoint(EndPoint parent, ColorViewModel prop)
            : base("EndPoint", "EndPoint", parent, prop)
        {
            this.pt = new Pt(parent == null ? null: parent.pt, this, 0, 1);
            this.couleur = new ColorViewModel("couleur", "couleur", "#fff", parent == null ? null : parent.couleur, this);
            this.offset = new ColorViewModel("offset", "offset", "1", parent == null ? null : parent.offset, this);
        }
    }




    public class Pt : ColorViewModel
    {
        public readonly ColorViewModel x;
        public readonly ColorViewModel y;
        public Pt(Pt parent, ColorViewModel prop, double x, double y)
            : base("point", "point", parent, prop)
        {
            this.x = new ColorViewModel("x", "x", x.ToString(), parent == null? null: parent.x, this);
            this.y = new ColorViewModel("y", "y", y.ToString(), parent == null ? null : parent.y, this);
        }
    }

    //public class GradientItem : ColorViewModel
    //{
    //    public readonly ColorViewModel couleur;
    //    public readonly ColorViewModel startPoint;
    //    public readonly ColorViewModel offset;

    //    public GradientItem(GradientItem parent, ColorViewModel prop, string name, string desc, double pt, int offset)
    //        : base(name, desc, parent, prop)
    //    {
    //        this.couleur = new ColorViewModel("couleur", "couleur", parent, this);
    //        this.startPoint = new ColorViewModel("startPoint", "??", pt.ToString(), parent, this);
    //        this.offset = new ColorViewModel("offset", "??", offset.ToString(), parent, this);
    //    }
    //}
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\Colors\MementoColor.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace pdb.player.ViewModel.Colors
{
    /// <summary>
    /// Sauvregarde et récupère les paramètres de couleur de l'appli
    /// </summary>
    class MementoColor
    {
        const string PATH = "colors.txt";
        public static Couleurs Arbo = Couleurs.Instance;
        public static void save()
        {
            var content = saveEtat(true); 
            File.WriteAllText(PATH, content);

        }

        private static string saveEtat(bool compact)
        {
            var sb = new StringBuilder();
            Arbo.tree((vm) =>
            {
                //if (vm.Parent == null)
                //    return false;
                if (compact && vm.Code == vm.defaultCode)
                    return false;
                if (compact && string.IsNullOrEmpty(vm.Code))
                    return false;
                sb.Append(vm.ArboName);
                sb.Append("=");
                sb.AppendLine(vm.Code);
                return false;
            });

            var content = sb.ToString();
            return content; 
        }

        public static void recover()
        {
            try
            {
                var lines = File.ReadAllText(PATH);             
                recover(lines);
                record(); 
            }
            catch
            {
            }
        }

        private static void recover(string etat)
        {
            var lines = etat.Split("\r\n".ToCharArray()); 
            foreach (string line in lines)
            {
                if (string.IsNullOrEmpty(line))
                    continue;
                var tab = line.Split('=');
                if (tab.GetLength(0) < 2)
                    continue;

                Arbo.tree((vm) =>
                {
                    if (vm.ArboName == tab[0])
                    {
                        vm.Code = tab[1];
                        return true;
                    }
                    return false;
                });
            }
        }

        private static List<string> etats = new List<string>(); 
        private static int index=-1;

        public static void record()
        {
            while (index < etats.Count - 1)
                etats.RemoveAt(etats.Count - 1);
            etats.Add(saveEtat(false));
            index++; 
        }

        public static void forward()
        {
            index++;
            recover(etats[index]); 
        }

        public static void previous()
        {
            index--;
            recover(etats[index]); 
        }

        public static int Index { get { return index; } }
        public static int Count { get { return etats.Count; } }

       

    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\Commande\CoulHistoryBack.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using pdb.player.ViewModel.Colors;

namespace pdb.player.ViewModel.Commande
{
    class CoulHistoryBack : CommandeBase
    {
        
        public override bool CanExecute(object parameter)
        {
            return MementoColor.Index > 0; 
        }

        public override void Execute(object parameter)
        {
            MementoColor.previous(); 
        }
    }

    class CoulHistoryForward : CommandeBase
    {

        public override bool CanExecute(object parameter)
        {
            return MementoColor.Index < MementoColor.Count -1;
        }

        public override void Execute(object parameter)
        {
            MementoColor.forward(); 
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\Commande\PlayList\ExportCmd.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using pdb.db;
using pdb.db.obj;
using pdb.gen;
using pdb.util;
using pdb.gen.Tuning;
using System.Runtime.InteropServices;

namespace pdb.player.ViewModel.Commande.PlayList
{
    public enum compressState
    {
        none,
        record,
        enCours,
        end,
        reload,
        cancel
    }
    class ExportCmd : CommandeBase
    {
        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        [return: MarshalAs(UnmanagedType.Bool)]
        static extern bool GetDiskFreeSpaceEx(string lpDirectoryName,
        out ulong lpFreeBytesAvailable,
        out ulong lpTotalNumberOfBytes,
        out ulong lpTotalNumberOfFreeBytes);

        private static long getFreeSpace()
        {
            ulong FreeBytesAvailable;
            ulong TotalNumberOfBytes;
            ulong TotalNumberOfFreeBytes;

            bool success = GetDiskFreeSpaceEx(conf.dir, out FreeBytesAvailable, out TotalNumberOfBytes,
                               out TotalNumberOfFreeBytes);
            if (!success)
                throw new System.ComponentModel.Win32Exception();
            return (long)TotalNumberOfFreeBytes;
        }



        private static IExportTracks ihm;
        public static IExportTracks Ihm { set { ihm = value; } }
        // private static bool cancel;
        // protected static string dir;
        protected static PlayListViewModel lastpl;
        protected static List<PiecePrior> presents;
        protected static Dict<int, PiecePrior> dict;
        protected static List<PiecePrior> list;
        protected static List<List<PiecePrior>> listes;
        protected static List<PlayListViewModel> playlists = new List<PlayListViewModel>();

        protected static Dictionary<int, object> ids;
        protected static Dict<int, PiecePrior> idCopie;
        protected static BgDictString<PiecePrior> idCopieLoc;
        private static int nbLoop = 0;
        protected static Export conf;
        private static bool modeAlbum;
        //private static int nbByAlbumMin = int.MaxValue;
        //private static int nbByAlbumMax = int.MaxValue;
        //private static int nbLot = 100; 
        protected static int nbFicherSup;
        protected static int nbFichierAdd;
        const string CAPTION = "export";
        protected string ANNULATION_EXPORT = "Annulation export";

        protected static BgDictString<List<PiecePrior>> locations = new BgDictString<List<PiecePrior>>();

        protected static compressState state;
        public static void CalculExport()
        {
            if (conf != null && conf.oneShot)
                return;
            switch (state)
            {
                case compressState.none:
                    break;
                case compressState.record:
                    break;
                case compressState.enCours:
                    PlayListViewModel.resetExport(exportState.none);
                    state = compressState.reload;
                    break;
                case compressState.end:
                    state = compressState.reload;
                    break;
                case compressState.reload:
                    break;
                case compressState.cancel:
                    break;
                default:
                    break;
            }
        }

        protected class PiecePrior
        {
            private int prior0 = int.MaxValue;
            private int prior1 = int.MaxValue;
            public readonly Piece PieceGen;
            public PiecePrior(Piece piece, int prior)
            {
                this.PieceGen = piece;
                this.prior0 = prior;
            }

            public CPiece Piece { get { return PieceGen.Track as CPiece; } }

            public int Prior0 { get { return prior0; } }
            public int Prior1 { get { return prior1; } }
            public int MasterId { get { return Piece.MasterId; } }
            public void setPrior(int prior)
            {
                if (prior < this.prior1)
                    this.prior1 = prior;
            }

            public static void mergePrior0(ICollection<PiecePrior> list)
            {
                if (list.Count <= 1)
                    return;
                int min = int.MaxValue;
                foreach (PiecePrior p in list)
                {
                    var p0 = p.prior0;
                    if (p0 < min)
                        min = p0;
                }
                foreach (PiecePrior p in list)
                {
                    p.prior0 = min;
                }
            }

            public static void mergePrior1(ICollection<PiecePrior> list)
            {
                if (list.Count <= 1)
                    return;
                int min = int.MaxValue;
                foreach (PiecePrior p in list)
                {
                    var p1 = p.prior1;
                    if (p1 < min)
                        min = p1;
                }
                foreach (PiecePrior p in list)
                {
                    p.prior0 = min;
                }
            }

            public override string ToString()
            {
                int rank = PieceGen.RankAlbum;
                return rank + " " + PieceGen.TrackNumber + "\t" + prior0 + " " + prior1 + " " + PieceGen.ToString();
            }
        }

        protected class PriorComparer : IComparer<PiecePrior>
        {
            public int Compare(PiecePrior x, PiecePrior y)
            {
                int cmp = x.Prior1.CompareTo(y.Prior1);
                if (cmp != 0)
                    return cmp;
                return x.Prior0.CompareTo(y.Prior0);
            }
        }

        public ExportCmd()
        {

        }


        public override bool CanExecute(object parameter)
        {
            return ihm != null;
        }

        public override void Execute(object parameter)
        {
            if (state <= compressState.record)
                record();
            else
            {
                state = compressState.cancel;
                PlayListViewModel.resetExport(exportState.none);
            }
            OnPropertyChanged("Header");
        }
        private class TrackAlbumReverseComparer : IComparer<TrackListViewModel>
        {
            private bool disabledAlway;
            public TrackAlbumReverseComparer(bool disabledAlway)
            {
                this.disabledAlway = disabledAlway; 
            }

            public int Compare(TrackListViewModel x, TrackListViewModel y)
            {
                if (x.Album != y.Album)
                    return x.Index.CompareTo(y.Index);

                if (disabledAlway)
                {
                    if (x.Enabled != y.Enabled)
                    {
                        return -x.Enabled.CompareTo(y.Enabled); // ? -1 : 1;
                    }
                }
                var xv = x.PieceGen.RapportClassement;
                var yv = y.PieceGen.RapportClassement;

                int cmp = 0;
                if (xv > 0 && yv > 0)
                {
                    cmp = xv.CompareTo(yv);
                    if (cmp != 0) return cmp;
                    cmp = x.PieceGen.VirtualClassement.CompareTo(y.PieceGen.VirtualClassement);
                    if (cmp != 0) return cmp;
                }

                cmp = x.TrackNumber.CompareTo(y.TrackNumber);
                if (cmp != 0)
                    return cmp;
                return x.Location.CompareTo(y.Location);

            }
        }
        protected virtual List<PiecePrior> buildList(PlayListViewModel pl)
        {
            var list = new List<PiecePrior>();
            try
            {
                bool onlyEnabled = PlayerViewModel.Instance.OnlyEnabled && !modeAlbum;
                bool _modeAlbum = modeAlbum && !PlayerViewModel.Instance.SortByAlbum;

                var ids = new Dictionary<int, object>();
                int i = 0;
                var tracks = new List<TrackListViewModel>(pl.ExportTracks);
                if (conf.albumReverse)
                {
                    tracks.Sort(new TrackAlbumReverseComparer(conf.disabledAlway));
                }
                else
                    tracks.Sort((x, y) => x.Index.CompareTo(y.Index));

                int lastI = 0;
                string lastAlbum = "";
                int nbByAlbum = int.MaxValue;
                if (conf.modeAlbum)
                    nbByAlbum = conf.nbMax;
                int nbLot = 0;
                while (true)
                {
                    int nbInThisAlbum = 0;
                    foreach (TrackListViewModel track in tracks)
                    {
                        //  track.ExportStatus = exportState.miss; 
                        if (!onlyEnabled || track.Enabled)
                        {
                            CPiece piece = track.Piece;
                            if (piece.Exists)
                            {
                                int id = piece.MasterId;
                                if (ids.ContainsKey(id))
                                    continue;
                                if (!_modeAlbum)
                                {
                                    if (piece.Album == lastAlbum)
                                    {
                                        if (track.Enabled || !conf.disabledAlway)
                                        {
                                            nbInThisAlbum++;
                                            if (nbInThisAlbum > nbByAlbum)
                                                continue;
                                        }
                                    }
                                    else
                                    {
                                        nbInThisAlbum = 0;
                                        lastAlbum = piece.Album;
                                        if (track.Enabled || !conf.disabledAlway)
                                        {
                                            nbInThisAlbum++;
                                            if (nbInThisAlbum > nbByAlbum)
                                                continue;
                                        }
                                    }
                                    var pp = dict[id]; // list.Add(piece);
                                    if (pp == null)
                                        continue;
                                    pp.setPrior(i);
                                    list.Add(pp);
                                    ids.Add(id, pp);
                                    i++;

                                    if (track.Enabled || !conf.disabledAlway)
                                    {
                                        nbLot++;
                                        if (conf.modeAlbum && nbLot > conf.lot)
                                        {
                                            nbLot = 0;
                                            nbByAlbum--;
                                            if (nbByAlbum < conf.nbMin)
                                                nbByAlbum = conf.nbMin;
                                            if (nbByAlbum == 0)
                                                break;
                                        }
                                    }

                                }
                                else
                                {
                                    if (conf.modeAlbum)
                                    {
                                        if (piece.Album == lastAlbum)
                                            continue;
                                        else
                                        {
                                            nbLot++;
                                            if (nbLot > conf.lot)
                                            {
                                                nbLot = 0;
                                                nbByAlbum--;
                                                if (nbByAlbum < conf.nbMin)
                                                    nbByAlbum = conf.nbMin;
                                                if (nbByAlbum == 0)
                                                    break;
                                            }
                                        }
                                    }
                                    List<Piece> album = null;
                                    if (conf.albumReverse)
                                        album = App.gen.getTracksAlbumReverse(track.Track);
                                    else
                                        album = App.gen.getTracksAlbumByNumber(track.Track); // piece);
                                    if (album != null)
                                    {
                                        nbInThisAlbum = 0;
                                        lastAlbum = piece.Album;
                                        foreach (var p in album)
                                        {
                                            CPiece pp = p.Track as CPiece;
                                            if (pp != null && pp.Exists)
                                            {
                                                if (!onlyEnabled || pp.Enabled)
                                                {
                                                    id = pp.MasterId;

                                                    if (ids.ContainsKey(id))
                                                        continue;
                                                    var ppp = dict[id];
                                                    ppp.setPrior(i);
                                                    list.Add(ppp);
                                                    ids.Add(id, ppp);
                                                    i++;
                                                    if (pp.Enabled || !conf.disabledAlway)
                                                    {
                                                        nbLot++;
                                                        if (conf.modeAlbum && nbLot > conf.lot)
                                                        {
                                                            nbLot = 0;
                                                            nbByAlbum--;
                                                            if (nbByAlbum < conf.nbMin)
                                                                nbByAlbum = conf.nbMin;
                                                        }

                                                        nbInThisAlbum++;
                                                        if (nbInThisAlbum >= nbByAlbum)
                                                            break;
                                                    }
                                                }
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (!modeAlbum)
                        break;
                    if (nbByAlbum == int.MaxValue)
                        break;
                    if (nbByAlbum > 0)
                    {
                        if (i == lastI)
                            break;
                    }

                    lastI = i;
                    lastAlbum = "";
                    if (conf.modeAlbum)
                    {
                        if (conf.resetAfterLoop)
                            nbByAlbum = conf.nbMax;
                        if (nbByAlbum < conf.nbMin)
                            nbByAlbum = conf.nbMin;
                        if (nbByAlbum == 0)
                            nbByAlbum = 1;
                    }
                }
                listes.Add(list);
                //   ihm.InfoIHm("liste n° " + listes.Count + " " + list.Count + " éléments", CAPTION);
                OnPropertyChanged("Header");
            }
            catch (Exception ex)
            {
                misc.log(ex.ToString());
            }
            return list;
        }

        public override string Header
        {
            get
            {
                if (state > compressState.record)
                    return ANNULATION_EXPORT;

                return "Exporter la liste";
            }
        }



        private void record()
        {
            if (state == compressState.none)
            {
                state = compressState.record;
                OnPropertyChanged("Header");
                nbLoop = 0;
                conf = ihm.getConfExport("Configuration Export");

                //  dir = conf.dir; // ihm.folderDialog();

                if (string.IsNullOrEmpty(conf.dir))
                {
                    state = compressState.none;
                    return;
                }

                modeAlbum = conf.modeAlbum; // ihm.Confirm("par albums complets?", CAPTION);

                //if (modeAlbum)
                //{
                //    nbByAlbumMin = conf.nbMin; // ihm.getNb("Nombre de morceaux par passe?");
                //    nbByAlbumMax = conf.nbMax;
                //    nbLot = conf.lot;
                //}
                //else
                //    nbByAlbum = int.MaxValue;

                playlists.Clear();
            }

            bool? status = true;


            var pl = ihm.PlayList;
            if (!playlists.Contains(pl))
            {
                playlists.Add(pl);
                lastpl = pl;
            }

            status = ihm.TriChoix("liste n° " + playlists.Count + " " + pl.ExportTracks.Count + " éléments\r\n lancer l'export ?", CAPTION);



            if (status == null)
            {
                listes = null;
                playlists.Clear();
                state = compressState.none;
                OnPropertyChanged("Header");
                return;
            }
            if (false.Equals(status))
            {
                OnPropertyChanged("Header");
                return;
            }

            state = compressState.enCours;
            OnPropertyChanged("Header");

            var th = new Thread(export__);
            th.SetApartmentState(ApartmentState.STA);
            th.Start();
        }
        //protected static long totalSize = 0;
        //protected static long capacity = int.MaxValue;
        //protected static long freeSpace; 
        //private static void refreshInfoFreeSpace()
        //{
        //    DriveInfo drive = new DriveInfo(Path.GetPathRoot(conf.dir));
        //    var calculfree = freeSpace; 
        //    freeSpace = drive.AvailableFreeSpace;
        //    var delta = freeSpace - calculfree;
        //    if (delta > 0)
        //        App.log.log("difference free space " + delta); 

        //}

        private void buildListIni()
        {

            listes = new List<List<PiecePrior>>();
            presents = new List<PiecePrior>();
            dict = new Dict<int, PiecePrior>();
            locations = new BgDictString<List<PiecePrior>>();

            try
            {

                if (!conf.dir.EndsWith("\\"))
                    conf.dir += "\\";
                //  refreshInfoFreeSpace(); 

                List<Piece> l = null;


                if (lastpl.isSubList("album") || PlayerViewModel.Instance.SortByAlbum)
                {
                    l = App.gen.sortByAlbum();
                    l.Reverse();
                }
                else
                    l = App.gen.sortByClass();
                // l.Reverse();

                int i = 0;
                foreach (Piece p in l)
                {
                    var piece = p.Track as CPiece;
                    if (!dict.ContainsKey(piece.MasterId))
                    {
                        var pp = new PiecePrior(p, i);
                        i++;
                        presents.Add(pp);
                        dict[piece.MasterId] = pp;
                        foreach (CFile file in piece.Files)
                        {
                            var lp = locations[file.File];
                            if (lp == null)
                            {
                                lp = new List<PiecePrior>();
                                lp.Add(pp);
                                locations.Add(file.File, lp);
                            }
                            else
                            {
                                lp.Add(pp);
                                PiecePrior.mergePrior0(lp);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                misc.log(ex.ToString());
            }

        }

        [STAThread]
        private void export__()
        {


            while (true)
            {
                try
                {
                    switch (state)
                    {
                        case compressState.none:
                            return;
                        case compressState.enCours:
                            break;
                        case compressState.end: Thread.Sleep(1000); continue;
                        case compressState.reload:
                            break;
                        case compressState.cancel:
                            {
                                state = compressState.none;
                                nbLoop = 0;
                                return;
                            }

                        default:
                            break;
                    }
                    state = compressState.enCours;
                    nbLoop++;


                    buildListIni();

                    foreach (PlayListViewModel pl in playlists)
                    {
                        buildList(pl);
                    }

                    foreach (List<PiecePrior> lp in locations.Values)
                    {
                        PiecePrior.mergePrior1(lp);
                    }

                    // concaténation
                    int max = 0;
                    list = new List<PiecePrior>();
                    foreach (var _l in listes)
                    {
                        var count_ = _l.Count;
                        if (count_ > max)
                            max = count_;
                    }
                    int count = listes.Count;
                    ids = new Dictionary<int, object>();


                    for (int i = 0; i < max; i++)
                    {
                        for (int j = 0; j < count; j++)
                        {
                            var l = listes[j];
                            if (i < l.Count)
                            {
                                var p = l[i];
                                int id = p.MasterId;
                                if (!ids.ContainsKey(id))
                                {
                                    ids.Add(id, p);
                                    list.Add(p);
                                }
                            }
                        }
                    }






                    App.log.log("Export lancé " + listes.Count + " liste" + (list.Count > 1 ? "s " : " ") + list.Count + " éléments", CAPTION);
                    _export();
                }
                catch (Exception ex)
                {
                    misc.log(ex.ToString());
                    Thread.Sleep(1000);
                }

            }
        }

        protected virtual bool noMoreSpace()
        {
            return true;
        }
        protected virtual void prepareExport()
        {
        }

        protected void setExport(exportState state, PiecePrior p)
        {
            setExport(state, p.Piece);
        }

        protected void setExport(exportState state, CPiece p)
        {
            var track = PlayListViewModel.findTrack(lastpl, p.PieceId);
            if (track != null)
            {
                track.ExportStatus = state;
            }
            var h = TrackListViewModel.HumanSelected;
            if (h != null)
            {
                if (p.Album == h.Album)
                {
                    var album = App.getAlbum(h);
                    var f = album.Find(t => t.PieceId == p.PieceId);
                    if (f != null)
                        track.ExportStatus = state;
                }
            }
        }

        private void _export()
        {

            PlayListViewModel.resetExport(exportState.present);
            try
            {
                foreach (PiecePrior piece in list)
                {
                    try
                    {
                        if (state != compressState.enCours)
                            return;
                        //1. Vérification que le fichier n'existe pas déjà 
                        bool exists = false;
                        var files = piece.Piece.Files;
                        foreach (CFile file in files)
                        {
                            if (state != compressState.enCours)
                                return;
                            try
                            {
                                string path = conf.dir + file.File;
                                var fv = FileRegister.Check(path);
                                if (fv.Exists)
                                {
                                    exists = true;
                                    break;
                                }
                            }

                            catch
                            {
                            }
                        }



                        if (exists)
                        {
                            // PlayListViewModel.setExport(piece.Piece.PieceId, exportState.present);
                            //var track = PlayListViewModel.findTrack(lastpl, piece.Piece.PieceId);
                            //if (track != null)
                            //{
                            //    track.ExportStatus = exportState.present;
                            //}
                        }
                        else
                            setExport(exportState.miss, piece);
                    }
                    catch (Exception e)
                    {
                        App.log.log(e.ToString());
                    }
                }

                nbFicherSup = 0; nbFichierAdd = 0;
                idCopie = new Dict<int, PiecePrior>(); idCopieLoc = new BgDictString<PiecePrior>();
                presents.Sort(new PriorComparer());
                prepareExport();

                string orgDir = CFile.DefaultFolder;
                foreach (PiecePrior piece in list)
                {
                    try
                    {
                        if (state != compressState.enCours)
                            return;

                        int id = piece.MasterId;
                        if (idCopie.ContainsKey(id))
                            continue;
                        var files = piece.Piece.Files;
                        bool contFile = false;
                        foreach (CFile file in files)
                        {
                            if (idCopieLoc.ContainsKey(file.File))
                            {
                                contFile = true;
                                break;
                            }
                        }
                        if (contFile)
                            continue;

                        idCopie[id] = piece;
                        foreach (CFile file in files)
                        {
                            idCopieLoc[file.File] = piece;
                        }




                        //1. Vérification que le fichier n'existe pas déjà 
                        bool exists = false;
                        foreach (CFile file in files)
                        {
                            if (state != compressState.enCours)
                                return;
                            try
                            {
                                string path = conf.dir + file.File;
                                var fv = FileRegister.Check(path);
                                if (fv.Exists)
                                {
                                    exists = true;
                                    break;
                                }
                            }

                            catch
                            {
                            }
                        }



                        if (exists)
                        {
                            //    var track = PlayListViewModel.findTrack(lastpl, piece.Piece.PieceId);
                            //    if (track != null)
                            //    {
                            //        track.ExportStatus = exportState.present; 
                            //    }
                            continue;
                        }

                        //2. Copie du meilleur fichier
                        CFile pertinent = files.getPertinentFile();
                        if (pertinent == null)
                            continue;


                        while (true)
                        {
                            if (state != compressState.enCours)
                                return;
                            try
                            {
                                FileInfo f = new FileInfo(pertinent.Path);
                                var freeSpace = getFreeSpace();
                                long nextfreeAvailable = freeSpace - f.Length;
                                if (nextfreeAvailable < 0)
                                {
                                    if (noMoreSpace())
                                        return;
                                    continue;
                                }
                                App.log.log("copie\t" + piece + "->" + conf.dir + pertinent.File + " ( " + piece + " )");
                                f.copyTree(conf.dir + pertinent.File, null);
                                //  freeSpace = nextfreeAvailable; 
                                //  PlayListViewModel.setExport(piece.Piece.PieceId, exportState.copy);
                                setExport(exportState.copy, piece);
                                //var track = PlayListViewModel.findTrack(lastpl, piece.Piece.PieceId);
                                //if (track != null)
                                //{
                                //    track.ExportStatus = exportState.copy;
                                //}
                                nbFichierAdd++;

                                break;
                            }
                            catch (System.IO.IOException io)
                            {
                                App.log.log(io.Message);
                                //  refreshInfoFreeSpace(); 
                                if (noMoreSpace())
                                    return;
                            }
                        }

                    }

                    catch (Exception ex)
                    {
                        App.log.log(ex.ToString());
                    }


                }
            }
            catch (Exception ex)
            {
                App.log.log(ex.ToString());

            }
            finally
            {
                var log = string.Format("Fin de l'export {0} liste{1} éléments\r\n{2} fichier{3} copié{3}\r\n{4} fichier{5} supprimé{6}",
                    listes.Count, (list.Count > 1 ? "s " : " "), nbFichierAdd, (nbFichierAdd > 1 ? "s" : ""), nbFicherSup, (nbFicherSup > 1 ? "s" : ""), (nbFicherSup > 1 ? "s" : ""));
                App.log.log(log, CAPTION);
                if (conf.oneShot)
                    ihm.InfoIHm(log, CAPTION);
                //  ihm.InfoIHm("Fin de l'export " + listes.Count + " liste" + (list.Count > 1 ? "s " : " ") + list.Count + " éléments\r\n" + idCopie.Count + " fichiers copiés\r\n" + nbFicherSup + "fichier" + (nbFicherSup > 1 ? "s" : "") + " supprimé" + (nbFicherSup > 1 ? "s" : ""), CAPTION);
                list = null;
                listes = null;

                if (state == compressState.enCours)
                    state = compressState.end;
                else
                    PlayListViewModel.resetExport(exportState.none);
                OnPropertyChanged("Header");

            }
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\AlbumCtl.xaml">
    <content><![CDATA[<UserControl x:Class="pdb.player.Vue.AlbumCtl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             xmlns:l="clr-namespace:pdb.player.Vue"
             d:DesignHeight="300" d:DesignWidth="300">
    <Grid>
        <l:EnhancedDataGrid  Grid.Column="0" DockPanel.Dock="Bottom" 
                       x:Name="dg" x:Uid="93A5ABB5-8716-49B8-B2CF-25D5B852114D"
                       AutoGenerateColumns="False" 
                        IsSynchronizedWithCurrentItem="false" 
                                        
                       SelectedItem="{Binding SelectedTrackInAlbumView}">



            <!--<DataGrid.RowStyle>
                <Style TargetType="DataGridRow">
                    <EventSetter Event="MouseDoubleClick" Handler="dgAlbum_MouseDoubleClick" />
                    <EventSetter Event="PreviewMouseLeftButtonDown" Handler="dg_MouseClick" />
                    <Setter Property="DataGridRow.IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                    <Setter Property="DataGridRow.Background" Value="White" />
                    <Style.Triggers>
                        <Trigger Property="DataGridRow.IsSelected" Value="True">
                            <Setter Property="DataGridRow.Background" Value="Brown" />
                        </Trigger>
                    </Style.Triggers>

                </Style>
            </DataGrid.RowStyle>-->

            <DataGrid.Columns>
                <DataGridCheckBoxColumn Header="" Binding="{Binding Enabled,UpdateSourceTrigger=PropertyChanged}"  />
                <DataGridTextColumn Header="" Binding="{Binding Index,Mode=OneWay}"/>
                <DataGridTextColumn Header="p" Binding="{Binding TrackNumber,Converter={StaticResource Int}}"/>
                <DataGridTextColumn Header="Nom" Binding="{Binding Name,Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="" Binding="{Binding MedianneStatus,Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="Classement" Binding="{Binding Classement,Converter={StaticResource cl},UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="Virtuel" Binding="{Binding ClassementVirtuel,Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="Coeff" Binding="{Binding CoeffVirtuel, Mode=OneWay, Converter={StaticResource decimal},UpdateSourceTrigger=PropertyChanged}"/>

                <DataGridTextColumn Header="Virtuel2" Binding="{Binding ClassementVirtuel2,Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="Coeff2" Binding="{Binding CoeffVirtuel2,Mode=OneWay, Converter={StaticResource decimal},UpdateSourceTrigger=PropertyChanged}"/>

                <DataGridTextColumn Header="Durée" Binding="{Binding Duration,Mode=OneWay,Converter={StaticResource TimeSpan}}"   >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                            <Setter Property="Padding" Value="0,0,3,0" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="Comment" Binding="{Binding Comment,Mode=OneWay}"/>
                <DataGridTextColumn Header="Maj"  Binding="{Binding UpdateClassement, Mode=OneWay,Converter={StaticResource date}}" />
                <DataGridTextColumn Header="MajAlbum"  Binding="{Binding AlbumUpdateClassement, Mode=OneWay, Converter={StaticResource date}}" />

                <DataGridTextColumn Header="Delai"  Binding="{Binding UpdateClassement, Mode=OneWay,Converter={StaticResource delai}}" />
                <DataGridTextColumn Header="DelaiAlbum"  Binding="{Binding AlbumUpdateClassement, Mode=OneWay, Converter={StaticResource delai}}" />

            </DataGrid.Columns>


            <DataGrid.ItemContainerStyle>

                <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
                    <EventSetter Event="MouseDoubleClick" Handler="dgAlbum_MouseDoubleClick" />
                    <EventSetter Event="PreviewMouseLeftButtonDown" Handler="dg_MouseClick" />
                    <EventSetter Event="PreviewMouseLeftButtonUp" Handler="dg_MouseClick" />
                    <EventSetter Event="PreviewMouseRightButtonDown" Handler="dg_MouseClick" />
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                    <Setter Property="FontWeight" Value="Normal" />
                    <Setter Property="BorderThickness" Value="0" />
                    <!--<Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="FontWeight" Value="Bold" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Exis
                    ts}" Value="False">
                            <Setter Property="Background" Value="LightGray" />
                        </DataTrigger>
                    </Style.Triggers>-->
                </Style>
            </DataGrid.ItemContainerStyle>

            <DataGrid.CellStyle>
                <Style TargetType="DataGridCell">
                    <Setter Property="Background" Value="{Binding TV, Converter={StaticResource colorExport},ConverterParameter=album,   UpdateSourceTrigger=PropertyChanged}" />
                    <Setter Property="Foreground" Value="{Binding TV, Converter={StaticResource foreColor},  UpdateSourceTrigger=PropertyChanged}" />
                    <Setter Property="BorderThickness" Value="1" />
                    <Setter Property="BorderBrush" Value="Transparent" />
                    <EventSetter Event="MouseDoubleClick" Handler="dgAlbum_MouseDoubleClick" />




                    <!--<Style.Triggers>
                        <Trigger Property="IsSelected"  Value="True">-->
                    <!--<Setter Property="Background"  Value="SteelBlue"/>-->
                    <!--<Setter Property="Background"  Value="SteelBlue"/>-->
                    <!--<Setter Property="Foreground"  Value="White" />-->
                    <!--<Setter Property="BorderThickness" Value="1" />-->
                    <!--</Trigger>
                    </Style.Triggers>-->
                </Style>
            </DataGrid.CellStyle>
            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow">
                    <!--<Setter Property="Height"  Value="20" />-->

                    <Setter Property="Background" Value="{Binding TV, Converter={StaticResource colorExport}, ConverterParameter=album,  UpdateSourceTrigger=PropertyChanged}" />
                    <Setter Property="Padding" Value="10,10,10,10" />
                </Style>
            </DataGrid.RowStyle>
        </l:EnhancedDataGrid>

    </Grid>
</UserControl>
]]></content>
  </file>
  <file path="\pdb.player\Vue\BibCtl.xaml.cs">
    <content><![CDATA[using System;
using System.Windows;
using System.Windows.Controls;
using pdb.player.ViewModel;
using pdb.util;
using pdb.player.Vue.Util;
using pdb.player.ViewModel.Colors;

namespace pdb.player.Vue
{
    public partial class BibCtl : UserControl, IRedraw, IGradiant
    {
        private BibViewModel bib;
        private Logger log;

        public BibCtl()
        {
            log = Logger.getLogger("BibCtl");
            InitializeComponent();
            Loaded += Bib_Loaded;
            App.refresh += new EventHandler(App_refresh);
            GradiantBuilder.Instance.Add(this); 
        }

        void App_refresh(object sender, EventArgs e)
        {
            if (!App.PHASE2.Equals(sender))
                return;
            log.log("BibCtl::App_refresh");
            if (Dispatcher.CheckAccess())
                AppRefresh();
            else
                Dispatcher.Invoke(new Action(AppRefresh));
        }

        void AppRefresh()
        {
            return;
            log.log("BibCtl::AppRefresh");
            try
            {
                tv_bib.Items.Refresh();
            }
            catch (Exception ex)
            {
                log.log(ex.ToString());
            }
        }

        internal BibViewModel BibRoot
        {
            set
            {
                bib = value;
                base.DataContext = bib;
                if (tv_bib != null)
                    tv_bib.ItemsSource = bib.Root;
            }
        }

        void Bib_Loaded(object sender, RoutedEventArgs e)
        {
            if (bib == null)
                bib = App.bib;
            PlayListViewModel.addDrow(this);
            base.DataContext = bib;
            if (bib != null)
                tv_bib.ItemsSource = bib.Root;
        }




        public void redraw()
        {
            if (Dispatcher.CheckAccess())
                AppRefresh();
            else
                Dispatcher.Invoke(new Action(AppRefresh));
        }

        ViewModel.Colors.Gradient IGradiant.Conf
        {
            get { return Couleurs.Instance.bib.gradient;  }
        }

        bool IGradiant.sensGradient
        {
            get { return true;  }
        }

        void IBackGround.setBackground(System.Windows.Media.Brush brush)
        {
            tv_bib.Background = brush; 
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\ClassementCtl.xaml">
    <content><![CDATA[<UserControl x:Class="pdb.player.Vue.ClassementCtl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             xmlns:l="clr-namespace:pdb.player.Vue"
             d:DesignHeight="300" d:DesignWidth="300">
    <Grid Background="{Binding IhmInDispo, Converter={StaticResource dispo},  UpdateSourceTrigger=PropertyChanged}" >
        <!--<Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="3" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>-->
        <!--<DataGrid  Grid.Column="0" DockPanel.Dock="Bottom" 
                       Name="dgAlbum" 
                       AutoGenerateColumns="False" 
                       ScrollViewer.CanContentScroll="True" 
                       SelectedItem="{Binding SelectedTrackInAlbumView}">

            <DataGrid.ItemContainerStyle>
                <Style TargetType="{x:Type DataGridRow}">
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                    <Setter Property="FontWeight" Value="Normal" />
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="FontWeight" Value="Bold" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.ItemContainerStyle>

            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow">
                    <EventSetter Event="MouseDoubleClick" Handler="dgAlbum_MouseDoubleClick" />
                    <Setter Property="DataGridRow.IsSelected" Value="{Binding isSelected, Mode=TwoWay}" />
                    <Setter Property="DataGridRow.Background" Value="White" />
                    <Style.Triggers>
                        <Trigger Property="DataGridRow.IsSelected" Value="True">
                            <Setter Property="DataGridRow.Background" Value="Brown" />
                        </Trigger>
                    </Style.Triggers>

                </Style>
            </DataGrid.RowStyle>

            <DataGrid.Columns>
                <DataGridCheckBoxColumn Header="" Binding="{Binding Enabled}" />
                <DataGridTextColumn Binding="{Binding TrackNumber,Converter={StaticResource Int}}"/>
                <DataGridTextColumn Header="Nom" Binding="{Binding Name}"/>
                <DataGridTextColumn Header="Classement" Binding="{Binding Classement}"/>
            </DataGrid.Columns>

        </DataGrid>
        <GridSplitter Grid.Column="1" HorizontalAlignment="Stretch" />-->

        <Grid Grid.Column="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="3" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <Grid Grid.Row="0" Margin="5"  >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="90" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <CheckBox Grid.Column="0"  Name="cbEnabled" ToolTip="Afficher seulement les désactivés" IsChecked="{Binding OnlyDisabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  />
                <CheckBox Grid.Column="1"  Name="cbUncheck" ToolTip="Décocher après classement" IsChecked="{Binding UncheckAfter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  />
                <CheckBox Grid.Column="2"  Name="cbAuto" ToolTip="Passage au morceau suivant automatiquement" IsChecked="{Binding Auto, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  />
                <TextBox Grid.Column="3"  Name="TbClass"   Text="{Binding Classement, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource cl} }"  />
                <TextBox Grid.Column="4"  Name="TbName" Text="{Binding Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <Button Grid.Column="5" Name="btRecord" DockPanel.Dock="Right" Content="Enregistrer"  Command="{Binding Record,UpdateSourceTrigger=PropertyChanged}" 
                        />
                    
            </Grid>


            <!--<ListView  DockPanel.Dock="Top" Grid.Row="0" Name="dg"  ScrollViewer.CanContentScroll="True" >
                <ListView.ItemContainerStyle>
                    <Style TargetType="{x:Type ListViewItem}">
                        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                        <Setter Property="FontWeight" Value="Normal" />
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="FontWeight" Value="Bold" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ListView.ItemContainerStyle>
                <ListView.View>
                    <GridView>
                        <GridViewColumn DisplayMemberBinding="{Binding Enabled}"/>
                        <GridViewColumn DisplayMemberBinding="{Binding Name}"/>
                        <GridViewColumn DisplayMemberBinding="{Binding Classement}"/>
                    </GridView>
                </ListView.View>
            </ListView>-->

            <l:EnhancedDataGrid Grid.Row="1" AutoGenerateColumns="False"  DockPanel.Dock="Top" x:Name="dg" x:Uid="7F8BDB42-09C9-4ED8-99DE-480FD72C6BDB"  ScrollViewer.CanContentScroll="True"  >
                      <!--SelectedItem="{Binding SelectedTrackInClassView}" >-->
                <DataGrid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="infos" Command="{Binding}"/>
                    </ContextMenu>
                </DataGrid.ContextMenu>
                <DataGrid.ItemContainerStyle>
                    <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
                        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        <Setter Property="FontWeight" Value="Normal" />
                        <Style.Triggers>
                            <!--<Trigger Property="IsSelected" Value="True">
                                <Setter Property="Foreground" Value="Brown" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Exists}" Value="False">
                                <Setter Property="Foreground" Value="LightGray" />
                            </DataTrigger>-->
                            
                        </Style.Triggers>
                    </Style>
                </DataGrid.ItemContainerStyle>
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow">
                        <EventSetter Event="MouseDoubleClick" Handler="dgMouseDoubleClick" />
                        <Setter Property="DataGridRow.IsSelected" Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                      
                        <Setter Property="Background" Value="{Binding TV, Converter={StaticResource colorExport}, ConverterParameter=classement,  UpdateSourceTrigger=PropertyChanged}" />
                        <!--<Style.Triggers>
                            <Trigger Property="DataGridRow.IsSelected" Value="True">
                                <Setter Property="DataGridRow.Background" Value="Brown" />
                            </Trigger>
                          

                        </Style.Triggers>-->
                    </Style>
                </DataGrid.RowStyle>
                <DataGrid.Columns>
                    <DataGridCheckBoxColumn Header="" Binding="{Binding Enabled}" />
                    <DataGridTextColumn Header="Nom" Binding="{Binding Name}"/>
                    <DataGridTextColumn Header="Classement" Binding="{Binding Classement,Converter={StaticResource cl} }"/>
                    <DataGridTextColumn Header="Album" Binding="{Binding Album}"/>
                    <DataGridTextColumn Header="Artiste"  Binding="{Binding Artist}"/>
                    <DataGridTextColumn Header="Grouping" Binding="{Binding Grouping, Mode=OneWay}"/>
                    <DataGridTextColumn Header="Maj"  Binding="{Binding UpdateClassement, Mode=OneWay,Converter={StaticResource date}}" />
                    <DataGridTextColumn Header="MajAlbum"  Binding="{Binding AlbumUpdateClassement, Mode=OneWay, Converter={StaticResource date}}" />

                    <DataGridTextColumn Header="Delai"  Binding="{Binding UpdateClassement, Mode=OneWay,Converter={StaticResource delai}}" />
                    <DataGridTextColumn Header="DelaiAlbum"  Binding="{Binding AlbumUpdateClassement, Mode=OneWay, Converter={StaticResource delai}}" />


                </DataGrid.Columns>

            </l:EnhancedDataGrid>


            <GridSplitter Grid.Row="2" HorizontalAlignment="Stretch"   ResizeBehavior="PreviousAndNext"  IsTabStop="True" />

            <!--<Grid Grid.Row="3" HorizontalAlignment="Stretch">
                <DataGrid ItemsSource="{Binding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                       Name="dgStat"  IsReadOnly="True"
          Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DockPanel}}, Path=ActualWidth}"
                       AutoGenerateColumns="False" >
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="-5" Binding="{Binding -5}"/>
                        <DataGridTextColumn Header="-4" Binding="{Binding -4}"/>
                        <DataGridTextColumn Header="-3" Binding="{Binding -3}"/>
                        <DataGridTextColumn Header="-2" Binding="{Binding -2}"/>
                        <DataGridTextColumn Header="-1" Binding="{Binding -1}"/>
                        <DataGridTextColumn Header="0" Binding="{Binding  0}" >
                            
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="1" Binding="{Binding  1}"/>
                        <DataGridTextColumn Header="2" Binding="{Binding  2}"/>
                        <DataGridTextColumn Header="3" Binding="{Binding  3}"/>
                        <DataGridTextColumn Header="4" Binding="{Binding  4}"/>
                        <DataGridTextColumn Header="5" Binding="{Binding  5}"/>
                    </DataGrid.Columns>
                    <DataGrid.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text ="{Binding}" Width="Auto"  HorizontalAlignment="Stretch"/>
                        </DataTemplate>
                    </DataGrid.ItemTemplate>
                </DataGrid>
            </Grid>-->
            <Grid Name="tab" Grid.Row="3" >

            </Grid>
            <Grid Grid.Row="4">
                <Grid.RowDefinitions>
                    <RowDefinition  Height="Auto"/>
                    <RowDefinition />
                    <RowDefinition />

                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <!--<TextBlock Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" Name="d02" Text="{Binding D02}" />
            <TextBlock Grid.Row="0" Grid.Column="3" Grid.ColumnSpan="3" Name="d35" Text="{Binding D35}" />
            <TextBlock Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Name="d01" Text="{Binding D01}" />
            <TextBlock Grid.Row="1" Grid.Column="2" Grid.ColumnSpan="2" Name="d23" Text="{Binding D23}" />
            <TextBlock Grid.Row="1" Grid.Column="4" Grid.ColumnSpan="2" Name="d45" Text="{Binding D45}" />-->


                <TextBlock Grid.Row="1" Text="{Binding Path=Tracks.Count}" />
                <TextBlock Grid.Row="1" Grid.Column="1" Name="d02" Text="{Binding D02}" />
                <TextBlock Grid.Row="1" Grid.Column="2" Name="d35" Text="{Binding D35}" />
                <TextBlock Grid.Row="1" Grid.Column="3" Name="d01" Text="{Binding D01}" />
                <TextBlock Grid.Row="1" Grid.Column="4" Name="d23" Text="{Binding D23}" />
                <TextBlock Grid.Row="1" Grid.Column="5" Name="d45" Text="{Binding D45}" />
                <TextBlock Grid.Row="2" Grid.Column="0" Name="d0" Text="{Binding D0}" />
                <TextBlock Grid.Row="2" Grid.Column="1" Name="d1" Text="{Binding D1}" />
                <TextBlock Grid.Row="2" Grid.Column="2" Name="d2" Text="{Binding D2}" />
                <TextBlock Grid.Row="2" Grid.Column="3" Name="d3" Text="{Binding D3}" />
                <TextBlock Grid.Row="2" Grid.Column="4" Name="d4" Text="{Binding D4}" />
                <TextBlock Grid.Row="2" Grid.Column="5" Name="d5" Text="{Binding D5}" />
            </Grid>

        </Grid>
    </Grid>
</UserControl>
]]></content>
  </file>
  <file path="\pdb.player\Vue\ClassementCtl.xaml.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using pdb.player.ViewModel;
using pdb.gen.stat;
using pdb.player.Vue.Adorn;
using System.ComponentModel;
using pdb.gen;
using System.Text.RegularExpressions;
using System.Windows.Threading;
using pdb.player.Vue.Util;
using pdb.player.ViewModel.Colors;

namespace pdb.player.Vue
{
    public class TB : UIElement
    {
        private Border border;
        private TextBlock tb;
        public TB()
        {
            border = new Border();
            border.BorderThickness = new Thickness(0.3);
            border.BorderBrush = Brushes.Gray;

            tb = new TextBlock();
            tb.TextAlignment = TextAlignment.Center;
            border.Child = tb;
            tb.FontSize = 10;
            tb.HorizontalAlignment = HorizontalAlignment.Stretch;
            tb.Visibility = System.Windows.Visibility.Visible;
        }

        public Brush Background { set { tb.Background = value; } }
        public string Content { set { tb.Text = value; } }

        protected override bool IsEnabledCore
        {
            get
            {
                return true;
            }
        }




    }


    /// <summary>
    /// Interaction logic for ClassementCtl.xaml
    /// </summary>
    public partial class ClassementCtl : UserControl, IGradiant
    {



        private DetailClassementViewModel model;
        private StatCtl[,] tbs = new StatCtl[DynamicStat.ROWS + 1, DynamicStatLigne.COLS];
        private Border[,] borders = new Border[DynamicStat.ROWS + 1, DynamicStatLigne.COLS];
        public ClassementCtl()
        {
           
            InitializeComponent();
            GradiantBuilder.Instance.Add(this); 
            TbClass.PreviewTextInput += new TextCompositionEventHandler(TbClass_PreviewTextInput);

            for (int i = -DynamicStatLigne.SEMI_COLS; i <= DynamicStatLigne.SEMI_COLS; i++)
            {
                var col = new ColumnDefinition();
                col.Width = new GridLength(1, GridUnitType.Star);
                tab.ColumnDefinitions.Add(col);
            }

            for (int j = 0; j <= DynamicStat.ROWS; j++)
            {
                var row = new RowDefinition();
                row.Height = new GridLength(1, GridUnitType.Star);
                tab.RowDefinitions.Add(row);
            }

            for (int c = 0; c < DynamicStatLigne.COLS; c++)
            {
                var border = new Border();
                border.BorderThickness = new Thickness(0.3);
                border.BorderBrush = Brushes.Gray;
                border.Background = Brushes.LightGray;
                border.VerticalAlignment = System.Windows.VerticalAlignment.Center;
                border.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
                border.ClipToBounds = true;
                var tb = new TextBlock();
                tb.VerticalAlignment = System.Windows.VerticalAlignment.Stretch;
                tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
                tb.Background = Brushes.LightGray;
                tb.Text = (c - DynamicStatLigne.SEMI_COLS).ToString();
                tb.TextAlignment = TextAlignment.Center;
                border.Child = tb;
                tab.Children.Add(border);
                Grid.SetRow(border, 0);
                Grid.SetColumn(border, c);
            }


            for (int r = 1; r <= DynamicStat.ROWS; r++)
            {
                for (int c = 0; c < DynamicStatLigne.COLS; c++)
                {
                    var tb = new StatCtl();
                    //var border = new Border();
                    //border.BorderThickness = new Thickness(0.3);
                    //border.BorderBrush = Brushes.Gray;

                    //border.VerticalAlignment = System.Windows.VerticalAlignment.Stretch;
                    ////var tb = new TextBlock();
                    ////tb.TextAlignment = TextAlignment.Center;

                    //////tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
                    ////tb.VerticalAlignment = System.Windows.VerticalAlignment.Center;
                    ////tb.FontSize = 10;


                    //border.Child = tb;
                    //    border.ClipToBounds = true;
                    tbs[r, c] = tb;
                    // borders[r, c] = border;


                    // AdornedControl ac = new AdornedControl(); 

                    // tb.BorderThickness = new Thickness(0.2) ;
                    // tb.BorderBrush = Brushes.Gray;
                    // tb.FontSize = 10;


                    tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
                    tb.Margin = new Thickness(0);
                    tb.Padding = new Thickness(0);

                    //tab.Children.Add(border);

                    //Grid.SetRow(border, r);
                    //Grid.SetColumn(border, c);

                    tab.Children.Add(tb);
                    Grid.SetRow(tb, r);
                    Grid.SetColumn(tb, c);

                    //if (r == 0)
                    //{
                    //    tb.Background = Brushes.LightGray;
                    //    tb.Text = (c - DynamicStatLigne.SEMI_COLS).ToString();
                    //}


                    if (c == DynamicStatLigne.SEMI_COLS || r == 3)
                        tb.FontWeight = FontWeights.Bold;
                }
            }




            this.Loaded += new RoutedEventHandler(ClassementCtl_Loaded);
        }
        Regex regex = new Regex(@"[0-5.\ ]+");
        void TbClass_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            var text = e.Text;
            if (!string.IsNullOrEmpty(text))
            {
                //regex that matches disallowed text
                if (!regex.IsMatch(text))
                    e.Handled = true;
            }

        }

        void ClassementCtl_Loaded(object sender, RoutedEventArgs e)
        {
            this.classProvider = new Provider(dg);
            // this.albumProvider = new Provider(dgAlbum); 
            this.model = new DetailClassementViewModel();
            App.DetailClassementViewModel = model; 
            model.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(model_PropertyChanged);
            TrackListViewModel.CurrentSelectedChanged += new EventHandler(TrackListViewModel_CurrentSelectedChanged);
            model.Classement = "";
            btRecord.IsDefault = true; 
            init();
        }

        void TrackListViewModel_CurrentSelectedChanged(object sender, EventArgs e)
        {
           // init(); 
        }

        void model_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            init();
        }

        private class CPieceComparerByQualityAndLength2 : IComparer<TrackListViewModel>
        {
            int IComparer<TrackListViewModel>.Compare(TrackListViewModel x, TrackListViewModel y)
            {
                return -x.Track.Piece.Rank.Twice.CompareTo(y.Track.Piece.Rank.Twice);
            }
        }

        private void init()
        {
            if (!CheckAccess())
            {
                Dispatcher.BeginInvoke(new Action(this.init), DispatcherPriority.DataBind);
                return;
            }
            SortDescriptionCollection sort = null;
            ICollectionView view = null;
          
            view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
            if (view != null)
                sort = view.SortDescriptions;

            List<SortDescription> _sort = null;
            if (sort != null)
                _sort = new List<SortDescription>(sort);



            base.DataContext = null;
            try
            {
                model.reset(); 
                dg.ItemsSource = null;
                var tracks = model.Tracks;

                if (tracks == null)
                    return;
                tracks.Sort(new CPieceComparerByQualityAndLength2());
                dg.ItemsSource = tracks;
                //foreach (TrackListViewModel t in tracks)
                //    t.refresh(); 

                //ICollectionView source = CollectionViewSource.GetDefaultView(dg.ItemsSource);
                //if (source != null)
                //{
                //    if (source.SortDescriptions != null)
                //        source.SortDescriptions.Clear();
                //    source.SortDescriptions.Add(new SortDescription("Classement", ListSortDirection.Descending));
                //}
              //  tracks.init();
                //dgAlbum.ItemsSource = null;
                //object sel; 
                //if (dgAlbum.Items.Count > 0)
                //{
                //    sel = dgAlbum.SelectedItem; 
                //}
                //dgAlbum.ItemsSource = model.Album;
                //dgStat.ItemsSource = null;

                //var stats = model.Stats;
                //dgStat.DataContext = null; 
                //dgStat.DataContext = stats.DefaultView;
                //dgStat.ItemsSource = stats.DefaultView; 

                var stats = model.getStats();
                if (stats == null)
                    return;

                //for (int c = -DynamicStatLigne.SEMI_COLS; c <= DynamicStatLigne.SEMI_COLS; c++)
                //{
                //    var tb = tbs[0, c + DynamicStatLigne.SEMI_COLS];
                //    tb.Background = Brushes.LightGray;
                //    tb.Text = (c - DynamicStatLigne.SEMI_COLS).ToString();
                //    tb.InvalidateVisual();
                //}

                for (int r = 1; r <= DynamicStat.ROWS; r++)
                {
                    int max = 0;
                    for (int c = -DynamicStatLigne.SEMI_COLS; c <= DynamicStatLigne.SEMI_COLS; c++)
                    {
                        int nb = stats[r - 1][c];
                        if (nb > max)
                            max = nb;
                    }
                    for (int c = -DynamicStatLigne.SEMI_COLS; c <= DynamicStatLigne.SEMI_COLS; c++)
                    {
                        try
                        {
                            //  var row = stats.Rows[r-1][c.ToString()]; 
                            int nb = stats[r - 1][c];
                            var tb = tbs[r, c + DynamicStatLigne.SEMI_COLS];
                            if (nb > 0)
                                tb.Text = nb.ToString();
                            else
                                tb.Text = "";
                            tb.setValue(nb, max);
                            tb.InvalidateVisual();
                            //var b = borders[r, c + DynamicStatLigne.SEMI_COLS];
                            //var layer = AdornerLayer.GetAdornerLayer(b);
                            //try { layer.Remove((layer.GetAdorners(b))[0]); }
                            //catch { }
                            //layer.Add(new BarAdorner(b, nb, max));


                        }
                        catch (Exception ex)
                        {
                            App.log.log(ex.ToString());
                        }


                        // tbs[r, c + DynamicStatLigne.SEMI_COLS].Text = stats.Rows[r - 1][c.ToString()].ToString(); 
                    }
                }
            }
            catch (Exception ex)
            {
                App.log.log(ex.ToString());
            }
            finally
            {
               base.DataContext = model;
                view = CollectionViewSource.GetDefaultView(dg.ItemsSource);

                if (_sort != null && _sort.Count > 0)
                {
                    view.SortDescriptions.Clear();
                    foreach (var _s in _sort)
                    {
                        view.SortDescriptions.Add(_s);
                        foreach (DataGridColumn _c in dg.Columns)
                        {
                            if (_s.PropertyName == _c.SortMemberPath)
                            {
                                _c.SortDirection = _s.Direction;
                                break;
                            }
                        }
                        break;

                    }
                }
            }
        }

        private void btRecord_Click(object sender, RoutedEventArgs e)
        {
            model.record();

        }

        private ItrackProvider classProvider;
        private ItrackProvider albumProvider;

        private void dgMouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var r = sender as DataGridRow;
            var t = r.Item as TrackListViewModel;
            PlayerViewModel.reset(classProvider, t);
        }

        //private void dgAlbum_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        //{
        //    var r = sender as DataGridRow;
        //    var t = r.Item as TrackListViewModel;
        //    PlayerViewModel.reset(albumProvider, t);
        //}

        private class Provider : ItrackProvider
        {
            private DataGrid dt;
            public Provider(DataGrid dt)
            {
                this.dt = dt;
            }

            public System.ComponentModel.ICollectionView PresentationTracks
            {
                get { return CollectionViewSource.GetDefaultView(dt.ItemsSource); }
            }

            public PlayListViewModel PlayList
            {
                get { return null; }
            }

            public void Focus(int index)
            {

            }


            public void doFilter(string filter)
            {

            }

            public List<TrackListViewModel> SelectedTracks
            {
                get
                {
                    var list = new List<TrackListViewModel>();
                    foreach (TrackListViewModel track in PresentationTracks)
                        list.Add(track);
                    return list;
                }
            }
        }

        //public System.ComponentModel.ICollectionView PresentationTracks
        //{
        //    get { return CollectionViewSource.GetDefaultView(dgAlbum.ItemsSource); }
        //}

        public PlayListViewModel PlayList
        {
            get { return null; }
        }

        public void Focus(int index)
        {

        }

        ViewModel.Colors.Gradient IGradiant.Conf
        {
            get { return Couleurs.Instance.classement.gradient; }
        }

        bool IGradiant.sensGradient
        {
            get { return true;  }
        }

        void IBackGround.setBackground(Brush brush)
        {
            dg.Background = brush;
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\ConfAlbumSortW.xaml">
    <content><![CDATA[<Window x:Class="pdb.player.Vue.ConfAlbumSortW"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="ConfAlbumSortW" Height="265" Width="1301" Loaded="Window_Loaded">
    <Grid Height="206" Width="1207">
        
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid Grid.Row="0" Name="gfirst" />
       
        <Grid Grid.Row="1" Name="gsecond" />
        <!--<Grid Grid.ColumnSpan="2" Margin="0,0,-172,0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="236*" />
            </Grid.ColumnDefinitions>
            <CheckBox Grid.Row="0" Grid.Column="0" Name="cb_enabled" ToolTip="utilisé" Margin="5" Padding="2" />
            <ComboBox Grid.Row="0" Grid.Column="1" Name="cbxSort" Height="22" Padding="4" >
                <ComboBoxItem ToolTip="pas de conf" Name="none"></ComboBoxItem>
                <ComboBoxItem ToolTip="tri sur moyenne quand aucun des albums n'a défini sa médianne" Name="strict">strict</ComboBoxItem>
                <ComboBoxItem ToolTip="calcul Médianne moins strict" Name="light" >light</ComboBoxItem>
                <ComboBoxItem ToolTip="tri uniquement sur la moyenne" Name="moy" >moy</ComboBoxItem>
            </ComboBox>

            <TextBox  Grid.Row="0" Grid.Column="2" Name="tb_medianne" Width="30" ToolTip="medianne" Margin="5" />
            <CheckBox  Grid.Row="0" Grid.Column="3" Name="cb_quasi" ToolTip="quasi" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="4" Name="cb_lissage" ToolTip="lissage" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="5" Name="cb_removeEpsilon" ToolTip="removeEpsilon" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="6" Name="cb_reSort" ToolTip="reSort" Margin="5" Padding="2" />
            <TextBox  Grid.Row="0" Grid.Column="7" Name="tb_safe" Width="30" ToolTip="safe" Margin="5" KeyUp="tb_safe_KeyUp" />
            <TextBox  Grid.Row="0" Grid.Column="8" Name="tb_coeff" Width="40" ToolTip="coeff des morceaux virtuels" Margin="5" KeyUp="tb_safe_KeyUp" />
            <TextBox  Grid.Row="0" Grid.Column="9" Name="tb_coeffT" Width="40" ToolTip="coeff total des morceaux virtuels" Margin="5" KeyUp="tb_coeffT_KeyUp" />
            <CheckBox  Grid.Row="0" Grid.Column="10" Name="cb_removeFirst" ToolTip="mise à zero des premiers" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="11" Name="cb_deleteFirst" ToolTip="suppression des premiers" Margin="5" Padding="2" />
            <ComboBox ToolTip="removelast" Grid.Row="0" Grid.Column="12" Name="cbx1_removeLast" Height="22" Padding="4" >
                <ComboBoxItem>non</ComboBoxItem>
                <ComboBoxItem>unselected</ComboBoxItem>
                <ComboBoxItem>virtuels</ComboBoxItem>
                <ComboBoxItem>tous</ComboBoxItem>
            </ComboBox>
            <CheckBox  Grid.Row="0" Grid.Column="13" Name="cb_cumul" ToolTip="cumul" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="14" Name="cb_noAdd" ToolTip="pas d'ajout" Margin="5" Padding="2" />
            <TextBox  Grid.Row="0" Grid.Column="15" Name="tb_exp" Width="30" ToolTip="exposant proportion des morceaux gérés" Margin="5" />
            <CheckBox  Grid.Row="0" Grid.Column="16" Name="cb_removeEnabled" ToolTip="remove enabled" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="17" Name="cb_virtOnlyDisabled" ToolTip="virtuel: seulement les décochés" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="18" Name="cb_forceCoeffVirt" ToolTip="virtuel: coeff forcé" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="19" Name="cb_virtAlignSelected" ToolTip="virtuel: aligné sur le coché" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="20" Name="cb_virtAlignPrec" ToolTip="virtuel: aligné sur le précédent" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="21" Name="cb_coeffVirtAdjust" ToolTip="coeffvirt ajusté sur coeff selected" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="22" Name="cb_coeffVirtAuto" ToolTip="coeffvirt automatique" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="23" Name="cb_noaddEnd" ToolTip="en fin d'alum pas de virtuel" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="24" Name="cb_noaddAll" ToolTip="tout virtuel" Margin="5" Padding="2" />

            <ComboBox ToolTip="ajusté avec le plus mauvais coché si besoin" Grid.Row="0" Grid.Column="25" Name="cbx_cmpMinn" Height="22" Padding="4" >
                <ComboBoxItem ToolTip="pas géré" >non</ComboBoxItem>
                <ComboBoxItem ToolTip="ce qui reste dispo est plus grand que la médianne">orphelin</ComboBoxItem>
                <ComboBoxItem ToolTip="tou ce qui est noté et coché">toujours</ComboBoxItem>
            </ComboBox>
            <TextBox  Grid.Row="0" Grid.Column="26" Name="tb_zero" Width="120" ToolTip="zéro" Margin="5" />

            <CheckBox Grid.Row="1" Grid.Column="0"  Name="cb2_enabled" ToolTip="utilisé" Margin="5" Padding="2" />
            <ComboBox Grid.Row="1" Grid.Column="1" Name="cbx2Sort" Height="22" Padding="4" >
                <ComboBoxItem ToolTip="pas de conf" Name="none2"></ComboBoxItem>
                <ComboBoxItem ToolTip="tri sur moyenne quand aucun des albums n'a défini sa médianne" Name="strict2">strict</ComboBoxItem>
                <ComboBoxItem ToolTip="calcul Médianne moins strict" Name="light2" >light</ComboBoxItem>
                <ComboBoxItem ToolTip="tri uniquement sur la moyenne" Name="moy2" >moy</ComboBoxItem>
            </ComboBox>

            <TextBox Grid.Row="1" Grid.Column="2"  Name="tb2_medianne" Width="30" ToolTip="medianne" Margin="5" />
            <CheckBox Grid.Row="1" Grid.Column="3" Name="cb2_quasi" ToolTip="quasi" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="4" Name="cb2_lissage" ToolTip="lissage" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="5" Name="cb2_removeEpsilon" ToolTip="removeEpsilon" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="6" Name="cb2_reSort" ToolTip="reSort" Margin="5" Padding="2" />
            <TextBox  Grid.Row="1" Grid.Column="7" Name="tb2_safe" Width="30" ToolTip="safe" Margin="5" />
            <TextBox  Grid.Row="1" Grid.Column="8" Name="tb2_coeff" Width="40" ToolTip="coeff des morceaux virtuels" Margin="5" />
            <TextBox  Grid.Row="1" Grid.Column="9" Name="tb2_coeffT" Width="40" ToolTip="coeff total des morceaux virtuels" Margin="5"  />
            <CheckBox  Grid.Row="1" Grid.Column="10" Name="cb2_removeFirst" ToolTip="removeFirst" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="11" Name="cb2_deleteFirst" ToolTip="deleteFirst" Margin="5" Padding="2" />
            <ComboBox ToolTip="removelast" Grid.Row="1" Grid.Column="12" Name="cbx2_removeLast" Height="22" Padding="4" >
                <ComboBoxItem>non</ComboBoxItem>
                <ComboBoxItem>unselected</ComboBoxItem>
                <ComboBoxItem>virtuels</ComboBoxItem>
                <ComboBoxItem>tous</ComboBoxItem>
            </ComboBox>
            <CheckBox  Grid.Row="1" Grid.Column="13" Name="cb2_cumul" ToolTip="cumul" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="14" Name="cb2_noAdd" ToolTip="pas d'ajout" Margin="5" Padding="2" />
            <TextBox  Grid.Row="1" Grid.Column="15" Name="tb2_exp" Width="30" ToolTip="exposant proportion des morceaux gérés" Margin="5" />
            <CheckBox  Grid.Row="1" Grid.Column="16" Name="cb2_removeEnabled" ToolTip="remove enabled" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="17" Name="cb2_virtOnlyDisabled" ToolTip="virtuel: seulement les décochés" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="18" Name="cb2_forceCoeffVirt" ToolTip="virtuel: coeff forcé" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="19" Name="cb2_virtAlignSelected" ToolTip="virtuel: aligné sur le coché" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="20" Name="cb2_virtAlignPrec" ToolTip="virtuel: aligné sur le précédent" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="21" Name="cb2_coeffVirtAdjust" ToolTip="coeffvirt ajusté sur coeff selected" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="22" Name="cb2_coeffVirtAuto" ToolTip="coeffvirt automatique" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="23" Name="cb2_noaddEnd" ToolTip="en fin d'alum pas de virtuel" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="24" Name="cb2_noaddAll" ToolTip="tout virtuel" Margin="5" Padding="2" />
            <ComboBox ToolTip="ajusté avec le plus mauvais coché si besoin" Grid.Row="1" Grid.Column="25" Name="cbx2_cmpMinn" Height="22" Padding="4" >
                <ComboBoxItem ToolTip="pas géré" >non</ComboBoxItem>
                <ComboBoxItem ToolTip="ce qui reste dispo est plus grand que la médianne">orphelin</ComboBoxItem>
                <ComboBoxItem ToolTip="tou ce qui est noté et coché">toujours</ComboBoxItem>
            </ComboBox>
            <TextBox  Grid.Row="1" Grid.Column="26" Name="tb2_zero" Width="120" ToolTip="zéro" Margin="5" />
        </Grid>-->
        <Grid Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <StackPanel Grid.Row="2" Grid.Column="0" Orientation="Horizontal"  HorizontalAlignment="Left"  Margin="0,5" >
                <CheckBox Name="cb_createCourant" ToolTip="générer stats en cours (désactivés)"  Margin="5" Padding="2"></CheckBox>
                <CheckBox Name="cb_createInter" ToolTip="générer stats en cours + provisoire"  Margin="5" Padding="2"></CheckBox>
                <CheckBox Name="cb_createAll" ToolTip="générer stats de tout"  Margin="5" Padding="2"></CheckBox>
                <DatePicker Name="dp_date" ToolTip="Date seuil pour considérer un classement provisoire" />
            </StackPanel>
            <StackPanel Orientation="Horizontal"  HorizontalAlignment="Right" Margin="0,5,0,-5"  Width="283">
                <TextBox Grid.Row="2" Name="tb_stackSize" Width="30"  VerticalAlignment="Center" Text="10" ToolTip="taille de la pile d'exclusion" Margin="5" Padding="2"/>
                <TextBox Grid.Row="2" Name="tb_coeffEnabled" Width="60"  VerticalAlignment="Center" Text="1" ToolTip="Coeff des morceaux cochés"  KeyUp="tb_safe_KeyUp" Margin="5" Padding="2"/>
                <Button Grid.Row="2" Name="bt_cancel" IsCancel="true" Height="25" HorizontalAlignment="Right" Content="Cancel" Click="bt_cancel_Click"   Margin="5" Padding="2"/>
                <Button Grid.Row="2" Name="bt_ok" Height="25" HorizontalAlignment="Right" Content="Ok" Click="bt_ok_Click"   Margin="5" Padding="2"/>
                <Button Grid.Row="2" Name="bt_coul" Height="25" HorizontalAlignment="Right" Content="Couleurs" Click="bt_coul_Click"   Margin="5" Padding="2"/>
            </StackPanel>
        </Grid>
    </Grid>

</Window>
]]></content>
  </file>
  <file path="\pdb.player\Vue\ConfCouleurs.xaml">
    <content><![CDATA[<Window x:Class="pdb.player.Vue.ConfCouleurs"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        Title="Couleurs" Height="600" Width="600">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition />
            <ColumnDefinition />
        </Grid.ColumnDefinitions>
      
        
        <Grid Grid.Column="0" >
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <TreeView Grid.Row="0" Name="tv_col" ItemsSource="{Binding PLayLists, UpdateSourceTrigger=PropertyChanged}"   ScrollViewer.CanContentScroll="True"
                
                  VirtualizingStackPanel.IsVirtualizing="True"
                  VirtualizingStackPanel.VirtualizationMode="Recycling"
                  >
                <TreeView.Background>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                        <GradientStop Color="#dfdfdf" Offset="0" />
                        <GradientStop Color="#fff" Offset="1" />

                    </LinearGradientBrush>

                </TreeView.Background>
                
                <TreeView.ItemContainerStyle>
                    <Style TargetType="{x:Type TreeViewItem}">
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />

                        <Setter Property="FontWeight" Value="Normal" />
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="FontWeight" Value="Bold" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>

                </TreeView.ItemContainerStyle>

                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate ItemsSource="{Binding}" >
                        <TextBlock Text="{Binding Name}" ToolTip="{Binding Description}" />

                    </HierarchicalDataTemplate>

                </TreeView.ItemTemplate>
            </TreeView>
            <Button Grid.Row="1" Name="btResetAll" Content="Tout réinitialiser" Click="btResetAll_Click" />
        </Grid>
         <Grid Grid.Column="1" DataContext="{Binding ElementName=tv_col,Path=SelectedItem}" >
            <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <RowDefinition  Height="auto"/>
                <RowDefinition  Height="auto"/>
                <RowDefinition  Height="auto"/>
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <TextBlock Grid.Row="0" Text="{Binding Path=Name, UpdateSourceTrigger=PropertyChanged}" Margin="5"/>
            <TextBlock Grid.Row="1" Text="{Binding Path=Description, UpdateSourceTrigger=PropertyChanged}" TextWrapping="Wrap"  Margin="5"/>
            <TextBox Grid.Row="2" Name="tbValue" Text="{Binding Path=Code, UpdateSourceTrigger=LostFocus}"  Margin="5"/>
            <TextBlock Grid.Row="3" Text="{Binding Path=Ancestor, UpdateSourceTrigger=PropertyChanged}" Margin="5"/>
            <Rectangle Grid.Row="4" Fill="{Binding Path=Brush, UpdateSourceTrigger=PropertyChanged}"  Margin="10"/>

        </Grid>
        <Grid Grid.Column="2"  DataContext="{Binding ElementName=tv_col,Path=SelectedItem}" >
            <StackPanel Orientation="Vertical" >
                <xctk:ColorPicker Name="clp"  SelectedColor="{Binding Path=Color, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                  SelectedColorChanged="clp_SelectedColorChanged"
                                  
                                  ColorMode="ColorCanvas"  Margin="10"
                    ShowDropDownButton="True"
                    ShowRecentColors="True"   DisplayColorAndName="True" 
                                                                  
                                                                  />
                <Button Name="btModif" Content="Appliquer" Click="btModif_Click" Margin="10"/>
                <Button  Name="btReset" Content="Réinitialiser" Click="btReset_Click" Margin="10"/>
                <DockPanel Name="bts" Margin="10"  HorizontalAlignment="Center">
                    <Button Name="Prec" DockPanel.Dock="Left" Content=" &lt;-" Width="30" Height="30"  Command="{Binding Prec}"  Margin="30"/>
                    <Button Name="Suivant" DockPanel.Dock="Right" Content="-&gt;" Width="30" Height="30" Command="{Binding Suiv}"/>
                </DockPanel>

            </StackPanel>

        </Grid>
    </Grid>
</Window>
]]></content>
  </file>
  <file path="\pdb.player\Vue\ConfCouleurs.xaml.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using pdb.player.ViewModel.Colors;

namespace pdb.player.Vue
{
    /// <summary>
    /// Paramétrage des couleurs de l'appli
    /// </summary>
    public partial class ConfCouleurs : Window
    {

        pdb.player.ViewModel.Colors.Couleurs couleurs = pdb.player.ViewModel.Colors.Couleurs.Instance;
        public ConfCouleurs()
        {
            InitializeComponent();
            this.DataContext = couleurs;
            this.tv_col.ItemsSource = couleurs;

            couleurs.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(couleurs_PropertyChanged);
            ColorViewModel.selectedChanged += new EventHandler(ColorViewModel_selectedChanged);

            var gr = couleurs.general.gradient;
            Couleurs.colorChangeTree += new EventHandler(gr_colorChangeTree);
            makeGradient();

            bts.DataContext = couleurs; 
        }

        void gr_colorChangeTree(object sender, EventArgs e)
        {
            makeGradient(); 
        }

        private void makeGradient()
        {
            var gr = couleurs.general. gradient;
            var g = new LinearGradientBrush();

            g.StartPoint = new Point(gr.depart.pt.x.getDouble(), gr.depart.pt.y.getDouble());
            g.EndPoint = new Point(gr.arrivee.pt.x.getDouble(), gr.arrivee.pt.y.getDouble());

            var gs = new GradientStop(gr.depart.couleur.Color, gr.depart.offset.getDouble());
            var gs2 = new GradientStop(gr.arrivee.couleur.Color, gr.arrivee.offset.getDouble());
            g.GradientStops.Add(gs);
            g.GradientStops.Add(gs2);
            g.MappingMode= BrushMappingMode.RelativeToBoundingBox; 
            tv_col.Background = null; 
            tv_col.Background = g;
            
          
        }

        void ColorViewModel_selectedChanged(object sender, EventArgs e)
        {
            var selected = couleurs.Selected;
            if (selected != null)
            {
                clp.SelectedColor = selected.Color;
            }
        }

        void couleurs_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            var selected = couleurs.Selected;
            if (selected != null)
            {
                clp.SelectedColor = selected.Color;
            }

        }



       

        private void btModif_Click(object sender, RoutedEventArgs e)
        {
            var selected = couleurs.Selected;
            if (selected != null)
            {
                var col = tbValue.Text; //  clp.SelectedColorText;
                selected.Code = col;
                clp.SelectedColor = selected.Color;
                MementoColor.record(); 
            }
        }

        private void btReset_Click(object sender, RoutedEventArgs e)
        {
            var selected = couleurs.Selected;
            if (selected != null)
            {
                selected.resetTree();
                clp.SelectedColor = selected.Color;
                tbValue.Text = selected.Code;
                MementoColor.record(); 
            }
            
        }

        private void btResetAll_Click(object sender, RoutedEventArgs e)
        {
            couleurs.resetTree();
            MementoColor.record(); 
        }

        private void clp_SelectedColorChanged(object sender, RoutedEventArgs e)
        {
            var selected = couleurs.Selected;
            if (selected != null)
            {
                var col = clp.SelectedColorText;
                tbValue.Text = col; 
            }
        }

      
    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\ConfExport.xaml">
    <content><![CDATA[<Window x:Class="pdb.player.Vue.ConfExport"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="ConfExport" Height="129" Width="374">
    <Grid Margin="1">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <DockPanel Grid.Row="0"  Margin="3"  HorizontalAlignment="Stretch" >
            <TextBox Name="tb_path" Margin="5"  Width="200" DockPanel.Dock="Left" ToolTip="Répertoire de destination" />
            <Button Name="bt_browse" Margin="5" Width="40" Content="..." DockPanel.Dock="Right"  ToolTip="Parcourir"  Click="bt_browse_Click" />
        </DockPanel>
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <CheckBox Grid.Column="0" Margin="5" Name="cb_modeAlbum" Width="30"  ToolTip="Mode Album" />
            <CheckBox Grid.Column="1" Margin="5" Name="cb_reverse" Width="30"  ToolTip="copie inversée dans l'album" />
            <CheckBox Grid.Column="2" Margin="5" Name="cb_reset" Width="30"  ToolTip="reset à max à chaque boucle" />
            <CheckBox Grid.Column="3" Margin="5" Name="cb_oneShot" Width="30"  ToolTip="export non réévalué" />
            <CheckBox Grid.Column="4" Margin="5" Name="cb_disabledAlway" Width="30"  ToolTip="Privilégier les désactivés" />
            <TextBox Grid.Column="5" Margin="5" Name="tb_min" ToolTip="nbMin" Width="40" />
            <TextBox Grid.Column="6" Margin="5" Name="tb_max" ToolTip="nbMax" Width="40" />
            <TextBox Grid.Column="7" Margin="5" Name="tb_lot" ToolTip="lot" Width="40" />
        </Grid>
     
        <Button Grid.Row="2" Name="bt_ok" HorizontalAlignment="Right" Content="Ok" Click="bt_ok_Click" />
         
      

    </Grid>
</Window>
]]></content>
  </file>
  <file path="\pdb.player\Vue\ConfExport.xaml.cs">
    <content><![CDATA[using System;
using System.Windows;
using pdb.gen.Tuning;

namespace pdb.player.Vue
{
    /// <summary>
    /// Interaction logic for ConfExport.xaml
    /// </summary>
    public partial class ConfExport : Window
    {
        private Export export;
        public ConfExport()
        {
            InitializeComponent();
        }
        public ConfExport(string title, Export export)
            : this()
        {
            Title = title;
            this.export = export;
            this.Loaded += new RoutedEventHandler(ConfExport_Loaded);
            this.Closing += new System.ComponentModel.CancelEventHandler(ConfExport_Closing);
        }

        void ConfExport_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            record();
        }

        void ConfExport_Loaded(object sender, RoutedEventArgs e)
        {
            cb_modeAlbum.Checked += new RoutedEventHandler(cb_modeAlbum_Checked);
            display();
        }

        void cb_modeAlbum_Checked(object sender, RoutedEventArgs e)
        {
            //export.modeAlbum = cb_modeAlbum.IsChecked.Value; 
            //display();
        }

        void display()
        {
            tb_path.Text = export.dir;
            cb_modeAlbum.IsChecked = export.modeAlbum;
            cb_reverse.IsChecked = export.albumReverse; 
            cb_reset.IsChecked = export.resetAfterLoop;
            cb_oneShot.IsChecked = export.oneShot;
            cb_disabledAlway.IsChecked = export.disabledAlway; 
           // tb_lot.IsEnabled = export.modeAlbum;
            tb_lot.Text = export.lot.ToString();
            //tb_max.IsEnabled = export.modeAlbum;
            tb_max.Text = export.nbMax.ToString();
           // tb_min.IsEnabled = export.modeAlbum; 
            tb_min.Text = export.nbMin.ToString();
            
        }
        void record()
        {
            export.dir = tb_path.Text;
            export.modeAlbum = cb_modeAlbum.IsChecked.Value;
            export.albumReverse = cb_reverse.IsChecked.Value; 
            export.resetAfterLoop = cb_reset.IsChecked.Value;
            export.oneShot = cb_oneShot.IsChecked.Value;
            export.disabledAlway = cb_disabledAlway.IsChecked.Value; 
            export.lot = Convert.ToInt32(tb_lot.Text);
            export.nbMin = Convert.ToInt32(tb_min.Text);
            export.nbMax = Convert.ToInt32(tb_max.Text);
        }

        private void bt_ok_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        private void bt_browse_Click(object sender, RoutedEventArgs e)
        {
            var dialog = new System.Windows.Forms.FolderBrowserDialog();

            dialog.SelectedPath = App.Db.DefaultFolder;
            System.Windows.Forms.DialogResult result = dialog.ShowDialog();
            string dir = null;
            if (result == System.Windows.Forms.DialogResult.OK)
            {
                dir = dialog.SelectedPath;
                export.dir = dir;
                tb_path.Text = dir;
            }
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\ConfImport.xaml">
    <content><![CDATA[<Window x:Class="pdb.player.Vue.ConfImport"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:userCtl="clr-namespace:pdb.player.Vue"
        Title="Importer" Height="210" Width="453">
    <Grid Height="180" Width="435">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
         
        </Grid.RowDefinitions>
        <userCtl:FolderBrowserDialog x:Name="folder" Grid.Row="0" Loaded="folder_Loaded" />
          
        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="20" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Label Grid.Row="0" Grid.Column="0" >Artiste</Label>
            <CheckBox Grid.Row="0" Grid.Column="1" Name="cb_artist"  VerticalAlignment="Center"/>
            <TextBox Grid.Row="0" Grid.Column="2" Name="tb_artist" Width="200" />
            
            <Label Grid.Row="1" Grid.Column="0" >Album</Label>
            <CheckBox Grid.Row="1" Grid.Column="1" Name="cb_album"  VerticalAlignment="Center"/>
            <TextBox Grid.Row="1" Grid.Column="2" Name="tb_album" Width="200"  />
            
            
            <Label Grid.Row="2" Grid.Column="0" >Année</Label>
            <CheckBox Grid.Row="2" Grid.Column="1" Name="cb_year"  VerticalAlignment="Center"/>
            <TextBox Grid.Row="2" Grid.Column="2" Name="tb_year" Width="200"  />

            <Label Grid.Row="3" Grid.Column="0" >Nom</Label>
            <CheckBox Grid.Row="3" Grid.Column="1" Name="cb_name"  VerticalAlignment="Center"/>
            <TextBox Grid.Row="3" Grid.Column="2" Name="tb_name" Width="200"  />

            <Label Grid.Row="4" Grid.Column="0" >Piste</Label>
            <CheckBox Grid.Row="4" Grid.Column="1" Name="cb_tn"  VerticalAlignment="Center"/>
            <!--<TextBox Grid.Row="4" Grid.Column="2" Name="tb_tn" Width="200"  />-->

           
          



        </Grid> 
    </Grid>
</Window>
]]></content>
  </file>
  <file path="\pdb.player\Vue\ConfImport.xaml.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using pdb.gen.Tuning;

namespace pdb.player.Vue
{
    /// <summary>
    /// Interaction logic for ConfImport.xaml
    /// </summary>
    public partial class ConfImport : Window
    {
        private Import import;
        public ConfImport()
        {
            InitializeComponent();
        }

        public ConfImport(string title, Import import)
            : this()
        {
            this.Title = title;
            this.import = import;
            this.Loaded += new RoutedEventHandler(ConfImport_Loaded);
            this.Closing += new System.ComponentModel.CancelEventHandler(ConfImport_Closing);
            folder.ok += new EventHandler(folder_ok);
            folder.cancel += new EventHandler(folder_cancel);
            folder.Dir = import.dir;
        }

        void folder_cancel(object sender, EventArgs e)
        {
            import.dir = null;
            Close();
        }

        void folder_ok(object sender, EventArgs e)
        {
            Close();
        }

        void ConfImport_Loaded(object sender, RoutedEventArgs e)
        {
            display();
        }

        void ConfImport_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            record();
        }

        void display()
        {
            folder.Dir = import.dir;
            tb_album.Text = import.album;
            tb_artist.Text = import.artist;
            int? year = import.year;
            if (year != null)
                tb_year.Text = import.year.ToString();
            cb_album.IsChecked = import.balbum;
            cb_artist.IsChecked = import.bartist;
            cb_name.IsChecked = import.bname;
            cb_tn.IsChecked = import.btrackNumber;
            cb_year.IsChecked = import.byear; 

        }
        void record()
        {
            import.dir = folder.Dir;
            import.album = tb_album.Text;
            import.artist = tb_artist.Text;
          
            int? year = null;
            if (!string.IsNullOrEmpty(tb_year.Text))
                year = Convert.ToInt32(tb_year.Text);
            import.year = year;

            import.bartist = cb_artist.IsChecked.Value;
            import.balbum = cb_album.IsChecked.Value;
            import.bname = cb_name.IsChecked.Value;
            import.btrackNumber = cb_tn.IsChecked.Value;
            import.byear = cb_year.IsChecked.Value; 
        }

        private void folder_Loaded(object sender, RoutedEventArgs e)
        {

        }

       
    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\DataGridPlayList.xaml">
    <content><![CDATA[<UserControl x:Class="pdb.player.Vue.DataGridPlayList"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:l="clr-namespace:pdb.player.Vue"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300" >
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <l:EnhancedDataGrid Grid.Row="0" x:Name="dg" x:Uid="2D638B20-D34A-48B9-88E8-9F00F1BAA78D" ConfCouleur="main"
                            AutoGenerateColumns="False" IsSynchronizedWithCurrentItem="False"                   
                            SelectedItem="{Binding SelectedTrack, Mode=TwoWay}"               
                  >
            <DataGrid.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="{Binding LinkFather.Header, UpdateSourceTrigger=LostFocus}"   Command="{Binding LinkFather}" />
                    <MenuItem Header="{Binding LinkChild.Header, UpdateSourceTrigger=LostFocus}"  Command="{Binding LinkChild}" />
                    <MenuItem Header="{Binding LinkFusion.Header, UpdateSourceTrigger=LostFocus}"  Command="{Binding LinkFusion}" />
                    <MenuItem Header="!!!Supprimer!!!"  Command="{Binding DeleteTrack}" />
                    <MenuItem Header="Ressaisir le premier"   Command="{Binding LinkReset}" />
                    <MenuItem Header="Cocher la sélection"  Command="{Binding ContextCmdCheck}" />
                    <MenuItem Header="Décocher la sélection"  Command="{Binding ContextCmdUnCheck}" />
                    <MenuItem Header="{Binding Export.Header, UpdateSourceTrigger=LostFocus}"   Command="{Binding Export}" />
                    <MenuItem Header="{Binding ExportCompress.Header, UpdateSourceTrigger=LostFocus}"   Command="{Binding ExportCompress}" />
                    <MenuItem Header="Ajouter à la liste"  Command="{Binding ContextCmdAddToList}" />



                </ContextMenu>
            </DataGrid.ContextMenu>
            
          
            <DataGrid.Columns>
                

                <DataGridTextColumn Binding="{Binding Index,Mode=OneWay}"/>
                <DataGridTextColumn Binding="{Binding StrPlaying, Mode=OneWay}"/>
                <DataGridCheckBoxColumn Header="" Binding="{Binding Enabled,UpdateSourceTrigger=PropertyChanged}"  />
                  
                <DataGridCheckBoxColumn Header="" Binding="{Binding Exists,Mode=OneWay}" />
                <DataGridTextColumn Header="Nom" Binding="{Binding Name}"/>
                <DataGridTextColumn Header="Piste"  Binding="{Binding TrackNumber,Converter={StaticResource Int}}">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                            <Setter Property="Padding" Value="0,0,3,0" />

                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="Durée" Binding="{Binding Duration,Mode=OneWay,Converter={StaticResource TimeSpan}}"   >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                            <Setter Property="Padding" Value="0,0,3,0" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="Classement" Binding="{Binding Classement, Converter={StaticResource cl} }"/>
                <DataGridTextColumn Header="Comment" Binding="{Binding Comment,Mode=OneWay}"/>
                <DataGridTextColumn Header="Album" Binding="{Binding Album}"/>
                <DataGridTextColumn Header="Artiste"  Binding="{Binding Artist}"/>
                <DataGridTextColumn Header="Année" Binding="{Binding Year,Converter={StaticResource Int}}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                            <Setter Property="Padding" Value="0,0,3,0" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                
               
                <DataGridTextColumn Header="Grouping" Binding="{Binding Grouping, Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="Export" Binding="{Binding ExportStatus, Mode=OneWay}">
                    <!--<DataGridTextColumn.ElementStyle>
                        <Style TargetType="DataGridCell">
                            <Setter Property="Background" Value="{Binding ExportStatus, Converter={StaticResource colorExport},  UpdateSourceTrigger=PropertyChanged}"/>
                        </Style>
                    </DataGridTextColumn.ElementStyle>-->
                </DataGridTextColumn>
                <DataGridTextColumn Header="StackIndex" Binding="{Binding StackIndex, Mode=OneWay}" />
                <DataGridTextColumn Header="StackValue" Binding="{Binding StackValue, Mode=OneWay}"  >
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell" >
                            <Setter Property="ToolTip" Value="{Binding NbAlbumMoved, Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"/>
                         </Style>
                    </DataGridTextColumn.CellStyle>
                  
                </DataGridTextColumn>
                <DataGridTextColumn Header="Maj"  Binding="{Binding UpdateClassement, Mode=OneWay,Converter={StaticResource date}}" />
                <DataGridTextColumn Header="MajAlbum"  Binding="{Binding AlbumUpdateClassement, Mode=OneWay, Converter={StaticResource date}}" />

                <DataGridTextColumn Header="Delai"  Binding="{Binding UpdateClassement, Mode=OneWay,Converter={StaticResource delai}}" />
                <DataGridTextColumn Header="DelaiAlbum"  Binding="{Binding AlbumUpdateClassement, Mode=OneWay, Converter={StaticResource delai}}" />






            </DataGrid.Columns>
           
            <DataGrid.ItemContainerStyle>
                <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
                    <EventSetter Event="MouseDoubleClick" Handler="dg_MouseDoubleClick" />
                    <EventSetter Event="PreviewMouseLeftButtonDown" Handler="dg_MouseClick" />
                    <EventSetter Event="PreviewMouseRightButtonDown" Handler="dg_MouseClick" />
                    <EventSetter Event="PreviewMouseMove" Handler="dg_PreviewMouseMove" />
                 
                    
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                    <!--<Setter Property="IsEnabled" Value="{Binding Exists}" />-->
                    <Setter Property="FontWeight" Value="Normal" />
                    <!--<Setter Property="Background" Value="{Binding TV, Converter={StaticResource colorExport},  UpdateSourceTrigger=PropertyChanged}" />-->
                    <!--<Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="Brown" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Exists}" Value="False">
                            <Setter Property="Background" Value="LightGray" />
                        </DataTrigger>
                     
                    </Style.Triggers>-->                    
                </Style>
            </DataGrid.ItemContainerStyle>
            <!--<DataGrid.RowStyle>
                <Style TargetType="{x:Type DataGridRow}">
                    <Setter Property="Background" Value="{Binding ExportStatus, Converter={StaticResource colorExport},  UpdateSourceTrigger=PropertyChanged}"/>
                </Style>
            </DataGrid.RowStyle>-->
            <DataGrid.CellStyle>               
                <Style TargetType="DataGridCell">
                    <Setter Property="Background" Value="{Binding TV, Converter={StaticResource colorExport}, ConverterParameter=main,  UpdateSourceTrigger=PropertyChanged}" />
                    <Setter Property="Foreground" Value="{Binding TV, Converter={StaticResource foreColor},  UpdateSourceTrigger=PropertyChanged}" />
                    <Setter Property="BorderThickness" Value="1" />
                    <Setter Property="BorderBrush" Value="Transparent" />

                </Style>
            </DataGrid.CellStyle>
            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow">
                    <EventSetter Event="MouseDoubleClick" Handler="dg_MouseDoubleClick" />
                    <EventSetter Event="PreviewMouseLeftButtonUp" Handler="dg_MouseClick" />
                    <!--<EventSetter Event="PreviewMouseRightButtonDown" Handler="dg_MouseClick" />-->
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="Background" Value="{Binding TV, Converter={StaticResource colorExport}, ConverterParameter=main,  UpdateSourceTrigger=PropertyChanged}" />
                    
                </Style>
            </DataGrid.RowStyle>

        </l:EnhancedDataGrid>
        <DockPanel Grid.Row="1" >
            <!--<TextBlock DockPanel.Dock="Bottom" Text="{Binding NbAlbumMovedDesc}" />-->
            <TextBlock DockPanel.Dock="Left" Text="{Binding NbAlbumMoved,UpdateSourceTrigger=PropertyChanged}"  Margin="0,0,10,0"/>
            
            <TextBlock DockPanel.Dock="Bottom" Text="{Binding Resume}"></TextBlock>
        </DockPanel>
    </Grid>

</UserControl>
]]></content>
  </file>
  <file path="\pdb.player\Vue\DataGridPlayList.xaml.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using pdb.gen.Tuning;
using pdb.player.ViewModel;
using pdb.player.ViewModel.Commande.PlayList;
using pdb.util;
using pdb.player.Vue.Util;
using System.Windows.Threading;
using System.Windows.Media;

namespace pdb.player.Vue
{



    public partial class DataGridPlayList : UserControl, ItrackProvider, IRedraw, IExportTracks
    {
        private static int nb;
        private int ID;
        private Logger log;
        public static event EventHandler refreshOk;
        // private BgColorFormatConverter colorConvert = new BgColorFormatConverter();

        //  private BgDict<int, DataGridRow> dict = new BgDict<int, DataGridRow>(); 
        private TrackListViewModel currentTrack;

        public DataGridPlayList()
        {
            ID = nb;
            log = Logger.getLogger("DataGridPlayList" + ID);
            nb++;
            InitializeComponent();
            this.Loaded += DataGridPlayList_Loaded;
            App.refresh += new EventHandler(App_refresh);
            PlayListCommande.Provider = this;
        }

        void DataGridPlayList_Loaded(object sender, RoutedEventArgs e)
        {
            init(null);
            PlayListViewModel.selectedPlaylistChange += PlayListViewModel_selectedPlaylistChange;
            PlayListViewModel.addDrow(this);
            dg.PreviewKeyUp += new KeyEventHandler(dg_preview);
            TrackListViewModel.CurrentHumanSelectedChanged += new EventHandler(TrackListViewModel_CurrentHumanSelectedChanged);

            ExportCmd.Ihm = this;

        }

        void TrackListViewModel_CurrentHumanSelectedChanged(object sender, EventArgs e)
        {
            var hs = TrackListViewModel.HumanSelected;
            if (hs == null)
                return;
            var pl = PlayListViewModel.SelectedPlayList;
            bool reset = pl != sender;

            TrackListViewModel t = null;
            try
            {
                checkItems(true);

                t = PlayListViewModel.findTrack(pl, hs.PieceId);
                if (t == null)
                    return;
                t.IsSelected = true;

            }
            finally
            {
                currentTrack = t;
                if (currentTrack != null)
                    currentTrack.refresh();
            }
        }

        Key key;
        void dg_preview(object sender, KeyEventArgs e)
        {
            // e.Handled = false; 
            key = e.Key;
            bool nav = false;

            switch (key)
            {
                case Key.Up: 
                case Key.Down:
                case Key.PageDown:
                case Key.PageUp: nav = true; break; 
                //case Key.LeftCtrl: case Key.RightCtrl : // TODO ajouter un élément
            }



            if (!nav)
                return;
            TrackListViewModel.setHumanSelected(PlayList, TrackListViewModel.CurrentSelected); //    .HumanSelected = TrackListViewModel.CurrentSelected;
        }


        void App_refresh(object sender, EventArgs e)
        {
            log.log("dg::App_refresh");
            redraw();
        }




        void PlayListViewModel_selectedPlaylistChange(object sender, EventArgs e)
        {
            if (ID == 0)
            {
                init(sender as PlayListViewModel);
            }
        }

        private void init(PlayListViewModel old)
        {
            if (!Dispatcher.CheckAccess())
            {
                Dispatcher.Invoke(new Action<PlayListViewModel>(init));
                return;
            }
            log.log("dg::init");
            SortDescriptionCollection sort = null;
            ICollectionView view = null;
            if (old != null)
            {
                view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
                if (view != null)
                    sort = view.SortDescriptions;
                if (sort != null)
                    old.Sort = sort;
            }


            var pl = PlayListViewModel.SelectedPlayList;
            var currentPlaying = TrackListViewModel.CurrentPlaying;
            if (pl == null)
                return;
            base.DataContext = null;

            var source = dg.ItemsSource;

            dg.ItemsSource = null;
            var items = pl.AlltracksVm;
            // items.refresh();

            base.DataContext = items;
            int i = 0;
            if (pl.isSubList("gen"))
            {
            }
            else
            {
                foreach (TrackListViewModel track in items)
                {
                    i++;
                    track.Index = i;
                }
            }
            sort = pl.Sort;
            List<SortDescription> _sort = null;
            if (sort != null)
                _sort = new List<SortDescription>(sort);
            dg.ItemsSource = items;
            PlayerViewModel.Instance.set(this);
            TrackListViewModel.CurrentPlaying = currentPlaying;

            view = CollectionViewSource.GetDefaultView(dg.ItemsSource);

            if (_sort != null && _sort.Count > 0)
            {
                view.SortDescriptions.Clear();
                foreach (var _s in _sort)
                {
                    view.SortDescriptions.Add(_s);
                    foreach (DataGridColumn _c in dg.Columns)
                    {
                        if (_s.PropertyName == _c.SortMemberPath)
                        {
                            _c.SortDirection = _s.Direction;
                            break;
                        }
                    }
                    break;

                }
            }

            //foreach (TrackListViewModel tv in items)
            //    tv.PropertyChanged += new PropertyChangedEventHandler(tv_PropertyChanged);

            if (currentTrack != null)
                currentTrack.refresh();

            putExportTracks(pl, CollectionViewSource.GetDefaultView(dg.ItemsSource));
            OnRefresh();


        }
        private void OnRefresh()
        {
            if (refreshOk != null)
                refreshOk(this, EventArgs.Empty);
        }

        private void dg_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                var r = sender as DataGridRow;
                var t = r.Item as TrackListViewModel;
                PlayerViewModel.reset(this, t);
            }
            catch
            {
            }
        }

        private void checkItems(bool reset)
        {
            var l = new List<TrackListViewModel>();

            foreach (TrackListViewModel track in selectedTracks)
            {
                track.IsSelected = false;
                track.refresh();
            }

            if (reset)
            {
                TrackListViewModel selected = null;
                if (TrackListViewModel.HumanSelected != null)
                {
                    selected = PlayListViewModel.findTrack(PlayList, TrackListViewModel.HumanSelected.PieceId);
                }
                if (selected != null)
                {
                    l.Add(selected);
                    if (!dg.SelectedItems.Contains(selected))
                        dg.SelectedItems.Add(selected);
                }
                foreach (TrackListViewModel track in selectedTracks)
                {
                    if (track != selected)
                    {
                        dg.SelectedItems.Remove(track);
                        track.IsSelected = false;
                        track.refresh();
                    }
                }
            }
            else
            {
                foreach (TrackListViewModel track in dg.SelectedItems)
                {
                    l.Add(track);
                    track.IsSelected = true;
                    track.refresh();
                }
            }
            lock (this)
                selectedTracks = l;
            PlayerViewModel.Instance.makeResume();
        }

        private void dg_MouseClick(object sender, MouseButtonEventArgs e)
        {
            //  e.Handled = true; 
            //var r = sender as DataGridRow;
            //var t = r.Item as TrackListViewModel;
            //TrackListViewModel.setHumanSelected(PlayList, t); //   .HumanSelected = t;
            //startPoint = e.GetPosition(null);
            checkItems(false);
        }



        private List<TrackListViewModel> selectedTracks = new List<TrackListViewModel>();

        private List<TrackListViewModel> SelectedTracks
        {
            get
            {
                lock (this)
                    return selectedTracks;
            }
        }
        ICollectionView ItrackProvider.PresentationTracks
        {
            get { return CollectionViewSource.GetDefaultView(dg.ItemsSource); }
        }
        void ItrackProvider.Focus(int index)
        {

            // dg.SelectedIndex = index;
            var indexbas = Math.Min(index + 100, dg.Items.Count - 1);
            scrol(indexbas);
            scrol(index);
        }

        List<TrackListViewModel> ISelectedTracks.SelectedTracks
        {
            get
            {
                return SelectedTracks;
            }
        }
        void scrol(int index)
        {
            if (!CheckAccess())
            {
                Dispatcher.Invoke(new Action<int>(this.scrol), index);
            }
            else
                dg.ScrollIntoView(dg.Items[index]);
        }
        public PlayListViewModel PlayList
        {
            get { return PlayListViewModel.SelectedPlayList; }
        }
        public void doFilter(string filter)
        {
            PlayerViewModel.doFilter((this as ItrackProvider).PresentationTracks, filter);
        }
        private bool IsUserVisible(FrameworkElement element, FrameworkElement container)
        {
            if (!element.IsVisible)
                return false;
            Rect bounds = element.TransformToAncestor(container).TransformBounds(new Rect(0.0, 0.0, element.ActualWidth, element.ActualHeight));
            Rect rect = new Rect(0.0, 0.0, container.ActualWidth, container.ActualHeight);
            return rect.Contains(bounds.TopLeft) || rect.Contains(bounds.BottomRight);
        }

        private static T FindVisualParent<T>(UIElement element) where T : UIElement
        {
            var parent = element;
            while (parent != null)
            {
                var correctlyTyped = parent as T;
                if (correctlyTyped != null)
                {
                    return correctlyTyped;
                }

                parent = VisualTreeHelper.GetParent(parent) as UIElement;
            }
            return null;
        }

        public void redraw()
        {
            if (!CheckAccess())
            {
                Dispatcher.BeginInvoke(new Action(this.redraw), DispatcherPriority.DataBind);
                return;
            }
            try
            {
                var pl = PlayListViewModel.SelectedPlayList;

                bool isgen = false;
                if (pl != null && pl.isSubList("gen"))
                    isgen = true;

                var items = dg.ItemsSource as AllTracksViewModel;

                if (items == null)
                {
                    dg.Items.Refresh();
                }
                else
                {
                    ICollectionView view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
                    SortDescriptionCollection sort = view.SortDescriptions;

                    List<SortDescription> _sort = null;
                    if (sort != null)
                        _sort = new List<SortDescription>(sort);

                    int i = 0;
                    foreach (TrackListViewModel track in items)
                    {
                        i++;
                        if (!isgen)
                            track.Index = i;
                        //  track.refresh();
                    }


                    if (_sort != null && _sort.Count > 0 && view.SortDescriptions.Count > 0)
                    {
                        view.SortDescriptions.Clear();
                        foreach (var _s in _sort)
                        {
                            view.SortDescriptions.Add(_s);
                        }
                    }
                    items.refresh();
                    putExportTracks(pl, view);
                }
                return;


                try
                {
                    isgen = false;

                    if (isgen)
                    {
                        log.log("dg::redraw::init");
                        init(pl);
                    }
                    else
                    {
                        log.log("dg::redraw::Refresh");
                        dg.Items.Refresh();
                    }
                }
                catch
                {
                    try
                    {
                        init(pl);
                    }
                    catch
                    {
                    }
                }
            }
            finally
            {
                OnRefresh();
            }

        }

        private void MenuItem_Click(object sender, RoutedEventArgs e)
        {
            var items = dg.SelectedItems;
            MessageBox.Show(items.Count.ToString());
        }

        public string folderDialog()
        {
            return App.Instance.folderDialog();
        }


        public System.ComponentModel.ICollectionView PresentationTracks
        {
            get
            {
                return ((ItrackProvider)this).PresentationTracks;
            }
        }






        public bool ModeAlbum
        {
            get { return MessageBox.Show("par albums complets", "export", MessageBoxButton.YesNo) == MessageBoxResult.Yes; }
        }

        public bool Continue
        {
            get { return MessageBox.Show("continuer le marché ?", "export", MessageBoxButton.YesNo) == MessageBoxResult.Yes; }
        }




        public void InfoIHm(string message, string caption)
        {
            App.Instance.InfoIHm(message, caption);
        }

        public bool Confirm(string question, string caption)
        {
            return App.Instance.Confirm(question, caption);
        }

        public bool? TriChoix(string question, string caption)
        {
            return App.Instance.TriChoix(question, caption);
        }

        public Export getConfExport(string question)
        {
            return App.Instance.getConfExport(question);
        }

        public Import getConfImport(string question)
        {
            return App.Instance.getConfImport(question);
        }

        public int getNb(string question)
        {
            return App.Instance.getNb(question);
        }

        public bool changeName(string title, IName data)
        {
            return App.Instance.changeName(title, data);
        }

        public PlayListViewModel selectPlayList(string title)
        {
            return App.Instance.selectPlayList(title);
        }



        //  private List<TrackListViewModel> list = new List<TrackListViewModel>(); 
        public List<TrackListViewModel> ListTrack
        {
            get { return null; }
        }

        private void putExportTracks(PlayListViewModel pl, ICollectionView view)
        {
            var list = new List<TrackListViewModel>();
            foreach (TrackListViewModel track in view)
                list.Add(track);
            pl.ExportTracks = list;
            //visibleItems = new List<TrackListViewModel>();

            //foreach (var item in view)
            //{
            //    var row = dg.ItemContainerGenerator.ContainerFromItem(item) as DataGridRow;
            //    if (row != null)
            //    {
            //        visibleItems.Add(item as TrackListViewModel); 
            //    }
            //}


        }
        //private List<TrackListViewModel> visibleItems = new List<TrackListViewModel>();
        //public List<TrackListViewModel> VisibleItems { get { return new List<TrackListViewModel>(visibleItems); } }

        Point startPoint;
        private void dg_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            startPoint = e.GetPosition(null);
        }

        private void dg_PreviewMouseMove(object sender, MouseEventArgs e)
        {
            var mousePos = e.GetPosition(null);
            var diff = startPoint - mousePos;

            if (Math.Abs(diff.X) > SystemParameters.MinimumHorizontalDragDistance
                || Math.Abs(diff.Y) > SystemParameters.MinimumVerticalDragDistance)
            {
                var treeView = sender as DataGrid;
                var treeViewItem = //(e.OriginalSource as DependencyObject).
                    Util.Util<DataGridRow>.FindAnchestor((DependencyObject)e.OriginalSource);
                //   FindAnchestor<TreeViewItem>((DependencyObject)e.OriginalSource);

                if (treeView == null || treeViewItem == null)
                    return;

                var folderViewModel = treeView.SelectedItem as TrackListViewModel;
                if (folderViewModel == null)
                    return;

                var dragData = new DataObject(folderViewModel);
                DragDrop.DoDragDrop(treeViewItem, dragData, DragDropEffects.Copy);
            }
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\EnhancedDataGrid.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Controls;
using System.Windows;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows.Data;
using System.Runtime.Serialization.Formatters.Binary;
using System.IO;
using System.Windows.Media;
using pdb.player.Vue.Util;
using pdb.player.ViewModel.Colors;

namespace pdb.player.Vue
{
    public partial class EnhancedDataGrid : DataGrid, IGradiant
    {

        private bool inWidthChange = false;
        private bool updatingColumnInfo = false;
        public static readonly DependencyProperty ColumnInfoProperty = DependencyProperty.Register("ColumnInfo",
                typeof(ObservableCollection<ColumnInfo>), typeof(EnhancedDataGrid),
                new FrameworkPropertyMetadata(null, FrameworkPropertyMetadataOptions.BindsTwoWayByDefault, ColumnInfoChangedCallback)
            );


        public string ConfCouleur { get; set; }

        //public string ConfCouleur
        //{
        //    get { return (string)GetValue(ConfCouleurProperty); }
        //    set { SetValue(ConfCouleurProperty, value); }
        //}

        //// Using a DependencyProperty as the backing store for ConfCouleur.  This enables animation, styling, binding, etc...
        //public static readonly DependencyProperty ConfCouleurProperty =
        //    DependencyProperty.Register("ConfCouleur", typeof(string), typeof(EnhancedDataGrid), new UIPropertyMetadata(0));



        private static void ColumnInfoChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)
        {
            var grid = (EnhancedDataGrid)dependencyObject;
            if (!grid.updatingColumnInfo) { grid.ColumnInfoChanged(); }
        }



        public EnhancedDataGrid()
            : base()
        {
            this.Loaded += new RoutedEventHandler(EnhancedDataGrid_Loaded);
        }

        void EnhancedDataGrid_Loaded(object sender, RoutedEventArgs e)
        {
            GradiantBuilder.Instance.Add(this);
        }

        private Gradient confGradient;
        private Grille confGrille; 

        protected override void OnInitialized(EventArgs e)
        {
            EventHandler sortDirectionChangedHandler = (sender, x) => UpdateColumnInfo();
            EventHandler widthPropertyChangedHandler = (sender, x) => inWidthChange = true;
            var sortDirectionPropertyDescriptor = DependencyPropertyDescriptor.FromProperty(DataGridColumn.SortDirectionProperty, typeof(DataGridColumn));
            var widthPropertyDescriptor = DependencyPropertyDescriptor.FromProperty(DataGridColumn.WidthProperty, typeof(DataGridColumn));
            var info = ColSov.get(Uid);
            ColumnInfo = info.list;
            ColumnInfoChanged();
            General conf = Couleurs.get(ConfCouleur) as General;
            if (conf == null)
                conf = Couleurs.Instance.general;

            Couleurs.colorChangeTree += new EventHandler(Couleurs_colorChangeTree);

            confGradient = conf.gradient;
            confGrille = conf.grille;
            Loaded += (sender, x) =>
            {
                foreach (var column in Columns)
                {
                    sortDirectionPropertyDescriptor.AddValueChanged(column, sortDirectionChangedHandler);
                    widthPropertyDescriptor.AddValueChanged(column, widthPropertyChangedHandler);
                }
               
            };
            Unloaded += (sender, x) =>
            {
                foreach (var column in Columns)
                {
                    sortDirectionPropertyDescriptor.RemoveValueChanged(column, sortDirectionChangedHandler);
                    widthPropertyDescriptor.RemoveValueChanged(column, widthPropertyChangedHandler);
                }

                
            };



            drawGrille(); 


            base.OnInitialized(e);
        }

        void Couleurs_colorChangeTree(object sender, EventArgs e)
        {
            drawGrille(); 
        }

        private void drawGrille()
        {
            HorizontalGridLinesBrush = confGrille.lignes.Brush;
            VerticalGridLinesBrush = confGrille.colonnes.Brush;
        }

       
        public ObservableCollection<ColumnInfo> ColumnInfo
        {
            get { return (ObservableCollection<ColumnInfo>)GetValue(ColumnInfoProperty); }
            set { SetValue(ColumnInfoProperty, value); }
        }
        private void UpdateColumnInfo()
        {
            updatingColumnInfo = true;
            ColumnInfo = new ObservableCollection<ColumnInfo>(Columns.Select((x) => new ColumnInfo(x)));
            ColSov.sov(new ColumnInfos(ColumnInfo), Uid);
            updatingColumnInfo = false;
        }
        protected override void OnColumnReordered(DataGridColumnEventArgs e)
        {
            UpdateColumnInfo();
            base.OnColumnReordered(e);
        }
        protected override void OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs e)
        {
            if (inWidthChange)
            {
                inWidthChange = false;
                UpdateColumnInfo();
            }
            base.OnPreviewMouseLeftButtonUp(e);
        }
        private void ColumnInfoChanged()
        {
            Items.SortDescriptions.Clear();
            foreach (var column in ColumnInfo)
            {
                DataGridColumn realColumn = null;
                foreach (DataGridColumn x in Columns)
                {
                    if (column.Header != null && column.Header.ToString().Length > 0)
                    {
                        if (column.Header.Equals(x.Header))
                        {
                            realColumn = x;
                            break;
                        }
                    }
                    else
                    {
                        if (column.PropertyPath == ((Binding)((DataGridBoundColumn)x).Binding).Path.Path)
                        {
                            realColumn = x;
                            break;
                        }
                    }
                }
                //var realColumn = Columns.Where((x) => (


                //    column.Header != null && column.Header == x.Header) || column.PropertyPath == ((Binding)((DataGridBoundColumn)x).Binding).Path.Path).FirstOrDefault();
                if (realColumn == null) { continue; }
                column.Apply(realColumn, Columns.Count, Items.SortDescriptions);
            }
        }

        public Gradient Conf
        {
            get { return confGradient; }
        }

        public bool sensGradient
        {
            get { return true; }
        }

        public void setBackground(Brush brush)
        {
            Background = brush; 
        }
    }
    [Serializable]
    public class ColumnInfos
    {
        public ObservableCollection<ColumnInfo> list;
        public ColumnInfos(ObservableCollection<ColumnInfo> list)
        {
            this.list = list;
        }
    }

    public class ColSov
    {
        public static void sov(ColumnInfos info, string name)
        {
            var dict = Memento.Instance.dict;
            if (!dict.ContainsKey(name))
                dict.Add(name, info);
            else
                dict[name] = info;
            //var formater = new BinaryFormatter();
            //using (Stream st = new FileStream(name+".dat", FileMode.Create))
            //{
            //    formater.Serialize(st, info); 
            //}
        }
        public static ColumnInfos get(string name)
        {
            ColumnInfos infos = null;

            var dict = Memento.Instance.dict;
            if (dict.ContainsKey(name))
                infos = dict[name] as ColumnInfos;
            if (infos == null)
                infos = new ColumnInfos(new ObservableCollection<ColumnInfo>());

            return infos;
        }
    }

    [Serializable]
    public struct ColumnInfo
    {
        public ColumnInfo(DataGridColumn column)
        {
            Header = column.Header;
            PropertyPath = ((Binding)((DataGridBoundColumn)column).Binding).Path.Path;
            WidthValue = column.Width.DisplayValue;
            WidthType = column.Width.UnitType;
            SortDirection = column.SortDirection;
            DisplayIndex = column.DisplayIndex;
        }
        public void Apply(DataGridColumn column, int gridColumnCount, SortDescriptionCollection sortDescriptions)
        {
            column.Width = new DataGridLength(WidthValue, WidthType);
            column.SortDirection = SortDirection;
            if (SortDirection != null)
            {
                sortDescriptions.Add(new SortDescription(PropertyPath, SortDirection.Value));
            }
            if (column.DisplayIndex != DisplayIndex)
            {
                var maxIndex = (gridColumnCount == 0) ? 0 : gridColumnCount - 1;
                column.DisplayIndex = (DisplayIndex <= maxIndex) ? DisplayIndex : maxIndex;
            }
        }

        public override string ToString()
        {
            return string.Format("{0} {1} {2} {3} {4}", Header, WidthType, WidthValue, DisplayIndex, PropertyPath);
        }
        public object Header;
        public string PropertyPath;
        public ListSortDirection? SortDirection;
        public int DisplayIndex;
        public double WidthValue;
        public DataGridLengthUnitType WidthType;
    }
}



]]></content>
  </file>
  <file path="\pdb.player\Vue\PlayerControler.xaml.cs">
    <content><![CDATA[using pdb.player.model;
using pdb.player.ViewModel;
using pdb.player.ViewModel.Commande.PlayList;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;
using System.Windows.Controls.Primitives;
using System.Windows.Automation.Peers;
using pdb.player.Vue.Util;
using pdb.player.ViewModel.Colors;

namespace pdb.player.Vue
{
    /// <summary>
    /// Logique d'interaction pour PlayerControler.xaml
    /// </summary>
    public partial class PlayerControler : UserControl, IRecordClassmentObserver, IGradiant
    {
        private Gradient confGradiant; 
        public PlayerControler()
        {
            InitializeComponent();
           

            GradiantBuilder.Instance.Add(this); 
            this.Loaded += PlayerControler_Loaded;
        }

        void PlayerControler_Loaded(object sender, RoutedEventArgs e)
        {
            DataContext = PlayerViewModel.Instance;
            DataGridPlayList.refreshOk += new EventHandler(DataGridPlayList_refreshOk);
            DetailClassementViewModel.RecordObserver = this;

        }

        void DataGridPlayList_refreshOk(object sender, EventArgs e)
        {
            if (_currentPaying != null)
            {
                if (TrackListViewModel.CurrentPlaying == _currentPaying)
                    automateNextTrack();
                _currentPaying = null;  
            }
        }

        void DetailClassementViewModel_classementChanged(object sender, EventArgs e)
        {
            focus();
        }

        private void focus()
        {
            if (!CheckAccess())
                Dispatcher.BeginInvoke(new Action(this.focus), DispatcherPriority.DataBind);
            else
            {
                b_forward.Focus();
            }
        }

        private void automateNextTrack()
        {
            if (!CheckAccess())
                Dispatcher.BeginInvoke(new Action(this.automateNextTrack), DispatcherPriority.DataBind);
            else
            {
                ICommand forward = PlayerViewModel.Instance.Forward;
                if (forward.CanExecute(this))
                    forward.Execute(this);


            }
        }

        private void txtFilter_KeyUp(object sender, KeyEventArgs e)
        {
            String filter = txtFilter.Text;
            doFilter(filter);
        }

        private void doFilter(String filter)
        {
            PlayerViewModel.Instance.doFilter(filter);
        }

        private void btSort_Click(object sender, RoutedEventArgs e)
        {
            var conf = PlayerViewModel.Instance.ConfAlbumSort;
            var dialog = new ConfAlbumSortW(conf);
            dialog.Show();
        }



        public void signalClassementChange()
        {
            focus();
        }

        private TrackListViewModel _currentPaying;
        public void autoNextTrack(TrackListViewModel track)
        {
            _currentPaying = track;
        }



        ViewModel.Colors.Gradient IGradiant.Conf
        {
            get { return Couleurs.Instance.player.gradient; }
        }

        bool IGradiant.sensGradient
        {
            get { return false;  }
        }

        void IBackGround.setBackground(Brush brush)
        {
            gmain.Background = brush; 
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\Util\GradiantBuilder.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Media;
using pdb.player.ViewModel.Colors;

namespace pdb.player.Vue.Util
{
    interface IBackGround
    {
        void setBackground(Brush brush);
    }
    interface IGradiant : IBackGround
    {
        Gradient Conf { get; }
        
        bool sensGradient { get; }
    }

    /// <summary>
    /// Synchronise tous les gradiants de l'application
    /// </summary>
    class GradiantBuilder
    {
        public static GradiantBuilder Instance = new GradiantBuilder(); 
       
        private GradiantBuilder()
        {
            Couleurs.colorChangeTree += gr_colorChangeTree; 
           
        }

        void gr_colorChangeTree(object sender, EventArgs e)
        {
            foreach (IGradiant c in list)
                makeGradient(c); 
            //foreach (dynamic c in clients)
            //    makeGradient(c, true);
            //foreach (dynamic c in reverse)
            //    makeGradient(c, false); 
        }

     
        ///// <summary>
        ///// Ajout d'un gradiant
        ///// </summary>
        ///// <param name="c"></param>
        ///// <param name="sens"></param>
        //public void Add(dynamic c, bool sens)
        //{
        //    if (sens)
        //        clients.Add(c);
        //    else
        //        reverse.Add(c);
        //    makeGradient(c, sens); 
        //}

        public void Add(IGradiant c)
        {
            list.Add(c);
            makeGradient(c);
        }

        private List<IGradiant> list = new List<IGradiant>(); 
        //private List<dynamic> clients = new List<dynamic>();
        //private List<dynamic> reverse = new List<dynamic>();

        /// <summary>
        /// Appliquer le gradiant paramétré
        /// </summary>
        /// <param name="control"></param>
        /// <param name="sens"></param>
        private void makeGradient(IGradiant control)
        {
         
            var g = new LinearGradientBrush();
            var gr = control.Conf; 

            g.StartPoint = new Point(gr.depart.pt.x.getDouble(), gr.depart.pt.y.getDouble());
            g.EndPoint = new Point(gr.arrivee.pt.x.getDouble(), gr.arrivee.pt.y.getDouble());

            GradientStop gs = null;
            GradientStop gs2 = null;
            if (control.sensGradient)
            {
                gs = new GradientStop(gr.depart.couleur.Color, gr.depart.offset.getDouble());
                gs2 = new GradientStop(gr.arrivee.couleur.Color, gr.arrivee.offset.getDouble());
            }
            else
            {
                gs = new GradientStop(gr.arrivee.couleur.Color, gr.depart.offset.getDouble());
                gs2 = new GradientStop(gr.depart.couleur.Color, gr.arrivee.offset.getDouble());
            }
            g.GradientStops.Add(gs);
            g.GradientStops.Add(gs2);
            g.MappingMode = BrushMappingMode.RelativeToBoundingBox;
           
            control.setBackground(g);


        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\Util\StringFormatConverter.cs">
    <content><![CDATA[using System;
using System.Windows.Data;
using pdb.util;
using pdb.player.ViewModel;
using System.Windows.Media;
using pdb.gen;
using pdb.gen.albums;
using pdb.player.ViewModel.Colors;

namespace pdb.player.Vue.Util
{
    [ValueConversion(typeof(object), typeof(string))]
    public class StringFormatConverter : BaseConverter, IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter,
                          System.Globalization.CultureInfo culture)
        {
            string format = parameter as string;
            if (!string.IsNullOrEmpty(format))
            {
                return string.Format(culture, format, value);
            }
            else
            {
                return value.ToString();
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter,
                        System.Globalization.CultureInfo culture)
        {
            return null;
        }
    }


    [ValueConversion(typeof(TimeSpan), typeof(string))]
    public class TimeFormatConverter : BaseConverter, IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter,
                          System.Globalization.CultureInfo culture)
        {
            if (value is TimeSpan)
            {
                TimeSpan ts = (TimeSpan)value;
                return String.Format("{0}:{1}{2}", ts.Minutes, ts.Seconds >= 10 ? "" : "0", ts.Seconds);
            }
            return value.ToString();

        }

        public object ConvertBack(object value, Type targetType, object parameter,
                        System.Globalization.CultureInfo culture)
        {
            return null;
        }
    }

    [ValueConversion(typeof(string), typeof(string))]
    public class ClFormatConverter : BaseConverter, IValueConverter
    {
        static int NB_DEC = 4;
        public object Convert(object value, Type targetType, object parameter,
                          System.Globalization.CultureInfo culture)
        {
            if (value == null)
                return "";
            var str = value.ToString();
            int count = str.Length;
            return Piece.getReadableCl(str);
            if (count < 4)
                return str;

            var tab = str.ToCharArray();
            var sb = new StringBuilder();
            bool second = false;
            //if (str.StartsWith("0"))
            second = true;
            int i = 0;

            bool pt = false;
            for (int ii = 0; ii < count; ii++)
            {
                var c = tab[ii];
                if (c == '.')
                    pt = true;

                if (!pt)
                {
                    if (c != ' ')
                    {

                        if (i > NB_DEC || (i >= NB_DEC && second))
                        {
                            if (!second)
                            {
                                second = true;
                                i = 1;
                            }
                            else
                                i = 0;
                            sb.Append(" ");
                        }
                        i++;
                    }
                }
                sb.Append(c);
            }

            return sb.ToString();


        }

        public object ConvertBack(object value, Type targetType, object parameter,
                        System.Globalization.CultureInfo culture)
        {
            if (value == null) return "";
            return value.ToString().Replace(" ", "");
        }
    }


    [ValueConversion(typeof(int), typeof(string))]
    public class IntFormatConverter : BaseConverter, IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter,
                          System.Globalization.CultureInfo culture)
        {
            if (value is int)
            {
                int ivalue = (int)value;
                if (ivalue <= 0) return "";
            }
            return value.ToString();

        }

        public object ConvertBack(object value, Type targetType, object parameter,
                        System.Globalization.CultureInfo culture)
        {
            int result;
            if (int.TryParse(value.ToString(), out result))
            {
                return result;
            }
            return null;
        }
    }


    [ValueConversion(typeof(decimal), typeof(string))]
    public class DecimalFormatConverter : BaseConverter, IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter,
                          System.Globalization.CultureInfo culture)
        {
            if (value is decimal)
            {
                decimal dvalue = (decimal)value;
                if (dvalue <= 0) return "";
                return dvalue.ToString("0.###");

            }
            return value.ToString();

        }

        public object ConvertBack(object value, Type targetType, object parameter,
                        System.Globalization.CultureInfo culture)
        {
            decimal result;
            if (decimal.TryParse(value.ToString(), out result))
            {
                return result;
            }
            return null;
        }
    }

    [ValueConversion(typeof(DateTime), typeof(string))]
    public class DateToDelaiConverter : BaseConverter, IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter,
                          System.Globalization.CultureInfo culture)
        {
            if (value == null)
                return ""; 
            if (value is DateTime)
            {
                DateTime dvalue = (DateTime)value;
                int delta = (int)( (DateTime.Now - dvalue).TotalDays);
                return delta.ToString(); 

            }
            return value.ToString();

        }

        public object ConvertBack(object value, Type targetType, object parameter,
                        System.Globalization.CultureInfo culture)
        {
            decimal result;
            if (decimal.TryParse(value.ToString(), out result))
            {
                return result;
            }
            return null;
        }
    }



    [ValueConversion(typeof(TrackListViewModel), typeof(Brush))]
    public class BgColorFormatConverter : BaseConverter, IValueConverter
    {
        //private static SolidColorBrush brSelected = Couleurs.Track.Selected.Brush;
        //private static SolidColorBrush brMoved;
        //public static SolidColorBrush brNext;
        //private static SolidColorBrush brNextAbsent;
        static BgColorFormatConverter()
        {
           // Color color = (Color)ColorConverter.ConvertFromString("#3399ff");

            // #008ae6 - la mienne un peu terne
            //#88a9db
            //#547dab
            // #007acc

            //#3399ff - celle de seven w+r
            //"#ffcc99" peche
            // bleu-vert tres clair #93c8ce
            //brSelected = new SolidColorBrush(color);
            //color = (Color)ColorConverter.ConvertFromString("#93c8ce");
            //brMoved = new SolidColorBrush(color);
            //color = (Color)ColorConverter.ConvertFromString("#b5eaf0");
            //brNext = new SolidColorBrush(color);
            //color = (Color)ColorConverter.ConvertFromString("#c4dfe3");
            //brNextAbsent = new SolidColorBrush(color);


        }
        //public SolidColorBrush getColor(TrackListViewModel tv)
        //{


        //    var couleurs = Couleurs.Instance.general.track;
        //    if (tv.IsSelected) return couleurs.Selected.Brush; 
        //    if (tv.PieceGen.IsNext)
        //    {
        //        if (tv.Exists)
        //            return couleurs.Next.Brush;
        //        return couleurs.NextAbsent.Brush; 
        //    }
        //    if (tv.PieceGen.Moved) return couleurs.Moved.Brush;

        //    exportState es = tv.ExportStatus;
        //    if (!tv.Exists)
        //        es = exportState.miss;
        //    var exp = couleurs.export; 
        //    switch (es)
        //    {
        //        case exportState.none: return exp.none.Brush; // Brushes.White;
        //        case exportState.miss: return exp.miss.Brush;                //return Brushes.LightGray;
        //        case exportState.present: return exp.present.Brush; // return Brushes.White;
        //        case exportState.copy: return exp.copy.Brush; //return Brushes.LightGreen;
        //        case exportState.delete: return exp.delete.Brush; //return Brushes.DarkGray;
        //        default:
        //            break;
        //    }
                
        //    return Brushes.White;
        //}



        public static SolidColorBrush getColor(TrackListViewModel tv, TrackColor couleurs)
        {
            if (tv.IsSelected) return couleurs.Selected.Brush;
            if (tv.PieceGen.IsNext)
            {
                if (tv.Exists)
                    return couleurs.Next.Brush;
                return couleurs.NextAbsent.Brush;
            }
            if (tv.PieceGen.Moved) return couleurs.Moved.Brush;

            exportState es = tv.ExportStatus;
            if (!tv.Exists)
                es = exportState.miss;
            var exp = couleurs.export;
            switch (es)
            {
                case exportState.none: return exp.none.Brush; // Brushes.White;
                case exportState.miss: return exp.miss.Brush;                //return Brushes.LightGray;
                case exportState.present: return exp.present.Brush; // return Brushes.White;
                case exportState.copy: return exp.copy.Brush; //return Brushes.LightGreen;
                case exportState.delete: return exp.delete.Brush; //return Brushes.DarkGray;
                default:
                    break;
            }

            return Brushes.Transparent;
        }

        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            try
            {

                TrackListViewModel tv = value as TrackListViewModel;
                var conf = Couleurs.Instance.general.track;

                if (parameter != null)
                {
                    string path = parameter.ToString();
                    var _c = Couleurs.get(path);

                    TrackColor _conf = null;

                    if (_c is TrackColor)
                        _conf = _c as TrackColor;
                    else
                    {
                        if (_c is General)
                        {
                            _conf = (_c as General).track; 
                        }
                    }

                   
                    if (_conf != null)
                        conf = _conf; 
                }

                return getColor(tv, conf); 

            }
            catch
            {

            }
            return Brushes.White;
        }

        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            return null;
        }
    }


    [ValueConversion(typeof(TrackListViewModel), typeof(Brush))]
    public class ForeColorFormatConverter : BaseConverter, IValueConverter
    {
        public SolidColorBrush getColor(TrackListViewModel tv)
        {
            if (tv.IsSelected) return Brushes.White;
            return Brushes.Black;
        }

        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            try
            {

                TrackListViewModel tv = value as TrackListViewModel;
                return getColor(tv);

            }
            catch
            {

            }
            return Brushes.White;
        }

        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            return null;
        }
    }


    [ValueConversion(typeof(ihmInDispo), typeof(Brush))]
    public class ColorDispoConverter : BaseConverter, IValueConverter
    {
        private SolidColorBrush getColor(ihmInDispo info)
        {

            switch (info)
            {
                case ihmInDispo.none: return Brushes.Transparent;
                case ihmInDispo.rot: return Brushes.Gainsboro;
                case ihmInDispo.stat: return Brushes.LightSlateGray;
                default:
                    break;
            }
            return Brushes.White;
        }

        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            try
            {

                ihmInDispo info = (ihmInDispo)value;
                return getColor(info);

            }
            catch
            {

            }
            return Brushes.White;
        }

        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            return null;
        }
    }


    [ValueConversion(typeof(bool), typeof(System.Windows.Visibility))]
    public class BoolToVis : BaseConverter, IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter,
                          System.Globalization.CultureInfo culture)
        {
            if (value is bool)
            {
                return (bool)value ? System.Windows.Visibility.Visible : System.Windows.Visibility.Collapsed;
            }
            return null;

        }

        public object ConvertBack(object value, Type targetType, object parameter,
                        System.Globalization.CultureInfo culture)
        {
            if (System.Windows.Visibility.Visible.Equals(value)) return true;
            if (System.Windows.Visibility.Collapsed.Equals(value)) return false;
            return null;

        }
    }
    [ValueConversion(typeof(medianneMode), typeof(int))]
    public class SortModeConverter : BaseConverter, IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            if (value is medianneMode)
            {
                return (int)value;
            }
            return null;
        }

        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            if (value is int)
            {
                return (medianneMode)(int)(value);
            }
            return null;
        }
    }

    [ValueConversion(typeof(DateTime?), typeof(string))]
    public class DateConverter : BaseConverter, IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter,
                          System.Globalization.CultureInfo culture)
        {
            if (value == null)
                return null; 
          
            if (value is DateTime)
            {
                if (DateTime.MinValue.Equals(value) || DateTime.MaxValue.Equals(value))
                    return ""; 
            }
            return value.ToString();

        }

        public object ConvertBack(object value, Type targetType, object parameter,
                        System.Globalization.CultureInfo culture)
        {
            
            return null;
        }
    }





}
]]></content>
  </file>
  <file path="\PieceDb.Consolid\Tuning\Export.cs">
    <content><![CDATA[using System.Xml;
using pdb.util;

namespace pdb.gen.Tuning
{
    public class Export : TuningBase
    {
        public Export() : base() { }
        public Export(XmlElement node)
            : base(node)
        {
            if (node == null)
                return;
            builds("dir", v => dir = v);
            buildb("resetAfterLoop", v => resetAfterLoop = v);
            buildb("modeAlbum", v => modeAlbum = v);
            buildb("albumReverse", v => albumReverse = v);
            buildi("nbMin", v => nbMin = v);
            buildi("nbMax", v => nbMax = v);
            buildi("lot", v => lot = v);
            buildb("oneShot", v => oneShot = v);
            buildb("disabledAlway", v => disabledAlway = v); 

        }
        public string dir = "";
        public bool modeAlbum;
        public bool albumReverse;
        public bool resetAfterLoop;
        public int nbMin;
        public int nbMax;
        public int lot = 100;
        public bool oneShot;
        public bool disabledAlway; 
    }
}
]]></content>
  </file>
</db>
