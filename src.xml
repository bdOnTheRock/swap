<db path="C:\bernard\db1\db4">
 <file path="\pdb.podcast\Sort\Album.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using pdb.podcast.Albums;
using pdb.podcast.Tuning;
using pdb.podcast.Tuning.Sort;
using pdb.util;
using pdb.iit;
using System.Linq;
using System.Linq.Expressions;
using System.Text.RegularExpressions;
namespace pdb.podcast.Sort
{
    class Album
    {
        const string DATE_FORMAT = "dd/MM/yy HH:mm";
        const string DAY_FORMAT = "dd/MM HH:mm";
        const char SEP = '|';
        private TrackAlbum album;
        private SortItem conf;
        private List<TrackSort> list = new List<TrackSort>();
        //  private static HashSet<int> lastReads = new HashSet<int>();
        //   private int indexLastRead = -1;
        timeSpan limit;
        // private static int nbrepeches = 0;
        private static int nbModif = 0;
        private static int nbModifPertinent = 0;
        private static int nbRepecheForce = 0;
        private static DateTime dateRepeche = DateTime.MaxValue; public static DateTime DateRepeche { get { return dateRepeche; } }
        private static List<TrackSort> repeches = new List<TrackSort>();
        public static int NbRepeches { get { return repeches.Count; } }
        public static int NbModif { get { return nbModif; } }
        public static int NbModifPertinent { get { return nbModifPertinent; } }

        private bool done;

        //  bool checkSelected, apply;
        DateTime date0; //, newDate0;
        DateTime date1;
        public static void Init()
        {
            //lastReads.Clear(); 
            //nbrepeches = 0;
            repeches.Clear();
            nbModif = 0; nbModifPertinent = 0;
            nbRepecheForce = 0;
            dateRepeche = DateTime.MaxValue;
        }

        public static void Bilan()
        {
            if (dateRepeche < DateTime.MaxValue)
                log.log("*************Date minimum:" + dateRepeche);
            repeches.Sort((x, y) => x.Pub2.CompareTo(y.Pub2));
            foreach (TrackSort t in repeches)
                log.log(string.Format("date={0} {1}", t.Pub2, t));
        }
        // public static HashSet<int> LastRead { get { return lastReads; } }
        public static Logger log;
        public static Logger logDebug;

        public Album(SortItem conf, TrackAlbum album)
        {
            this.conf = conf;
            this.album = album;
            limit = timeSpan.FromMinutes(conf.dureeMin);

        }

        public override string ToString()
        {
            return album.ToString();
        }

        public void check(TrackInfoItunes track)
        {
            if (track.Duree >= limit)
                list.Add(new TrackSort(track));
        }



        public void init()
        {
            //done = false;
        }

        //public void buildAll()
        //{
        //    if (conf.enabled == sortMode.no)
        //        return;
        //    int count = list.Count;
        //    if (count == 0)
        //        return;

        //    checkSelected = false;
        //    apply = false;

        //    for (int i = 0; i < count; i++)
        //    {
        //        var track = list[i];
        //        var dt = track.Pub2.AddSeconds(1);
        //        date0 = dt;
        //        newDate0 = dt;
        //        build();
        //        if (dt >= Conf.Date0)
        //            break;
        //    }

        //    apply = true;
        //    date0 = Conf.Date0;
        //    newDate0 = Conf.NewDate0;
        //    // writeComment(track, track.Pub2, false, true, Conf.Date0, Conf.NewDate0);

        //    for (int i = 0; i < count; i++)
        //    {
        //        var track = list[i];
        //        writeComment(track, track.Pub2);
        //    }
        //}

        private void build0()
        {
            int count = list.Count;
            if (count == 0)
                return;



            TrackSort.Date0 = date0;
            int indexLastRead = -1;
            TrackSort lastRead = null;
            int indexNextSelected = -1;
            DateTime lastPlayed = DateTime.MinValue;
            TrackSort next = null;
            //  TrackSort reallyLastRead = null;
            DateTime currentPub = DateTime.MinValue;
            DateTime currentPub2 = DateTime.MinValue;
            for (int i = 0; i < count; i++)
            {
                var track = list[i];
                //if (conf.extPente > 0)
                //{
                //    if (!track.Played && track.Pub == track.Pub2)
                //        track.Pub2 = Conf.Date0; 
                //}

                if (track.Pub > currentPub && track.Pub2 <= currentPub2)
                {
                    if (track.Pub2 < track.Pub)
                        track.Pub2 = track.Pub;
                    if (track.Pub > currentPub && track.Pub2 <= currentPub2)
                    {
                        var aux = currentPub2.AddMinutes(1);
                        log.log("correction pub2 pour respect ordre {0} -> {1} {2}", track.Pub2, aux, track);
                        track.Pub2 = aux;
                    }
                }

                currentPub = track.Pub;
                currentPub2 = track.Pub2;
            }
            for (int i = 0; i < count; i++)
            {
                var track = list[i];
                if (track.getPlayed(false)) // && track.PlayedDate > lastPlayed)
                {
                    //// ok mais quid du cas au fil de l'histoire : date dans le futur
                    //if (track.Pub2 <= date0 || conf.extPente > 0)
                    //{
                    if (next == null)
                    {
                        indexLastRead = i;
                        lastPlayed = track.PlayedDate;
                        lastRead = track;
                    }
                    else
                        break;
                    //}
                }

                else
                {
                    if (next == null)
                    {
                        if (track.Selected || track.Pub2 >= date0)
                        {
                            next = track;
                            indexNextSelected = i;
                        }
                    }
                    else
                        break;
                }
            }


            if (indexLastRead < 0)
                return;
            if (next == null)
                return;
            var rare = album.Rare;
            var intervalleMin0 = conf.getIntervalleMin0(rare);
            var intervalle = conf.getIntervalle(rare, lastRead.DureeEnHeure, intervalleMin0);
            var intervalleMin = conf.getIntervalleMin(rare, lastRead.DureeEnHeure);

            double deltaLastRead0 = (lastRead.Pub2 - lastRead.Pub).TotalDays;
            DateTime pub2 = lastRead.Pub2;

            double delta0Corr = deltaLastRead0;

            double cumulMin = conf.getCumulMin(rare);
            double cumulMax = conf.getCumulMax(rare);

            if (pub2 > lastRead.Pub && conf.extPente == 0)
            {
                if (conf.elastique < 1)
                {
                    delta0Corr = deltaLastRead0 * conf.elastique;
                    pub2 = lastRead.Pub.AddDays(delta0Corr).truncateToMinute();
                }


                //if (cumulMin > 0 && cumulMax > 0 && delta0Corr > cumulMin)
                //{
                //    delta0Corr = borneCumul(delta0Corr, cumulMin, cumulMax);
                //    pub2 = lastRead.Pub.AddDays(delta0Corr);
                //}
            }




            var deltaLecture = (DateTime.Now - lastPlayed).TotalDays;

            int nbReads = 0;
            int nbTotals = 0;

            int nbRead = 0;
            int nbTotal = 0;

            int _nbRead = 0;
            int _nbTotal = 0;
            double delta = intervalle; // conf.getIntervalle(album.Rare);
            double delta0 = delta;
            var _histo = conf.getHisto(rare);
            if (_histo > 0)
            {
                double histo = _histo;

                DateTime histo0 = next.Pub;
                if (conf.histoMode == histoMode.fix)
                    histo0 = date0;
                DateTime limit = histo0.AddDays(-histo);

                for (int i = indexNextSelected - 1; i >= 0; i--)
                {
                    var t = list[i];
                    var dt = t.Pub;
                    if (dt < limit && nbTotals >= conf.totalMin)
                        break;

                    if (t.getPlayed(true))
                        nbReads++;


                    nbTotals++;

                }



                limit = lastRead.Pub.AddDays(-histo);
                for (int i = indexLastRead; i >= 0; i--)
                {
                    var t = list[i];
                    var dt = t.Pub;
                    if (dt < limit && nbTotal >= conf.totalMin)
                        break;

                    if (t.getPlayed(true))
                        nbRead++;


                    nbTotal++;

                }


                if (conf.histoMode == histoMode.read)
                {
                    _nbRead = nbRead;
                    _nbTotal = nbTotal;
                }
                else
                {
                    _nbRead = nbReads;
                    _nbTotal = nbTotals;
                }


                if (_nbRead > 0 && _nbTotal > 0)
                {
                    if (_nbTotal < conf.totalMin)
                        _nbTotal = conf.totalMin;
                    //  album.Rare ? conf.intervalleR : conf.intervalle;
                    // var ecouteMax = conf.getEcouteMax(album.Rare); // album.Rare ? conf.ecouteMaxR : conf.ecouteMax;

                    double rapport = (double)_nbRead / (double)_nbTotal;

                    var coeff = 1 / rapport;

                    if (conf.dureeCoeff)
                    {
                        coeff = conf.getCoeff(rare, coeff, lastRead.DureeEnHeure);
                    }

                    //0.1 => 10
                    //0.9 => 1.11
                    //coeff -= 1; // 9  0.11
                    //var dminmax = intervalle - intervalleMin;

                    delta = borne(coeff, intervalle, intervalleMin, intervalleMin0); // intervalle - dminmax / (1 + (intervalleMin / dminmax) * coeff);



                }

                //misc.log("{3} {4}/{5} [{0}] {1} {2} ", name, lastRead.Name, lastRead.Pub, delta.ToString("#.##"), nbRead, nbTotal, name);


            }



            if (conf.extPente > 0)
            {
                var d0 = (DateTime.Now - pub2).TotalDays;
                var dl = conf.extDelta;
                if (dl == 0)
                {
                    dl = d0;
                }

                delta0 = d0 / conf.extPente;
                delta = delta0;
                //01/01/2014 ->01/01/2017
                //04/01/2017 -> 04/01/2014
                var dateLimitEcoule = DateTime.Now.AddDays(-dl);

                var deltaLimiteEcoule = (dateLimitEcoule - pub2).TotalDays;
                log.log("{0} {1}", delta.ToString("0.##"), deltaLimiteEcoule.ToString("0.##"));

                if (deltaLimiteEcoule > delta)
                {
                    double _coeff = deltaLimiteEcoule / delta;
                    delta = borne(_coeff, intervalle, intervalleMin, intervalleMin0);
                }

                if (delta < 1)
                    delta = 1;




                //if (delta > intervalle)
                //    delta = intervalle;
            }

            if (conf.limitRead && deltaLecture > intervalle)
            {
                //13 /10 ->7
                var _old = delta;

                delta += intervalle - deltaLecture;
                log.log("limitation par lecture {0} -> {1}", _old.ToString("0.##"), delta.ToString("0.##"));
            }





            if (delta < intervalleMin)
                delta = intervalleMin;

            if (delta > intervalle)
                delta = intervalle;



            DateTime limitFuture = pub2.AddDays(delta).truncateToMinute();

            DateTime limitFutureRab = pub2.AddDays(conf.coeffRab * delta).truncateToMinute();
            //var cumul = (limitFuture - next.Pub).TotalDays;
            //var dtaux = next.Pub.AddDays(conf.coeffRab * cumul).truncateToMinute();
            //if (dtaux > limitFutureRab)
            //    limitFutureRab = dtaux; 
            DateTime nextDate = limitFuture;

            int nb = 0;
            int nblissage = 0;
            double deltaAtterrissage = intervalleMin;

            if (conf.noCollision)
                deltaAtterrissage = delta;
            if (conf.extPente > 0)
                deltaAtterrissage = delta0;


            if (conf.deltaConst || conf.extPente > 0)
            {
            }

            else
            {
                var _deltaMin = lastRead.Pub.AddDays(conf.deltaMin);
                var _deltaRab = limitFuture.AddDays(conf.deltaRab);

                DateTime dt = lastRead.Pub.AddDays(intervalleMin0);

                for (int i = indexLastRead + 2; i < count; i++)
                {
                    var t = list[i];
                    if (conf.useVirtuel)
                    {
                        // on utilise des tracks virtuels pour pallier aux absences (week end, track manquant...)
                        dt = dt.AddDays(intervalleMin0);
                    }
                    else
                        dt = t.Pub;


                    nb++;
                    if (dt > limitFuture)
                    {
                        nextDate = dt;
                        nblissage++;
                        if (dt <= _deltaMin)
                            continue;
                        if (dt <= _deltaRab)
                            continue;
                        if (nb <= conf.deltaNbMin)
                            continue;
                        if (nblissage <= conf.deltaNbRab)
                            continue;
                        if (dt <= limitFutureRab)
                            continue;

                        break;


                        //if (dt > _deltaMin && dt > _deltaRab && nb > conf.deltaNbMin && nblissage > conf.deltaNbRab && dt > limitFutureRab)
                        //    break;
                    }

                }

                if (nextDate > limitFuture && nb > 0 && conf.noCollision)
                {
                    deltaAtterrissage = (nextDate - limitFuture).TotalDays / (double)nb;
                    if (deltaAtterrissage > intervalleMin)
                        deltaAtterrissage = intervalleMin;
                }
            }

            var tsatt = timeSpan.FromDays(deltaAtterrissage);
            if (tsatt.TotalMinute < 1)
                tsatt = timeSpan.FromMinutes(1);

            string deltas = string.Format("{0} {1} {2} {3}->{4}", intervalle.ToString("0.##"), deltaLastRead0.ToString("0.##"), delta0Corr.ToString("0.##"), delta.ToString("0.##"), tsatt.TotalDay.ToString("0.##"));

            log.log("{0} {1}/{2} ({3}/{4}) [{5}] {6} {7} ({8}) lecture={9} ", deltas, nbRead, nbTotal, nbReads, nbTotals, album.Album, lastRead.track.Name, lastRead.Pub, pub2, deltaLecture.ToString("#.##"));


            //  nb = 0;
            // bool enRetard = limitFuture < date0;
            TrackSort last = next;
            DateTime lastPub2 = limitFuture;
            int indexDepart = indexLastRead + 1;



            bool erased = false;

            if (conf.vacances)
                deltaAtterrissage = delta;

            for (int i = indexDepart; i < count; i++)
            {
                var t = list[i];
                if (erased && conf.erasedDone)
                {
                    eraseSort(t, "", t.Pub);
                    continue;
                }

                DateTime dt = lastPub2;

                if (i == indexDepart && !conf.useVirtuel2)
                {
                    dt = limitFuture;
                }
                else
                {

                    //if (conf.deltaCheckSelected)
                    //{
                    //    if (!t.Selected)
                    //        continue;
                    //    if (!t.Enabled)
                    //        continue;
                    //}
                    var d = (t.Pub - last.Pub).TotalDays / intervalleMin0;


                    if (conf.useVirtuel2)
                        dt = lastPub2.AddDays(d * deltaAtterrissage).truncateToMinute();  //  (int)(tsatt.TotalMinute * nb)).truncateToMinute();
                    else
                        dt = lastPub2.AddDays(deltaAtterrissage).truncateToMinute();
                    if (conf.deltaConstLate >= 0 && t.track.Selected && dt < date1)
                    {
                        var dt2 = dt;
                        if (conf.useVirtuel2)
                            dt2 = lastPub2.AddDays(d * delta).truncateToMinute();
                        else
                            dt2 = lastPub2.AddDays(delta).truncateToMinute();
                        //if (dt2 <= date0)
                        dt = dt2;
                        //else
                        //    dt = date0.AddMinutes(1);
                    }


                }



                var _delta = (dt - lastRead.Pub2).TotalDays;
                if (t.Pub >= dt || conf.enabled == sortMode.reset || erased && conf.erasedDone)
                {
                    erased = true;
                    eraseSort(t, "", t.Pub);
                }
                else
                {
                    if (cumulMin > 0 && cumulMax > 0 && conf.extPente == 0)
                    {
                        var __delta = (dt - t.Pub).TotalDays;
                        if (__delta > cumulMin)
                        {
                            __delta = borneCumul(__delta, cumulMin, cumulMax);
                            dt = t.Pub.AddDays(__delta).truncateToMinute();
                        }
                    }


                    //if (dt > DateTime.Now)
                    //{
                    //}

                    //if ((dt - t.Pub).TotalDays > 100)
                    //{
                    //}

                    writeComment(t, dt, "", t.Pub);
                    //nb++;
                }


                last = t;
                lastPub2 = dt;


            }


            for (int i = 0; i < count; i++)
            {
                var track = list[i];
                if (track.Pub > currentPub && track.Pub2 > track.Pub && track.Pub2 <= currentPub2)
                {
                    var aux = currentPub2.AddMinutes(1);
                    log.log("correction2 pub2 pour respect ordre {0} -> {1} {2}", track.Pub2, aux, track);
                    track.Pub2 = aux;
                }

                currentPub = track.Pub;
                currentPub2 = track.Pub2;
            }

        }

        private static double getweek(double days)
        {
            return 7 * System.Math.Floor(days / 7.0);
        }
        private static void buildWeek(List<double> list)
        {
            for (int i = 0; i < list.Count; i++)
            {
                list[i] = getweek(list[i]);
            }
        }

        private void build()
        {

            int count = list.Count;
            if (count == 0)
                return;


            if (this.album.Album == "LA GRANDE TABLE 1ère partie")
            {
            }

            else if (this.album.Album == "La tête au carré")
            {
            }


            // bool rare = album.Rare;

            TrackSort.Date0 = date0;

            //  TrackSort reallyLastRead = null;
            DateTime currentPub = DateTime.MinValue;
            DateTime currentPub2 = DateTime.MinValue;

            // 1. ordre
            for (int i = 0; i < count; i++)
            {
                var track = list[i];


                if (track.Pub > currentPub && track.Pub2 <= currentPub2)
                {
                    if (track.Pub2 < track.Pub)
                        track.Pub2 = track.Pub;

                    if (track.Pub > currentPub && track.Pub2 <= currentPub2)
                    {
                        var aux = currentPub2.AddMinutes(1);
                        log.log("correction pub2 pour respect ordre {0} -> {1} {2}", track.Pub2, aux, track);
                        track.Pub2 = aux;
                    }
                }

                currentPub = track.Pub;
                currentPub2 = track.Pub2;
            }



            int index0 = 0;
            int indexCourant = 0;

            TrackSort next = null;
            int indexLastRead = -1;
            // int indexPrelastRead = -1;
            TrackSort lastRead = null;
            // TrackSort prelastRead = null;

            int indexLastSelected = -1;
            for (int i = 0; i < count; i++)
            {
                var track = list[i];
                if (track.track.Selected)
                    indexLastSelected = i;
                if (track.getPlayed(false))
                {
                    if (next == null)
                    {
                        //indexPrelastRead = indexLastRead;
                        //prelastRead = lastRead; 
                        indexLastRead = i;
                        lastRead = track;
                        indexCourant = i;

                    }
                    //else
                    //    break;

                }

                else if (lastRead != null)
                {
                    if (next == null)
                    {
                        if (track.Selected || track.Pub2 >= date0)
                        {
                            next = track;
                        }
                    }
                    //else
                    //    break;
                }
            }

            if (indexLastRead < 0)
                return;



            if (indexCourant < 0)
                return;

            if (conf.vacances || !conf.recheck)
                index0 = indexCourant;
            else
            {
                index0 = 0;
                indexLastRead = -1;
                lastRead = null;
                //indexPrelastRead = -1;
                //prelastRead = null; 

            }
            bool firstSel = false;


            // DateTime lastPlayed = DateTime.MinValue;

            if (lastRead == null)
            {
                for (int i = index0; i < count; i++)
                {
                    var track = list[i];

                    if (track.getPlayed(false)) // && track.PlayedDate > lastPlayed)
                    {
                        indexLastRead = i;
                        //prelastRead = track;
                        //indexPrelastRead = i;
                        // lastPlayed = track.PlayedDate;

                        lastRead = track;

                        index0 = i;
                        break;
                    }


                }
            }

            if (lastRead == null)
                return;
            if (lastRead.Pub == DateTime.MinValue)
                return;

            TrackSort last = lastRead;
            DateTime lastPub2 = lastRead.Pub2;
            //DateTime lastPubTh = lastRead.Pub2;
            DateTime pubMoy = lastRead.Pub2;
            DateTime pubMoyForCalcul = pubMoy;

            while (true)
            {
                if (index0 >= count - 1)
                    break;



                var current = list[index0];
                bool played = current.getPlayed(false);


                if (played)
                {
                    lastRead = current;
                    indexLastRead = index0;
                }

                //  int indexNextSelected = -1;

                //  TrackSort next = null;

                // 2. Détermination lastRead et next
                if (this.album.Album == "A voix nue" && current != null && current.Name == "Michel Legrand (3/5) 05.03.14 me")
                { }


                bool rare = album.Rare;
                bool noHorizon = conf.noHorizon;

                var lfutur = conf.getFutur(rare);
                buildWeek(lfutur);
                var futurh = conf.futurh;
                var futurhl = conf.getFuturHList(rare);
                buildWeek(futurhl);
                var futura = getweek(conf.futura);

                double intervalleFactMin = 1;
                double _intervalleFactMoy = 1;
                double intervalleX = 0;

                // DateTime lastExists = lastRead.Pub;

                var now = DateTime.Now;
                DateTime finFutur = now;
                DateTime finFuturH = now;
                DateTime debutFutur = current.Pub; //.AddDays(-futura);
                int indexDebut = index0;

                DateTime pub2 = lastRead.Pub2;
                double duree = current.DureeEnHeure;
                var intervalleMin0Head = conf.getIntervalleMin0(rare);
                var intervalleHead = conf.getIntervalle(rare, duree, intervalleMin0Head);
                var intervalleMinHead = conf.getIntervalleMin(rare, duree);
                var _atterissageMin = conf.getAtterrissageMin(rare);
                //double deltaMax = intervalle; // conf.getIntervalle(album.Rare);
                double delta0 = intervalleHead;
                var deltaLecture = (DateTime.Now - lastRead.PlayedDate).TotalDays;
                double cumulMin = conf.getCumulMin(rare);
                double cumulMax = conf.getCumulMax(rare);
                double rapport = 1;
                double rapportBorneHead = 1;
                double _intervalleCorrec = intervalleHead;
                double _intervalleCorrecVar = intervalleHead;
                double _deltaHorizon = intervalleHead;
                double deltaMax = -1;
                double _densite = 1;
                double nbReadHead = 0;
                double nbTotalHead = 0;
                double coeff = 1;
                bool useToleranceHead = false;
                bool _borneParHorizon = false;
                double futurChoisi = 0;
                double deltaLastRead0 = (lastRead.Pub2 - lastRead.Pub).TotalDays;
                double _delta0Corr = deltaLastRead0;


                int nbRead = 0;
                int nbTotal = 0;
                var histo = conf.getHisto(rare);
                var nbHisto = conf.getNbHisto(rare);
                int _nbTotal = 0;

                DateTime limit = lastRead.Pub; //
                try { limit = limit.AddDays(-histo); }
                catch (Exception ex)
                {
                    misc.log("Impossible de caler l'historique {0} {1}", this, lastRead, ex);
                    throw;
                }
                {
                    DateTime l = DateTime.MinValue;
                    for (int i = indexLastRead; i >= 0; i--)
                    {
                        var t = list[i];
                        var dt = t.Pub;
                        if (dt.Date == l && t.track.Duree.TotalMinute < conf.collisionDuree)
                            continue;
                        l = dt.Date;
                        if ((dt < limit || nbTotal >= nbHisto) && nbTotal >= conf.totalMin)
                            break;

                        if (t.getPlayed(true))
                            nbRead++;


                        nbTotal++;

                    }
                }

                _nbTotal = nbTotal;

                if (_nbTotal < conf.totalMin)
                    _nbTotal = conf.totalMin;

                rapport = (double)nbRead / (double)_nbTotal;
                coeff = 1 / rapport;

                if (this.album.Album == "La tête au carré" && index0 > indexCourant - 2)
                {
                }

                if ((this.album.Album == "Rendez-vous avec X") && (index0 > indexCourant - 2 && index0 < indexCourant + 10))
                {
                }

                foreach (double futur in lfutur)
                {
                    var intervalle = conf.getIntervalle(rare, duree, intervalleMin0Head);
                    double delta = intervalle;
                    int nbFutur = 0;
                    int nbFuturh = 0;
                    int nbRestant = 0;
                    var deltaTotal = futur;
                    var deltaTotalH = futurhl;
                    var atterissageMin = conf.getAtterrissageMin(rare);
                    double intervalleFactMoy = 1;
                    if (futur > 0)
                    {
                        finFutur = current.Pub.AddDays(futur);
                        finFuturH = current.Pub.AddDays(futurh);
                        if (finFutur > now)
                        {
                            var d = getweek((now - debutFutur).TotalDays);
                            finFutur = debutFutur.AddDays(d);

                            //indexDebut = 0;
                            //debutFutur = finFutur.AddDays(-futur);
                        }

                        if (finFuturH > now)
                        {
                            var d = getweek((now - debutFutur).TotalDays);
                            finFuturH = debutFutur.AddDays(d);

                        }

                        //if (futura > 0)
                        //{
                        //    if (debutFutur < list[0].Pub)
                        //    {
                        //        debutFutur = list[0].Pub;
                        //        indexDebut = 0;
                        //    }
                        //    else
                        //    {
                        //        for (int i = index0; i >= 0; i--)
                        //        {
                        //            var t = list[i].Pub;
                        //            if (t >= debutFutur)
                        //                indexDebut = i;
                        //            else
                        //                break;
                        //        }
                        //    }
                        //}
                        // chopper l'intervalle majoritaire pour éviter le poids des erreurs. 
                        Dict<int, int> spectreDelta = new Dict<int, int>();
                        DateTime lastExists = lastRead.Pub;
                        DateTime l = DateTime.MinValue;
                        for (int i = indexDebut; i < count; i++)
                        {
                            var t = list[i].Pub;
                            if (t < debutFutur)
                                continue;
                            if (t.Date == l.Date && list[i].track.Duree.TotalMinute < conf.collisionDuree)
                                continue;
                            l = t;
                            nbRestant++;

                            if (t < finFuturH)
                                nbFuturh++;


                            if (t < finFutur)
                            {
                                nbFutur++;


                                var dp = (int)(System.Math.Round((t - lastExists).TotalDays, 0, MidpointRounding.AwayFromZero));
                                lastExists = t;
                                if (dp > 0)
                                    spectreDelta[dp]++;
                            }
                            else if (nbRestant >= TrackAlbum.NB_MIN_POUR_FREQUENT)
                            {
                                break;
                            }
                        }

                        if (nbFutur == 0)
                            nbFutur = 1;
                        if (nbFuturh == 0)
                            nbFuturh = 1;
                        deltaTotal = (finFutur - debutFutur).TotalDays;
                        // deltaTotalH = (finFuturH - debutFutur).TotalDays;
                        if (deltaTotal > 0)
                        {
                            intervalleFactMoy = deltaTotal / (double)nbFutur;
                            //var median = deltaTotalH / (double)nbFuturh;
                            //if (median > intervalleFactMoy)
                            //    intervalleFactMoy = median;

                        }

                        if (futura > 0)
                        {
                            var min = current.Pub.AddDays(-futura);
                            var nb2 = nbFutur;
                            DateTime pubDebut = current.Pub;
                            for (int i = indexDebut - 1; i >= 0; i--)
                            {
                                var t = list[i].Pub;
                                if (t < min)
                                    break;
                                nb2++;
                                pubDebut = t;
                            }
                            var deltaTotal2 = (finFutur - pubDebut).TotalDays;
                            var intervalleFactMoy2 = deltaTotal2 / (double)nb2;

                            if (intervalleFactMoy2 < intervalleFactMoy)
                            {
                                intervalleFactMoy = intervalleFactMoy2;
                                deltaTotal = deltaTotal2;
                                debutFutur = pubDebut;
                                nbFutur = nb2;
                            }
                            else
                            {
                            }
                        }
                        var limitMoy = conf.limitMoy;
                        if (limitMoy > 0 && intervalleFactMoy > limitMoy)
                            intervalleFactMoy = limitMoy;

                        intervalleX = (intervalleFactMoy - 1) / 6;

                        var choices = spectreDelta.Keys.ToList();
                        choices.Sort((x, y) => x.CompareTo(y));

                        int max = 0;
                        int dpMaj = 1;
                        for (int i = 0; i < choices.Count; i++)
                        {
                            int k = choices[i];
                            var r = spectreDelta[k];
                            if (r > max)
                            {
                                max = r;
                                dpMaj = k;
                            }
                        }

                        intervalleFactMin = dpMaj;

                        if (nbRestant < TrackAlbum.NB_MIN_POUR_FREQUENT)
                        {
                            // this.album.RareEffect = true;
                            if (!rare)
                                rare = true;
                            if (!noHorizon)
                                noHorizon = true;
                        }
                    }






                    var intervalleMin0 = conf.getIntervalleMin0(rare);
                    // var intervalleMin0Var = conf.getIntervalleMin0Var(intervalleX, intervalleFactMin);


                    var intervalleVar = conf.getIntervalleVar(rare, intervalleX, duree, intervalleMin0);

                    var intervalleCorrec = intervalle;
                    var intervalleCorrecVar = intervalleVar;
                    var intervalleMin = conf.getIntervalleMin(rare, duree);
                    var intervalleMinVar = conf.getIntervalleMinVar(rare, intervalleX, duree);



                    var atterissageMinVar = conf.getatterrissageMinVar(intervalleX, atterissageMin);




                    double delta0Corr = deltaLastRead0;



                    if (pub2 > lastRead.Pub && conf.extPente == 0)
                    {
                        if (conf.elastique < 1)
                        {
                            delta0Corr = deltaLastRead0 * conf.elastique;
                            pub2 = lastRead.Pub.AddDays(delta0Corr).truncateToMinute();
                        }


                        //if (cumulMin > 0 && cumulMax > 0 && delta0Corr > cumulMin)
                        //{
                        //    delta0Corr = borneCumul(delta0Corr, cumulMin, cumulMax);
                        //    pub2 = lastRead.Pub.AddDays(delta0Corr);
                        //}
                    }


                    // var _played = played ? current : lastRead;



                    //int nbReads = 0;
                    //int nbTotals = 0;


                    //int _nbRead = 0;



                    double densite = 1;

                    double rapportBorne = 1;
                    bool borneParHorizon = false;

                    double coeffVar = 1;


                    double deltaVar = intervalleVar;

                    double deltaHorizon0 = delta;
                    double deltaHorizon0Var = deltaVar;
                    double deltaHorizon = delta;
                    double deltaHorizonVar = deltaVar;

                    bool useTolerance = false;

                    //if (histo > 0 || nbHisto > 0)
                    //{



                    if (nbRead > 0 && _nbTotal > 0)
                    {



                        // var futur = conf.getFutur(rare);

                        if (futur > 0)
                        {


                            double theoric = (finFutur - current.Pub).TotalDays / intervalleMin0;
                            densite = nbFutur / theoric;
                            //if (densite >= 1)
                            //    densite = 1;
                            if (densite < conf.densiteMin && !noHorizon)
                                noHorizon = true;
                            if (densite < conf.densiteMin && !rare)
                            {
                                rare = true;



                                intervalleMin0 = conf.getIntervalleMin0(rare);
                                // intervalleMin0Var = conf.getIntervalleMin0Var(intervalleX, intervalleFactMin);

                                intervalle = conf.getIntervalle(rare, duree, intervalleMin0);
                                intervalleVar = conf.getIntervalleVar(rare, intervalleX, duree, intervalleMin0);

                                intervalleCorrec = intervalle;
                                intervalleCorrecVar = intervalleVar;
                                intervalleMin = conf.getIntervalleMin(rare, duree);
                                intervalleMinVar = conf.getIntervalleMinVar(rare, intervalleX, duree);


                                atterissageMin = conf.getAtterrissageMin(rare);
                                atterissageMinVar = conf.getatterrissageMinVar(intervalleX, atterissageMin);




                                theoric = (finFutur - current.Pub).TotalDays / intervalleMin0;
                                densite = nbFutur / theoric;
                                //if (densite >= 1)
                                //    densite = 1;
                            }
                            //if (densite < 1)
                            //    rapport = rapport * densite;
                        }


                        //  album.Rare ? conf.intervalleR : conf.intervalle;


                        if (conf.dureeCoeff)
                            coeff = conf.getCoeff(rare, coeff, duree);

                        coeffVar = coeff;

                        if (conf.coeffDensite)
                        {
                            coeff /= densite;

                            coeffVar *= intervalleFactMoy;
                        }

                        if (conf.honneurAuxVieux && nbRestant < TrackAlbum.NB_MIN_POUR_FREQUENT)
                        {
                            if (nbRestant > 0)
                            {
                                var t = TrackAlbum.NB_MIN_POUR_FREQUENT / nbRestant;
                                coeff *= t;
                                coeffVar *= t;
                            }
                        }

                        if (this.album.Album == "PARLER CONTRE LA TERREUR")
                        {
                        }

                        var recup = intervalleMin0 - atterissageMin;
                        //   var recupVar = intervalleMin0Var - atterissageMinVar;


                        delta = intervalle; // conf.getIntervalle(album.Rare);
                        delta0 = delta;
                        deltaHorizon0 = delta;
                        deltaHorizon = delta;


                        deltaHorizon0Var = intervalleVar;
                        deltaHorizonVar = intervalleVar;

                        rapportBorne = conf.getHorizonCorrec(rapport, intervalleX);

                        if ((this.album.Album == "Rendez-vous avec X" || this.album.Album == "Sur les épaules de Darwin") && (index0 > indexCourant - 10 && index0 < indexCourant + 10))
                        {
                        }



                        deltaHorizon0 = intervalleMin0 + recup * (1 - rapport) / rapport + (1 - densite) / (densite * rapport);
                        //deltaHorizon0Var = intervalleMin0Var + recupVar * (1 - rapport) / rapport + (1 - 1 / intervalleFactMoy) / (rapport / intervalleFactMoy); 
                        //deltaHorizon0Var = intervalleFactMoy + ((1 - rapport) / rapport) * (intervalleFactMoy - atterissageMinVar); // ça pue
                        var d0 = (lastPub2 - pubMoyForCalcul).TotalDays;
                        var d1 = (lastPub2 - last.Pub).TotalDays;
                        var d00 = (pubMoyForCalcul - last.Pub).TotalDays;


                        var deltaMoy = d1; // System.Math.Min(d0, d1);
                        if (deltaMoy < 0)
                            deltaMoy = 0;

                        var deltaTotalh = (finFuturH - debutFutur).TotalDays;
                        var correcMoy0 = (deltaTotalh - deltaMoy * rapportBorne) / nbFuturh;
                        var correcMoy1 = (deltaTotal - deltaMoy * rapportBorne) / nbFutur;
                        var correcMoy = System.Math.Min(correcMoy0, correcMoy1);
                        //  var correcMoy2 = intervalleFactMoy * deltaTotal / (deltaTotal + deltaMoy * rapportBorne);
                        var correcMoy2 = intervalleFactMoy * (1 - deltaMoy * rapportBorne / deltaTotal);
                        // 1 - 10/5 =>-1  5/(5+10) =0.33
                        // 1- 1/100 => 0.99   100/(100+1) =0.99
                        deltaHorizon0Var = (correcMoy2 - atterissageMinVar * (1 - rapportBorne)) / rapportBorne;
                        // im=7, rapport=0.9

                        double min = 0;
                        double hor = 0;



                        foreach (double h in futurhl)
                        {
                            if (this.album.Album == "Sur les épaules de Darwin")
                            {
                            }
                            var p = PeriodBuilder.getDensite(list, index0, conf, h);
                            double moy = p.Moy();
                            var limitMoy = conf.limitMoy;
                            if (limitMoy > 0 && moy > limitMoy)
                                moy = limitMoy;
                            double _intervalleX = (moy - 1) / 6;
                            var _intervalleMin0 = conf.getIntervalleMin0(rare);
                            var _atterissageMinVar = conf.getatterrissageMinVar(_intervalleX, atterissageMin);
                            var _rapportBorne = conf.getHorizonCorrec(rapport, _intervalleX);

                            hor = (moy - _atterissageMinVar * (1 - _rapportBorne)) / _rapportBorne;
                            //hor = (moy - atterissageMinVar * (1 - rapportBorne)) / rapportBorne;
                            double ecartMax = p.nb * _rapportBorne * (hor - _intervalleMin0);
                            if (ecartMax > 0 && deltaMoy > ecartMax)
                            {
                                var moy2 = p.Moy(deltaMoy - ecartMax);
                                if (limitMoy > 0 && moy2 > limitMoy)
                                    moy2 = limitMoy;
                                hor = (moy2 - _atterissageMinVar * (1 - _rapportBorne)) / _rapportBorne;
                                // hor = (moy2 - atterissageMinVar * (1 - rapportBorne)) / rapportBorne;
                            }
                            if (hor > min)
                                min = hor;
                        }

                        if (deltaHorizon0Var >= min)
                        {
                        }
                        else
                        {
                            if (this.album.Album == "Sur les épaules de Darwin")
                            {
                            }
                            deltaHorizon0Var = min;
                        }


                        deltaHorizon = deltaHorizon0;
                        deltaHorizonVar = deltaHorizon0Var;



                        var tolerance = conf.getTolerance(rare);
                        double tolerancePart = 0;
                        if (tolerance > 0)
                        {
                            var ecart0 = (lastRead.Pub2 - lastRead.Pub).TotalDays;
                            tolerancePart = (tolerance - ecart0) / conf.getNbTolerance(rare);
                            if (deltaHorizon < tolerancePart)
                                deltaHorizon = tolerancePart;
                            else if (conf.toleranceNegative && tolerancePart < 0)
                                deltaHorizon += tolerancePart;


                            if (deltaHorizonVar < tolerancePart)
                            {
                                deltaHorizonVar = tolerancePart;
                                useTolerance = true;
                            }
                            else if (conf.toleranceNegative && tolerancePart < 0)
                                deltaHorizonVar += tolerancePart;
                        }




                        if (!noHorizon && deltaHorizon < intervalle)
                            intervalleCorrec = deltaHorizon;

                        if (!noHorizon && deltaHorizonVar < intervalleVar)
                        {
                            intervalleCorrecVar = deltaHorizonVar;
                            if (!conf.horizonFinal)
                                borneParHorizon = true;
                        }

                        //if (intervalleCorrec < intervalleMin)
                        //    intervalleCorrec = intervalleMin;

                        //if (intervalleCorrecVar < intervalleMinVar)
                        //    intervalleCorrecVar = intervalleMinVar;
                        //0.1 => 10
                        //0.9 => 1.11
                        //coeff -= 1; // 9  0.11
                        //var dminmax = intervalle - intervalleMin;

                        var _delta0 = borne(coeff, intervalle, intervalleMin, intervalleMin0); // intervalle - dminmax / (1 + (intervalleMin / dminmax) * coeff);
                        var _deltaVar0 = borne(coeffVar, intervalleVar, intervalleMinVar, intervalleMin0);




                        var _delta = borne(coeff, intervalleCorrec, intervalleMin, intervalleMin0); // intervalle - dminmax / (1 + (intervalleMin / dminmax) * coeff);
                        var _deltaVar = borne(coeffVar, intervalleCorrecVar, intervalleMinVar, intervalleMin0);


                        if (conf.horizonFinal)
                        {
                            if (_delta0 < delta)
                                delta = _delta0;
                            else if (_delta0 == delta)
                            { }
                            else
                            { }



                            if (_deltaVar0 < deltaVar)
                                deltaVar = _deltaVar0;
                            else if (_deltaVar0 == deltaVar)
                            { }
                            else
                            { }

                            if (delta > deltaHorizon)
                            {
                                if (noHorizon)
                                {
                                }
                                else
                                    delta = deltaHorizon;
                            }

                            //if (delta < tolerancePart)
                            //    delta = tolerancePart; 

                            if (deltaVar > deltaHorizonVar)
                            {
                                if (noHorizon)
                                {
                                }
                                else
                                {
                                    deltaVar = deltaHorizonVar;
                                    borneParHorizon = true;
                                }
                            }

                            //if (deltaVar < tolerancePart)
                            //    deltaVar = tolerancePart; 

                        }
                        else
                        {


                            if (_delta < delta)
                                delta = _delta;
                            else if (_delta == delta)
                            { }
                            else
                            { }


                            if (_deltaVar < deltaVar)
                                deltaVar = _deltaVar;
                            else if (_deltaVar == deltaVar)
                            { }
                            else
                            { }
                        }





                    }

                    //misc.log("{3} {4}/{5} [{0}] {1} {2} ", name, lastRead.Name, lastRead.Pub, delta.ToString("#.##"), nbRead, nbTotal, name);


                    if (conf.intervalleVar)
                    {
                        delta = deltaVar;
                        atterissageMin = atterissageMinVar;
                        intervalleMin = intervalleMinVar;
                        // intervalleMin0 = intervalleMin0Var;
                        intervalle = intervalleVar;
                        deltaHorizon = deltaHorizonVar;
                    }

                    if (delta > deltaMax)
                    {
                        futurChoisi = futur;
                        deltaMax = delta;
                        _densite = densite;

                        rapportBorneHead = rapportBorne;
                        _delta0Corr = delta0Corr;
                        _deltaHorizon = deltaHorizon;
                        nbReadHead = nbRead;
                        nbTotalHead = nbTotal;

                        useToleranceHead = useTolerance;
                        _borneParHorizon = borneParHorizon;

                        _intervalleCorrec = intervalleCorrec;
                        _intervalleCorrecVar = intervalleCorrecVar;
                        _densite = densite;
                        _intervalleFactMoy = intervalleFactMoy;
                        _atterissageMin = atterissageMin;
                        intervalleMin0Head = intervalleMin0;
                        intervalleHead = intervalle;
                        intervalleMinHead = intervalleMin;

                    }
                }

                if ((this.album.Album == "Rendez-vous avec X") && (index0 > indexCourant - 2 && index0 < indexCourant + 10))
                {
                }

                if (conf.extPente > 0)
                {
                    var d0 = (DateTime.Now - pub2).TotalDays;
                    var dl = conf.extDelta;
                    if (dl == 0)
                    {
                        dl = d0;
                    }

                    var __delta0 = d0 / conf.extPente;
                    var __delta = delta0;
                    //01/01/2014 ->01/01/2017
                    //04/01/2017 -> 04/01/2014
                    var dateLimitEcoule = DateTime.Now.AddDays(-dl);

                    var deltaLimiteEcoule = (dateLimitEcoule - pub2).TotalDays;
                    log.log("{0} {1}", deltaMax.ToString("0.##"), deltaLimiteEcoule.ToString("0.##"));

                    if (deltaLimiteEcoule > deltaMax)
                    {
                        double _coeff = deltaLimiteEcoule / deltaMax;
                        __delta = borne(_coeff, intervalleHead, intervalleMinHead, intervalleMinHead);
                    }

                    if (__delta < 1)
                        __delta = 1;

                    if (__delta > deltaMax)
                        deltaMax = __delta;


                    //if (delta > intervalle)
                    //    delta = intervalle;
                }


                //if (this.album.Album == "Sur les épaules de Darwin" && index0 >= indexCourant - 10)
                //{
                //}

                if (intervalleMinHead > deltaMax)
                    intervalleMinHead = deltaMax;
                if (intervalleMin0Head > intervalleMinHead)
                    intervalleMin0Head = intervalleMinHead;
                if (_atterissageMin > intervalleMinHead)
                    _atterissageMin = intervalleMinHead;





                // }





                if (conf.limitRead && deltaLecture > intervalleHead)
                {
                    //13 /10 ->7
                    var _old = deltaMax;

                    deltaMax += intervalleHead - deltaLecture;
                    log.log("limitation par lecture {0} -> {1}", _old.ToString("0.##"), deltaMax.ToString("0.##"));
                }





                if (deltaMax < intervalleMinHead)
                    deltaMax = intervalleMinHead;

                if (deltaMax > intervalleHead)
                    deltaMax = intervalleHead;



                DateTime limitFuture = lastPub2.AddDays(deltaMax).truncateToMinute();
                DateTime ll = pub2.AddDays(_atterissageMin).truncateToMinute();
                if (limitFuture < ll)
                    limitFuture = ll;
                //  limitFuture = pub2.AddDays(delta).truncateToMinute();
                double ecart = 0;
                if (indexLastRead + 1 < count)
                {
                    TrackSort _next = list[indexLastRead + 1];
                    ecart = (limitFuture - _next.Pub).TotalDays;
                }

                DateTime limitFutureRab = pub2.AddDays(conf.coeffRab * ecart).truncateToMinute();
                //var cumul = (limitFuture - next.Pub).TotalDays;
                //var dtaux = next.Pub.AddDays(conf.coeffRab * cumul).truncateToMinute();
                //if (dtaux > limitFutureRab)
                //    limitFutureRab = dtaux; 
                DateTime nextDate = limitFuture;

                int nb = 0;
                int nblissage = 0;
                double deltaAtterrissage = intervalleMinHead;
                double atterrissageVacance = deltaAtterrissage;

                if (this.album.Album == "La tête au carré" && lastRead != null && lastRead.Pub > new DateTime(2015, 4, 8))
                {
                }

                if (conf.noCollision)
                    deltaAtterrissage = deltaMax;
                //if (conf.extPente > 0)
                //    deltaAtterrissage = delta0;
                string causes = "";

                //if (conf.deltaConst || conf.extPente > 0)
                //{
                //}

                //else
                {
                    var _deltaMin = lastRead.Pub.AddDays(conf.deltaMin);
                    var _deltaRab = limitFuture.AddDays(conf.deltaRab);

                    DateTime dt = lastRead.Pub.AddDays(intervalleMin0Head);

                    var sbCause = new StringBuilder();

                    for (int i = indexLastRead + 1; i < count; i++)
                    {
                        var t = list[i];
                        if (conf.useVirtuel)
                        {
                            // on utilise des tracks virtuels pour pallier aux absences (week end, track manquant...)
                            dt = dt.AddDays(intervalleMin0Head);
                        }
                        else
                            dt = t.Pub;


                        nb++;
                        if (dt > limitFuture)
                        {
                            sbCause = new StringBuilder();
                            nextDate = dt;
                            nblissage++;

                            int nbCause = 0;
                            if (dt <= _deltaMin)
                            {
                                sbCause.Append(" deltaMin");
                                nbCause++;
                            }
                            if (dt <= _deltaRab)
                            {
                                sbCause.Append(" deltaRab");
                                nbCause++;
                            }
                            if (nb <= conf.deltaNbMin)
                            {
                                sbCause.Append(" deltaNbMin");
                                nbCause++;
                            }
                            if (nblissage <= conf.deltaNbRab)
                            {
                                sbCause.Append(" deltaNbRab");
                                nbCause++;
                            }
                            if (dt <= limitFutureRab)
                            {
                                sbCause.Append(" coeffRab");
                                nbCause++;
                            }

                            if (nbCause > 0)
                            {
                                causes = sbCause.ToString();
                                continue;
                            }


                            break;


                            //if (dt > _deltaMin && dt > _deltaRab && nb > conf.deltaNbMin && nblissage > conf.deltaNbRab && dt > limitFutureRab)
                            //    break;
                        }

                    }

                    if (nb > 0 && conf.noCollision) //    (nextDate > limitFuture && nb > 0 && conf.noCollision)
                    {
                        deltaAtterrissage = (nextDate - limitFuture).TotalDays / (double)nb;
                        if (deltaAtterrissage > intervalleMinHead)
                            deltaAtterrissage = intervalleMinHead;
                    }
                }

                if (deltaAtterrissage < _atterissageMin)
                {
                    causes += " corrigé atterrissageMin";
                    deltaAtterrissage = _atterissageMin;
                }


                atterrissageVacance = deltaMax * rapport + deltaAtterrissage * (1 - rapport);


                //string atter = string.Format("{0}->{1}", delta.ToString("0.##"), deltaAtterrissage.ToString("0.##"));
                //if (conf.vacances && deltaAtterrissage != atterrissageVacance)
                string atter = string.Format("{0}/{1}:{2}->{3}({4})", _intervalleFactMoy.ToString("0.##"), futurChoisi, deltaMax.ToString("0.##"), deltaAtterrissage.ToString("0.##"), atterrissageVacance.ToString("0.##"));

                string deltas = string.Format("{0} ic={1}({2}) h={3} i={4} r={5}% ({6}%)", atter,
                   conf.intervalleVar ? _intervalleCorrecVar.ToString("0.##") : _intervalleCorrec.ToString("0.##"),
                   conf.intervalleVar ? _intervalleCorrec.ToString("0.##") : _intervalleCorrecVar.ToString("0.##"), _deltaHorizon.ToString("0.##"), intervalleHead.ToString("0.##"),
                   (100 * rapport).ToString("0"), (100 * rapportBorneHead).ToString("0"));
                //    deltaLastRead0.ToString("0.##"), delta0Corr.ToString("0.##"));
                string stats = string.Format("{0}/{1}={2}% c={3} d={4}% dr={5} r={6}({7})", nbReadHead, nbTotalHead, (100 * rapport).ToString("0"), coeff.ToString("0.##"), (_densite * 100).ToString("0"), (100 * _densite * rapport).ToString("0"),
                    deltaLastRead0.ToString("0.##"), _delta0Corr.ToString("0.##"));
                var sbAlbum = new StringBuilder();

                sbAlbum.Append(string.Format("[{0}]", album.Album));
                if (album.Rare) sbAlbum.Append(" rare ");
                else if (rare) sbAlbum.Append(" rare+ ");
                sbAlbum.Append(current.track.Duree.TotalMinute.ToString("0 m"));

                string _usetolerance = useToleranceHead ? "+" : " ";
                {
                    string h = _borneParHorizon ? "h" : " ";
                    string _rapportBorne = (rapportBorneHead == 1 & rapport < 1) ? "~" : " ";
                    var str = string.Format("{0} {1}{2}{3}{4} lect={5} causes={6}", stats, sbAlbum.ToString(), _usetolerance, h, _rapportBorne, deltaLecture.ToString("#,#"), causes);


                    if (played)
                    {
                        if (index0 >= indexCourant && index0 <= indexLastSelected)
                            log.logNoDate(str);
                        else
                            logDebug.logNoDate(str);
                    }
                }


                //  nb = 0;
                // bool enRetard = limitFuture < date0;

                //int indexDepart = indexLastRead + 1;
                // int indexNext = index0 + 1;

                //if (current != lastRead)
                int suivant = index0 + 1;
                if (suivant < count)
                {

                    var t = list[index0 + 1]; // current; // list[indexNext];

                    var _deltaAtterrissage = deltaAtterrissage;
                    var __atterrissageMin = _atterissageMin;
                    if (conf.vacances && firstSel)
                    {
                        _deltaAtterrissage = atterrissageVacance;
                        __atterrissageMin = deltaMax * rapport + _atterissageMin * (1 - rapport);
                    }

                    DateTime dt = lastPub2;

                    if (suivant == indexLastRead + 1 && !conf.useVirtuel2)
                    {
                        dt = limitFuture;
                        // lastPubTh = limitFuture;
                    }
                    else
                    {


                        var d = (t.Pub - last.Pub).TotalDays / intervalleMin0Head;


                        if (conf.useVirtuel2)
                        {
                            dt = lastPub2.AddDays(d * _deltaAtterrissage).truncateToMinute();  //  (int)(tsatt.TotalMinute * nb)).truncateToMinute();
                            // lastPubTh = lastPub2.AddDays(d * _atterrissageMin).truncateToMinute();
                        }
                        else
                        {
                            dt = lastPub2.AddDays(_deltaAtterrissage).truncateToMinute();
                            // lastPubTh = lastPubTh.AddDays(_atterrissageMin).truncateToMinute();
                        }
                        if (conf.deltaConstLate >= 0 && t.track.Selected && dt < date1 && t.Pub2 < date1)
                        {
                            var dt2 = dt;
                            if (conf.useVirtuel2)
                                dt2 = lastPub2.AddDays(d * deltaMax).truncateToMinute();
                            else
                                dt2 = lastPub2.AddDays(deltaMax).truncateToMinute();
                            //if (dt2 <= date0)
                            dt = dt2;
                            //else
                            //    dt = date0.AddMinutes(1);
                        }


                    }

                    if (!firstSel)
                    {
                        if (dt > date0)
                            firstSel = true;
                    }



                    var dtMin = lastPub2.AddDays(_atterissageMin);

                    if (dt < dtMin)
                        dt = dtMin;
                    bool erasedNext = false;
                    if (conf.erasedDone)
                    {
                        if (!played && current.Pub2 <= current.Pub)
                            erasedNext = true;
                    }
                    if (t.Pub >= dt || conf.enabled == sortMode.reset || erasedNext)
                    {
                        if (dt > t.Pub)
                        {
                        }
                        eraseSort(t, deltas, pubMoy);
                    }
                    else
                    {
                        var __delta = (dt - t.Pub).TotalDays;
                        if (cumulMin > 0 && cumulMax > 0 && conf.extPente == 0)
                        {
                            if (__delta > cumulMin)
                            {
                                __delta = borneCumul(__delta, cumulMin, cumulMax);
                                dt = t.Pub.AddDays(__delta).truncateToMinute();
                            }
                        }

                        if (conf.elastique2 < 1)
                        {
                            var deltacorr2 = __delta * conf.elastique2;
                            dt = t.Pub.AddDays(deltacorr2).truncateToMinute();
                        }



                        if (dt < dtMin)
                            dt = dtMin;

                        var limitDelta = conf.limitDelta;
                        if (limitDelta > 0)
                        {
                            var dtMax = lastPub2.AddDays(limitDelta);
                            if (dt > dtMax)
                                dt = dtMax;
                        }

                        if (dt > DateTime.Now)
                        {
                        }

                        if ((dt - t.Pub).TotalDays > 100)
                        {
                        }

                        if (t.Pub >= dt || erasedNext)
                            eraseSort(t, deltas, pubMoy);
                        else
                            writeComment(t, dt, deltas, pubMoy);
                        //nb++;
                    }


                    last = t;
                    lastPub2 = t.Pub2; // dt;
                    //if (t.Pub2 < lastPub2)
                    //{
                    //    if (t.Pub != t.Pub2)
                    //    {
                    //    }
                    //    lastPub2 = t.Pub2;
                    //}

                    //  lastPub2 = System.Math.Min(dt, t.Pub2); // dt;  //t.Pub2; FIX BUG ??
                    //if (lastPubTh > lastPub2)
                    //    lastPubTh = lastPub2;

                    pubMoy = pubMoy.AddDays(_intervalleFactMoy);
                    pubMoyForCalcul = pubMoyForCalcul.AddDays(_intervalleFactMoy);

                    if (pubMoyForCalcul > lastPub2)
                        pubMoyForCalcul = lastPub2;


                    if (played)
                    {
                        //prelastRead = current;
                        ////lastPlayed = lastRead.PlayedDate;
                        //indexPrelastRead = index0;
                    }

                }


                index0++;
            }


            for (int i = 0; i < count; i++)
            {
                var track = list[i];
                if (track.Pub > currentPub && track.Pub2 > track.Pub && track.Pub2 <= currentPub2)
                {
                    var aux = currentPub2.AddMinutes(1);
                    log.log("correction2 pub2 pour respect ordre {0} -> {1} {2}", track.Pub2, aux, track);
                    track.Pub2 = aux;
                }

                currentPub = track.Pub;
                currentPub2 = track.Pub2;
            }

        }


        public void Build()
        {
            if (album.Album == "SCIENCE PUBLIQUE")
            {
            }
            if (done)
                return;
            done = true;
            if (conf.enabled == sortMode.no)
                return;
            int count = list.Count;
            if (count == 0)
                return;

            //if (conf.enabled == sortMode.histo)
            //{
            //    buildAll();
            //    return;
            //}
            //else
            //{
            //checkSelected = true;
            //apply = true;
            date0 = Conf.Date0;
            if (conf.deltaConstLate >= 0)
                date1 = date0.AddDays(conf.deltaConstLate);
            // newDate0 = Conf.NewDate0;
            if (conf.oldMode)
                build0();
            else
                build();
            return;
            //  }

            #region old
            /* if (conf.enabled == sortMode.reset)
            {
                foreach (var t in list)
                {
                    eraseSort(t, true, true);
                }

                return;
            }

            int indexLastRead = -1;
            int indexNextSelected = -1;
            DateTime lastPlayed = DateTime.MinValue;
            TrackSort next = null;
            //  TrackSort reallyLastRead = null;
            DateTime currentPub = DateTime.MinValue;
            DateTime currentPub2 = DateTime.MinValue;
            for (int i = 0; i < count; i++)
            {
                var track = list[i];
                //if (conf.extPente > 0)
                //{
                //    if (!track.Played && track.Pub == track.Pub2)
                //        track.Pub2 = Conf.Date0; 
                //}

                if (track.Pub > currentPub && track.Pub2 <= currentPub2)
                {
                    var aux = currentPub2.AddMinutes(1);
                    log.log("correction pub2 pour respect ordre {0} -> {1} {2}", track.Pub2, aux, track);
                    track.Pub2 = aux;
                }

                currentPub = track.Pub;
                currentPub2 = track.Pub2;


                if (track.Played) // && track.PlayedDate > lastPlayed)
                {
                    // ok mais quid du cas au fil de l'histoire : date dans le futur
                    if (track.Pub2 <= Conf.Date0 || conf.extPente > 0)
                    {
                        if (next == null)
                        {
                            indexLastRead = i;
                            lastPlayed = track.PlayedDate;
                        }
                    }
                }

                else if (next == null)
                {
                    if (track.Selected)
                    {
                        next = track;
                        indexNextSelected = i;
                        // break;
                    }
                }
            }


            if (indexLastRead < 0)
                return;
            if (next == null)
                return;
            var intervalle = conf.getIntervalle(album.Rare);
            var intervalleMin = conf.getIntervalleMin(album.Rare);
            var lastRead = list[indexLastRead];
            double deltaLastRead0 = (lastRead.Pub2 - lastRead.Pub).TotalDays;
            DateTime pub2 = lastRead.Pub2;

            double delta0Corr = deltaLastRead0;

            double cumulMin = conf.getCumulMin(album.Rare);
            double cumulMax = conf.getCumulMax(album.Rare);

            if (pub2 > lastRead.Pub && conf.extPente == 0)
            {
                if (conf.elastique < 1)
                {
                    delta0Corr = deltaLastRead0 * conf.elastique;
                    pub2 = lastRead.Pub.AddDays(delta0Corr).truncateToMinute();
                }


                //if (cumulMin > 0 && cumulMax > 0 && delta0Corr > cumulMin)
                //{
                //    delta0Corr = borneCumul(delta0Corr, cumulMin, cumulMax);
                //    pub2 = lastRead.Pub.AddDays(delta0Corr);
                //}
            }




            var deltaLecture = (DateTime.Now - lastPlayed).TotalDays;

            int nbReads = 0;
            int nbTotals = 0;

            int nbRead = 0;
            int nbTotal = 0;

            int _nbRead = 0;
            int _nbTotal = 0;
            double delta = conf.getIntervalle(album.Rare);
            double delta0 = delta;
            var _histo = conf.getHisto(album.Rare);
            if (_histo > 0)
            {
                double histo = _histo;

                DateTime histo0 = next.Pub;
                if (conf.histoMode == histoMode.fix)
                    histo0 = Conf.Date0;
                DateTime limit = histo0.AddDays(-histo);

                for (int i = indexNextSelected - 1; i >= 0; i--)
                {
                    var t = list[i];
                    var dt = t.Pub;
                    if (dt < limit && nbTotals >= conf.totalMin)
                        break;

                    if (t.Played)
                        nbReads++;


                    nbTotals++;

                }



                limit = lastRead.Pub.AddDays(-histo);
                for (int i = indexLastRead; i >= 0; i--)
                {
                    var t = list[i];
                    var dt = t.Pub;
                    if (dt < limit && nbTotal >= conf.totalMin)
                        break;

                    if (t.Played)
                        nbRead++;


                    nbTotal++;

                }


                if (conf.histoMode == histoMode.read)
                {
                    _nbRead = nbRead;
                    _nbTotal = nbTotal;
                }
                else
                {
                    _nbRead = nbReads;
                    _nbTotal = nbTotals;
                }


                if (_nbRead > 0 && _nbTotal > 0)
                {
                    if (_nbTotal < conf.totalMin)
                        _nbTotal = conf.totalMin;
                    //  album.Rare ? conf.intervalleR : conf.intervalle;
                    var ecouteMax = conf.getEcouteMax(album.Rare); // album.Rare ? conf.ecouteMaxR : conf.ecouteMax;

                    delta = (intervalle * (double)_nbTotal) / (ecouteMax * (double)_nbRead);
                    var coeff = (double)_nbTotal / (double)_nbRead;

                    //0.1 => 10
                    //0.9 => 1.11
                    //coeff -= 1; // 9  0.11
                    //var dminmax = intervalle - intervalleMin;

                    var _delta = borne(coeff, intervalle, intervalleMin); // intervalle - dminmax / (1 + (intervalleMin / dminmax) * coeff);

                    if (_delta < delta)
                        delta = _delta;
                    else
                    {
                    }

                }

                //misc.log("{3} {4}/{5} [{0}] {1} {2} ", name, lastRead.Name, lastRead.Pub, delta.ToString("#.##"), nbRead, nbTotal, name);


            }



            if (conf.extPente > 0)
            {
                var d0 = (DateTime.Now - pub2).TotalDays;
                var dl = conf.extDelta;
                if (dl == 0)
                {
                    dl = d0;
                }

                delta0 = d0 / conf.extPente;
                delta = delta0;
                //01/01/2014 ->01/01/2017
                //04/01/2017 -> 04/01/2014
                var dateLimitEcoule = DateTime.Now.AddDays(-dl);

                var deltaLimiteEcoule = (dateLimitEcoule - pub2).TotalDays;
                log.log("{0} {1}", delta.ToString("0.##"), deltaLimiteEcoule.ToString("0.##"));

                if (deltaLimiteEcoule > delta)
                    delta = deltaLimiteEcoule;

                if (delta < 1)
                    delta = 1;

                //if (delta > intervalle)
                //    delta = intervalle;
            }

            if (conf.limitRead && deltaLecture > intervalle)
            {
                //13 /10 ->7
                var _old = delta;

                delta += intervalle - deltaLecture;
                log.log("limitation par lecture {0} -> {1}", _old.ToString("0.##"), delta.ToString("0.##"));
            }




            if (delta < intervalleMin)
                delta = intervalleMin;

            if (delta > intervalle)
                delta = intervalle;



            DateTime limitFuture = pub2.AddDays(delta).truncateToMinute();
            DateTime nextDate = limitFuture;

            int nb = 0;
            int nblissage = 0;
            double deltaAtterrissage = intervalleMin;

            if (conf.noCollision)
                deltaAtterrissage = TimeSpan.FromDays(delta).TotalDays;
            if (conf.extPente > 0)
                deltaAtterrissage = TimeSpan.FromDays(delta0).TotalDays;

            if (conf.deltaConst)
            {
            }

            else
            {
                var _deltaMin = lastRead.Pub.AddDays(conf.deltaMin);
                var _deltaRab = limitFuture.AddDays(conf.deltaRab);
                double deltaattAux = 0;
                for (int i = indexLastRead + 1; i < count; i++)
                {
                    var t = list[i];

                    if (conf.deltaCheckSelected)
                    {
                        if (!t.Selected)
                            continue;
                        if (!t.Enabled)
                            continue;
                    }

                    if (t.Pub >= limitFuture)
                    {
                        nextDate = t.Pub;
                        nblissage++;
                        if (nextDate > limitFuture && nb > 0 && conf.noCollision)
                        {
                            var _deltaAtt = (nextDate - limitFuture).TotalDays / (double)nb;
                            if (_deltaAtt < deltaAtterrissage)
                            {
                                if (_deltaAtt > deltaattAux)
                                    deltaattAux = _deltaAtt;
                            }
                        }
                        if (t.Pub >= _deltaMin && t.Pub >= _deltaRab && nb >= conf.deltaNbMin && nblissage > conf.deltaNbRab)
                            break;
                    }
                    nb++;
                }

                if (nextDate > limitFuture && nb > 0 && conf.noCollision)
                {
                    if (deltaattAux > 0)
                        deltaAtterrissage = deltaattAux;
                    else
                    {
                        var _deltaAtt = (nextDate - limitFuture).TotalDays / (double)nb;
                        if (_deltaAtt < deltaAtterrissage)
                            deltaAtterrissage = _deltaAtt;
                    }

                    if (deltaAtterrissage > intervalleMin)
                        deltaAtterrissage = intervalleMin;
                }
            }

            var tsatt = timeSpan.FromDays(deltaAtterrissage);
            if (tsatt.TotalMinute < 1)
                tsatt = timeSpan.FromMinutes(1);

            string deltas = string.Format("{0} {1} {2}->{3}", deltaLastRead0.ToString("0.##"), delta0Corr.ToString("0.##"), delta.ToString("0.##"), tsatt.TotalDay.ToString("0.##"));

            log.log("{0} {1}/{2} ({3}/{4}) [{5}] {6} {7} ({8}) lecture={9} ", deltas, nbRead, nbTotal, nbReads, nbTotals, album.Album, lastRead.track.Name, lastRead.Pub, pub2, deltaLecture.ToString("#.##"));


            nb = 0;
            for (int i = indexLastRead + 1; i < count; i++)
            {

                var t = list[i];

                if (conf.deltaCheckSelected)
                {
                    if (!t.Selected)
                        continue;
                    if (!t.Enabled)
                        continue;
                }
                var dt = limitFuture.AddMinutes((int)(tsatt.TotalMinute * nb)).truncateToMinute();


                var _delta = (dt - lastRead.Pub2).TotalDays;
                if (t.Pub >= dt || conf.enabled == sortMode.reset)
                    eraseSort(t, false, true);
                else
                {
                    if (cumulMin > 0 && cumulMax > 0 && conf.extPente == 0)
                    {
                        var __delta = (dt - t.Pub).TotalDays;
                        if (__delta > cumulMin)
                        {
                            __delta = borneCumul(__delta, cumulMin, cumulMax);
                            dt = t.Pub.AddDays(__delta).truncateToMinute();
                        }
                    }

                    writeComment(t, dt, true, true, Conf.Date0, Conf.NewDate0);
                    nb++;
                }


            }


            for (int i = 0; i < count; i++)
            {
                var track = list[i];
                if (track.Pub > currentPub && track.Pub2 > track.Pub && track.Pub2 <= currentPub2)
                {
                    var aux = currentPub2.AddMinutes(1);
                    log.log("correction2 pub2 pour respect ordre {0} -> {1} {2}", track.Pub2, aux, track);
                    track.Pub2 = aux;
                }

                currentPub = track.Pub;
                currentPub2 = track.Pub2;
            }
            */
            #endregion


        }



        private void eraseSort(TrackSort track, string desc, DateTime dateMoy)
        {
            writeComment(track, track.Pub, desc, dateMoy);
            //bool go = apply;
            //if (!go)
            //{
            //    go = true;
            //    if (!checkSelected && !track.track.Selected)
            //        go = false;
            //}
            //if (!go)
            //{
            //    track.Pub2 = track.Pub;
            //    return;
            //}

            ////if (!force && !track.Selected)
            ////    return;
            //if (conf.canGoBack || conf.enabled == sortMode.reset)
            //{
            //    if (!track.Played && track.Enabled)
            //    {
            //        DateTime pub = track.Pub;
            //        if (track.Pub2 >= date0 && pub <date0)
            //        {
            //            log.log("**********{0} pub2 erase passe en dessous de Date0 {1}->{2} ({3})", track.Name, track.Pub2, track.Pub, Conf.Date0);
            //            repeches.Add(track);
            //            // track.Pub2 = TrackInfoItunes.Date0.AddSeconds(nbrepeches);
            //            if (pub < dateRepeche)
            //                dateRepeche = pub;
            //        }
            //        else if (track.Pub2 >=newDate0 && pub < newDate0)
            //        {
            //            log.log("**********{0} pub2 erase passe en dessous de NewDate0 {1}->{2} ({3})", track.Name, track.Pub2, track.Pub, Conf.NewDate0);
            //            repeches.Add(track);
            //            // track.Pub2 = TrackInfoItunes.Date0.AddSeconds(nbrepeches);
            //            if (pub < dateRepeche)
            //                dateRepeche = pub;
            //        }
            //    }

            //    //}
            //    //else
            //    //{
            //    if (track.Pub2 != track.Pub)
            //        nbModif++;
            //    track.Pub2 = track.Pub;
            //    //}
            //    track.track.BuildComment();
            //    // writeComment(track);
            //}
        }

        //private void applyPub(TrackSort track)
        //{
        //    writeComment(track, track.Pub2, false, true, Conf.Date0, Conf.NewDate0);
        //}

        private void writeComment(TrackSort track, DateTime dt, string desc, DateTime pubMoy)
        {
            dt = dt.truncateToMinute();
            //bool go = apply;
            //if (!go)
            //{
            //    go = true;
            //    if (checkSelected && !track.track.Selected)
            //        go = false;
            //}
            //if (!go)
            //{
            //    track.Pub2 = dt;
            //    return;
            //}



            //if (checkSelected && !track.Selected)
            //    return;


            if (conf.canGoBack)
            {
                if (!track.getPlayed(false) && track.Enabled)
                {
                    if (track.pub20 >= date0 && dt < date0)
                    {
                        if (conf.canGoBackButForceSelected)
                        {
                            log.log("**********{0} pub2 set passe en dessous de Date0 MAIS repéché {1}->{2} ({3})", track.Name, track.pub20, dt, date0);
                            nbRepecheForce++;
                            dt = date0.AddMinutes(nbRepecheForce);
                        }
                        else
                        {
                            log.log("**********{0} pub2 set passe en dessous de Date0 {1}->{2} ({3})", track.Name, track.pub20, dt, date0);
                            repeches.Add(track);
                        }
                        if (dt < dateRepeche)
                            dateRepeche = dt;
                    }

                    //else if (track.pub20 >= newDate0 && dt < newDate0)
                    //{

                    //    if (conf.canGoBackButForceSelected)
                    //    {
                    //        log.log("**********{0} pub2 set passe en dessous de NewDate0 MAIS repéché {1}->{2} ({3})", track.Name, track.pub20, dt, date0);
                    //        nbRepecheForce++;
                    //        dt = date0.AddMinutes(nbRepecheForce);
                    //    }
                    //    else
                    //    {
                    //        log.log("**********{0} pub2 set passe en dessous de NewDate0 {1}->{2} ({3})", track.Name, track.pub20, dt, newDate0);
                    //        repeches.Add(track);
                    //    }

                    //    if (dt < dateRepeche)
                    //        dateRepeche = dt;

                    //}
                }
            }
            else
            {
                if (dt == track.pub20)
                {
                    logDebug.logNoDate("\t{0} {1} {2}\t{3}", track.Pub.ToString(DATE_FORMAT), dt.ToString(DAY_FORMAT), desc, track.Name);
                    return;
                }
                else if (dt < track.pub20)
                {
                    logDebug.logNoDate("\t{0} {1}<= {2} {3}\t{4}", track.Pub.ToString(DATE_FORMAT), track.pub20.ToString(DAY_FORMAT), dt.ToString(DAY_FORMAT), desc, track.Name);
                    return;
                }
            }
            var delta = (dt - track.Pub).TotalDays;
            var delta0 = (track.pub20 - track.Pub).TotalDays;

            var deltaMoy0 = (track.pub20 - pubMoy).TotalDays;
            var deltaMoy1 = (dt - pubMoy).TotalDays;


            var sbDelta = new StringBuilder();
            sbDelta.Append("(");
            var strD0 = delta0.ToString("#.#");
            var strD1 = delta.ToString("#.#");

            var strDM0 = deltaMoy0.ToString("#.#");
            var strDM1 = deltaMoy1.ToString("#.#");
            if (delta0 > 0)
            {
                if (delta0 > 0)
                    sbDelta.Append(strD0);
                //sbDelta.Append("|");
                ////  if (deltaMoy0 > 0)
                //sbDelta.Append(strDM0);
            }
            if (strD0 != strD1)
            {
                sbDelta.Append("->");
                if (delta > 0)
                    sbDelta.Append(strD1);
                //sbDelta.Append("|");
                //if (deltaMoy1 > 0)
                //    sbDelta.Append(strDM1);
            }
            //sbDelta.Append("|");
            //if (deltaMoy0 != 0)
            //{
            //    sbDelta.Append(strDM0);

            //    if (strDM1 != strDM0)
            //    {
            //        sbDelta.Append("->");
            //        if (deltaMoy1 > 0)
            //            sbDelta.Append(strDM1);
            //    }
            //}
            sbDelta.Append(")");

            while (sbDelta.Length < 22)
                sbDelta.Append(" ");

            var strDelta = sbDelta.ToString();

            if (track.pub20 != dt)
            {

                if (track.pub20.truncateToMinute() != dt)
                {
                    //if (track.track.Selected)
                    //{
                    nbModif++;
                    var d = System.Math.Abs((track.pub20 - dt).TotalHours);
                    if (d > 1)
                        nbModifPertinent++;

                    var dd = System.Math.Abs((track.pub20 - dt).TotalMinutes);
                    if (dd <= 5)
                    {
                        log.log("poil de cul {0}", track);
                    }

                    // var str = string.Format("\t{0}\t{1}=>\t{2}({3})\t{4} {5}", track.Pub, track.pub20, dt, strDelta, desc, track.Name);
                    var str = string.Format("\t{0} {1}{2}\t{3}\t{4}", track.Pub.ToString(DATE_FORMAT), dt.ToString(DAY_FORMAT), strDelta, desc, track.Name); // ", track.pub20, dt, strDelta, desc, track.Name);
                    if (track.track.Selected)
                        log.logNoDate(str);
                    else
                        logDebug.logNoDate(str);
                    //}
                }
                track.Pub2 = dt;
            }
            else if (track.pub20 > track.Pub)
            {
                // if (track.track.Selected)
                var str = string.Format("\t{0} {1}{2}\t{3}\t{4}", track.Pub.ToString(DATE_FORMAT), dt.ToString(DAY_FORMAT), strDelta, desc, track.Name);
                // var str = string.Format("\t{0}\t{1}({2})\t{3} {4}", track.Pub, track.pub20, strDelta, desc, track.Name);
                if (track.track.Selected)
                    log.logNoDate(str);
                else
                    logDebug.logNoDate(str);
            }
            else
            {
                var sbBlanc = new StringBuilder();

                var str = string.Format("\t{0} {1}{2}\t{3}\t{4}", track.Pub.ToString(DATE_FORMAT), Regex.Replace(dt.ToString(DAY_FORMAT), ".", " "), strDelta, desc, track.Name);
                // var str = string.Format("\t{0} ({1})\t{2} {3}", track.Pub, strDelta, desc,track.Name);
                logDebug.logNoDate(str);
            }


            track.track.BuildComment();
            //  track.track.BuildComposer(); 
        }

        private static double borne(double coeff, double intervalle, double intervalleMin, double intervalleMin0)
        {
            double _delta = 0;
            if (intervalle < intervalleMin)
                intervalleMin = intervalle;
            if (coeff <= 1)
                _delta = coeff * intervalleMin;
            else
            {
                coeff -= 1; // 9  0.11
                var dminmax = intervalle - intervalleMin;
                _delta = intervalle - dminmax / (1 + (intervalleMin / dminmax) * coeff);
            }

            if (_delta < intervalleMin0)
                _delta = intervalleMin0;
            return _delta;
        }

        private static double borneCumul(double delta, double cumulMin, double cumulMax)
        {
            if (cumulMin < 0 || cumulMax < 0)
                return delta;
            if (delta < cumulMin)
                return delta;
            var coeff = delta / cumulMin;
            return borne(coeff, cumulMax, cumulMin, cumulMin);
        }

        private double _coeffLecture = -1;
        public double getCoeffLecture(TrackInfoItunes track)
        {
            if (_coeffLecture > 0)
                return _coeffLecture;
            int count = list.Count;
            int index = -1;
            for (int i = 0; i < count; i++)
            {
                if (list[i].track == track)
                {
                    index = i;
                    break;
                }
            }
            if (index < 0)
                return 0;

            var _histo = conf.getHisto(track.Rare);

            if (_histo > 0)
            {
                int nbTotal = 0;
                int nbRead = 0;
                double histo = _histo;




                DateTime limit = track.Pub.AddDays(-histo);
                for (int i = index - 1; i >= 0; i--)
                {
                    var t = list[i];
                    var dt = t.Pub;
                    if (dt < limit && nbTotal >= conf.totalMin)
                        break;

                    if (t.getPlayed(true))
                        nbRead++;


                    nbTotal++;

                }

                if (nbTotal > 0)
                    _coeffLecture = nbRead / nbTotal;
                else
                    return 0;
            }
            else
                return 0;

            return _coeffLecture;



        }
    }
}]]></content>
  </file>
  <file path="\pdb.podcast\Tuning\Sort.cs">
    <content><![CDATA[using System.Xml;
using pdb.util;
using System;
using System.Collections.Generic;
using pdb.podcast.Albums;

namespace pdb.podcast.Tuning.Sort
{
    public enum sortMode
    {
        no,
        reset,
        white,
        once,
        once_all,
        all,
        //  histo
    }

    public enum histoMode
    {
        /// <summary>
        /// Démarrage de l'histo sur Date0
        /// </summary>
        fix,
        /// <summary>
        /// Démarrage de l'histo sur le premier sélectionné
        /// </summary>
        selected,
        /// <summary>
        /// Démarrage de l'histo sur le dernier lu
        /// </summary>
        read

    }
    public class SortItem : SelectParamBase
    {
        /// <summary>
        /// nom de l'album ou suite d'albums
        /// </summary>
        new public List<string> name = new List<string>();

        public sortMode enabled;
        public bool checkBefore;
        public bool selectionBefore;

        ///// <summary>
        ///// prise en compte des longs podcasts
        ///// </summary>
        //public double dureeMin;
        /// <summary>
        /// intervalle max entre deux écoutes (une semaine)
        /// </summary>
        private double intervalle = 7;
        /// <summary>
        /// intervalle min entre deux écoutes (un jour)
        /// </summary>
        private double intervalleMin = 1;
        /// <summary>
        /// intervalle standard entre deux écoutes (un jour)
        /// </summary>
        private double intervalleMin0 = 1;
        /// <summary>
        /// intervalle max entre deux écoutes pour un rare
        /// </summary>
        private double intervalleR;
        /// <summary>
        /// intervalle min entre deux écoutes pour un rare
        /// </summary>
        private double intervalleMinR = 7;
        /// <summary>
        /// intervalle standard entre deux écoutes pour un rare
        /// </summary>
        private double intervalleMinR0 = 7;
        /// <summary>
        /// coeff intervalle par heure du dernier lu
        /// </summary>
        public double rapportDuree = 0;
        /// <summary>
        /// coeff intervalle par heure du dernier lu rare
        /// </summary>
        public double rapportDureeR = 0;
        /// <summary>
        /// On prend en compte la durée pour augmenter le coeff
        /// </summary>
        public bool dureeCoeff;
        /// <summary>
        /// On prend en compte la durée pour augmenter les bornes
        /// </summary>
        public double dureeBorne;
        /// <summary>
        /// On prend en compte la durée pour augmenter les bornes mais on n'augmente que le delta
        /// </summary>
        public double dureeBorneDelta;
        /// <summary>
        /// Densité en-dessous de laquelle l'album est considéré comme rare
        /// </summary>
        public double densiteMin = 0.1;
        /// <summary>
        /// On utilise la durée dans le calcul d'intervalleMin; 
        /// </summary>
        public bool minUseDuree = true;
        /// <summary>
        /// On utilise la durée dans le calcul d'intervalleMin pour les rares
        /// </summary>
        public bool minUseDureeR = true;
        /// <summary>
        /// On utilise la durée dans le calcul d'intervalleMax 
        /// </summary>
        public bool maxUseDuree = true;
        ///  <summary>
        /// On utilise la durée dans le calcul d'intervalleMax pour les rares
        /// </summary>
        public bool maxUseDureeR = true;
        ///// <summary>
        ///// nb d'écoutes maximum dans l'intervalle (typiquement 5)
        ///// </summary>
        //private double ecouteMax;
        ///// <summary>
        ///// nb d'écoutes maximum dans l'intervalle pour un rare
        ///// </summary>
        //private double ecouteMaxR;
        /// <summary>
        /// durée sur laquelle on fait des stats pour calculer la fréquence d'écoute
        /// </summary>
        private double histo;
        /// <summary>
        /// durée sur laquelle on fait des stats pour calculer la fréquence d'écoute pour un rare
        /// </summary>
        private double histoR;
        /// <summary>
        /// nombre d'items pris en comptepour l'historique
        /// </summary>
        private int nbHisto;
        /// <summary>
        /// nombre d'items pris en comptepour l'historique pour un rare
        /// </summary>
        private int nbHistoR;
        /// <summary>
        /// Dans le calcul de delta entre deux à suivre : nombre minimum d'éléments à prendre en compte
        /// </summary>
        public int deltaNbMin;
        /// <summary>
        /// Dans le calcul de delta entre deux à suivre : rab d'éléments à prendre en compte
        /// </summary>
        public int deltaNbRab;
        /// <summary>
        /// Dans le calcul de delta entre deux à suivre : intervalle minimum à prendre en compte en jours
        /// </summary>
        public double deltaMin;
        /// <summary>
        /// Dans le calcul de delta entre deux à suivre : rab d'intervalle à prendre en compte
        /// </summary>
        public double deltaRab;
        /// <summary>
        /// Dans le calcul de delta entre deux à suivre : rab d'intervalle à prendre en compte, en proportion de l'écart initial
        /// </summary>
        public double coeffRab;
        /// <summary>
        /// Ecart min entre deux podcasts non rares à l'atterrissage
        /// </summary>
        public double atterrissageMin = 0.5;

        /// <summary>
        /// Ecart min absolu
        /// </summary>
        private double atterrissageMin0 = 0.5;
        /// <summary>
        /// Ecart min entre deux podcasts rares à l'atterrissage
        /// </summary>
        public double atterrissageMinR = 1;

        /// <summary>
        /// Détermination de la densité à venir sur N jours
        /// </summary>
        private List<double> futur = new List<double>();
        /// <summary>
        /// Détermination de la densité à venir sur N jours pour les rares
        /// </summary>
        public List<double> futurR = new List<double>();
        /// <summary>
        /// Pour calcul horizon, période globale à prenre en compte
        /// </summary>
        public double futurh = 365;
        /// <summary>
        /// Pour calcul horizon, périodes à prenre en compte
        /// </summary>
        private List<double> futurhl = new List<double>();

        /// <summary>
        /// Pour calcul horizon, périodes à prenre en compte pour les rares
        /// </summary>
        private List<double> futurhlR = new List<double>();

        /// <summary>
        /// Partie futur antérieure. Permet de limiter les grosses moyennes; à la dernire occurance, on prend en compte une durée avant
        /// </summary>
        public double futura = 0;

        /// <summary>
        /// Dans la correction du delta par rapport à la proportion de lus, une tolérance pour pouvoir par exemple laisser courir pendant une semaine
        /// </summary>
        public double tolerance = 35;

        /// <summary>
        /// Dans la correction du delta par rapport à la proportion de lus, une tolérance pour pouvoir par exemple laisser courir pendant un mois 
        /// </summary>
        public double toleranceR = 35;

        /// <summary>
        /// Dans le calcul de la tolérance, nb de morceaux à prendre en compte; 
        /// </summary>
        public int nbTolerance;

        /// <summary>
        /// Dans le calcul de la tolérance, nb de morceaux à prendre en compte pour les rares; 
        /// </summary>
        public int nbToleranceR;

        /// <summary>
        /// si dépassement on rappelle
        /// </summary>
        public bool toleranceNegative;

        /// <summary>
        /// pas d'empilage des tracks repoussés
        /// </summary>
        public bool noCollision;
        /// <summary>
        /// recalcul peut entrainer une date plus récente
        /// </summary>
        public bool canGoBack;
        /// <summary>
        /// recalcul peut entrainer une date plus récente, mais si ça le rend non séléctionné, on bricole pour qu'il soit quand même selectionné
        /// </summary>
        public bool canGoBackButForceSelected;
        /// <summary>
        /// écart constant entre les poscasts repoussés
        /// </summary>
        public bool deltaConst;

        /// <summary>
        /// Date0 lors de l'écoute du dernier podcast externe
        /// </summary>
        public DateTime extLast0;
        /// <summary>
        /// Décalage entre date du podcast supplémentaire et la date0
        /// </summary>
        public double extDelta;
        /// <summary>
        /// coefficient permettant le calcul de la prochaine date en fonction du retard entre la date0 et maintenant
        /// </summary>
        public double extPente;
        /// <summary>
        /// check de la date de dernière lecture
        /// </summary>
        public bool limitRead;
        ///// <summary>
        ///// Dans le calcul de delta ne pas inclure les non-selectionnés
        ///// </summary>
        //public bool deltaCheckSelected;
        /// <summary>
        /// handicap pour les nouveaux podcasts
        /// </summary>
        public int totalMin;
        /// <summary>
        /// Coefficient de rappel vers la valeur initiale pour les lus
        /// </summary>
        public double elastique = 1;

        /// <summary>
        /// Coefficient de rappel vers la valeur initiale pour les non lus
        /// </summary>
        public double elastique2 = 1;

        /// <summary>
        /// Cumul max de retard pour les non-rares
        /// </summary>
        public double cumulMax = -1;

        /// <summary>
        /// Cumul max de retard pour les rares
        /// </summary>
        public double cumulMaxR = -1;

        /// <summary>
        /// Cumul min de retard pour les non-rares
        /// </summary>
        public double cumulMin = -1;

        /// <summary>
        /// Cumul min de retard pour les rares
        /// </summary>
        public double cumulMinR = -1;

        /// <summary>
        /// Pas d'amortissement pour les vieux podcasts, vieux en jours par rapport à la date0
        /// </summary>
        public int deltaConstLate = -1;

        /// <summary>
        /// Utilisation de track virtuels pour éviter accidents (tracks manquants)
        /// </summary>
        public bool useVirtuel;

        /// <summary>
        /// Utilisation de track virtuels pour affectation pub2
        /// </summary>
        public bool useVirtuel2;

        /// <summary>
        /// Dès la pub2 remise à zero, les suivants aussi
        /// </summary>
        public bool erasedDone;
        /// <summary>
        /// On recalcule tout
        /// </summary>
        public bool recheck;
        /// <summary>
        /// En mode vacance on tasse moins les tracks. implique !recheck
        /// </summary>
        public bool vacances;
        /// <summary>
        /// on fait comme avant
        /// </summary>
        public bool oldMode;

        /// <summary>
        /// Dans le coeff, on prend en compte la densité
        /// </summary>
        public bool coeffDensite;


        /// <summary>
        /// On utilise des intervalles en fonction de la répartition effective ( et non pas déclarative ) des tracks. En clair les intervalles de 7j ou de 1j sont plus finement évalués
        /// </summary>
        public bool intervalleVar;
        /// <summary>
        /// Proportion entre 0 et 1 de l'atterrissage par rapport à intervalleMin
        /// </summary>
        public double atterrissageMinVar = 1;

        /// <summary>
        /// Détermination plutôt que déclaration de intervalleMin0
        /// </summary>
        private bool useintervalleFactMin;

        /// <summary>
        /// on limite aux valeurs "rare" (14j * duree) 
        /// </summary>
        private bool intervalleBorne;
        /// <summary>
        /// Un petit coup de rallonge pour les bientôt finis
        /// </summary>
        public bool honneurAuxVieux;
        /// <summary>
        /// On n'applique l'horizon qu'à la fin
        /// </summary>
        public bool horizonFinal;
        /// <summary>
        /// Pas de prise en compte de l'horizon
        /// </summary>
        public bool noHorizon;
        /// <summary>
        /// l'interpolation n'est pas linéaire mais au carré entre 0 et un et asymptotique vers 2 après
        /// </summary>
        public bool mixCarre;

        /// <summary>
        /// on est assymptotique après 1
        /// </summary>
        public bool mixtan;
        /// <summary>
        /// Aggrégation de la densite et de la duree positionnement du variable
        /// </summary>
        private bool mixVarDuree;

        /// <summary>
        /// Prend le plus grand entre mixvarDuree et non
        /// </summary>
        private bool mixVarDureeMax;

        /// <summary>
        /// Arret quand la date0 change
        /// </summary>
        public bool stopOnOffset;

        /// <summary>
        /// Arret quand une pub2 change
        /// </summary>
        public bool stopOnPub2;

        /// <summary>
        /// Coeff > 1 appliqué au rapport en vue de déterminer l'horizon. Permet de diminuer l'horiszon et nous donner un peu d'air - marre des séries à +10j
        /// </summary>
        public double rapportHorizonCoeff = 1.0;
        /// <summary>
        /// Coeff > 1 appliqué au rapport en vue de déterminer l'horizon pour les rares. Permet de diminuer l'horiszon et nous donner un peu d'air - marre des séries à +10j
        /// </summary>
        public double rapportHorizonCoeffR = 1.0;

        /// <summary>
        /// en cas de plusieurs podcasts dans la même journée, durée min pour en compter plusieurs en min
        /// </summary>
        public double collisionDuree = -1;

        /// <summary>
        /// Moyenne limite
        /// </summary>
        public double limitMoy = -1;

        /// <summary>
        /// Delta limite
        /// </summary>
        public double limitDelta = -1;



        public histoMode histoMode;

        private ITrackSelector selector;

        public SortItem()
        {
        }

        public SortItem(XmlElement parent, XmlElement node)
            : base(parent, node)
        {

            if (node == null)
                return;
            var str = "";
            builds("name", v => str = v);

            if (!string.IsNullOrEmpty(str))
            {
                foreach (string album in str.Split('|'))
                {
                    if (!string.IsNullOrWhiteSpace(album))
                        name.Add(album.ToLowerWithoutDiacritics());
                }
            }

            builds("enabled", v => str = v);

            if (!string.IsNullOrEmpty(str))
                enabled = (sortMode)Enum.Parse(typeof(sortMode), str);

            buildd("dureeMin", v => dureeMin = v);
            buildd("intervalle", v => intervalle = v);
            buildd("intervalleMin", v => intervalleMin = v);
            buildd("intervalleMin0", v => intervalleMin0 = v);
            buildd("intervalleR", v => intervalleR = v);
            buildd("intervalleMinR", v => intervalleMinR = v);
            buildd("intervalleMinR0", v => intervalleMinR0 = v);

            buildd("atterrissageMin", v => atterrissageMin = v);
            buildd("atterrissageMinR", v => atterrissageMinR = v);
            buildd("histo", v => histo = v);
            buildd("histoR", v => histoR = v);
            buildi("nbHisto", v => nbHisto = v);
            buildi("nbHistoR", v => nbHistoR = v);

            buildList("futur", futur);
            buildList("futurhl", futurhl);
            buildList("futurhlR", futurhlR);
            buildd("futura", v => futura = v);
            buildList("futurR", futurR);
            //buildd("ecouteMax", v => ecouteMax = v);
            //buildd("ecouteMaxR", v => ecouteMaxR = v);

            buildDate("extLast0", v => extLast0 = v);
            buildd("extDelta", v => extDelta = v);
            buildd("extPente", v => extPente = v);




            buildb("deltaConst", v => deltaConst = v);
            buildb("toleranceNegative", v => toleranceNegative = v);
            buildi("deltaConstLate", v => deltaConstLate = v);
            buildb("useVirtuel", v => useVirtuel = v);
            buildb("useVirtuel2", v => useVirtuel2 = v);

            buildb("noCollision", v => noCollision = v);
            buildb("checkBefore", v => checkBefore = v);
            buildb("selectionBefore", v => selectionBefore = v);
            buildb("limitRead", v => limitRead = v);
            buildb("canGoBack", v => canGoBack = v);
            // buildb("deltaCheckSelected", v => deltaCheckSelected = v);

            #region lissage
            buildi("deltaNbMin", v => deltaNbMin = v);
            buildi("deltaNbRab", v => deltaNbRab = v);

            buildd("deltaMin", v => deltaMin = v);
            buildd("deltaRab", v => deltaRab = v);

            #endregion

            builds("histoMode", v => str = v);
            histoMode = (histoMode)Enum.Parse(typeof(histoMode), str);

            buildi("totalMin", v => totalMin = v);

            buildd("elastique", v => elastique = v);
            buildd("elastique2", v => elastique2 = v);



            buildd("cumulMin", v => cumulMin = v);
            buildd("cumulMinR", v => cumulMinR = v);
            buildd("cumulMax", v => cumulMax = v);
            buildd("cumulMaxR", v => cumulMaxR = v);
            buildd("rapportDuree", v => rapportDuree = v);
            buildd("rapportDureeR", v => rapportDureeR = v);
            buildd("coeffRab", v => coeffRab = v);


            buildb("dureeCoeff", v => dureeCoeff = v);
            buildd("dureeBorne", v => dureeBorne = v);
            buildd("dureeBorneDelta", v => dureeBorneDelta = v);
            buildd("densiteMin", v => densiteMin = v);


            buildb("minUseDuree", v => minUseDuree = v);
            buildb("maxUseDuree", v => maxUseDuree = v);

            buildb("minUseDureeR", v => minUseDureeR = v);
            buildb("maxUseDureeR", v => maxUseDureeR = v);

            buildb("erasedDone", v => erasedDone = v);
            buildb("recheck", v => recheck = v);
            buildb("vacances", v => vacances = v);
            buildb("oldMode", v => oldMode = v);

            buildd("tolerance", v => tolerance = v);
            buildd("toleranceR", v => toleranceR = v);

            buildi("nbTolerance", v => nbTolerance = v);
            buildi("nbToleranceR", v => nbToleranceR = v);

            buildb("coeffDensite", v => coeffDensite = v);
            buildb("intervalleVar", v => intervalleVar = v);
            buildd("atterrissageMinVar", v => atterrissageMinVar = v);
            buildb("useintervalleFactMin", v => useintervalleFactMin = v);
            buildb("intervalleBorne", v => intervalleBorne = v);
            buildb("honneurAuxVieux", v => honneurAuxVieux = v);
            buildb("horizonFinal", v => horizonFinal = v);
            buildb("noHorizon", v => noHorizon = v);
            buildd("atterrissageMin0", v => atterrissageMin0 = v);
            buildb("mixCarre", v => mixCarre = v);
            buildb("mixtan", v => mixtan = v);
            buildb("mixVarDuree", v => mixVarDuree = v);
            buildb("mixVarDureeMax", v => mixVarDureeMax = v);
            buildb("stopOnOffset", v => stopOnOffset = v);
            buildb("stopOnPub2", v => stopOnPub2 = v);

            buildd("rapportHorizonCoeff", v => rapportHorizonCoeff = v);
            buildd("rapportHorizonCoeffR", v => rapportHorizonCoeffR = v);

            buildd("collisionDuree", v => collisionDuree = v);
            buildd("limitMoy", v => limitMoy = v);
            buildd("limitDelta", v => limitDelta = v);

            this.selector = new TrackSelector(this);
        }
        /// <summary>
        /// donne l'intervalle plafond
        /// </summary>
        /// <param name="rare">album rare</param>
        /// <param name="duree">duree du dernier track en heures</param>
        /// <returns></returns>
        public double getIntervalle(bool rare, double duree, double intervalleMin0)
        {
            var _intervalle = rare && intervalleR > 0 ? intervalleR : intervalle;
            var _rapportDuree = rare ? rapportDureeR : rapportDuree;
            return getIntervalle(_intervalle, _rapportDuree, duree, intervalleMin0);
        }



        private double getIntervalle(double intervalle, double rapportDuree, double duree, double intervalleMin0)
        {
            var ret0 = intervalle;
            if (dureeBorne == 0 && dureeBorneDelta == 0)
                return intervalle;
            var ret1 = ret0;
            var ret2 = ret0;
            var coeff = duree * rapportDuree;
            if (coeff > 1)
            {
                if (dureeBorne > 0)
                {

                    // ex coeff =2
                    // avec dureeBornee = 0 => ret0
                    // avec dureeBornee = 0.1 =>0.9 +0.2    =>1.1 *ret0
                    // avec dureeBorne = 0.5 => 0.5 +1      =>1.5 *ret0
                    // avec dureeBorne = 0.9 => 0.1+1.8     =>1.9 *ret0
                    ret1 = ret0 * ((1 - dureeBorne) + coeff * dureeBorne);

                }
                if (dureeBorneDelta > 0)
                {
                    var delta = ret0 - intervalleMin0;
                    delta *= ((1 - dureeBorneDelta) + coeff * dureeBorneDelta);
                    ret2 = intervalleMin0 + delta;
                }
            }

            if (ret1 > ret2)
                return ret1;
            else
                return ret2;


        }

        private double getMix(double i, double ir, double X, double rapportDuree, double duree)
        {
            var coeff = rapportDuree * duree;
            if (coeff > 1)
                X *= coeff;
            return getMix(i, ir, X);
        }
        /// <summary>
        /// Corrige le rapport pour determination de l'horizon 
        /// </summary>
        /// <param name="rapport"></param>
        /// <param name="X"></param>
        /// <returns></returns>
        public double getHorizonCorrec(double rapport, double X)
        {
            double r = rapportHorizonCoeffR;
            if (X < 0)
                r = rapportHorizonCoeff;
            //else if (X > 1)
            //{
            //}
            else
                r = rapportHorizonCoeff + X * (rapportHorizonCoeffR - rapportHorizonCoeff);
            // r = getMix(rapportHorizonCoeff, rapportHorizonCoeffR, X);
            if (r < 1)
                r = 1;
            var rapportModif = r * rapport;
            if (rapportModif > 1)
                rapportModif = 1;

            return rapportModif;

        }

        private double getMix(double i, double ir, double X)
        {
            if (X <= 0)
                return i;
            else if (X >= 1 && intervalleBorne)
                return ir;
            if (X <= 1 || !mixtan)
            {
                if (mixCarre)
                    return i + X * X * (ir - i);
                return i + X * (ir - i);
            }
            return (2 * ir) - ir / X;

            //if (mixCarre || mixCarreMax)
            //{
            //    if (X <= 1)
            //        ret1 = i + X * X * (ir - i);
            //    // 1=> ir v = 2 *(ir-i)
            //    // y= ax2
            //    else
            //        ret1 = (2 * ir) - ir / X;
            //    if (!mixCarreMax)
            //        return ret1;
            //}
            //if (!mixCarre || mixCarreMax)
            //    ret0 = i + X * (ir - i);

            //if (!mixCarreMax)
            //    return ret0;

            //return System.Math.Max(ret0, ret1); 

            // avec i=2 et ir =1 
            //X=0.1 => 2+ 0.01*-1=> 1.99 correct
            //X=0.9 => 2 -0.81 = 1.19
            //X=1.1=> 2- 1/1.1

        }
        public double getIntervalleVar(bool rare, double X, double duree, double intervalleMin0)
        {
            var _rapportDuree = rare ? rapportDureeR : rapportDuree;
            var ret0 = intervalle;
            var ret1 = intervalle;
            if (mixVarDuree || mixVarDureeMax)
            {
                ret0 = getMix(intervalle, intervalleR, X, _rapportDuree, duree);
                if (!mixVarDureeMax)
                    return ret0;
            }
            if (!mixVarDuree || mixVarDureeMax)
            {
                double _intervalle = getMix(intervalle, intervalleR, X);
                ret1 = getIntervalle(_intervalle, _rapportDuree, duree, intervalleMin0);
                if (!mixVarDureeMax)
                    return ret1;
            }
            return pdb.util.Math.Max(ret0, ret1);
        }

        private double getCoeffDuree(double rapportDuree, double duree)
        {
            var coeff = duree * rapportDuree;
            if (coeff > 1)
                return coeff;
            return 1;
        }

        public double getRapport(bool rare, double duree)
        {
            var rapport0 = rare ? intervalleR / intervalleMinR0 : intervalle / intervalleMin0;
            var coeff = rare ? duree * rapportDureeR : duree * rapportDuree;
            if (coeff > 1)
                return rapport0 * coeff;
            return rapport0;
        }

        public bool applyDuree(bool min, bool rare)
        {
            if (dureeCoeff)
                return false;
            bool use = rare ? (min ? minUseDureeR : maxUseDureeR) : (min ? minUseDuree : maxUseDuree);
            return use;
        }
        public double getIntervalleMin(bool rare, double duree)
        {
            var ret = rare && intervalleMinR > 0 ? intervalleMinR : intervalleMin;
            if (applyDuree(true, rare))
            {
                var coeff = rare ? duree * rapportDureeR : duree * rapportDuree;
                if (coeff > 1)
                    ret *= coeff;
            }
         
            return ret;
        }

      

        public double getIntervalleMinVar(bool rare, double X, double duree)
        {
            var ret0 = intervalleMin;
            var ret1 = intervalleMin;
            if (mixVarDureeMax || mixVarDuree)
            {
                if (applyDuree(true, rare))
                {
                    var _rapportDuree = rare ? rapportDureeR : rapportDuree;
                    ret0 = getMix(intervalleMin, intervalleMinR, X, rapportDuree, duree);
                }
                else
                    ret0 = getMix(intervalleMin, intervalleMinR, X);

                if (!mixVarDureeMax)
                    return ret0;

            }
            if (mixVarDureeMax || !mixVarDuree)
            {
                ret1 = getMix(intervalleMin, intervalleMinR, X);
                if (applyDuree(true, rare))
                {
                    var coeff = rare ? duree * rapportDureeR : duree * rapportDuree;
                    if (coeff > 1)
                        ret1 = ret1 * coeff;
                }
                if (!mixVarDureeMax)
                    return ret1;
            }

            return System.Math.Max(ret0, ret1);

        }

        public double getCoeff(bool rare, double coeff0, double duree)
        {

            var coeff = rare ? duree * rapportDureeR : duree * rapportDuree;
            if (coeff > 1)
                return coeff0 * coeff;

            return coeff0;

        }

        public List<double> getFutur(bool rare)
        {
            return rare ? futurR : futur;
        }

        public List<double> getFuturHList(bool rare)
        {
            return rare ? futurhlR : futurhl;
        }

        public double getTolerance(bool rare)
        {
            return rare ? toleranceR : tolerance;
        }

        public int getNbTolerance(bool rare)
        {
            return rare ? nbToleranceR : nbTolerance;
        }


        public double getIntervalleMin0(bool rare)
        {
            var ret0 = rare && intervalleMinR0 > 0 ? intervalleMinR0 : intervalleMin0;
            return ret0;
        }

        public double getIntervalleMin0Var(double X, double intervalleFactMin)
        {
            if (useintervalleFactMin)
                return intervalleFactMin;
            return getMix(intervalleMin0, intervalleMinR0, X);
        }


        public double getatterrissageMinVar(double X, double intervalleFactMin)
        {
            if (useintervalleFactMin)
                return intervalleFactMin * atterrissageMinVar;
            var ret = getMix(atterrissageMin, atterrissageMinR, X);
            if (ret < atterrissageMin0)
                ret = atterrissageMin0;
            return ret;

        }
        public double getHisto(bool rare)
        {
            return rare && histoR > 0 ? histoR : histo;
        }
        public int getNbHisto(bool rare)
        {
            return rare && nbHisto > 0 ? nbHistoR : nbHisto;
        }
        //public double getEcouteMax(bool rare)
        //{
        //    return rare && ecouteMaxR > 0 ? ecouteMaxR : ecouteMax;
        //}
        ///// <summary>
        ///// Donne le recalage max par morceau pour atterissage: typiquement pour un non-rare :0.5, pour un rare, disons 1
        ///// </summary>
        ///// <param name="rare"></param>
        ///// <returns></returns>
        //public double getRecupMax(bool rare)
        //{
        //    double ini = getIntervalleMin0(rare);
        //    if (rare)
        //        return ini - atterrissageMinR;
        //    else
        //        return ini - atterrissageMin; 
        //}

        public double getAtterrissageMin(bool rare)
        {
            return rare ? atterrissageMinR : atterrissageMin;
        }

        internal bool select(ISelectable album)
        {
            return selector.select(album);
        }

        public double getCumulMax(bool rare)
        {
            return rare && cumulMaxR > 0 ? cumulMaxR : cumulMax;
        }
        public double getCumulMin(bool rare)
        {
            return rare && cumulMinR > 0 ? cumulMinR : cumulMin;
        }


    }
    public class Sort : SortItem
    {
        private List<SortItem> items = new List<SortItem>();
        private List<SortItem> rules = new List<SortItem>();

        public SortItem getItem(string key)
        {
            foreach (SortItem g in items)
            {
                if (g.name.Contains(key))
                    return g;

            }
            return null;
        }

        public SortItem getRule(TrackAlbum album)
        {
            foreach (SortItem r in rules)
            {
                if (r.select(album))
                    return r;
            }

            return null;
        }
        public Sort()
        {

        }

        public Sort(XmlElement node)
            : base(null, node)
        {
            if (node == null)
                return;
            foreach (XmlNode sub in node.ChildNodes)
            {
                if (sub is XmlElement)
                {
                    if (sub.Name == "album")
                    {
                        items.Add(new SortItem(node, sub as XmlElement));
                    }
                    else if (sub.Name == "rule")
                    {
                        rules.Add(new SortItem(node, sub as XmlElement));
                    }
                }
            }


        }




    }
}]]></content>
  </file>
</db>
