<db path="C:\Bernard\db1\pdb4">
  <file path="\pdb.podcast\Feed.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using pdb.util;
using pdb.podcast.Tuning;
using pdb.podcast.Report;
using Math = System.Math; 

namespace pdb.podcast
{
    /// <summary>
    /// Un flux podcast (Un album)
    /// </summary>
    public class Feed
    {
        /// <summary>
        /// Liste des morceaux d'un album de podcasts
        /// </summary>
        private List<TrackInfoItunes> tracks = new List<TrackInfoItunes>();

        /// <summary>
        /// Nom de l'album
        /// </summary>
        private string name;

        /// <summary>
        /// Album de type info
        /// </summary>
        private bool info;
        public bool Info { get { return info; } }

        /// <summary>
        /// Album rare
        /// </summary>
        private bool rare;
        public bool Rare { get { return rare; } }
        public Feed(string name)
        {
            this.name = name;
        }

        public string Name { get { return name; } }
        public int Count { get { return tracks.Count; } }

        /// <summary>
        /// D�finition du plus r�cent
        /// </summary>
        /// <param name="otrack"></param>
        public bool check(TrackInfoItunes otrack)
        {
            //if (otrack.Pub.DayOfYear !=1)
            //{
            //var found tracks.Find(t=>t.Pub == otrack.Pub))
            //{
            //}
            //}
            info = otrack.Info;
            rare = otrack.Rare;
            tracks.Add(otrack);
            return true;
        }




        public List<TrackInfoItunes> Tracks
        {
            get
            {
                var list = new List<TrackInfoItunes>(tracks);
                return list;
            }
        }


        //public ICollection<TrackInfoItunes> getTracks(int level, int nbMax, float feedDuration, bool histo)
        //{
        //    TimeSpan currentDuration = new TimeSpan();
        //    var DurationMax = TimeSpan.FromMinutes(feedDuration);
        //    int rating = level * 20;
        //    if (histo)
        //        tracks.Sort(new PodCastComparer());
        //    else
        //        tracks.Sort(new PodCastComparerInv());
        //    int count = tracks.Count;

        //    List<TrackInfoItunes> aux = new List<TrackInfoItunes>();
        //    int nb = 0;
        //    for (int i = 0; i < count; i++)
        //    {
        //        var track = tracks[i];
        //        if (track.Rating >= rating)
        //        {
        //            var auxD = currentDuration;
        //            currentDuration += track.Duration;
        //            if (currentDuration > DurationMax)
        //            {
        //                misc.log("{0} level:{1} nbMax:{2} feedDuration:{3} histo:{4} duration:{5}  -->  stop duration {6}", this, level, nbMax, feedDuration, histo, auxD.TotalMinutes.ToString("0"), feedDuration);
        //                break;
        //            }
        //            aux.Add(track);
        //            nb++;
        //            if (nb >= nbMax)
        //            {
        //                //  misc.log("{0} level:{1} nbMax:{2} feedDuration:{3} histo:{4} duration{5}   -->  stop nb {6}", this, level, nbMax, feedDuration, histo, currentDuration.TotalMinutes.ToString("0"), nb); 
        //                break;
        //            }
        //        }
        //    }


        //    return aux;
        //}

        public List<TrackInfoItunes> getSelectedTracks
        {
            get
            {
                var list = tracks.FindAll(t => t.Selected);
                list.Sort(new PodCastComparer());
                return list;

            }
        }

        public List<TrackInfoItunes> getPreSelectedTracks
        {
            get
            {
                var list = tracks.FindAll(t => t.isPreselected); // Providers1.Count > 0);
                list.Sort(new PodCastComparer());
                return list;

            }
        }

        public List<TrackInfoItunes> getSelectedTracksLevel(int level)
        {
            int rating = level * 20;

            var list = tracks.FindAll(t => t.Selected && t.Rating == rating);
            list.Sort(new PodCastComparer());
            return list;

        }

        public void buildLastSelectedTrack(List<TrackInfoItunes> depot)
        {
            var list = tracks.FindAll(t => t.Selected);
            if (list.Count > 0)
            {
                list.Sort(new PodCastComparerInv());
                var t = list[0];
                if (!depot.Contains(t))
                    depot.Add(t);
            }

        }

        /// <summary>
        /// Ajout les tracks pour le jour j du journal
        /// </summary>
        /// <param name="depot"></param>
        /// <param name="journal"></param>
        internal void getSelecTrackJournal(List<TrackInfoItunes> depot, Journal journal)
        {
            var list = tracks.FindAll(t => t.FreeInJournal);
            list.Sort(new PodCastComparer());
            timeSpan totalDurationMax = timeSpan.FromMinutes(journal.FeedDuration);
            timeSpan duration = new timeSpan();

            int nbMax = journal.Nb;
            int nb =0; 

            foreach (TrackInfoItunes track in list)
            {
                depot.Add(track);
                nb++;
                if (nb >= nbMax)
                    return;
                duration += track.Duree;
                if (duration >= totalDurationMax)
                    return; 
            }
        }

        const int SEMAINE = 7;
        private void getSelectedTrack(List<TrackInfoItunes> depot, List<TrackInfoItunes> list, IComparer<TrackInfoItunes> comparer, SelectParam param)
        {
           
            if (list == null)
                list = tracks.FindAll(t => t.Selected);
            if (list.Count > 0)
            {
                list.Sort(comparer);


                int _nb = 0;
                int _nbSerial = 0;
                int _nbHisto = 0;

                int nbSerial = param.nbSerial;
                int nbHisto = param.nbHisto;
                int nb = param.nb;
                int nb0 = nb;
                int nbSerial0 = nbSerial;
                int nbHisto0 = nbHisto;

                bool modeSemaine = param.modeSemaine;

                if (modeSemaine)
                {
                    nbSerial *= SEMAINE;
                    nbHisto *= SEMAINE;
                    nb *= SEMAINE;
                }

                DateTime? d0 = null;
                DateTime? dSerial = null;
                DateTime? dHisto = null;

                foreach (TrackInfoItunes track in list)
                {
                    DateTime pub = track.Pub2.Date;
                    bool exempte = false;
                    if (nbSerial >= 0 && track.Serial)
                    {
                        _nbSerial++;
                        if (dSerial == null)
                            dSerial = pub;
                        if (_nbSerial > nbSerial0 && (_nbSerial > nbSerial || (int)Math.Abs((pub - dSerial.Value).TotalDays) >= nbSerial))
                        {

                        }
                        else
                            exempte = true;
                    }
                    if (nbHisto >= 0 && track.Histo)
                    {
                        _nbHisto++;
                        if (dHisto == null)
                            dHisto = pub;

                        if (_nbHisto > nbHisto0 && (_nbHisto > nbHisto || (int)Math.Abs((pub - dHisto.Value).TotalDays) >= nbHisto))
                        {
                           
                        }
                        else
                            exempte = true;

                    }
                    if (exempte)
                    {
                    }
                    else
                    {
                        _nb++;
                        if (d0 == null)
                            d0 = pub;
                        if (_nb > nb || (int)Math.Abs((pub - d0.Value).TotalDays) >= nb)
                        {
                            if (_nb > nb0)
                                continue;
                        }
                    }
                    if (!depot.Contains(track))
                        depot.Add(track);
                }

            }
        }

        public void buildFirstSelectedTrackLevel(List<TrackInfoItunes> depot, SelectParam param)
        {
            IComparer<TrackInfoItunes> comparer = null;

            int rating = 20 * param.level;

            var list = tracks.FindAll(t => t.Selected && t.Rating >= rating);

            if (param.dateCroissante)
                comparer = new PodCastComparer();
            else
                comparer = new PodCastComparerInv();

            getSelectedTrack(depot, list, comparer, param);

        }

        public void buildFirstSelectedTrack(List<TrackInfoItunes> depot, SelectParam param)
        {
            IComparer<TrackInfoItunes> comparer = null;

            if (param.dateCroissante)
                comparer = new FeedPodCastComparerHisto();
            else
                comparer = new FeedPodCastComparer();

            getSelectedTrack(depot, null, comparer, param);

        }

        public override string ToString()
        {
            return name + " " + tracks.Count;
        }

        //  private ITextWriter sb = new StringBuilder();

        private Stat stats = new Stat();
        public void recordTrack(TrackInfoItunes track, LimitItem provider)
        {
            stats.recordTrack(track);
            //sb.Append(provider.Dir.getPath());
            //sb.Append(" ");
            //sb.Append(provider.ToString());
            //sb.Append(" ");
            //sb.Append(track);

            //  sb.AppendLine();
        }

        public void rapport(ITextWriter sb)
        {
            sb.AppendLine();
            sb.AppendLine("feed -------------");
            sb.AppendLine(name);
            stats.rapport(sb);


            foreach (TrackInfoItunes track in getPreSelectedTracks)
            {
                sb.AppendLine();
                sb.AppendLine(track.ToString());
                sb.AppendLine("pre-selection");
                foreach (LimitItem provider in track.Providers1)
                {
                    sb.Append("\t");
                    //sb.Append(provider.Dir.getPath());
                    //sb.Append(" ");
                    sb.AppendLine(provider.ToString());
                }

                sb.AppendLine("selection");
                foreach (LimitItem provider in track.Providers)
                {
                    sb.Append("\t");
                    //sb.Append(provider.Dir.getPath());
                    //sb.Append(" ");
                    sb.AppendLine(provider.ToString());
                }
            }
        }


    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Hibernator.cs">
    <content><![CDATA[using pdb.it;
using pdb.util;
using System.IO;
using System;
using System.Collections.Generic;

namespace pdb.podcast
{
    class Hibernator
    {
        public int go(Loader loader, List<TrackInfoItunes> tracks)
        {

            var conf = pdb.podcast.Tuning.Conf.Hibernate;
            if (!conf.enabled)
                return 0;
            var toH = new List<TrackInfoItunes>();
            var dirH = conf.dir;
            var list = conf.list;
            if (!string.IsNullOrEmpty(list))
            {

                var auto = loader.TreePlayList.getComposite("auto");
                if (auto != null)
                {
                    var itl = auto.getComposite(list);
                    if (itl != null)
                    {
                        foreach (var plc in itl)
                        {
                            if (plc is TrackInList)
                            {
                                var t = plc as TrackInList;
                                var piece = t.Piece as TrackInfoItunes;
                                if (piece == null)
                                {
                                    misc.log("plc pas un TrackInfoItunes {0}", plc);
                                    continue;
                                }
                                if (piece.Selected)
                                {
                                    misc.log("non hiberné car selected {0}", piece);
                                    continue;
                                }
                                Program.log.log("hibernation de {0} par liste", piece);
                                toH.Add(piece);
                            }
                        }
                    }
                }
            }

            select(conf, toH, tracks, false);


            int nb = 0;
            DateTime limit = DateTime.Now.AddDays(-conf.delay); 
            foreach (TrackInfoItunes track in toH)
            {
                var fv = FileRegister.Check(track.Location);
                if (fv.Exists)
                {
                    if (pdb.podcast.Sort.Album.LastRead.Contains(track.DbId))
                        continue;
                    if (track.GlobalSelected)
                        continue;
                    if (track.Gout > limit)
                        continue; 
                    nb++;
                    track.hibernate(fv, dirH);
                }
            }


            return nb;
        }

        public void select(pdb.podcast.Tuning.Hibernate conf, List<TrackInfoItunes> toCheck, List<TrackInfoItunes> tracks, bool import)
        {
            bool critereDate = conf.dateMin > DateTime.MinValue && conf.dateMax < DateTime.MaxValue;
            bool critereAlbum = !string.IsNullOrEmpty(conf.album);
            bool critereLast = conf.nblast > 0;


            if (import || critereAlbum || critereDate || critereLast)
            {

                if (!critereLast)
                {
                    foreach (TrackInfoItunes t in tracks)
                    {
                        if (import)
                        {
                            //if (t.Present)
                            //    continue;
                        }
                        else
                        {
                            if (!t.Present)
                                continue;
                            if (t.Selected)
                                continue;
                        }


                        if (!critereDate || t.Pub2 >= conf.dateMin && t.Pub2 <= conf.dateMax)
                        {
                            if (!critereAlbum || t.Album.ToLower().Contains(conf.album.ToLower()))
                            {
                                toCheck.Add(t);
                            }
                        }
                    }
                }
                else
                {
                    Dictionary<string, Album> dict = new Dictionary<string, Album>();
                    tracks.Sort(new PodCastComparer());
                    foreach (TrackInfoItunes track in tracks)
                    {
                        string album = track.Album;
                        string key = album;
                        if (string.IsNullOrEmpty(album))
                        {
                            misc.log("pas d'album pour " + track.Location);
                            if (import)
                                toCheck.Add(track);
                            continue;

                        }

                        if (!dict.ContainsKey(key))
                        {
                            Album a = new Album(key);
                            dict.Add(key, a);
                        }
                        dict[key].add(track);
                    }

                    foreach (Album album in dict.Values)
                    {
                        if (critereAlbum)
                        {
                            if (album.Name.ToLower().Contains(conf.album.ToLower()))
                            {
                            }
                            else continue;
                        }

                        var list = album.List;
                        int count = list.Count;
                        int nb = 0;

                        for (int i = count - 1; i >= 0; i--)
                        {
                            var t = list[i];
                            if (!import)
                            {
                                if (t.Selected)
                                    continue;
                                if (!t.Present)
                                    continue;
                            }
                            if (!critereDate || t.Pub2 >= conf.dateMin && t.Pub2 <= conf.dateMax)
                            {
                                if (import)
                                {
                                    nb++;
                                    toCheck.Add(t);
                                    if (nb >= conf.nblast)
                                        break;
                                    continue;
                                }


                                if (t.Pub2 > conf.dateLast)
                                {
                                    nb++;
                                    if (nb <= conf.nblast)
                                        continue;
                                }

                                toCheck.Add(t);
                            }
                        }
                    }
                }



            }
        }

        private class Album
        {
            private string name;
            private List<TrackInfoItunes> list = new List<TrackInfoItunes>();
            public Album(string name)
            {
                this.name = name;
            }
            public void add(TrackInfoItunes track)
            {
                list.Add(track);
            }
            public List<TrackInfoItunes> List { get { return list; } }
            public string Name { get { return name; } }
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\PodcastComparer.cs">
    <content><![CDATA[using System.Collections.Generic;

namespace pdb.podcast
{
    public class PodCastComparer : IComparer<TrackInfoItunes>
    {
        public virtual int Compare(TrackInfoItunes x, TrackInfoItunes y)
        {
            int cmp = x.Pub.CompareTo(y.Pub);
            if (cmp != 0) return cmp;

            cmp = x.DbId.CompareTo(y.DbId);
            if (cmp != 0) return cmp;

            cmp = x.Year.CompareTo(y.Year);
            if (cmp != 0) return cmp;

            cmp = x.Name.CompareTo(y.Name);
            if (cmp != 0) return cmp;

            return x.Added.CompareTo(y.Added);
        }
    }
    /// <summary>
    /// Comparaison d'abord par le niveau décroissant et puis la date croissante
    /// </summary>
    public class FeedPodCastComparerHisto : PodCastComparer
    {
        public override int Compare(TrackInfoItunes x, TrackInfoItunes y)
        {
            int cmp = x.Rating.CompareTo(y.Rating);
            cmp *= -1;
            if (cmp != 0) return cmp;
            return base.Compare(x, y);
        }
    }

    /// <summary>
    /// Comparaison d'abord par le niveau décroissant et puis la date croissante
    /// </summary>
    public class FeedPodCastComparer : PodCastComparerInv
    {
        public override int Compare(TrackInfoItunes x, TrackInfoItunes y)
        {
            int cmp = x.Rating.CompareTo(y.Rating);
            cmp *= -1;
            if (cmp != 0) return cmp;
            return base.Compare(x, y);
        }
    }

    public class PodCastComparerInv : PodCastComparer
    {
        public override int Compare(TrackInfoItunes x, TrackInfoItunes y)
        {
            return -base.Compare(x, y);
        }
    }

    public class PodCastComparerLoc : IComparer<TrackInfoItunes>
    {
        public int Compare(TrackInfoItunes x, TrackInfoItunes y)
        {
            return x.Location.CompareTo(y.Location);
        }
    }


}
]]></content>
  </file>
  <file path="\pdb.podcast\Program.cs">
    <content><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using System.Threading;
using System.Xml;
using iTunesLib;
using pdb.it;
using pdb.obj;
using pdb.ordo;
using pdb.podcast.Auto;
using pdb.podcast.Load;
using pdb.podcast.Report;
using pdb.podcast.Tuning;
using pdb.util;
using Conf = pdb.podcast.Tuning.Conf;
using pdb.podcast.Delta;
using System.Threading.Tasks;
using pdb.podcast.Sort;
using pdb.podcast.Albums;

namespace pdb.podcast
{
    /// <summary>
    /// crée des listes de lecture pour les Podcasts
    /// </summary>
    class Program : IAbortTask
    {
        //const char DIR_SEP = Path.DirectorySeparatorChar; 
        static Loader loader;
        //private Feeds feeds;
        public static Logger log;
        public static Logger logAuto;
        static int step = -1;
        static Program _instance = new Program();
        static bool calculRoots = false;

        private static AsyncFileWriter asyncFw = AsyncFileWriter.Instance;
        private static Chrono chrono = new Chrono();
        private static Logger logChrono;
        private static DB.Db db;

        //public static DB.Db Db { get { return db; } }


        private static XmlWriter writer;
        //DirConf root;
        //DirConf oldRoot;

        private string _empreinte;

        static void Main(string[] args)
        {

            Logger.init(Environment.CurrentDirectory.Replace("\\", "_"));
            log = Logger.getLogger("Program");
            logChrono = Logger.getLogger("Chrono", true);
            logAuto = Logger.getLogger("Auto", true);
            logAuto.NoReset = true;

            FileRegister.init(new BgDictString0<FileValue>());
            _instance.go(args);
        }

        void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs e)
        {
            Console.WriteLine("\nThe read operation has been interrupted.");
            Console.WriteLine("  Key pressed: {0}", e.SpecialKey);
            Console.WriteLine("  Cancel property: {0}", e.Cancel);
            if (loader == null)
                return;
            e.Cancel = true;


            if (e.SpecialKey == ConsoleSpecialKey.ControlC)
            {
                _end = true;

                PlayList.AbortOpe();
                BackGroundTaskMgr.AbortSpecial();
                BackGroundTaskMgr.Reset();
                BackGroundTaskMgr.recordMsProc();
                loader.saveIds();
                Console.WriteLine("\nFin de l'opération d'enregistrement.");
                MemUtil.End();
                Logger.End();
                DisposableCounter.DisposeAll();
                Locker.releaseSingleProcess();
                AsyncFileWriter.End();
                Memory.End();
                Exporter.Abort();

                //if (_writeDb != null)
                //{
                //    misc.log("attente writeDb");
                //    _writeDb.Wait();
                //}
                Environment.Exit(0);
            }
            else
            {
                BackGroundTaskMgr.PlayPause();
                BackGroundTaskMgr.recordMsProc();
                loader.saveIds();
                if (db != null)
                    db.write();
            }
        }

        //private void scandir(string dir)
        //{
        //    scanFiles(new DirectoryInfo(dir));
        //}

        //private void scanFiles(DirectoryInfo dir)
        //{
        //    log.log("scan " + dir.FullName);
        //    foreach (FileInfo file in dir.GetFiles())
        //    {
        //        //if (dict.ContainsKey(file.FullName))
        //        //    continue;

        //        // log.log("try to build track from " + file.FullName);

        //        try
        //        {
        //            var t = loader.createTrack(-1, file.FullName);
        //            if (t == null)
        //                continue;
        //            TrackInfoItunes track = t as TrackInfoItunes;

        //            if (track == null)
        //                continue;
        //            //if (!track.isPodcast)
        //            //    continue;

        //            log.log("\t==>track créé:" + track);
        //            feeds.checkAll(track);

        //        }
        //        catch (Exception ex)
        //        {
        //            log.log(ex.ToString());
        //        }
        //    }

        //    foreach (DirectoryInfo sub in dir.GetDirectories())
        //        scanFiles(sub);
        //}

        #region Task


        private List<ITrackInfoItunes> loadTracks(bool firstStep, bool forceLoad)
        {
            List<ITrackInfoItunes> listTrack = new List<ITrackInfoItunes>();

            loader.init();
            loader.reset(firstStep, forceLoad);
            loader.loadTracks(listTrack);
            loader.loadLists();

            return listTrack;

        }
        #endregion

        public void go(string[] args)
        {
            TrackInfoItunes.AlbumMgr = new AlbumMgr(); 
            int countArgs = args.GetLength(0);
            string confFile = "conf.xml";
            if (countArgs > 0)
                confFile = args[0];

            Hibernator hibernator = new Hibernator();

            try
            {
                //BackGroundTaskMgr.Sens = - 1; 
                Thread.CurrentThread.Name = "Main";
                Console.CancelKeyPress += Console_CancelKeyPress;
                ThreadUtil.Log = false;
                misc.init(Logger.getLogger);
                MemUtil.Start(10);

                // bool firstLoad = true;


                Conf.Instance.setConfFile(confFile);
                var xelt = Conf.Instance.load(false);
                TrackInfoItunes.Date0 = Conf.Date0;
                if (Conf.Menage != menage.none)
                {
                    new Menage().go();
                    return;
                }
                BackGroundTaskMgr.Conf = Conf.Ordo;
                TrackInfoItunes.VolumeMin = Conf.VolumeMin;
                TrackInfoItunes.MaxPlayed = Conf.PlayedDates;
                TrackInfoItunes.PlayedLevel = Conf.DateLevel;
                var itConf = new pdb.it.Conf(xelt);

                // loader = new Loader(itConf, true);
                bool import = Conf.Import.enabled || Conf.Import.merge; 
                db = new DB.Db();
                loader = new Loader(itConf, import, db,
                    () =>
                    {
                        misc.Pre = "[Load " + step + "] ";

                        PlayList.AbortOpe();
                        BackGroundTaskMgr.AbortSpecial();
                        //   Thread.Sleep(1000); 
                        //  BackGroundTaskMgr.Start(); 
                    })

               ;
                // loader.init();
                TrackInfoItunes.DefaultFolder = loader.DefaultFolder;

                db.load();
              //  db.write(); return; 

                string ziqueOrg = loader.DefaultFolder;
                loader.PlayListFilter = new PlayListFilter(Conf.RootIt);

                BackGroundTaskMgr.Start();

                List<TrackInfoItunes> listIt = new List<TrackInfoItunes>();

                // var bgClass = BackGroundTaskMgr.getMgr("Classement", 0);

                do
                {
                    try
                    {
                        chrono.end();
                        logChrono.log(chrono.display(3, "{0}:{1:#}"));
                        chrono.reset("Program");

                        step++;
                        Logger.Pre = "[" + step + "] ";
                        Logger.CreateNullLoggers = false;
                        xelt = Conf.Instance.load(step > 0 && Conf.Simulation);
                        loader.Conf = new it.Conf(xelt);
                        // AutoBuilder.Log();
                        BackGroundTaskMgr.Conf = Conf.Ordo;
                        TrackInfoItunes.VolumeMin = Conf.VolumeMin;
                        ziqueOrg = loader.DefaultFolder;

#if vendee
                        listTrack = new List<ITrackInfoItunes>();
                        loader.reset(step == 0);

                        loader.ModeXml = false;
                        loader.loadTracks(listTrack);

                        var listV = new ArrayList();
                        loader.getNatives(listV);

                        new Vendee().go(listV);

                        return;

#endif

                        chrono.bip("debut");

                        if (step == 0 || !Conf.Simulation)
                        {
                            List<ITrackInfoItunes> listTrack = new List<ITrackInfoItunes>();


                            listTrack = loadTracks(step == 0, AutoBuilder.MustUpdate);
                            BackGroundTaskMgr.recordMsProc();
                            loader.Aborted = true;

                            PlayList.AbortOpe();
                            BackGroundTaskMgr.Reset();

                            BackGroundTaskMgr.recordMsProc();
                            Logger.Reset();
                            BackGroundTaskMgr.Start();


                            misc.Pre = "[" + step + "] ";


                            // listTrack = new List<ITrackInfoItunes>();


                            xelt = Conf.Instance.load(false);
                            loader.Conf = new it.Conf(xelt);
                            //  AutoBuilder.Log();
                            BackGroundTaskMgr.Conf = Conf.Ordo;
                            TrackInfoItunes.VolumeMin = Conf.VolumeMin;

                            //xelt = Conf.Instance.load(step > 0 && Conf.Simulation);
                            //loader.Conf = new it.Conf(xelt);
                            //BackGroundTaskMgr.Conf = Conf.Ordo;
                            //TrackInfoItunes.VolumeMin = Conf.VolumeMin;

                            if (Conf.DeleteDoublon)
                            {

                                loader.ModeXml = false;
                                loader.loadTracks(listTrack);
                                return;
                            }

                            if (Conf.GetDescription)
                            {
                                loader.ModeXml = false;
                                loader.loadTracks(listTrack);
                                return;
                            }

                            string copyAll = Conf.CopyAll;
                            if (!string.IsNullOrEmpty(copyAll))
                            {
                                // loader.loadTracks(listTrack);
                                List<TrackInfoItunes> listToCopy = new List<TrackInfoItunes>();
                                foreach (ITrackInfoItunes _track in listTrack)
                                {

                                    if (_track.isPodcast)
                                    {
                                        var t = _track as TrackInfoItunes;
                                        listToCopy.Add(t);
                                    }


                                }
                                int count = listToCopy.Count;
                                int i = 0;
                                foreach (TrackInfoItunes track in listToCopy)
                                {
                                    i++;
                                    track.copy(copyAll, string.Format("{0}/{1}", i, count));
                                }
                                return;
                            }


                            //    loader.loadTracks(listTrack);

#if menage
                // var listC = new Dict<string, FileInfo>();
                var listD = new Dict<string, FileInfo>();

                Dict<string,ITrackInfoItunes> dict = new Dict<string, ITrackInfoItunes>();
                foreach (var track in listTrack)
                    dict[track.Location] = track;

               
                listFiles(listD, new DirectoryInfo(@"D:\zique\podcasts"));

                foreach (FileInfo file in listD)
                {
                    string location = file.FullName.Replace("D:", "C:");
                    FileInfo C = new FileInfo(location);
                    if (C.Exists)
                    {
                        //TrackInfoItunes track = dict[file.FullName] as TrackInfoItunes;
                        //if (track != null)
                        //{
                        //    log.log("suppression track" + track);
                        //    track.Delete();
                        //}
                        //else
                        //{
                            log.log("suppression simple de " + file.FullName);
                            file.Delete();
                        //}
                    }

                }

                return; 

#elif build

                            list = new List<TrackInfoItunes>();

                            foreach (ITrackInfoItunes _track in listTrack)
                            {
                                if (_track.isPodcast)
                                {
                                    var t = _track as TrackInfoItunes;
                                    string location = t.Location;
                                    if (string.IsNullOrEmpty(location) || !File.Exists(location))
                                    {
                                        log.log("phase load :: tres bizarre sans localisation " + t.Album + "/" + t.Name);
                                        //t.Delete();
                                        continue;
                                    }

                                    list.Add(t);
                                }

                            }
                            int nbIntegre = 0;
                            int nbSuppr = 0;
                            scanFiles(list, new DirectoryInfo(@"C:\zique\podcasts"), ref nbIntegre, ref nbSuppr);
                            log.log("fin scan : {0} intégrés, {1} supprimmés", nbIntegre, nbSuppr);
                            BackGroundTaskMgr.End();
                            return;
                        }
                    }


                    catch (Exception ex)
                    {
                        log.log(ex.ToString());
                    }
                }
                while (true);

#else
                            listIt = new List<TrackInfoItunes>();
                            Dict<string, TrackInfoItunes> dictLoc = new Dict<string, TrackInfoItunes>();
                            GroupStat trackStat = new GroupStat();

                            loader.saveIds();
                            foreach (ITrackInfoItunes _track in listTrack)
                            {
                                if (_track.isPodcast)
                                {
                                    var t = _track as TrackInfoItunes;
                                    string location = t.Location;
                                    if (string.IsNullOrEmpty(location) || !FileRegister.Exist(location)) //  File.Exists(location))
                                    {
                                        //log.log("phase load :: suppression du track sans localisation " + t.Album + "/" + t.Name);
                                        //t.Delete();
                                        continue;
                                    }

                                    dictLoc[t.Location] = t;
                                    listIt.Add(t);
                                    if (!t.Played)
                                        trackStat.recordTrack(t, typeState.all);
                                    trackStat.recordTrack(t, typeState.all);
                                }
                            }

                            db.recordIt(listIt);

                            if (Conf.Import.enabled)
                            {
                                var listImport = new List<TrackInfoItunes>();
                                hibernator.select(Conf.Import, listImport, db.Tracks, true);

                                foreach (TrackInfoItunes tdb in listImport)
                                {
                                    loader.import(tdb);
                                }
                            }
                            else if (Conf.Import.merge)
                            {
                                foreach (TrackInfoItunes t in listIt)
                                    loader.merge(t); 
                            }





                            if (Conf.Import.enabled || Conf.Import.merge)
                            {
                                misc.log("fin");
                                return;
                            }

                            db.write();


                            chrono.bip("loadTracks");

                            var descTrack = DescBuilder.create("Tracks");

                            LimitItem.includeDetail = true;
                            trackStat.report(descTrack);
                            log.log(descTrack.ToString());

                            var sbT = new StringBuilder();

                            //using (pdb.util.TextWriter tw = new util.TextWriter(File.OpenWrite(@"..\Logs\tracks.txt")))
                            //{
                            var trackFile = DescBuilder.create("Tracks", sbT);
                            trackStat.report(trackFile);
                            sbT.Flush();

                            asyncFw.post(@"..\Logs\tracks.txt", sbT.ToString());
                            //}
                            chrono.bip("desc tracks");
                            Logger.LogConsole = false;
                            //        loader.loadLists();
                            Logger.LogConsole = true;
                            chrono.bip("load list");

                        }
                        List<TrackInfoItunes> list2 = new List<TrackInfoItunes>();
                        DirConf root = null;
                        while (true)
                        {

                            chrono.end();
                            logChrono.log(chrono.display(3, "{0}:{1:#}"));
                            chrono.reset("Program");

                            xelt = Conf.Instance.load(false);
                            loader.Conf = new it.Conf(xelt);
                            PlayList.StartOpe();
                            loader.Aborted = false;

                            Logger.CreateNullLoggers = !Conf.LogGen;


                            BackGroundTaskMgr.Conf = Conf.Ordo;
                            var list = db.Tracks;
                            list2 = new List<TrackInfoItunes>(list.Count);
                            foreach (TrackInfoItunes track in list)
                            {
                                var copy = TrackInfoItunes.createCopy(track);
                                list2.Add(copy);
                                //track.clearLists(); // = selectMode.none;
                            }
                            chrono.bip("track.clearLists");
                            // Feeds.createInstance();
                            root = Conf.DirConf;
                            var feeds = root.Feeds;
                            if (Conf.GenFeed)
                            {
                                foreach (RootItItem rootItem in Conf.RootIt)
                                {
                                    var fAuto = loader.TreePlayList.getComposite(rootItem.name);
                                    var fFeeds = fAuto.getComposite("Feed");

                                    if (fFeeds != null)
                                    {
                                        scanFeedsForRecordEmptyLists(feeds, fFeeds);
                                    }

                                }
                            }

                            foreach (TrackInfoItunes track in list2)
                            {
                                feeds.check(track);
                            }
                            chrono.bip("feeds");

                            //if (Conf.Single)
                            //{
                            //    var listS = new List<TrackInfoItunes>();
                            //    for (int i = 0; i < Limits.NB; i++)
                            //    {
                            //        var list0 = feeds.getTracks(i, int.MaxValue, int.MaxValue, null, null, 1, null); //feeds.ListTrackSingle;
                            //        foreach (var t in list0)
                            //        {
                            //            if (!listS.Contains(t))
                            //                listS.Add(t);
                            //        }

                            //    }

                            //    string[] folder = new string[] { "Select", "tmp" };
                            //    buildList("_auto", listS, 0, folder);
                            //}

                            //var sb = DescBuilder.create();

                            //Création des listes
                            //  oldRoot = root;

                            Exporter.TopRecord();
                            //***************** Lancement "pour de vrai" ***************************************
                            LimitItemLoader.ModeSelection = true;
                            AutoBuilder.init(true);
                            loadCandidat(root);

                            //  AutoBuilder.test(); 
                            // standAlone(root); 
                            phase2(root);
                            Selection(root);
                            //**********************************************************************************
                            //***************** Lancement "pour de faux" ***************************************
                            AutoBuilder.Init3();
                            LimitItemLoader.ModeSelection = false;
                            phase2(root);
                            Selection(root);
                            LimitItemLoader.ModeSelection = true;
                            //**********************************************************************************
                            Exporter.TopCopy();
                            chrono.bip("selection");

                           
                            if (Conf.Sort.enabled == Tuning.Sort.sortMode.once)
                            {
                                var sorter = new Sorter(Conf.Sort, list2);
                                sorter.build(loader);
                                misc.log("fin");
                                return;
                            }
                            foreach (TrackInfoItunes s in feeds.getSelectedTracks())
                            {
                                var items = s.Providers;
                                int count = items.Count;
                                foreach (LimitItem item in items)
                                {
                                    item.recordTrackMoy(s, count);
                                    if (count == 1)
                                        s.Exclu = item;
                                }
                            }
                            chrono.bip("selection exclu");


                            //****************************************
                            // lancement des sorties xml et html en asynchrone
                            postReport(root);
                            //****************************************



                            //mem0.load();
                            //var listSe = feeds.getSelectedTracks(); 
                            //if (mem0.FileExists)
                            //{
                            //    foreach (TrackInfoItunes s in listSe)
                            //    {
                            //        var key = s.Location;
                            //        if (!mem0.dict.ContainsKey(key))
                            //            log.log("delta virtuel ajouté {0} ==> {1}", s, s.GetProvider());
                            //    }

                            //    foreach (string key in mem0.dict.Keys)
                            //    {
                            //        if (!feeds.existSelected(key))
                            //            log.log("delta virtuel supprimé {0}",mem0.dict[key]);
                            //    }
                            //}
                            //mem0.save(listSe); 

                            //  AutoBuilder.Log();
                            AutoBuilder.init(false);
                            bool cangoAuto = AutoBuilder.Check(feeds);
                            chrono.bip("AutoBuilder");
                            AutoBuilder.Log();
                            if (!cangoAuto && Conf.AutoBlock)
                            {
                                logAuto.log("arret par auto");
                                //Thread.Sleep(1000);
                                continue;
                            }
                            else
                            {
                                string newEmpreinte = Conf.DirConf.getEmpreinte();
                                if (newEmpreinte == _empreinte && !AutoBuilder.Stable)
                                {
                                    logAuto.log("arret par empreinte");
                                    continue;
                                }

                                _empreinte = newEmpreinte;

                                Logger.LogAll("****************************************************************************************");
                                Logger.LogAll("arret");
                                Logger.LogAll("****************************************************************************************");



                                // BackGroundTaskMgr.End();

                                Logger.Pre = "";

                                //   log.log(sb.ToString());
                                var sb2 = DescBuilder.create();

                                if (Conf.Simulation)
                                {
                                    Logger.LogAll("****************************************************************************************");
                                    Logger.LogAll("TEST");
                                    Logger.LogAll("****************************************************************************************");
                                }

                                var feedsRapport = new StringBuilder();
                                feeds.rapport(feedsRapport);
                                Logger.LogConsole = false;
                                log.log(feedsRapport.ToString());
                                Logger.LogConsole = true;
                                var tw = new StringBuilder();
                                //using (pdb.util.TextWriter tw = new util.TextWriter(File.OpenWrite(@"..\Logs\history.txt")))
                                //{
                                feeds.rapportSelected(tw);
                                asyncFw.post(@"..\Logs\history.txt", tw.ToString());
                                // }

                                //using (pdb.util.TextWriter tw = new util.TextWriter(File.OpenWrite(@"..\Logs\historyPre.txt")))
                                //{
                                tw = new StringBuilder();
                                feeds.rapportPreSelected(tw);
                                asyncFw.post(@"..\Logs\historyPre.txt", tw.ToString());
                                //}

                                // rapport détaillé
                                LimitItem.includeDetail = true;
                                Conf.DirConf.rapport(sb2);
                                Logger.LogConsole = false;
                                log.log(sb2.ToString());
                                Logger.LogConsole = true;


                                // rapport plus concis
                                var sb3 = DescBuilder.create();
                                LimitItem.includeDetail = false;
                                Conf.DirConf.rapport(sb3);
                                Logger.LogConsole = false;
                                log.log(sb3.ToString());
                                Logger.LogConsole = true;
                                chrono.bip("rapport");
                                break;
                            }
                        }

                        //mem1.load();

                        //if (mem1.FileExists)
                        //{
                        //    foreach (TrackInfoItunes s in listSe)
                        //    {
                        //        var key = s.Location;
                        //        if (!mem1.dict.ContainsKey(key))
                        //            log.log("delta reel ajouté {0} ==> {1}", s, s.GetProvider());
                        //    }

                        //    foreach (string key in mem1.dict.Keys)
                        //    {
                        //        if (!feeds.existSelected(key))
                        //            log.log("delta reel supprimé {0}", mem1.dict[key]);
                        //    }
                        //}
                        //mem1.save(listSe); 


                        Logger.CreateNullLoggers = false;


                        calculRoots = false;
                        WritePlayList(root);




                        // Sélection du dernier podcast de chaque album
                        if (!Conf.Single)
                        {
                            var feeds = root.Feeds;
                            int prior = 2;
                            var listP = Conf.SelectParams;

                            var listS = new List<TrackInfoItunes>();
                            string[] folder = null;
                            foreach (SelectParam p in listP)
                            {
                                if (p.etendue.Contains("s"))
                                {
                                    listS = new List<TrackInfoItunes>();
                                    folder = new string[] { "select", "tmp", p.name };
                                    feeds.getFirstSelectedTracks(listS, p);
                                    buildList("_select", listS, prior, folder);
                                }
                            }

                            for (int level = 0; level < Limits.NB; level++)
                            {
                                foreach (SelectParam p in listP)
                                {
                                    if (p.etendue.Contains(level.ToString()))
                                    {
                                        p.level = level;
                                        folder = new string[] { "select", "tmp", p.name };
                                        listS = new List<TrackInfoItunes>();
                                        feeds.buildFirstSelectedTrackLevel(listS, p);  //true, true, false, false);
                                        buildList("_" + level, listS, prior, folder);
                                    }
                                }
                            }

                        }

                        var journal = Conf.Journal;
                        if (journal != null)
                        {
                            var feeds = root.Feeds;
                            for (int j = 1; j <= Journal.NB_JOUR_MAX; j++)
                            {
                                List<TrackInfoItunes> listJ = null;
                                if (journal.NbJour >= j)
                                {
                                    listJ = feeds.buildJournal(journal);
                                }
                                else
                                    listJ = new List<TrackInfoItunes>();

                                var name = j.ToString();
                                if (j < 10)
                                    name = "0" + name;
                                buildList(name, listJ, 3, "journal");

                            }
                        }

                        if (Conf.GenFeed)
                        {
                            var feeds = root.Feeds;
                            var prior = Conf.GenFeedPrior;
                            foreach (Feed feed in feeds.List)
                            {
                                var list0 = feed.getSelectedTracks;
                                buildList(feed.Name, list0, prior, "Feed");
                            }
                        }

                        string zique = Conf.Move.Zique;



                        BackGroundTaskMgr trackMgr = BackGroundTaskMgr.getMgr("Track", 12);
                        var trackList = BackGroundTaskMgr.getMgr("TrackList", 0);

                        foreach (TrackInfoItunes s in root.Feeds.getSelectedTracks())
                        {
                            s.updateNative();
                        }

                        foreach (TrackInfoItunes t in list2)
                        {
                            t.checkInOut();
                            var tdb = db.get(t);
                            if (tdb == null)
                            {
                                log.log("impossible de trouver le track db correspondant à {0} {1} {2}", t.DbId, t.Location, t);
                                continue; 
                            }
                            tdb.synch(t); 

                        }

                        db.write(); 




                        //if (Conf.Hibernate.enabled)
                        //{
                        //    Hibernator hibernator = new Hibernator();
                        //    var nb = hibernator.go(loader); 
                        //    if (nb >0)
                        //    {
                        //        misc.log("{0} elements hibernés", nb);
                        //        misc.log("fin ");
                        //        return; 
                        //    }

                        //}


                        int ii = 0;
                        while (!BackGroundTaskMgr.ConfirmEnd(10))
                        {
                            ii++;
                            if (ii == 60)
                                ii = 0;
                            if (ii == 0)
                            {
                                log.log("Attente Classement");
                            }
                            Thread.Sleep(100);
                        }

                       

                        if (Conf.Sort.enabled == Tuning.Sort.sortMode.all)
                        {
                            var sorter = new Sorter(Conf.Sort, list2);
                            sorter.build(loader);

                            while (!BackGroundTaskMgr.ConfirmEnd(10))
                            {
                                ii++;
                                if (ii == 60)
                                    ii = 0;
                                if (ii == 0)
                                {
                                    log.log("Attente Classement");
                                }
                                Thread.Sleep(100);
                            }
                        }

                        int nbH = 0;
                        if (Conf.Hibernate.enabled)
                        {
                            nbH = hibernator.go(loader, list2);
                            if (nbH > 0)
                            {
                                misc.log("{0} elements hibernés", nbH);
                                misc.log("fin");
                                return;
                            }
                        }

                        if (loader.NbTrackCreated >0 )
                        {
                            misc.log("{0} éléments ont été recréés", loader.NbTrackCreated);
                            misc.log("fin");
                            return;
                        }




                        // BackGroundTaskMgr.End();


                        misc.Pre = "[ OK " + step + "] ";
                        Logger.LogAll("*****************************************************************************************************");
                        Logger.LogAll("Pile Classement finie, attente nouvelle version");
                        Logger.LogAll("*****************************************************************************************************");

                      

                        Logger.LogAll("****************************************************************************************");
                        Logger.LogAll("arret 2");
                        Logger.LogAll("****************************************************************************************");

                        DateTime limit = DateTime.Now.AddDays(-Conf.Move.Delta);

                        if (!string.IsNullOrEmpty(zique))
                        {
                            foreach (TrackInfoItunes track in db.Tracks)
                            {
                                track.move(ziqueOrg, zique, limit);
                            }
                            return;
                        }
                        if (!Conf.Simulation)
                        {

                            Logger.Pre = "[ OK " + step + "] ";
                            Logger.LogAll("*****************************************************************************************************");
                            Logger.LogAll("attente nouvelle version");
                            Logger.LogAll("*****************************************************************************************************");
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.LogAll(ex.ToString());
                        misc.log(ex.ToString());
                        log.log(ex.ToString());
                        Thread.Sleep(1000);
                    }


                }
                while (true);




#endif

                //while (!BackGroundTaskMgr.Finished)
                //    Thread.Sleep(30);
                //log.log("****************************************************************************************");
                //loader.SynchronizePodcast(); 
                //log.log("fin");
                //log.log("****************************************************************************************");
            }

            catch (Exception ex)
            {
                log.log(ex.ToString());
            }


        }

        #region report asynchrone

        private DirConf _attenteWriteHtml;
        private volatile object _lockReportHtml = new object();
        private bool _end;
        ThreadUtil thReport;

        private void postReport(DirConf dir)
        {
            if (thReport == null)
            {
                lock (_lockReportHtml)
                {
                    if (thReport == null)
                    {
                        thReport = new ThreadUtil(loopReportHtml, "ReportHtml");
                        thReport.Start();
                    }
                }
            }

            lock (_lockReportHtml)
                _attenteWriteHtml = dir;
        }

        private void loopReportHtml()
        {
            DirConf traite = null;
            while (!_end)
            {
                Thread.Sleep(30);
                if (_attenteWriteHtml == null)
                    continue;
                lock (_lockReportHtml)
                {
                    if (_attenteWriteHtml == null)
                        continue;
                    traite = _attenteWriteHtml;
                    _attenteWriteHtml = null;
                }
                reportHtml(traite);
            }
        }


        private void reportHtml(DirConf root)
        {
            try
            {

                var settings = new XmlWriterSettings();
                settings.Indent = true;
                settings.Encoding = System.Text.Encoding.UTF8;
                var _sb = new System.Text.StringBuilder();
                using (writer = XmlWriter.Create(_sb, settings))
                {
                    LimitsLoader.Writer = new WriterXml(writer);
                    DoubleStat.ModeHtml = false;
                    writer.WriteStartElement("tracks");
                    WriteTracks(root);
                    writer.WriteEndDocument();
                    writer.Flush();
                }

                asyncFw.post(@"..\tracks.xml", _sb.ToString());
                //   chrono.bip("xml");

                string html = @"..\tracks.html";
                //if (File.Exists(html))
                //    File.Delete(html);
                var sbHtml = new StringBuilder();
                //using (pdb.util.TextWriter sbHtml = new pdb.util.TextWriter(new StreamWriter(File.OpenWrite(html), System.Text.Encoding.UTF8)))
                //{
                LimitsLoader.Writer = new WriterHtml(sbHtml);
                DoubleStat.ModeHtml = true;
                sbHtml.Append(@"<!DOCTYPE html>
<html>
<head>
	<title>"
+ Environment.CurrentDirectory + @"</title>
	
	<style type='text/css'>
		body{
			margin:10px 30px;
			font-family:verdana;
			font-size:12px;
		}
		h1{
			font-family:verdana;
			font-size:14px;
			font-weight:bold;
			text-decoration:underline;
		}
        .low {
			color: rgb(0,125,255);
		}

        .med {
			font-weight:bold;
			color: rgb(0,140,0);
		}

        .high {
			font-weight:bold;
			font-size:14px;
			color: rgb(240,155,0);
		}
        
		.big {
			font-weight:bold;
			font-size:14px;
			text-decoration:underline;
			color: rgb(255,32,0);
		}

        .album {
			color: rgb(0,125,255);
		}
        .track {
            font-weight:bold;
			color: rgb(0,40,80);
		}
		div.tree div {
			padding-left:16px;
		}
		div.tree div.parent div {
			 display:none;
			 cursor:default;
		}
		div.tree div.parent {
			 cursor:pointer !important;
			 background:transparent url(plus.gif) no-repeat top left;
		}
		div.tree div.expanded {
			background:transparent url(moins.gif) no-repeat top left;
		}
	</style>
	<link rel='stylesheet' type='text/css' href='treeview.css' media='screen' /> 
	<script type='text/javascript' src='jquery.js'></script>
	<script type='text/javascript'>
	$(function() {
		$('div.tree div:has(div)').addClass('parent');
		$('div.tree div').click(function() {
			var o = $(this);
			o.children('div').toggle();
			o.filter('.parent').toggleClass('expanded');
			return false;
		});
	});
	</script>
</head>
<body>");
                WriteTracks(root);
                sbHtml.Append(@"</body>
</html>");

                sbHtml.Flush();

                //}
                asyncFw.post(html, sbHtml.ToString());
                //  chrono.bip("html");
            }
            catch (Exception ex)
            {
                log.log(ex.ToString());
            }
        }

        #endregion


        public static void buildList(string name, List<TrackInfoItunes> list_, List<string> folders)
        {
            buildList(name, list_, int.MaxValue, folders);
        }

        public static void buildListPrior(string name, List<TrackInfoItunes> list_, List<string> folders, int prior)
        {
            buildList(name, list_, prior, folders);
        }


        /// <summary>
        /// création ou mise à jour d'une liste
        /// </summary>
        /// <param name="name"></param>
        /// <param name="list_"></param>
        /// <param name="folders"></param>
        public static void buildList(string name, List<TrackInfoItunes> list_, int prior, params string[] folders)
        {
            var lfolders = new List<string>(folders);
            buildList(name, list_, prior, lfolders);
        }


     
        /// <summary>
        /// création ou mise à jour d'une liste
        /// </summary>
        /// <param name="name"></param>
        /// <param name="list_"></param>
        /// <param name="folders"></param>
        public static void buildList(string name, List<TrackInfoItunes> list_, int prior, List<string> folders)
        {
            try
            {
                if (Conf.Simulation)
                    return;

                foreach (TrackInfoItunes track in list_)
                {
                    loader.reviveIfNecessary(track); 
                      
                }


                var rootIt = Conf.RootIt;
                RootItItem currentRoot = rootIt.roots[0];
                int count = rootIt.roots.Count;
                //   log.log("build list {0}",name);
                //  var list = new List<IFile>(list_);
                if (!calculRoots)
                {
                    calculRoots = true;
                    var list__ = new List<TrackInfoItunes>(list_);
                    list__.Sort(new PodCastComparer());



                    int countTrack = list_.Count;

                    long size = 0;
                    int j = 0;
                    int indexRoot = 0;



                    while (true)
                    {
                        if (j >= countTrack)
                            break;
                        TrackInfoItunes track = list__[j];
                        size += track.Size;
                        if (size <= currentRoot.size)
                        {
                            track.IndexRoot = indexRoot;
                        }
                        else
                        {
                            size = 0;
                            size += track.Size;
                            indexRoot++;
                            if (indexRoot >= count)
                                break;
                            currentRoot = rootIt.roots[indexRoot];
                            track.IndexRoot = indexRoot;
                        }
                        j++;
                    }

                }

                for (int r = 0; r < count; r++)
                {
                    currentRoot = rootIt.roots[r];
                    var folder = loader.TreePlayList.getComposite(currentRoot.name);
                    if (folder == null)
                        folder = loader.getOrCreateFolder(currentRoot.name);
                    folders = new List<string>(folders);

                    var nname = name;
                    if (name.Contains(Path.DirectorySeparatorChar.ToString()))
                    {
                        var tab = name.Split(Path.DirectorySeparatorChar);
                        string str = null;
                        for (int i = 0; i < tab.GetLength(0); i++)
                        {
                            if (str != null)
                                folders.Add(str);
                            if (!string.IsNullOrEmpty(tab[i]))
                                str = tab[i];
                        }
                        if (!string.IsNullOrEmpty(str))
                            nname = str;
                    }
                    var list = list_.FindAll(t => t.IndexRoot == r);
                    var l = new List<IFile>(list);

                    for (int i = 0; i < folders.Count; i++)
                    {
                        var aux = folder;
                        folder = folder.getComposite(folders[i]);
                        if (folder == null)
                            folder = loader.getOrCreateFolder(aux, folders[i], l.Count > 0);
                        if (folder == null)
                            return;
                    }

                    //  var folder = loader.root.getComposite("auto").getComposite("PODUtil"); 
                    var playlist = loader.getPlayList(folder, nname, l.Count > 0);
                    if (playlist != null)
                    {
                        if (prior < int.MaxValue && prior >= 0)
                            playlist.setPrior(prior);
                        //if (list.Count > 0)
                        loader.mergeList(playlist, l, false, _instance, null);
                        //else
                        //    loader.removeList(folder, name);
                    }



                    //log.log("clear list {0}", name); 
                    //loader.ClearList(playlist);
                    //log.log("add items {0}", name); 
                    //foreach (TrackInfoItunes track in list)
                    //    loader.addItemToList(playlist, track); 

                }
            }
            catch (Exception ex)
            {
                misc.log(ex.ToString());
            }


        }



        delegate void actionList(DirConf dir);
        private void recursif(DirConf dir, action pre, action post)
        {
            var fLoader = dir.Loader;
            //if (pre > action.none && pre < action.writeTracksPre)
            //    log.log("{0} {1}", pre, dir.getPath());
            fLoader.Action(pre);

            //Construction récursive sur l'arbre
            foreach (DirConf child in dir)
            {
                // DescBuilder sub = sb.createChild(child.getPath());
                recursif(child, pre, post);
            }
            //if (post > action.none && post < action.writeTracksPre)
            //    log.log("{0} {1}", post, dir.getPath());
            fLoader.Action(post);


        }

        private void loadCandidat(DirConf dir)
        {
            recursif(dir, action.loadCandidat, action.none);
        }


        //private void standAlone(DirConf dir)
        //{
        //    recursif(dir, action.standAlone, action.none); 
        //}

        private void phase2(DirConf dir)
        {
            recursif(dir, action.none, action.phase2);
        }



        /// <summary>
        /// Constitution d'un répertoire
        /// </summary>
        /// <param name="dir"></param>
        /// <param name="sb"></param>
        private void Selection(DirConf dir)
        {
            recursif(dir, action.selectionPre, action.selectionPost);

            // ne sert pas
            //dir.TransmissionListToParent();

        }

        private void WritePlayList(DirConf dir)
        {
            recursif(dir, action.writeLists, action.none);
        }

        private void WriteTracks(DirConf dir)
        {
            recursif(dir, action.writeTracksPre, action.writeTracksPost);
        }
#if build
        public void scanFiles(List<TrackInfoItunes> list, DirectoryInfo dir, ref int nbIntegre, ref int nbSuppr)
        {
            string album = dir.Name;
            var files = dir.GetFiles();
            if (files.GetLength(0) > 0)
            {
                foreach (FileInfo file in dir.GetFiles())
                {
                    string location = file.FullName.ToLower();
                    var trackByLocation = list.Find(t => t.Location != null && t.Location.ToLower().Equals(location));

                    if (trackByLocation != null)
                        continue;
                    var filePub = new FilePub(file.FullName);
                    new PubLoader(filePub).setPub();

                    TrackInfoItunes track = null;

                    foreach (TrackInfoItunes t in list)
                    {
                        if (album.Equals(t.Album))
                        {
                            if (filePub.Pub.Date == t.Pub.Date)
                            {
                                track = t;
                                break;
                            }
                        }
                    }
                    //  var track = list.Find(t => album.Equals(t) && filePub.Pub.Date.Equals(t.Pub.Date));
                    if (track == null)
                    {
                       
                        log.log("création Track à partir de " + file.FullName);
                        track = loader.createTrack(file.FullName) as TrackInfoItunes;

                        if (track == null)
                            continue;

                        // verif pub; 
                        TrackInfoItunes track2Verif = null;

                        if (track.Pub > TrackInfoItunes.MIN)
                        {
                            foreach (TrackInfoItunes t in list)
                            {
                                if (album.Equals(t.Album))
                                {
                                    if (track.Pub.Date == t.Pub.Date)
                                    {
                                        track2Verif = t;
                                        break;
                                    }
                                }
                            }
                        }

                        if (track2Verif != null)
                        {
                            log.log("Track créé {0} {1} {2} {3} MAIS doublon avec  {4} {5} {7} {8} {9} intégrés {10} supprimés", track.Name, track.Album, track.Pub, track.Location, 
                                track2Verif.Name, track2Verif.Album, track2Verif.Pub, track2Verif.Location, nbIntegre, nbSuppr);
                            track2Verif.Delete();
                            file.moveTree(file.FullName.ToLower().Replace(@"c:\zique\podcasts", @"C:\zique\poubelle"), false);
                            nbSuppr++;
                            continue; 

                        }
                        log.log("Track créé {0} {1} {2} {3} {4} intégrés {5} supprimés", track.Name, track.Album, track.Pub, track.Location,nbIntegre,nbSuppr );
                        nbIntegre++;
                        list.Add(track);
                    }
                    else
                    {
                        if (track.Pub.DayOfYear > 1)
                        {
                            nbSuppr++;
                            log.log("suppression du track sur {0} en doublon avec {1} {2} {3} {4} {5} int�gr�s {6} supprim�s", file.FullName, track.Name, track.Album, track.Pub, track.Location, nbIntegre, nbSuppr);
                            file.moveTree(file.FullName.ToLower().Replace(@"c:\zique\podcasts", @"C:\zique\poubelle"), false);
                        }
                    }

                }
                log.log("fin scan {0}: {1} intégrés, {2} supprimmés", album, nbIntegre, nbSuppr);
            }

            foreach (DirectoryInfo subDir in dir.GetDirectories())
            {
                scanFiles(list, subDir, ref nbIntegre, ref nbSuppr);
            }
        }
#endif

#if menage

        private void listFiles(Dict<string, FileInfo> dict, DirectoryInfo dir)
        {
           
            foreach (FileInfo file in dir.GetFiles())
            {
                dict[file.FullName] = file;
            }

            foreach (DirectoryInfo subDir in dir.GetDirectories())
            {
                listFiles(dict, subDir);
            }
        }
#endif

        /// <summary>
        /// A checkquer
        /// </summary>
        /// <param name="feeds"></param>
        /// <param name="current"></param>
        private void scanFeedsForRecordEmptyLists(Feeds feeds, PlayListComposite current)
        {
            foreach (PlComponent pl in current)
            {
                var plC = pl as PlayListComposite;
                if (plC == null)
                {
                    // log.log("{0} {1} pas un PlayListComposite", pl, pl.GetType());
                    continue;
                }

                if (plC.LeafsCount > 0)
                {
                    string album = plC.Name;
                    feeds.check(album);
                }

                scanFeedsForRecordEmptyLists(feeds, plC);

            }
        }




        #region IAbortTask Members

        public bool Aborted
        {
            get
            {
                return false;
            }
            set
            {

            }
        }

        #endregion


        private class Vendee
        {
            //  "Emission du 02/11/2008"
            private static Regex regex1 = new Regex(@".*(\d\d\/\d\d\/\d\d\d\d).*");
            private static Regex regex2 = new Regex(@".*(\d\d\/\d\d\/\d\d).*");
            private static Regex regex3 = new Regex(@".*(\d\d\/\d\d).*");
            private enum vendeeType
            {
                none,
                vacation,
                hebdo,
                chronique,
                ponton

            }
            public void go(ArrayList list)
            {
                var listV = new ArrayList();
                string VENDEE = "vendee ";
                foreach (IITFileOrCDTrack t in list)
                {
                    if (t.Album.Contains("Vendée Globe") || t.Album.Contains(VENDEE))
                        listV.Add(t);
                }

                // listTrack.FindAll(t => t.Album.Contains("Vendee Globe"));



                foreach (IITFileOrCDTrack track in listV)
                {
                    string name = track.Name.ToLower();
                    vendeeType _type = vendeeType.none;
                    foreach (vendeeType type in Enum.GetValues(typeof(vendeeType)))
                    {
                        if (name.Contains(type.ToString()))
                        {
                            track.Album = VENDEE + type.ToString();
                            _type = type;
                            break;
                        }
                    }

                    DateTime? dt = null;
                    dt = getDate(track.Name);

                    if (!dt.HasValue)
                        dt = getDate(track.Description);

                    if (!dt.HasValue)
                        dt = getDate(track.LongDescription);

                    if (dt.HasValue)
                    {
                        string _comment = dt.Value.ToString("yyyy/MM/dd");
                        string plus = "";
                        switch (_type)
                        {
                            case vendeeType.none:
                                break;
                            case vendeeType.vacation:
                            case vendeeType.ponton: plus = " 11:00"; break;
                            case vendeeType.hebdo: plus = " 14:00"; break;
                            case vendeeType.chronique: plus = " 12:00"; break;

                        }
                        track.Comment = _comment + plus;
                        track.Year = dt.Value.Year;
                    }



                }
            }

            private DateTime? getDate(string input)
            {
                if (string.IsNullOrEmpty(input))
                    return null;
                string[] words = input.Split(' '); int count = words.GetLength(0);

                DateTime? ret = null;
                StringBuilder sb = null;
                int word = 0;
                for (int i = 0; i < count; i++)
                {
                    string w = words[i];
                    if (string.IsNullOrEmpty(w))
                        continue;
                    if (sb == null)
                    {
                        if (w.ToLower().Equals("du"))
                            sb = new StringBuilder();
                    }

                    else
                    {
                        sb.Append(w);
                        sb.Append(" ");
                        word++;

                        try
                        {
                            ret = Convert.ToDateTime(sb.ToString());
                        }
                        catch
                        {
                        }

                        if (ret.HasValue)
                        {
                            int month = ret.Value.Month;
                            int year = 2008;
                            if (month < 6)
                                year = 2009;
                            return new DateTime(year, month, ret.Value.Day);
                        }
                    }
                }
                try
                {
                    DateTime dt = Convert.ToDateTime(sb.ToString());
                    if (dt.Year < 2008 || dt.Year > 2009)
                        dt = new DateTime(2008, dt.Month, dt.Day);
                    return dt;
                }
                catch
                {
                    return null;
                }
                //if (regex1.IsMatch(_input))
                //    return Convert.ToDateTime(regex1.Match(_input).Groups[1].Value); 
                //else if (regex2.IsMatch(_input))
                //    return Convert.ToDateTime(regex2.Match(_input).Groups[1].Value); 
                //else if (regex3.IsMatch(_input))
                //    return Convert.ToDateTime(regex1.Match(_input).Groups[1].Value); 
                //return null; 
            }

            private string getDateString(string input)
            {
                if (string.IsNullOrEmpty(input))
                    return "";
                string[] words = input.Split(' '); int count = words.GetLength(0);


                StringBuilder sb = null;
                for (int i = 0; i < count; i++)
                {
                    string w = words[i];
                    if (string.IsNullOrEmpty(w))
                        continue;
                    if (sb == null)
                    {
                        if (w.ToLower().Equals("du"))
                            sb = new StringBuilder();
                    }

                    else
                    {
                        sb.Append(w);
                        sb.Append(" ");
                    }
                }

                if (sb == null)
                    return input;

                return sb.ToString().Replace(".", "");
            }


        }
    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\TrackInfoItunes.cs">
    <content><![CDATA[using System;
using System.Globalization;
using System.IO;
using System.Text.RegularExpressions;
using System.Xml;
using iTunesLib;
using pdb.ordo;
using pdb.podcast.Build;
using pdb.util;
using System.Collections.Generic;
using pdb.podcast.Tuning;
using pdb.util.list;
using pdb.obj;
using pdb.it;
using pdb.podcast.Albums;

namespace pdb.podcast
{
    public enum selectMode
    {
        none = 0,
        standAlone = 1,
        simple = 2,
        serial = 3,
        histo = 4
    }

    public class TrackInfoItunes : pdb.it.TrackInfoItunes, IPub
    {
        private static Loader loader;
        public new static Loader Loader { set { loader = value; } }

        public new TrackAlbum TrackAlbum { get { return base.TrackAlbum as TrackAlbum; } }

        public int AlbumRating { get { return TrackAlbum.AlbumRating; } }
        //  private bool ratingComputed; public bool RatingComputed { get { return ratingComputed; } }

        private void import(IITFileOrCDTrack native)
        {
            misc.log("import {0}", this);
            native.AlbumRating = AlbumRating;
            if (rating != AlbumRating)
                native.Rating = rating;
            native.PlayedDate = this.PlayedDate.ToUniversalTime();
            native.Enabled = this.enabled;
            native.PlayedCount = this.playCount;
        }

        public void import()
        {
            if (!isPresent())
                return;

            try
            {
                var native = TrackTrack;
                if (native == null)
                    native = Track;
                if (native == null)
                {
                    bgClass.add(new BgTaskImport(this));
                }
                else
                    import(native);

            }
            catch (Exception ex)
            {
                misc.log(ex.ToString());
            }
        }

        public void merge()
        {
            if (!isPresent())
                return;
            bgClass.add(new BgTaskImport(this));
        }

        public void import(TrackInfoItunes db)
        {
            this._album = db._album;
            // this.albumRating = db.albumRating;
            this.rating = db.rating;
            //this.rare = db.rare;
            //this.info = db.info;
            this.playCount = db.playCount;
            this.PlayedDate = db.PlayedDate;
            this.enabled = db.enabled;
            present = true;
            db.present = true;

            import();
        }

        private DateTime offset;
        public DateTime Offset
        {
            set
            {
                if (offset == DateTime.MinValue)
                    offset = value;
            }
            get { return offset; }
        }

        public override IITFileOrCDTrack Track
        {
            get
            {
                if (track != null)
                    return track;
                if (!present)
                {
                    if (!isPresent())
                        return new NoTrack(this);
                    // loader.resurrection(this);
                }
                return base.Track;
            }
        }

        public override IITFileOrCDTrack TrackTrack
        {
            get
            {
                if (tracktrack != null)
                    return tracktrack;
                if (!present)
                {
                    if (!isPresent())
                        return new NoTrack(this);
                    //   loader.resurrection(this);
                }
                return base.TrackTrack;
            }
        }

        private static volatile object _lock = new object();
        private static int volumeMin = int.MinValue;
        public static int VolumeMin { set { volumeMin = value; } }
        protected static string defaultFolder;
        //private static bool _updateNative;
        //public static bool UpdateNative { get { return _updateNative; } set { _updateNative = value; } }
        public static string DefaultFolder
        {
            set
            {
                if (defaultFolder == null)
                {
                    defaultFolder = value;
                    if (!defaultFolder.EndsWith("\\"))
                        defaultFolder += ("\\");
                    defaultFolder += "Podcasts\\";
                }
            }
            get { return defaultFolder; }
        }

        private int _dbId;

        public int DbId { get { return _dbId; } set { if (_dbId <= 0) _dbId = value; } }

        private static int NB = 0;
        private int iddebug;

        public TrackInfoItunes()
        {
            NB++;
            iddebug = NB;
        }

        private static BackGroundTaskMgr bgMove;  //new BackGroundTaskMgr("Move"); 

        private SequentialDictString<LimitItem> listSelected = new SequentialDictString<LimitItem>();
        //public List<LimitItem> Providers { get { return listSelected; } }

        private SequentialDictString<LimitItem> listLoad0 = new SequentialDictString<LimitItem>();
        private SequentialDictString<LimitItem> listStandAlone = new SequentialDictString<LimitItem>();
        // public List<LimitItem> Providers0 { get { return listLoad0; } }

        //private List<LimitItem> listLoadRecursif = new List<LimitItem>();
        //public List<LimitItem> ProvidersRecursif { get { return listLoadRecursif; } }

        //private List<LimitItem> listLoadGuest = new List<LimitItem>();
        //public List<LimitItem> ProvidersGuest { get { return listLoadGuest; } }



        /// <summary>
        /// Seule limite contenant le track
        /// </summary>
        private LimitItem exclu;
        public LimitItem Exclu { get { return exclu; } set { exclu = value; } }

        public void addPhase1(LimitItem item)
        {
            var key = item.ID;
            if (!listLoad0.ContainsKey(key))
                listLoad0.Add(key, item);
        }
        public bool containsload(LimitItem item)
        {
            var key = item.ID;
            return listLoad0.ContainsKey(key);
        }

        //public bool containsStandAlone(LimitItem item)
        //{
        //    var key = item.ID;
        //    return listStandAlone.ContainsKey(key);
        //}

        public bool containsSelect(LimitItem item)
        {
            var key = item.ID;
            return listSelected.ContainsKey(key);
        }
        public bool isPreselected { get { return listLoad0.Count > 0; } }
        public ICollection<LimitItem> Providers1 { get { return listStandAlone.Values; } }
        public ICollection<LimitItem> Providers { get { return listSelected.Values; } }
        public LimitItem Provider
        {
            get
            {
                if (listSelected.Count == 0)
                    return null;
                return listSelected.List[0];
            }
        }
        public string GetProvider()
        {
            var provider = Provider;
            if (provider == null)
                return "";
            return provider.ToString();
        }

        public void addRecursif(LimitItem item)
        {
            //if (!listLoadRecursif.Contains(item))
            //    listLoadRecursif.Add(item);
        }

        public void addGuest(LimitItem item)
        {
            //if (!listLoadGuest.Contains(item))
            //    listLoadGuest.Add(item);
        }

        public static TrackInfoItunes createCopy(TrackInfoItunes org)
        {
            var copy = org.MemberwiseClone() as TrackInfoItunes;
            copy.clearLists();
            return copy;
        }

        public void synch(TrackInfoItunes o)
        {
            _in = o._in;
            _out = o._out;
        }

        const string REFONTE = "v1";
        public override void build(IITFileOrCDTrack track)
        {
            base.build(track);

            if (Strange)
                return;

            TrackAlbum.AlbumRating = track.AlbumRating;
            // this.ratingComputed = track.ratingKind == ITRatingKind.ITRatingKindComputed;

#if MOVE
            var loc = track.Location;
            FileInfo file = new FileInfo(loc);
            if (loc.StartsWith("Y:"))
                return;
            string dest = "Y" + loc.Substring(1);


            try
            {
                misc.log("deplacer " + loc);
                string newDest = file.moveTree(dest, false);
                misc.log("-------> " + newDest);
                track.Location = newDest;
                //try
                //{
                //    File.Delete(loc);
                //}

                //catch (Exception del)
                //{

                //    misc.log(del.ToString());
                //}

            }
            catch (Exception ex)
            {
                misc.log(ex.ToString());
            }
#else

            if (!isPodcast)
                return;

            duree = new util.timeSpan(Duration);

            CheckPlay(this);

            //if (track.PlayedCount > 0)
            //{
            //    played = markAsPlayed(Rating, PlayedDate);
            //}

            var loc = track.Location;
            //if (loc.ToUpper().Contains("FABRIQUE"))
            //{
            //    int toto = 0; 
            //}
            bool target = true;
            var cuDtFileFormat = new DateTimeFormatInfo();
            cuDtFileFormat.FullDateTimePattern = "yyyy.MM.dd_HH.mm";
            string[] tab = loc.Split('_');
            var count = tab.GetLength(0);
            if (count >= 2)
            {
                var part = tab[0] + "_" + tab[1];
                DateTime dtFile;
                bool fileIsDate = DateTime.TryParse(part, cuDtFileFormat, DateTimeStyles.None, out dtFile);
                target = !fileIsDate;
            }


            //bool target = loc.ToUpper().Contains(@"D:\ZIQUE\PODCASTS\LA FABRIQUE DE L") && loc.ToUpper().Contains("HISTOIRE");

            try
            {

                pub = track.ReleaseDate;

                var cuDtFormat = new DateTimeFormatInfo();
                cuDtFormat.FullDateTimePattern = "yyyy/MM/dd";

                var cuDtFormat2 = new DateTimeFormatInfo();
                cuDtFormat2.FullDateTimePattern = "yyyy/MM/dd HH:mm";

                if (pub > MIN)
                {
                    string commentByReleaseDate = pub.ToString(cuDtFormat2.FullDateTimePattern);
                    if (Comment != commentByReleaseDate)
                    {
                        misc.log("chgt Comment � partir de releaseDate {0} de {1} vers {2} {3}", pub, Comment, commentByReleaseDate, this);
                        Comment = commentByReleaseDate;
                    }

                    return;
                }

                // ici pas de release Date

                string comment = track.Comment;

                try
                {
                    string partDate = comment.Split(' ')[0];
                    DateTime dtComment = DateTime.MinValue;

                    bool dtCommentBuild = false;

                    dtCommentBuild = DateTime.TryParse(partDate, cuDtFormat, DateTimeStyles.None, out dtComment);

                    bool dtCommentBuild2 = false;
                    if (dtCommentBuild)
                        dtCommentBuild2 = DateTime.TryParse(comment, cuDtFormat2, DateTimeStyles.None, out dtComment);


                    //if (dtComment.DayOfYear > 1)
                    //    return;

                    Regex reg = new Regex(@"(\d{2}.\d{2}.\d{4})");
                    string description = track.Description;

                    if (string.IsNullOrEmpty(description))
                        description = "";

                    DateTime dtDesc = DateTime.MinValue;
                    if (reg.IsMatch(description))
                    {
                        string strDescriptionDate = reg.Match(description).Groups[1].Value;

                        dtDesc = Convert.ToDateTime(strDescriptionDate);
                    }

                    if (dtDesc > DateTime.MinValue)
                    {
                        string newComment = dtDesc.ToString(cuDtFormat2.FullDateTimePattern);
                        if (newComment != track.Comment)
                        {
                            if (dtCommentBuild2 && dtComment.Minute != 0)
                                return;
                            misc.log("chgt Comment à partir de description {0} de {1} vers {2} {3}", description, comment, newComment, this);
                            track.Comment = newComment;
                        }
                    }
                    else if (dtCommentBuild2)
                    {

                    }






                }
                catch (Exception ex)
                {
                    misc.logError("impossible de gérer " + this, ex);
                }
            }
            finally
            {

                if (target)
                {

                    FileInfo file = new FileInfo(loc);
                    DirectoryInfo dirTrack = file.Directory;
                    DirectoryInfo dirPodcast = dirTrack.Parent;
                    if (!dirPodcast.Name.Equals(REFONTE))
                    {
                        DirectoryInfo dirV1 = new DirectoryInfo(dirPodcast.FullName + Path.DirectorySeparatorChar + REFONTE);
                        if (!dirV1.Exists)
                            dirV1.Create();

                        string dest = dirV1.FullName + Path.DirectorySeparatorChar + dirTrack.Name + Path.DirectorySeparatorChar + file.Name;  // loc.Replace(@"D:\", @"E:\");

                        string dirDest = Path.GetDirectoryName(dest);
                        string fileName = Path.GetFileName(dest);
                        fileName = pub.ToString("yyyy.MM.dd_HH.mm") + "_" + fileName;

                        dest = dirDest + Path.DirectorySeparatorChar + fileName;
                        try
                        {
                            misc.log("deplacer " + loc);
                            string newDest = file.copyTree(dest, null);
                            misc.log("-------> " + newDest);
                            track.Location = newDest;
                            try
                            {
                                File.Delete(loc);
                            }

                            catch (Exception del)
                            {

                                misc.log(del.ToString());
                            }

                        }
                        catch (Exception ex)
                        {
                            misc.log(ex.ToString());
                        }
                    }
                }

            }
#endif

        }


        private static IDictionary<int, DateTime> maxPlayed = new Dictionary<int, DateTime>();
        public static IDictionary<int, DateTime> MaxPlayed { set { maxPlayed = value; } }

        private static DateTime playedLevel = DateTime.MinValue;
        public static DateTime PlayedLevel { set { playedLevel = value; } }
        //public static bool markAsPlayed(int rating, DateTime date)
        //{
        //    if (maxPlayed.ContainsKey(rating))
        //        return date > maxPlayed[rating];
        //    return true;
        //}


        public static void CheckPlay(TrackInfoItunes track)
        {
            track.played = isPlayed(track);
        }


        private static bool isPlayed(TrackInfoItunes track)
        {
            if (track.playCount <= 0)
            {
                if (playedLevel == DateTime.MinValue || track.PlayedDate >= playedLevel)
                    return false;
                // pour les vieux on prend quand même en compte la date de dernière lecture
                return true;
            }

            int rating = track.Rating;
            if (maxPlayed.ContainsKey(rating))
                return track.PlayedDate > maxPlayed[rating];
            return true;

        }


        public string ShortName { get { return getShortName(location); } }
        public static string getShortName(string location) { return misc.getShortPath(location, Exporter.PODCASTS, Exporter.ZIQUE, "Y:"); }

        private string hibernateLocation;
        public string HibernateLocation { get { return hibernateLocation; } set { hibernateLocation = value; } }


        public bool isPresent()
        {
            if (!string.IsNullOrEmpty(hibernateLocation))
                return FileRegister.Exist(hibernateLocation);
            return FileRegister.Exist(location);

            //var path = location;
            //if (_extern)
            //{
            //    var shortName = ShortName;
            //    path = TrackInfoItunes.DefaultFolder + shortName;
            //}
            //if (FileRegister.Exist(location))
            //{
            //    location = path;
            //    return true;
            //}
            //return false;
        }

        public void build(XmlReader reader)
        {

            location = reader.GetAttribute("f");
            if (Path.IsPathRooted(location))
            {
            }
            else
                location = TrackInfoItunes.DefaultFolder + location;


            hibernateLocation = reader.GetAttribute("hl");

            string album = reader.GetAttribute("alb");
            if (album != null)
                albumMgr.setAlbum(this, album);
            name = reader.GetAttribute("name");

            var str = reader.GetAttribute("pub");
            if (!string.IsNullOrEmpty(str))
                pub = Convert.ToDateTime(str);

            str = reader.GetAttribute("pub2");
            if (!string.IsNullOrEmpty(str))
                pub2 = Convert.ToDateTime(str);

            str = reader.GetAttribute("date");
            if (!string.IsNullOrEmpty(str))
            {
                // playCount = 1;
                PlayedDate = Convert.ToDateTime(str);
            }

            str = reader.GetAttribute("nbr");
            if (!string.IsNullOrEmpty(str))
            {
                playCount = Convert.ToInt16(str);
            }

            str = reader.GetAttribute("albumRating");
            if (!string.IsNullOrEmpty(str))
                TrackAlbum.AlbumRating = Convert.ToInt32(str);

            str = reader.GetAttribute("rating");
            if (!string.IsNullOrEmpty(str))
                rating = Convert.ToInt32(str);

            if (TrackAlbum.AlbumRating > 0 && rating == 0)
                rating = TrackAlbum.AlbumRating;

            str = reader.GetAttribute("id");
            _dbId = Convert.ToInt32(str);

            if ("y" == reader.GetAttribute("rare"))
                TrackAlbum.Rare = true;
            if ("y" == reader.GetAttribute("info"))
                TrackAlbum.Info = true;
            if ("y" == reader.GetAttribute("disabled"))
                enabled = false;
            else
                enabled = true;
            str = reader.GetAttribute("s");
            if (!string.IsNullOrEmpty(str))
                _size = Convert.ToInt64(str);
            else
                _size = -1;

            str = reader.GetAttribute("d");
            if (!string.IsNullOrEmpty(str))
                Duree = timeSpan.FromSecondes(Convert.ToInt32(str));



            str = reader.GetAttribute("add");
            if (!string.IsNullOrEmpty(str))
                added = Convert.ToDateTime(str);
            str = reader.GetAttribute("add1");
            if (!string.IsNullOrEmpty(str))
                AddedFirst = Convert.ToDateTime(str);

            if (addedFirst == DateTime.MinValue)
                addedFirst = added;

            CheckPlay(this);

        }

        public void readStat(XmlReader reader)
        {
            var str = reader.GetAttribute("in");
            if (!string.IsNullOrEmpty(str))
                _in = Convert.ToDateTime(str);

            str = reader.GetAttribute("out");
            if (!string.IsNullOrEmpty(str))
                _out = Convert.ToDateTime(str);
        }

        public void readStatGlobal(XmlReader reader)
        {
            DateTime oin = DateTime.MinValue;
            DateTime oout = DateTime.MinValue;
            var str = reader.GetAttribute("in");
            if (!string.IsNullOrEmpty(str))
                oin = Convert.ToDateTime(str);

            str = reader.GetAttribute("out");
            if (!string.IsNullOrEmpty(str))
                oout = Convert.ToDateTime(str);

            if (oin > oout)
            {
                //sélectionné
                _gout = DateTime.MaxValue;
                return;
            }

            if (oout > _gout)
                _gout = oout;
        }

        //public void consolidStat()
        //{
        //    if (_in > DateTime.MinValue)
        //    {
        //        if (_in < _gin || _gin == DateTime.MinValue)
        //            _gin = _in; 
        //    }

        //    if (_out > _gout)
        //        _gout = _out; 
        //}



        public override void build(XmlNode xTrack)
        {
            TrackInfoItunes copy = null;
            if (loader.Import || loader.Slave)
            {
                copy = createCopy(this);
            }

            base.build(xTrack);

            TrackAlbum.AlbumRating = 0;

            //  bool ratingComputed = false;
            bool albumRatingComputed = false;
            //if (Name.Contains("Aubenas"))
            //{
            //    int toto = 0;
            //}
            if (!isPodcast)
                return;
            if (Strange)
                return;
            string key = "";

            foreach (XmlNode node in xTrack.ChildNodes)
            {
                string value = node.InnerText;
                if (node.Name == "key")
                {
                    key = value;
                    //if (key == "Rating Computed")
                    //    ratingComputed = true;
                    if (key == "Album Rating Computed")
                        albumRatingComputed = true;
                    continue;
                }

                if (string.IsNullOrEmpty(value))
                    continue;
                switch (key)
                {
                    case "Date Added": added = Convert.ToDateTime(value); AddedFirst = added; break; // DateTime.SpecifyKind(Convert.ToDateTime(value), DateTimeKind.Utc); break;
                    case "Release Date": pub = Convert.ToDateTime(value); break; //DateTime.SpecifyKind(Convert.ToDateTime(value), DateTimeKind.Utc); break;
                    case "Album Rating": TrackAlbum.AlbumRating = Convert.ToInt32(value); break;
                }

            }
            // gestion des rating
            if (albumRatingComputed)
                TrackAlbum.AlbumRating = 0;

            duree = new util.timeSpan(Duration);


            bool change = false; 
            if (copy != null)
            {               
               if (copy._album != null)
                   _album = copy._album;
                name = copy.name;
                if (PlayedDate != copy.PlayedDate)
                {
                    PlayedDate = copy.PlayedDate;
                    change = true; 
                }
                if (playCount != copy.playCount)
                {
                    change = true; 
                    playCount = copy.playCount;
                }
                // albumRating = copy.albumRating;
                if (enabled != copy.enabled)
                {
                    enabled = copy.enabled;
                    change = true; 
                }

                if (rating != copy.rating)
                {
                    rating = copy.rating;
                    change = true; 
                }
               
                Duration = copy.Duration;
                duree = copy.duree;


            }
            PubLoader.setPub(false);

            CheckPlay(this);

            if (change)
            {
                import(); 
            }
        }



        //private PubLoader pubLoader;
        //internal PubLoader PubLoader { get { if (pubLoader == null) pubLoader = new PubLoader(this); return pubLoader; } }
        internal PubLoader PubLoader { get { return new PubLoader(this); } }

        public static DateTime MIN = new DateTime(1970, 1, 1);
        #region move verspubLoader

        //
        //private static Regex regex1 = new Regex(@".*(\d\d\.\d\d\.\d\d\d\d).*");
        //private static Regex regex2 = new Regex(@".*(\d\d\d\d)(\d\d)(\d\d).*");
        //private static Regex regex3 = new Regex(@".*(\d\d)\.(\d\d)\.(\d\d)_(\d\d)\.(\d\d)_.*");

        //private string getFileNameCmp(string comment)
        //{
        //    string fileName = Path.GetFileNameWithoutExtension(location);

        //    if (fileName.Contains(" "))
        //    {
        //        var tab = fileName.Split(' ');
        //        fileName = tab[tab.GetLength(0) - 1];
        //    }

        //    if (fileName.Contains("_"))
        //    {
        //        var tab = fileName.Split('_');
        //        fileName = tab[tab.GetLength(0) - 1];
        //    }

        //    if (fileName.Length > 3)
        //        return comment;

        //    int nb = 0;
        //    bool isNum = Int32.TryParse(fileName, out nb);

        //    if (!isNum)
        //        return comment;

        //    while (fileName.Length < 3)
        //    {
        //        fileName = "0" + fileName;
        //    }
        //    return comment + "_" + fileName;
        //}
        //private void checkDate1(string info)
        //{
        //    if (pub > MIN)
        //        return;
        //    if (pub < MIN)
        //        pub = MIN;

        //    if (regex1.IsMatch(info))
        //    {
        //        try
        //        {
        //            Match m = regex1.Match(info);
        //            string strDate = m.Groups[1].Value;
        //            DateTime dt = Convert.ToDateTime(strDate);
        //            pub = dt;
        //        }
        //        catch { }
        //    }
        //}

        //private void checkDate2(string info)
        //{
        //    if (pub > MIN)
        //        return;
        //    if (pub < MIN)
        //        pub = MIN;

        //    if (regex2.IsMatch(info))
        //    {
        //        try
        //        {
        //            Match m = regex2.Match(info);
        //            int year = Convert.ToInt16(m.Groups[1].Value);
        //            int month = Convert.ToInt16(m.Groups[2].Value);
        //            int day = Convert.ToInt16(m.Groups[3].Value);
        //            DateTime dt = new DateTime(year, month, day);
        //            pub = dt;
        //        }
        //        catch { }
        //    }
        //}

        //private void checkDate3(string info)
        //{
        //    if (pub > MIN)
        //        return;
        //    if (pub < MIN)
        //        pub = MIN;

        //    if (regex3.IsMatch(info))
        //    {
        //        try
        //        {
        //            Match m = regex2.Match(info);
        //            int year = Convert.ToInt16(m.Groups[1].Value);
        //            int month = Convert.ToInt16(m.Groups[2].Value);
        //            int day = Convert.ToInt16(m.Groups[3].Value);
        //            int hh = Convert.ToInt16(m.Groups[4].Value);
        //            int mm = Convert.ToInt16(m.Groups[5].Value);

        //            DateTime dt = new DateTime(year, month, day, hh, mm, 0);
        //            pub = dt;
        //        }
        //        catch { }
        //    }
        //}

        #endregion

        //public TrackInfoItunes(IITFileOrCDTrack track)
        //{
        //    this.track = track;
        //    this.artist = track.Artist;
        //    this.album = track.Album;
        //    this.name = track.Name;
        //    this.trackNumber = track.TrackNumber;
        //    this.rating = track.Rating;
        //    this.year = track.Year;
        //    this.comment = track.Comment;
        //    this.enabled = track.Enabled;
        //    this._isPodCast = track.Podcast;
        //    this.playedDate = track.PlayedDate;
        //    this.location = track.Location;
        //    this.duration = TimeSpan.FromSeconds(track.Duration);
        //    this.played = track.PlayedCount > 0;
        //    this.pub = track.ReleaseDate;

        //    checkDate1(name);
        //    checkDate2(name);

        //    if (!string.IsNullOrEmpty(location))
        //    {
        //        string fileName = Path.GetFileName(location);
        //        checkDate1(fileName);
        //        checkDate2(fileName);
        //    }

        //    if (pub <= MIN)
        //    {
        //        if (year > 1970)
        //        {
        //            DateTime dtYear = new DateTime(year, 1, 1);
        //            pub = dtYear;
        //        }
        //    }


        //    this.added = track.DateAdded;
        //    if (added < MIN) added = MIN;

        //    // DateTime dt_ = pub;
        //    if (pub <= MIN)
        //        pub = added;
        //    string comment = pub.ToString("yyyy/MM/dd HH:mm"); // dt_.Year + "-" + dt_.Month + "-" + dt_.Day;
        //    if (track.Comment != comment)
        //        track.Comment = comment;

        //}




        //public int TrackId { get { return track.trackID; } }
        //public int ID { get { return track.TrackDatabaseID; } }

        //public IITFileOrCDTrack Track { get { return track; } }


        #region ITrackNative Membres




        /// <summary>
        /// Date de publication
        /// </summary>
        private DateTime pub;
        private DateTime pub2;
        public DateTime Pub
        {
            get
            {
                return pub;
            }
        }

        public DateTime Pub2 { get { if (pub2 > pub) return pub2; return pub; } set { pub2 = value; } }


        /// <summary>
        /// date d'ajout
        /// </summary>
        private DateTime added;
        public DateTime Added { get { return added; } }

        /// <summary>
        /// Date de premier ajout; 
        /// </summary>
        private DateTime addedFirst;
        public DateTime AddedFirst
        {
            get { return addedFirst; }

            set
            {
                if (addedFirst == DateTime.MinValue)
                    addedFirst = value;
            }
        }

        private DateTime _in;
        public DateTime In { get { return _in; } }

        private DateTime _out;
        public DateTime Out { get { return _out; } }

        //private DateTime _gin;
        //public DateTime Gin { get { return _gin; } }

        /// <summary>
        /// Dernier out global (MaxValue si encore sélectionné)
        /// </summary>
        private DateTime _gout;
        public DateTime Gout { get { return _gout; } set { _gout = value; } }

        public void checkInOut()
        {
            DateTime now = DateTime.Now;
            if (Selected)
            {
                if (_in == DateTime.MinValue || _out > _in)
                    _in = now;
            }
            else
            {
                if (_in > DateTime.MinValue)
                {
                    if (_out == DateTime.MinValue || _in > _out)
                        _out = now;
                }
            }
        }

        /// <summary>
        /// Podcast de type info
        /// </summary>
        // private bool info;

        public bool Info
        {
            get { return TrackAlbum.Info; }
            set { TrackAlbum.Info = value; }
        }

        /// <summary>
        /// Podcast rare (moins de trois fois par semaine)
        /// </summary>
        //  private bool rare;
        public bool Rare
        {
            get { return TrackAlbum.Rare; }
            set { TrackAlbum.Rare = value; }
        }

        private bool played;
        public bool Played { get { return played; } }

        private bool globalSelected;
        public bool GlobalSelected { get { return globalSelected; } set { globalSelected = value; } }

        //private string feed;
        //public string Feed { get { return feed; } set { feed = value; } }

        private selectMode selected;
        private bool inJournal = false;

        public bool FreeInJournal { get { return Selected && !inJournal; } }
        public void markInJournal() { inJournal = true; }
        //    public bool StandAlone { get { return selected > selectMode.none; } }
        public bool Selected { get { return selected >= selectMode.simple; } }
        public bool Histo { get { return selected == selectMode.histo; } }
        public bool Serial { get { return selected == selectMode.serial; } }
        // public selectMode Select { get { return selected; } }


        private void clearLists()
        {
            selected = selectMode.none;
            exclu = null;
            inJournal = false;
            listSelected = new SequentialDictString<LimitItem>();
            listLoad0 = new SequentialDictString<LimitItem>();
            listStandAlone = new SequentialDictString<LimitItem>();
            indexRoot = -1;
            offset = default(DateTime);
            //listLoadGuest.Clear();
            //listLoadRecursif.Clear();

        }

        // private static Regex regInfoShort = new Regex(@".+(\d\d\.\d\d\.\d\d)");
        public void updateNative()
        {
            PubLoader.setPub(true);

            int volume = Volume;
            if (Album.Contains("RFI"))
            {
                if (volume != -20)
                    Volume = -20;
            }
            else
            {
                if (volume < volumeMin)
                    Volume = volumeMin;
            }


            if (pub > MIN)
            {


                string infoShort = pub.ToString("dd.MM.yy");
                string infoPubName = pub.ToString("dd.MM.yyyy");
                string infoPubName2 = pub.ToString("dd/MM/yyyy");
                string infoPubName3 = pub.ToString("dd/MM/yy");
                string infoYear = Year.ToString();
                if (pub.DayOfYear == 1)
                {
                    infoPubName = pub.Year.ToString();
                    infoPubName2 = infoPubName;
                    infoPubName3 = infoPubName;
                    infoShort = infoPubName;
                }

                string name = Name;
                string str = name;


                while (str.Contains(infoShort))
                    str = str.Replace(infoShort, "");
                while (str.Contains(infoPubName))
                    str = str.Replace(infoPubName, "");
                while (str.Contains(infoPubName2))
                    str = str.Replace(infoPubName2, "");
                while (str.Contains(infoPubName3))
                    str = str.Replace(infoPubName3, "");


                //if (regInfoShort.IsMatch(str))
                //{
                //    var strdate = regInfoShort.Match(str).Groups[1].Value;
                //    str = str.Replace(strdate, "");
                //}


                var strDayOfWeek = "";
                switch (pub.DayOfWeek)
                {
                    case DayOfWeek.Friday:
                        strDayOfWeek = "v";
                        break;
                    case DayOfWeek.Monday:
                        strDayOfWeek = "l";
                        break;
                    case DayOfWeek.Saturday:
                        strDayOfWeek = "s";
                        break;
                    case DayOfWeek.Sunday:
                        strDayOfWeek = "d";
                        break;
                    case DayOfWeek.Thursday:
                        strDayOfWeek = "j";
                        break;
                    case DayOfWeek.Tuesday:
                        strDayOfWeek = "ma";
                        break;
                    case DayOfWeek.Wednesday:
                        strDayOfWeek = "me";
                        break;
                    default:
                        break;
                }
                //Michel Rocard (1/5) l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l 17.06.13 l

                var s1 = strDayOfWeek + " ";
                strDayOfWeek = " " + strDayOfWeek;

                while (str.EndsWith(strDayOfWeek))
                    str = str.Remove(str.Length - strDayOfWeek.Length);
                while (str.EndsWith(s1))
                    str = str.Remove(str.Length - s1.Length);

                //if (str.Contains(infoPubName))
                //    str = str.Replace(infoPubName, infoShort);
                //else if (name.Contains(infoPubName2))
                //    str = str.Replace(infoPubName2, infoShort);

                //else
                //{
                //    if (!str.Contains(infoShort))
                //    {
                //        str = str + " " + infoShort;
                //    }
                //    else
                //    {
                //        if (Year > 1980 && str.Contains(infoYear))
                //            str = str.Replace(infoYear, "").Trim();
                //    }
                //}
                var strBUG = "30.12.99";
                if (str.Contains(strBUG))
                    str = str.Replace(strBUG, "");

                str = str.Replace("  ", " ");
                str = str.Replace("  ", " ");
                str = str.Replace("  ", " ").Trim();

                str += " ";
                str += infoShort;


                str += strDayOfWeek;

                if (!str.Equals(name))
                    Name = str;
            }
        }
        public void select(selectMode value, LimitItem limit)
        {

            var key = limit.ID;

            if (value == selectMode.standAlone)
            {
                if (!listStandAlone.ContainsKey(key))
                    listStandAlone.Add(key, limit);
            }
            else
            {
                if (!listSelected.ContainsKey(key))
                    listSelected.Add(key, limit);
            }


            if (selected == value)
                return;

            if (value > selectMode.standAlone)
            {

                selected = value;
                if (isPresent() && !present)
                {
                    // loader.resurrection(this);
                }


            }

        }


        #endregion

        public override string ToString()
        {
            int level = Rating / 20;
            string strPub = pub > MIN ? pub.ToShortDateString() : "";
            string strYear = Year > 0 ? Year.ToString() : "";
            return level.ToString() + " " + Album + " " + Name + " " + strYear + " " + strPub;
        }

        public void copy(string ziqueDest, string log)
        {
            if (string.IsNullOrEmpty(location))
                return;

            FileInfo file = new FileInfo(location);
            DirectoryInfo dir = file.Directory;
            if (file.Exists)
            {
                string strPub1 = pub.ToString("dd.MM.yyyy");
                string strPub2 = pub.ToString("yy.MM.dd");

                string fileName = Path.GetFileName(location);

                if (pub > MIN && !fileName.StartsWith(strPub1) && !fileName.StartsWith(strPub2))
                    fileName = strPub2 + "_" + fileName;

                string strDir = dir.Name;
                if (!string.IsNullOrEmpty(Album))
                    strDir = Album;



                string dest = ziqueDest + Path.DirectorySeparatorChar + strDir + Path.DirectorySeparatorChar + fileName;
                misc.log(" {0} {1} à copier vers {2}", log, location, dest);
                try
                {
                    string newDest = file.copyTree(dest, false);

                }
                catch (Exception ex)
                {
                    misc.log(ex.ToString());
                }
            }

        }

        public void move(string ziqueOrg, string ziqueDest, DateTime limit)
        {
            if (pub >= limit)
                return;

            if (string.IsNullOrEmpty(location))
                return;
            FileInfo file = new FileInfo(location);
            DirectoryInfo dir = file.Directory;
            if (file.Exists)
            {
                if (location.StartsWith(ziqueOrg + @"Podcasts"))
                {
                    misc.log(" � d�placer" + location);
                    string dest = location.Replace(ziqueOrg, ziqueDest);

                    string dirDest = Path.GetDirectoryName(dest);
                    string fileName = Path.GetFileName(dest);
                    fileName = pub.ToString("yy.MM.dd_HH.mm") + "_" + fileName;

                    dest = dirDest + Path.DirectorySeparatorChar + fileName;
                    try
                    {
                        string newDest = file.copyTree(dest, false);
                        if (bgMove == null)
                        {
                            lock (_lock)
                            {
                                if (bgMove == null)
                                    bgMove = BackGroundTaskMgr.getMgrlarge("Move");
                            }
                        }
                        //  file.CopyTo(dest, true);
                        bgMove.add(new BgTaskCopy(this, location, newDest));
                    }
                    catch (Exception ex)
                    {
                        misc.log(ex.ToString());
                    }
                }
            }


        }

        private class BgTaskCopy : pdb.ordo.BgTaskBase
        {
            TrackInfoItunes info;
            string value;
            public BgTaskCopy(TrackInfoItunes info, string desc, string value)
                : base(desc)
            {
                this.info = info;
                this.value = value;
            }

            public override void exec()
            {
                try
                {
                    var _track = info.Track;
                    if (_track == null)
                    {
                        success = false;
                        return;
                    }

                    _track.Location = value;

                    misc.log("copie effectu�e " + value);
                    try
                    {
                        File.Delete(Desc);
                    }
                    catch (Exception ex)
                    {
                        misc.log("impossible de supprimer " + Desc + " " + ex.ToString());
                    }
                    success = true;
                }
                catch (Exception e)
                { misc.log("NIET " + e.Message); }

                if (!success && info.Track != null)
                {
                    //misc.log("invalidation track " + info);
                    ////  info.track = null;
                }

            }
        }



        DateTime IPub.Pub
        {
            get
            {
                return pub;
            }
            set
            {
                pub = value;
            }
        }
        DateTime IPub.Pub2
        {
            set
            {
                pub2 = value;
            }
        }

        string IPub.Comment
        {
            get
            {
                return Comment;
            }
            set
            {
                if (string.IsNullOrEmpty(this.Grouping))
                    setGrouping(this.Comment, true);
                Comment = value;
            }
        }

        string IPub.Name
        {
            get { return Name; }
        }

        string IPub.Location
        {
            get { return location; }
        }

        int IPub.Year
        {
            get { return Year; }
        }

        DateTime IPub.Added
        {
            get
            {
                return added;
            }
            set
            {
                added = value;
            }
        }
        DateTime IPub.Offset { get { return offset; } }
        private pdb.util.timeSpan duree;
        public pdb.util.timeSpan Duree
        {
            get
            {

                if (duree.Value == 0)
                {
                    duree = new timeSpan(base.Duration);
                }
                return duree;
            }
            private set
            {
                duree = value;
                if (base.Duration.TotalSeconds == 0)
                {
                    base.Duration = TimeSpan.FromSeconds(duree.Value);
                }
            }
        }

        public override TimeSpan Duration
        {
            get
            {
                var dur = base.Duration;
                if (dur.TotalSeconds == 0)
                {
                    base.Duration = TimeSpan.FromSeconds(duree.Value);
                }
                return base.Duration;
            }

            set
            {
                base.Duration = value;
                if (duree.Value == 0)
                {
                    duree = new timeSpan(base.Duration);
                }
            }
        }

        private long _size = -1;
        public long Size
        {
            get
            {
                if (_size < 0)
                {
                    var f = FileRegister.Check(Location);
                    if (f.Exists)
                        _size = f.Length;
                    else
                        _size = 0;
                }
                return _size;
            }
        }

        private int indexRoot = -1;
        public int IndexRoot { get { return indexRoot; } set { indexRoot = value; } }




        public static DateTime Date0;
        private timeSpan ts;
        public timeSpan Ts
        {
            get
            {
                if (ts == default(timeSpan))
                {
                    if (Date0 == DateTime.MinValue)
                        throw new ApplicationException("Date0 pas initialisée");
                    ts = new timeSpan(Pub2 - Date0);
                }
                return ts;
            }
        }

        public void hibernate(FileValue fv, string dirH)
        {
            bgClass.add(new BgTaskHibernate(this, fv, dirH));
        }

        protected class BgTaskHibernate : BgTaskDeleteTrackTrack
        {
            private TrackInfoItunes track;
            private FileValue fv;
            string dirH;
            public BgTaskHibernate(TrackInfoItunes track, FileValue fv, string dirH)
                : base(track, string.Format("Hibernate {0}", track))
            {
                this.track = track;
                this.fv = fv;
                this.dirH = dirH;
            }

            public override void exec()
            {
                base.exec();
                if (!success)
                    return;

                if (!string.IsNullOrEmpty(dirH))
                {
                    var dest = misc.copyTree(fv, dirH + track.ShortName, false);
                    track.HibernateLocation = dest;

                    try
                    {
                        File.Delete(track.Location);
                        fv.delete();
                    }
                    catch (Exception ex)
                    {
                        misc.log(ex);
                    }
                }
            }
        }


        private class BgTaskImport : pdb.ordo.BgTaskBase
        {
            TrackInfoItunes info;
            public BgTaskImport(TrackInfoItunes info)
                : base(string.Format("import {0}", info.Location))
            {
                this.info = info;
            }

            public override void exec()
            {
                try
                {
                    var _track = info.Track;
                    if (_track == null)
                    {
                        success = false;
                        // Thread.Sleep(1000 * Try); 
                        return;
                    }

                    info.import(_track);
                    success = true;
                }
                catch (Exception e)
                { log.log("NIET " + e.Message); }

                if (!success && info.track != null)
                {
                    info.invalidationTrack();
                    //Thread.Sleep(1000 * Try); 
                }

            }
        }

    }
}



]]></content>
  </file>
  <file path="\pdb.podcast\Auto\AutoBuilder.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;
using pdb.podcast.Delta;
using pdb.podcast.Tuning;
using pdb.podcast.Report;
using pdb.podcast.Selection;
using pdb.podcast.Load;
using timeSpan = pdb.util.timeSpan;


namespace pdb.podcast.Auto
{

    enum builderstate
    {
        none,
        enCours,
        stable
    }
    public class AutoBuilder : IComparable<AutoBuilder>//, IBorderTransmit
    {
        const char SEP = '\t';
        const string DAT = @"..\Data\";
        string file = "";
        private bool mustUpdate; public static bool MustUpdate = false;
        private double total = -1;
        private double delta;
        private double lastd;
        private double d;
        private double org;
        private double newv;
        private bool canGo;
        //private int lastGoodDelta;
        //private double lastGoodLevel;
        private int lastTotal;
        private int atomicMode;
        private int sameConfiguration;
        private double cmin;
        private double cmax;
        private double dmin;
        private double dmax;
        public const double EPSILON = 1e-10;
        //private bool dminAlready;
        //private bool dmaxAlready;
        private string _empreinte = "";
        private double delta0 = 0;
        private double lastDelta = 0;
        private int nbDown;
        private bool ? useForfait;
        private Memory mem0;
        private Memory mem1;
        private Memory minMem;
        private Memory maxMem;
        private StringBuilder sb = new StringBuilder();
        // private static DateTime lastModif;
        private pdb.podcast.Tuning.Auto conf;
        private static List<AutoBuilder> list = new List<AutoBuilder>();
        private static int index;
        private DirConf source; public DirConf Source { get { return source; } }

        private LimitItemBase client;
        private static XmlElement xmlRoot;
        private static XmlDocument doc;
        private static bool started = false;
        private string name = "";
        private builderstate state;
        private int naturalOrder = 1;
        private List<AutoBuilderItem> items = new List<AutoBuilderItem>();
        private AutoBuilderItem choose;
        private List<AutoBuilderItem> chooses = new List<AutoBuilderItem>();
        public const int STOP_MAX = 3;
        private int _stopLevel = STOP_MAX;
        // private bool 


        private List<LimitItemLoader> loaders = new List<LimitItemLoader>();
        public void buildLoaders()
        {
            loaders = new List<LimitItemLoader>();
            source.buildLoaders(loaders, this);

        }

        public void go()
        {
            var total = new timeSpan();
            var fd = new timeSpan();
            var d = new timeSpan();
            var date = new timeSpan();
            var nb = 0;

            var dict = new pdb.util.BgDictString0<TrackInfoItunes>();

            while (true)
            {
                var _total = timeSpan.MaxValue;
                var _fd = timeSpan.MaxValue;
                var _d = timeSpan.MaxValue;
                var _date = timeSpan.MaxValue;
                var _nb = int.MaxValue;

                foreach (LimitItemLoader loader in loaders)
                {
                    loader.checkV(this, nb, fd, d, date);
                    if (_total > loader._durationv)
                        _total = loader._durationv;
                    if (_fd > loader._fd)
                        _fd = loader._fd;
                    if (_date > loader._datev)
                        _date = loader._datev;
                    if (_nb > loader._nb)
                        _nb = loader._nb;
                }
            }
        }
        private AutoBuilder(pdb.podcast.Tuning.Auto conf)
        {
            this.conf = conf;
            this.name = conf.name;
            mem0 = new Memory(DAT + "v." + conf.name + ".db.txt");
            mem1 = new Memory(DAT + "r." + conf.name + ".db.txt");
            this.file = DAT + "auto." + conf.name + ".log";
            foreach (pdb.podcast.Tuning.Auto sub in conf.items)
            {
                var item = new AutoBuilderItem(this, sub);
                items.Add(item);
            }
        }
        private void setConf(pdb.podcast.Tuning.Auto value)
        {

            conf = value;
            for (int i = 0; i < items.Count && i < conf.items.Count; i++)
            {
                items[i].setConf(conf.items[i]);
            }

        }

        private void setSource(DirConf source)
        {
            this.source = source;
            source.addBorderObs(this);
            source.Auto = this;
        }

        // private static bool loaded; 
        public static void getLoaders()
        {
            //if (loaded)
            //    return;
            //loaded = true;
            foreach (AutoBuilder auto in list)
                auto.buildLoaders();
        }

        //public static void test()
        //{
        //    //if (loaded)
        //    //    return;
        //    //loaded = true;
        //    foreach (AutoBuilder auto in list)
        //        auto.go();
        //}

        private static AutoBuilder main;
        public static void build(XmlNode xAuto, DirConf source)
        {
            if (xAuto is XmlElement)
            {
                var conf = new pdb.podcast.Tuning.Auto(null, null, xAuto as XmlElement);
                var name = conf.name;
                AutoBuilder builder = list.Find(a => a.name == name);
                if (builder == null)
                {
                    builder = new AutoBuilder(conf);
                    list.Add(builder);
                    builder.naturalOrder = list.Count;
                    index = list.Count - 1;
                    if (main == null)
                        main = builder;
                }
                builder.setConf(conf);
                builder.setSource(source);

            }
        }
        public static void setClient(LimitItemBase client, XmlNode node)
        {
            var att = node.Attributes["auto"];
            if (att == null)
                return;
            var name = att.Value;
            AutoBuilder builder = list.Find(a => a.name == name);
            if (builder == null)
                return;
            builder.client = client;

        }
        private void makeDelta(Memory mem, string mode, string file)
        {
            if (!File.Exists(file))
                File.WriteAllText(file, "quand\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tstate\tAdd\tiAdd\ttSupp\tiSup\t\r\n");
            mem.load();
            var listSe = source.getSelectedTracks();
            var loaded = source.getAllTracks();
            if (mem.Loaded)
            {
                var auxDixt = new pdb.util.BgDictString<TrackInfoItunes>(); // BgDictString<string, TrackInfoItunes>();
                foreach (TrackInfoItunes s in listSe)
                {
                    var key = s.Location;
                    auxDixt[key] = s;
                    if (!mem.dict.ContainsKey(key))
                    {
                        var desc = new TrackItemdesc(s.ToString(), s.GetProvider());
                        string line = desc.ToString();
                        mem.ajouts.Add(desc);
                        mem.tajouts.Add(s);
                        mem.dict.Add(key, desc);
                        sb.AppendLine(string.Format("{0} delta {1} ajouté {2}", name, mode, line));
                    }
                }
                List<string> toRemove = new List<string>();
                foreach (string key in mem.dict.Keys)
                {
                    if (!auxDixt.ContainsKey(key))
                    {
                        var line = mem.dict[key];
                        mem.suppressions.Add(line);
                        toRemove.Add(key);
                        if (loaded.ContainsKey(key))
                        {
                            var t = loaded[key];
                            mem.tsuppressions.Add(t);
                        }
                        sb.AppendLine(string.Format("{0} delta {1} supprimé {2}", name, mode, line));
                    }
                }

                foreach (string key in toRemove)
                    mem.dict.Remove(key);
                if (mem.ajouts.Count > 0 || mem.suppressions.Count > 0)
                {
                    int imax = Math.Max(mem.ajouts.Count, mem.suppressions.Count);
                    //using (TextWriter tw = new StreamWriter(file, true, Encoding.UTF8))
                    //{
                    //    //if (!exist)
                    //    //    tw.WriteLine("quand\tdiff\tcorr\torg\tnew\tAdd\tiAdd\ttSupp\tiSup");
                    //    tw.Write(DateTime.Now); tw.Write(SEP);
                    //    tw.Write((delta).ToString("0.###")); tw.Write(SEP);
                    //    tw.Write(d.ToString("0.###")); tw.Write(SEP);
                    //    tw.Write(org.ToString("0.###")); tw.Write(SEP);
                    //    tw.Write(newv.ToString("0.###")); tw.Write(SEP);
                    //    tw.Write(cmin.ToString("0.###")); tw.Write(SEP);
                    //    tw.Write(cmax.ToString("0.###")); tw.Write(SEP);
                    //    tw.Write(dmin.ToString("0.###")); tw.Write(SEP);
                    //    tw.Write(dmax.ToString("0.###")); tw.Write(SEP);
                    //    tw.Write(atomicMode); tw.Write(SEP);
                    //    tw.Write(state); tw.Write(SEP);
                    //    for (int i = 0; i < imax; i++)
                    //    {
                    //        if (i > 0)
                    //        {
                    //            tw.WriteLine();
                    //            for (int j = 0; j < 11; j++)
                    //                tw.Write(SEP);
                    //        }
                    //        if (i < mem.ajouts.Count)
                    //            tw.Write(mem.ajouts[i].track);
                    //        tw.Write(SEP);
                    //        if (i < mem.ajouts.Count)
                    //            tw.Write(mem.ajouts[i].item);
                    //        tw.Write(SEP);
                    //        if (i < mem.suppressions.Count)
                    //            tw.Write(mem.suppressions[i].track);
                    //        tw.Write(SEP);
                    //        if (i < mem.suppressions.Count)
                    //            tw.Write(mem.suppressions[i].item);
                    //        tw.Write(SEP);
                    //    }
                    //    tw.WriteLine();
                    //}
                }
            }
            mem.save(listSe);
        }
        private void reset()
        {
            atomicMode = -1;
            cmin = 0;
            cmax = int.MaxValue;
            dmin = int.MaxValue;
            dmax = -dmin;
            //dminAlready = false;
            //dmaxAlready = false;
            minMem = null;
            maxMem = null;
            sameConfiguration = 0;
            _empreinte = "";
            delta0 = 0;
            lastDelta = 0;
            state = builderstate.none;
            foreach (AutoBuilderItem item in items)
                item.reset();
            _stopLevel = STOP_MAX;
        }
        private static void decrementIndex()
        {
            index--;
            if (index < 0)
                index = list.Count - 1;
        }
        //  private bool _modifFile; 

        public static bool Stable
        {
            get
            {

                foreach (AutoBuilder builder in list)
                    if (builder.state != builderstate.stable)
                        return false;
                return true;
            }
        }

        public static void init(bool first)
        {
            if (list.Count == 0)
                return;
            list.Sort();
            //bool firstWIthTb = first && Conf.BorderTb;
            //bool secondwithoutTb = !first && !Conf.BorderTb;
            //bool readXml = firstWIthTb || secondwithoutTb;

            bool readXml = first;
            FileInfo f = null;
            if (readXml)
            {
                f = Conf.Instance.ConfFile;
                doc = new XmlDocument();
                doc.PreserveWhitespace = true;
                doc.Load(f.FullName);
                xmlRoot = doc.DocumentElement.SelectSingleNode("./dir") as XmlElement;
            }

            bool _modifFIle = false;
            foreach (AutoBuilder builder in list)
            {
                if (readXml)
                    builder.setValueOrg();
                if (first)
                    builder.causeRegister.Clear();
                if (builder.ToSave() && readXml)
                    _modifFIle = true;
            }

            if (_modifFIle)
            {
                f.CopyTo(f.FullName + ".sov", true);
                doc.Save(f.FullName);
            }
        }

        private bool ToSave()
        {
            foreach (AutoBuilderItem item in items)
            {
                if (item.ToSave)
                    return true;
            }
            return false;
        }

        public void setValueOrg()
        {

            xml = null;
            lookup(xmlRoot);
            if (xml == null)
                return;
            foreach (AutoBuilderItem item in items)
                item.setOrg(xml);
        }
        public static void Init3()
        {
            foreach (AutoBuilder item in list)
            {
                item.init3();
            }
        }
        public static bool Check(Feeds feeds)
        {
            if (list.Count == 0)
                return true;
            list.Sort();
            FileInfo f = Conf.Instance.ConfFile;

            bool _cango = true;
            MustUpdate = false;
            bool _modifFile = false;
            if (Conf.AutoSequence)
            {
                int i = -1;
                for (i = list.Count - 1; i >= 0; i--)
                {
                    var builder = list[i];
                    main = builder;
                    var cango = builder.check3();
                    if (!cango)
                        _cango = false;
                    if (builder.mustUpdate)
                        MustUpdate = true;
                    if (builder.newv != builder.org || builder.ToSave())
                    {
                        _modifFile = true;
                    }
                    if (!cango || MustUpdate || _modifFile)
                        break;
                }
                if (i > 0)
                    _cango = false;
            }
            else
            {
                AutoBuilder builder = null;
                if (!started)
                {
                    started = true;
                    foreach (AutoBuilder b in list)
                        b.total = b.source.getTotalSize();
                }
                // application de la précédente modif
                builder = list[index];
                if (builder.state > builderstate.none)
                {
                    builder.makeEmpreinteNonSequence();
                    decrementIndex();
                }
                int i = -1;
                for (i = list.Count - 1; i >= 0; i--)
                {
                    builder = list[i];
                    bool cango = false;
                    bool _cont = false;
                    while (true)
                    {
                        if (i == index || _cont)
                        {
                            cango = builder.check();
                            index = i;
                            main = builder;
                            _cont = false;
                            break;
                        }
                        else
                            cango = builder.checkWithoutModify();
                        if (builder.state == builderstate.none)
                            _cont = true;
                        else
                            break;
                    }
                    if (!cango)
                        _cango = false;
                    if (builder.mustUpdate)
                        MustUpdate = true;
                    if (i == index)
                    {
                        if (builder.newv != builder.org)
                        {
                            _modifFile = true;
                        }
                        else
                        {
                            //index--;
                            //if (index < 0)
                            //    index = list.Count - 1;
                        }
                    }
                    if (_modifFile)
                        break;
                }
            }
            if (_modifFile)
            {
                f.CopyTo(f.FullName + ".sov", true);
                doc.Save(f.FullName);
            }

            foreach (AutoBuilder builder in list)
            {
                if (builder.state == builderstate.none)
                    _cango = false;
            }
            return _cango;
        }


        private void log(string txt)
        {
            Program.logAuto.log(string.Format("{0}", txt));
        }
        private void log(string txt, params object[] args)
        {
            string _txt = string.Format(txt, args);
            log(_txt);
        }
        private void makeEmpreinteNonSequence()
        {
            var newEmpreinte = source.getEmpreinte();
            if (state == builderstate.stable)
            {
                if (newEmpreinte != _empreinte)
                    reset();
            }
            _empreinte = newEmpreinte;
            total = source.getTotalSize();
        }
        private bool checkWithoutModify()
        {
            mustUpdate = false;
            canGo = false;
            var newEmpreinte = source.getEmpreinte();
            try
            {
                if (state == builderstate.stable)
                {
                    if (newEmpreinte != _empreinte)
                        reset();
                    else
                    {
                        mustUpdate = false;
                        canGo = true;
                        org = newv;
                        return true;
                    }
                }
                else
                {
                    if (newEmpreinte != _empreinte)
                        reset();
                }
                if (Conf.AutoSequence || total < 0)
                    total = source.getTotalSize();
                double target = conf.target;
                delta = target - total;
                if (delta >= 0)
                {
                    if (delta < conf.write)
                        canGo = true;
                    if (delta < conf.delta)
                    {
                        state = builderstate.stable;
                        _empreinte = newEmpreinte;
                        return true;
                    }
                    mustUpdate = true;
                }
                else if (delta < 0)
                {
                    mustUpdate = true;
                    canGo = false;
                }
            }
            finally
            {
                if (state == builderstate.stable)
                {
                    mustUpdate = false;
                    _empreinte = newEmpreinte;
                    canGo = true;
                }
            }
            return canGo;
        }
        private bool check()
        {
            sb = new StringBuilder();
            sb.AppendLine();
            makeDelta(mem0, "virtuel", DAT + "vhisto." + conf.name + ".txt");
            mustUpdate = false;
            canGo = false;
            var newEmpreinte = source.getEmpreinte();
            if (state == builderstate.none)
                reset();
            else if (state == builderstate.stable)
            {
                if (newEmpreinte != _empreinte)
                    reset();
                else
                {
                    mustUpdate = false;
                    canGo = true;
                    org = newv;
                    return true;
                }
            }
            if (Conf.AutoSequence || total < 0)
                total = source.getTotalSize();
            double target = conf.target;
            delta = target - total;
            log("delta {0}", delta);
            if (state == builderstate.none)
                delta0 = delta;
            state = builderstate.enCours;
            lastd = d;
            d = 0;
            xml = null;
            lookup(xmlRoot);
            if (xml == null)
                return true;
            string attTarget = conf.type.ToString();
            var att = xml.Attributes[attTarget];
            if (att == null)
                return true;
            org = Convert.ToDouble(att.Value);
            newv = org;
            try
            {
                if (delta * delta0 < 0)
                {
                    if (atomicMode < 0)
                    {
                        atomicMode = 0;
                        //if (minMem == null)
                        //    minMem = new Memory(mem0);
                        //if (maxMem == null)
                        //    maxMem = new Memory(mem0);
                        //if (minMem.suppressions.Count == 0)
                        //    minMem.suppressions = new List<TrackItemdesc>(maxMem.ajouts);
                        //if (maxMem.ajouts.Count == 0)
                        //    maxMem.ajouts = new List<TrackItemdesc>(minMem.suppressions);
                    }
                }
                bool cancelSameConf = false;
                bool cancelNb = false;
                if (atomicMode >= 0)
                {
                    atomicMode++;
                    if (Math.Abs(dmin - delta) < EPSILON)
                        sameConfiguration++;
                    else if (Math.Abs(dmax - delta) < EPSILON)
                        sameConfiguration++;
                    else
                        sameConfiguration = 0;
                    if (sameConfiguration > conf.idem)
                        cancelSameConf = true;
                    if (atomicMode > conf.cloop)
                        cancelNb = true;
                }
                if (delta >= 0)
                {
                    if (mem0.suppressions.Count > 0)
                        minMem = new Memory(mem0);
                    if (delta < conf.write)
                        canGo = true;
                    //  lastGoodLevel = org;
                    //if (maxMem != null && minMem != null)
                    //{
                    if (atomicMode > 0)
                    {
                        if (cancelSameConf) //|| (mem0.suppressions.Count == 1 && mem0.ajouts.Count ==0))
                        {
                            log("abandon recherche cartésienne cause idem");
                            state = builderstate.stable;
                            return true;
                        }
                        else if (cancelNb)
                        {
                            log("abandon recherche cartésienne cause cloop");
                            state = builderstate.stable;
                            return true;
                        }
                        //if (Math.Abs(dmin - delta) < 0.01)
                        //    dminAlready = true;
                        //else
                        //    dminAlready = false;
                        if (maxMem != null && minMem != null)
                        {
                            if (minMem.suppressions.Count == maxMem.ajouts.Count)
                            {
                                bool identique = true;
                                for (int i = 0; i < minMem.suppressions.Count; i++)
                                {
                                    if (!minMem.suppressions[i].Equals(maxMem.ajouts[i]))
                                    {
                                        identique = false;
                                        break;
                                    }
                                }
                                if (identique)
                                {
                                    if (minMem.suppressions.Count == 1 || atomicMode > conf.verif)
                                    {
                                        mustUpdate = false;
                                        log("abandon recherche cartésienne cause cycle");
                                        state = builderstate.stable;
                                        _empreinte = newEmpreinte;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                    cmin = org;
                    dmin = delta;
                    // lastGoodDelta = (int)delta;
                    lastTotal = (int)total;
                    if (delta < conf.delta)
                    {
                        state = builderstate.stable;
                        _empreinte = newEmpreinte;
                        return true;
                    }
                    mustUpdate = true;
                    d = 0;
                    if (atomicMode > 0)
                    {
                        //if (atomicMode > conf.cloop)
                        //{
                        //    mustUpdate = false;
                        //    log("abandon recherche cartésienne cause cloop");
                        //    state = builderstate.stable;
                        //    _empreinte = newEmpreinte;
                        //    return true;
                        //}
                        //if (dminAlready && dmaxAlready)
                        //{
                        //    mustUpdate = false;
                        //    Program.logAuto.log("abandon recherche cartésienne cause cycle");
                        //    return true;
                        //}
                        d = 0.5 * (cmax - cmin);
                    }
                    else
                    {
                        double _d = int.MaxValue;
                        if (cmax >= 0 && cmin >= 0)
                            _d = cmax - cmin;
                        double aux = int.MaxValue;
                        // double aux2 = int.MaxValue;
                        foreach (Level level in conf.levels)
                        {
                            aux = (delta - level.d) * level.inf;
                            if (aux > d)
                                d = aux;
                        }
                        if (conf.coeff > 0)
                        {

                            if (org > conf.max)
                                d = conf.max - org;
                            else
                            {
                                d *= conf.coeff * (conf.max - org) / (conf.max - conf.min);
                            }
                            //else
                            //{
                            //    var de = Math.Abs(delta);
                            //    aux2 = de / (target + de) * (conf.max - org) * conf.coeff;
                            //}
                        }

                        //if (d == 0 || aux2 < d)
                        //    d = aux2;

                        if (d > _d)
                            d = _d;
                    }
                }
                else if (delta < 0)
                {
                    if (mem0.ajouts.Count > 0)
                        maxMem = new Memory(mem0);
                    mustUpdate = true;
                    canGo = false;
                    //if (maxMem != null && minMem != null)
                    //{
                    //    if (atomicMode < 0)
                    //        atomicMode = 0;
                    //    atomicMode++;
                    //}
                    cmax = org;
                    dmax = delta;
                    d = 0;
                    if (atomicMode > 0)
                    {
                        bool identique = false;
                        if (minMem != null && maxMem != null
                            && maxMem.ajouts.Count == minMem.suppressions.Count)
                        {
                            identique = true;
                            for (int i = 0; i < minMem.suppressions.Count; i++)
                            {
                                if (!minMem.suppressions[i].Equals(maxMem.ajouts[i]))
                                {
                                    identique = false;
                                    break;
                                }
                            }
                        }
                        if (cancelSameConf)// || (mem0.ajouts.Count == 1 && mem0.suppressions.Count == 0))
                        {
                            log("retour derniere bonne valeur cause idem");
                            d = cmin - cmax;
                        }
                        else if (cancelNb)
                        {
                            log("abandon recherche cartésienne cause cloop");
                            d = cmin - cmax;
                        }
                        else if (identique && (minMem.suppressions.Count == 1 || atomicMode > conf.verif))
                        {
                            log("retour derniere bonne valeur cause cycle");
                            d = cmin - cmax;
                        }
                        //else if (atomicMode > conf.cloop)
                        //{                      
                        //    log("abandon recherche cartésienne cause cloop");
                        //    d = cmin - cmax;
                        //}
                        else
                            d = 0.5 * (cmin - cmax);
                    }
                    else
                    {

                        double _d = -int.MaxValue;
                        if (cmax >= 0 && cmin >= 0)
                            _d = cmin - cmax;
                        double aux = -int.MaxValue;
                        // double aux2 = -int.MaxValue;
                        foreach (Level level in conf.levels)
                        {
                            aux = (delta - conf.delta + level.d) * level.sup;
                            if (aux < d)
                                d = aux;
                        }
                        if (conf.coeff > 0)
                        {
                            if (org < conf.min)
                                d = (conf.min - org);
                            else
                            {
                                d *= conf.coeff * (org - conf.min) / (conf.max - conf.min);
                            }
                            //else
                            //{
                            //    var de = Math.Abs(delta);
                            //    aux2 = de / (target+de) * (conf.min - org) * conf.coeff;
                            //}
                        }

                        //if (d == 0 || aux2 > d)
                        //    d = aux2;

                        if (d < _d)
                            d = _d;
                    }
                    //d = (delta - conf.delta) * conf.sup;
                    //if (org <= lastGoodLevel)
                    //{
                    //    lastGoodLevel = -1;
                    //    lastGoodDelta = -1;
                    //    lastTotal = -1;
                    //}
                }
                if (Math.Abs(d) < 0.00000001)
                {
                    mustUpdate = false;
                    // unCart();
                    state = builderstate.stable;
                    _empreinte = newEmpreinte;
                    return true;
                }
                //if (dejaVu)
                //    Program.logAuto.log("déjà vu lastGoodLevel:{0} lastGoodDelta:{1}", lastGoodLevel, lastGoodDelta);
                log("correction {0}", d);
                newv = org + d;
                if (newv <= 0)
                    newv = 0;
                if (conf.coeff > 0)
                {
                    if (newv > conf.max)
                        newv = conf.max;
                    else if (newv < conf.min)
                        newv = conf.min;
                }
                newv = Math.Round(newv, 8);
                log(" valeur {0} --> {1}", org, newv);
                att.Value = newv.ToString();
            }
            finally
            {
                if (state == builderstate.stable)
                {
                    mustUpdate = false;
                    _empreinte = newEmpreinte;
                    canGo = true;
                }
                string strDate = "";
                var attD = xml.Attributes["date"];
                if (attD != null)
                    strDate = attD.Value;
                bool exist = File.Exists(file);
                //using (TextWriter tw = new StreamWriter(file, true, Encoding.UTF8))
                //{
                //    // "quand\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tAdd\tiAdd\ttSupp\tiSup\tstate\t\r\n");
                //    if (!exist)
                //        tw.WriteLine("quand\ttarget\tdelta\tinf\tsup\ttotal\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tstate");
                //    tw.Write(DateTime.Now); tw.Write(SEP);
                //    tw.Write(target.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(conf.delta.ToString("0.###")); tw.Write(SEP);
                //    if (conf.levels.Count > 0) tw.Write(conf.levels[0].inf.ToString("0.###")); else tw.Write(""); tw.Write(SEP);
                //    if (conf.levels.Count > 0) tw.Write(conf.levels[0].sup.ToString("0.###")); else tw.Write(""); tw.Write(SEP);
                //    tw.Write(total.ToString("0.###")); tw.Write(SEP);
                //    tw.Write((-delta).ToString("0.###")); tw.Write(SEP);
                //    tw.Write(d.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(org.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(newv.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(cmin.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(cmax.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(dmin.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(dmax.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(atomicMode); tw.Write(SEP);
                //    tw.Write(state); tw.Write(SEP);
                //    tw.WriteLine();
                //}
                if (canGo)
                    // makeDelta(mem1, "reel", @"..\rhisto.txt");
                    makeDelta(mem1, "reel", DAT + "rhisto." + conf.name + ".txt");
            }
            return canGo;
        }

        private void calcChoose(bool up, bool strict, bool checkSelect)
        {
            choose = null;
            double dt = double.MaxValue;
            double gap = double.MaxValue;
            // bool trou = false;
            foreach (AutoBuilderItem item in items)
            {
                item.after(up, strict, checkSelect);
                item.setTension(up, strict, checkSelect);
                if (item.Stop(_stopLevel))
                {
                    if ((strict || checkSelect) && Conf.BorderGranSlam)
                    {
                        choose = null;
                        break;
                    }
                    continue;
                }
                double aux = double.MaxValue;
                // var tension = item.Tension;
                if (conf.selectFix)
                {
                    var tension = item.Tension;
                    aux = up ? tension : -tension;
                }
                else
                    aux = item.Dt;

                if (conf.selectAbs && !conf.selectFix && aux < 0)
                    aux *= -1;



                if (item.getCauses().Count == 0)
                {
                    // trou = true;
                    if ((strict || checkSelect) && Conf.BorderGranSlam)
                    {
                        choose = null;
                        break;
                    }
                    continue;
                }

                //var _gap = Math.Abs(aux);
                //if (_gap < gap)
                //    gap = _gap;

                if (aux < dt)
                {
                    dt = aux;
                    newv = item.NewV;
                    choose = item;
                }
            }
            //if (trou && conf.gap && gap < double.MaxValue)
            //{
            //    foreach (AutoBuilderItem item in items)
            //    {
            //        if (item.Stop)
            //            continue;
            //        item.gap(up, conf.selectFix, gap);
            //    }
            //}
        }

        private bool check2()
        {
            // _modifFile = false; 
            sb = new StringBuilder();
            sb.AppendLine();
            makeDelta(mem0, "virtuel", DAT + "vhisto." + conf.name + ".txt");




            if (mem0.ajouts.Count > 0 || mem0.suppressions.Count > 0)
            {
                if (conf.pertinentExclu)
                {
                    foreach (AutoBuilderItem item in items)
                    {
                        if (item != choose)
                            item.makePertinent();
                    }
                }
                else if (conf.pertinentAll)
                {
                    foreach (AutoBuilderItem item in items)
                        item.makePertinent();
                }
                else
                {
                    foreach (AutoBuilderItem item in items)
                    {
                        item.checkAjout(mem0.tajouts);
                        item.checkAjout(mem0.tsuppressions);
                    }
                }


                //else if (choose != null)
                //    choose.makePertinent();
            }
            mustUpdate = false;
            canGo = false;
            var newEmpreinte = source.getEmpreinte();

            try
            {
                if (state == builderstate.none)
                    reset();
                else if (state == builderstate.stable)
                {
                    if (newEmpreinte != _empreinte)
                        reset();
                    else
                    {
                        mustUpdate = false;
                        canGo = true;
                        org = newv;
                        return true;
                    }
                }

                total = source.getTotalSize();
                double target = conf.target;
                delta = target - total;
                log("delta {0}", delta);

                if (_stopLevel < 0)
                {
                    log("arret cause stopLevel");
                    state = builderstate.stable;
                    return true;
                }
                if (delta * lastDelta < 0)
                {
                    //if (delta > 0)
                    //{
                    //    // ok!
                    //    state = builderstate.stable;
                    //    _empreinte = newEmpreinte;
                    //    return true;
                    //}
                    // retour arrière
                    if (choose != null && _stopLevel > 0)
                    {
                        log("retour arrière");
                        _stopLevel--;
                        choose.stop(_stopLevel);
                        canGo = false;
                        mustUpdate = true;
                        return false;
                    }
                    else
                    {
                        if (delta > 0)
                        {
                            // ok!
                            log("pas de retour arriere stoplevel=0");
                            state = builderstate.stable;
                            _empreinte = newEmpreinte;
                            return true;
                        }
                        else
                        {
                            _stopLevel--;
                            choose.stop(_stopLevel);
                            canGo = false;
                            mustUpdate = true;
                            return false;
                        }
                    }
                }
                lastDelta = delta;
                if (state == builderstate.none)
                    delta0 = delta;
                state = builderstate.enCours;
                lastd = d;
                d = 0;

                bool up = delta > 0;
                if (up && delta < conf.delta)
                {
                    log("delta");
                    state = builderstate.stable;
                    _empreinte = newEmpreinte;
                    return true;
                }
                mustUpdate = true;
                //double dt = double.MaxValue;

                //bool real = true;
                //if (delta * delta0 < 0)
                //{
                //    if (choose != null)
                //    {
                //        _stopLevel--;
                //        choose.stop(_stopLevel);
                //    }
                //    canGo = false;
                //    mustUpdate = true;
                //    return false;
                //}
                if (conf.stopAll)
                {
                    foreach (AutoBuilderItem item in items)
                    {
                        if (item.Stop(1))
                        {
                            state = builderstate.stable;
                            return true;
                        }
                    }
                }



                choose = null;
                if (_stopLevel >= 3 && conf.checkSelect && conf.checkStrict)
                    calcChoose(up, true, true);
                if (choose != null)
                    log("REEL - SELECT");
                else
                {
                    if (_stopLevel >= 2 && conf.checkSelect)
                        calcChoose(up, false, true);
                    if (choose != null)
                        log("VIRTUEL SELECT");
                    else
                    {
                        if (_stopLevel >= 1 && conf.checkStrict)
                            calcChoose(up, true, false);
                        if (choose != null)
                            log("REEL");
                        else
                        {
                            if (_stopLevel >= 0)
                            {
                                calcChoose(up, false, false);
                                if (choose != null)
                                    log("VIRTUEL");
                            }
                        }
                    }
                }


                if (choose == null)
                {
                    log("choose null");
                    _stopLevel--;
                    if (_stopLevel < 0)
                    {
                        state = builderstate.stable;
                        return true;
                    }
                    else
                    {
                        canGo = false;
                        mustUpdate = true;
                        return false;
                    }
                }

                org = choose.Org;



                if (up)
                {
                    if (delta < conf.write)
                        canGo = true;
                    if (conf.checkEvol)
                    {
                        // var nextTrack = choose.rejected(real).candidat;
                        var size = choose.EvolSize; // Stat.getSizeinMo(nextTrack);
                        if (delta < size)
                        {
                            _stopLevel--;
                            // choose.stop();
                            if (conf.stopAll)
                            {
                                foreach (AutoBuilderItem item in items)
                                    item.stop(_stopLevel);
                                //state = builderstate.stable;
                                //return true;
                            }
                            else
                            {
                                choose.stop(_stopLevel);
                            }
                        }
                    }

                }
                else
                {
                }
                choose.save();
                Program.logAuto.log("===> " + choose.ToString());
            }
            finally
            {
                if (state == builderstate.stable)
                {
                    mustUpdate = false;
                    _empreinte = newEmpreinte;
                    canGo = true;
                }

                //using (TextWriter tw = new StreamWriter(file, true, Encoding.UTF8))
                //{
                //    bool exist = File.Exists(file);
                //    // "quand\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tAdd\tiAdd\ttSupp\tiSup\tstate\t\r\n");
                //    if (!exist)
                //        tw.WriteLine("quand\ttarget\tdelta\tinf\tsup\ttotal\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tstate");
                //    tw.Write(DateTime.Now); tw.Write(SEP);
                //    tw.Write(conf.target.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(conf.delta.ToString("0.###")); tw.Write(SEP);
                //    if (conf.levels.Count > 0) tw.Write(conf.levels[0].inf.ToString("0.###")); else tw.Write(""); tw.Write(SEP);
                //    if (conf.levels.Count > 0) tw.Write(conf.levels[0].sup.ToString("0.###")); else tw.Write(""); tw.Write(SEP);
                //    tw.Write(total.ToString("0.###")); tw.Write(SEP);
                //    tw.Write((-delta).ToString("0.###")); tw.Write(SEP);
                //    tw.Write(d.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(org.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(newv.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(cmin.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(cmax.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(dmin.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(dmax.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(atomicMode); tw.Write(SEP);
                //    tw.Write(state); tw.Write(SEP);
                //    tw.WriteLine();
                //}
                if (canGo)
                    // makeDelta(mem1, "reel", @"..\rhisto.txt");
                    makeDelta(mem1, "reel", DAT + "rhisto." + conf.name + ".txt");
            }
            return canGo;
        }

        private void init3()
        {
            _cause = null;


            foreach (AutoBuilderItem item in items)
                item.setTension();
            // _modifFile = false; 
            sb = new StringBuilder();
            sb.AppendLine();
            makeDelta(mem0, "virtuel", DAT + "vhisto." + conf.name + ".txt");




            if (mem0.ajouts.Count > 0 || mem0.suppressions.Count > 0)
            {
                if (conf.pertinentExclu)
                {
                    foreach (AutoBuilderItem item in items)
                    {
                        if (item != choose)
                            item.makePertinent();
                    }
                }
                else if (conf.pertinentAll)
                {
                    foreach (AutoBuilderItem item in items)
                        item.makePertinent();
                }
                else
                {
                    foreach (AutoBuilderItem item in items)
                    {
                        item.checkAjout(mem0.tajouts);
                        item.checkAjout(mem0.tsuppressions);
                    }
                }


            }

            setDelta();


        }

        public static void SetDelta()
        {
            foreach (AutoBuilder item in list)
            {
                item.setDelta();
            }
        }

        private void setDelta()
        {
            mustUpdate = false;
            canGo = false;

            total = source.getTotalSize();
            double target = conf.target;
            delta = target - total;
            log("delta {0}", delta);
        }

        private bool check3()
        {
            // _modifFile = false; 

            var newEmpreinte = source.getEmpreinte();

            try
            {
                if (state == builderstate.none)
                    reset();
                else if (state == builderstate.stable)
                {
                    if (newEmpreinte != _empreinte)
                        reset();
                    else
                    {
                        mustUpdate = false;
                        canGo = true;
                        org = newv;
                        return true;
                    }
                }



                if (_stopLevel < 0)
                {
                    log("arret cause stopLevel");
                    state = builderstate.stable;
                    return true;
                }
                var _lastDelta = lastDelta;
                lastDelta = delta;
                if (delta * _lastDelta < 0)
                {
                    //if (delta > 0)
                    //{
                    //    // ok!
                    //    state = builderstate.stable;
                    //    _empreinte = newEmpreinte;
                    //    return true;
                    //}
                    // retour arrière
                    if (delta > 0)
                    {
                        if (conf.forfaitNegatif > 0 && true ==  useForfait)
                        {                         
                            useForfait = false;
                        }
                        else
                        {
                            // ok!
                            log("pas de retour arriere stoplevel=0");
                            state = builderstate.stable;
                            _empreinte = newEmpreinte;
                            useForfait = null;
                            return true;
                        }
                    }
                    else
                    {
                        canGo = false;
                        mustUpdate = true;
                        _stopLevel--;
                        foreach (AutoBuilderItem choose in chooses)
                        {
                            if (choose != null && _stopLevel > 0)
                            {
                                log("retour arrière");
                                choose.stop(_stopLevel);
                            }
                        }
                        return false;
                    }

                }

                if (state == builderstate.none)
                    delta0 = delta;
                state = builderstate.enCours;
                lastd = d;
                d = 0;

                bool up = delta > 0;

                if (up)
                    nbDown = 0;
                else
                    nbDown++;
                if (up && delta < conf.delta)
                {
                    log("delta");
                    state = builderstate.stable;
                    _empreinte = newEmpreinte;
                    useForfait = null;
                    return true;
                }
                mustUpdate = true;
                //double dt = double.MaxValue;

                //bool real = true;
                //if (delta * delta0 < 0)
                //{
                //    if (choose != null)
                //    {
                //        _stopLevel--;
                //        choose.stop(_stopLevel);
                //    }
                //    canGo = false;
                //    mustUpdate = true;
                //    return false;
                //}
                if (conf.stopAll)
                {
                    foreach (AutoBuilderItem item in items)
                    {
                        if (item.Stop(1))
                        {
                            state = builderstate.stable;
                            useForfait = null;
                            return true;
                        }
                    }
                }

                if (_cause == null)
                {
                    log("_cause NULL");
                    state = builderstate.stable;
                    useForfait = null;
                    return true;

                }
                if (up)
                {
                    if (delta < conf.write)
                        canGo = true;
                }

                var cdv = _cause.causes;
                chooses.Clear();


                foreach (CauseDataValue cd in cdv.datas)
                {
                    if (cd.Virtuel)
                        continue;
                    if (!cd.Update)
                        continue;

                    var item = items.Find(it => it.type == cd.type);
                    if (item == null)
                        continue;
                    item.save(cd.val);
                    chooses.Add(item);

                }

                if (!up && conf.forfaitNegatif > 0)
                {
                
                    if (nbDown > conf.forfaitNegatifOffset)
                    {
                        useForfait = true;
                        foreach (var item in items)
                        {
                            var tension = item.Tension;
                            tension -= conf.forfaitNegatif * (nbDown-conf.forfaitNegatifOffset);
                            if (tension < 0)
                                tension = 0;
                            item.modif(tension);
                            chooses.Add(item);
                        }
                    }
                }

                if (chooses.Count == 0)
                {
                    log("pas de choose");
                    state = builderstate.stable;
                    useForfait = null;
                    return true;

                }





            }
            finally
            {
                if (state == builderstate.stable)
                {
                    mustUpdate = false;
                    _empreinte = newEmpreinte;
                    canGo = true;
                }

                //using (TextWriter tw = new StreamWriter(file, true, Encoding.UTF8))
                //{
                //    bool exist = File.Exists(file);
                //    // "quand\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tAdd\tiAdd\ttSupp\tiSup\tstate\t\r\n");
                //    if (!exist)
                //        tw.WriteLine("quand\ttarget\tdelta\tinf\tsup\ttotal\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tstate");
                //    tw.Write(DateTime.Now); tw.Write(SEP);
                //    tw.Write(conf.target.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(conf.delta.ToString("0.###")); tw.Write(SEP);
                //    if (conf.levels.Count > 0) tw.Write(conf.levels[0].inf.ToString("0.###")); else tw.Write(""); tw.Write(SEP);
                //    if (conf.levels.Count > 0) tw.Write(conf.levels[0].sup.ToString("0.###")); else tw.Write(""); tw.Write(SEP);
                //    tw.Write(total.ToString("0.###")); tw.Write(SEP);
                //    tw.Write((-delta).ToString("0.###")); tw.Write(SEP);
                //    tw.Write(d.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(org.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(newv.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(cmin.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(cmax.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(dmin.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(dmax.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(atomicMode); tw.Write(SEP);
                //    tw.Write(state); tw.Write(SEP);
                //    tw.WriteLine();
                //}
                if (canGo)
                    // makeDelta(mem1, "reel", @"..\rhisto.txt");
                    makeDelta(mem1, "reel", DAT + "rhisto." + conf.name + ".txt");
            }
            return canGo;
        }


        public static void Log()
        {
            if (main == null)
                return;
            main.log();
        }
        public override string ToString()
        {
            var strMin = minMem == null ? "" : minMem.suppressions.Count.ToString();
            var strMax = maxMem == null ? "" : maxMem.ajouts.Count.ToString();
            var strName = string.Format("{0} ({1}) {2}", name, resolveOrder(), newv);
            var sb = new StringBuilder();
            sb.Append(string.Format("{0} {1} delta->{2} correction->{3}  mustUpdate->{4} canGo {5} atomic {6} idem {7} ({8}/{9})", strName, state, delta.ToString("0.###"), d.ToString("0.###"), mustUpdate, canGo, atomicMode, sameConfiguration, strMin, strMax));
            sb.AppendLine();
            foreach (AutoBuilderItem item in items)
                sb.Append(item);
            sb.AppendLine();
            return sb.ToString();

        }
        private void log()
        {
            Program.logAuto.log("");
            Program.logAuto.log("*****************************************************************************************");
            Program.logAuto.log("{0} {1}", name, sb.ToString());
            var type = "";
            if (choose != null)
                type = choose.type.ToString();
            Program.logAuto.log("{0} {1} total:{2}", name, type, total.ToString("0.###"));
            Program.logAuto.log("{0} {1} delta:{2}", name, type, delta.ToString("0.###"));
            Program.logAuto.log("{0} {1} stop:{2}", name, type, _stopLevel.ToString());

            //if (choose != null)               
            //   Program.logAuto.log("{0}", choose);

            //Program.logAuto.log("{0} cmin {1}", name, cmin.ToString("0.###"));
            //Program.logAuto.log("{0} dmin {1}", name, dmin.ToString("0.###"));
            //Program.logAuto.log("{0} cmax {1}", name, cmax.ToString("0.###"));
            //Program.logAuto.log("{0} dmax {1}", name, dmax.ToString("0.###"));
            if (mustUpdate)
            {
                //foreach (AutoBuilder builder in list)
                //{
                //    if (builder.d != 0)
                //    {
                log("correction {0}", d);
                //   log(" valeur {0} --> {1}", org, newv);

                //    }
                //}
            }
            else Program.logAuto.log("valeur non modifiée {0}", org);
            Program.logAuto.log("");
            foreach (AutoBuilder builder in list)
            {
                Program.logAuto.log(builder.ToString());
            }
            Program.logAuto.log("-------------------------------------------------------------------------------------------------------------------");
        }
        private XmlElement xml;
        public void lookup(XmlElement node)
        {
            var att = node.Attributes["auto"];
            if (att != null)
            {
                // && conf.name.Equals(att.Value))
                var targets = att.Value.Split(';');
                foreach (var target in targets)
                {
                    if (name.Equals(target))
                    {
                        xml = node;
                        return;
                    }
                }
            }
            foreach (XmlNode sub in node.ChildNodes)
            {
                if (sub is XmlElement)
                {
                    lookup(sub as XmlElement);
                    if (xml != null)
                        return;
                }
            }
        }
        private int resolveOrder()
        {
            if (conf.order < int.MaxValue)
                return conf.order;
            return naturalOrder;
        }
        public int CompareTo(AutoBuilder other)
        {
            if (other == this)
                return 0;
            var cmp = resolveOrder().CompareTo(other.resolveOrder());
            if (cmp == 0)
                throw new ApplicationException(string.Format("deux builders d'ordre identique {0}/{1}", this.name, other.name));
            return cmp;
        }

        private bool checkSignal;
        public void signal(TrackBorderItem tb)
        {
            checkSignal = false;
            var item = items.Find(i => i.type == tb.type);
            if (item != null)
            {
                if (client != null)
                {
                    if (!tb.source.isChildOf(client))
                        return;
                }
                item.signal(tb);
                checkSignal = true;
            }

        }

        public bool Checked
        {
            get { return checkSignal; }
        }

        private CauseRegister causeRegister = new CauseRegister();
        public CauseRegister CauseRegister { get { return causeRegister; } }

        //public void signal(CauseData cd)
        //{
        //    checkSignal = true;
        //    var item = items.Find(i => i.type == cd.type);
        //    if (item != null)
        //    {
        //        if (client != null)
        //        {
        //            if (!cd.limit.isChildOf(client))
        //                return;
        //        }
        //        causeRegister.signal(cd);
        //        //checkSignal = true;           
        //    }


        //}

        public void signal(CauseDatas cd)
        {
            checkSignal = true;
            if (client != null)
            {
                if (!cd.limit.isChildOf(client))
                    return;
            }
            int nb = 0;
            for (int i = 0; i < Causes.NB_TYPE; i++)
            {
                var data = cd.datas[i];
                if (data == null) //|| data.virtuel)
                    continue;

                var item = items.Find(it => it.type == data.type);
                if (item == null)
                    cd.datas[i].Virtuel = true;
                if (!cd.datas[i].Virtuel)
                    nb++;
            }

            //if (nb == 0)
            //    return; 

            causeRegister.signal(cd);
            if (nb > 1)
                checkCause(cd);

        }

        private CauseDatasTension _cause;
        private void checkCause(CauseDatas cause)
        {
            bool up = delta > 0;
            if (Conf.AutoSelect)
            {
                bool selected = cause.Selected;
                if (up && selected)
                    return;
                if (!up && !selected)
                    return;
            }

            if (up)
            {
                foreach (CauseDataValue cd in cause.datas)
                {
                    if (cd.Virtuel && !cd.Ok)
                        return;
                }

                double tot = 0;
                bool _checked = false;
                foreach (CauseDataValue cd in cause.datas)
                {
                    if (cd.Virtuel)
                        continue;
                    if (cd.Ok)
                        continue;
                    var item = items.Find(it => it.type == cd.type);
                    if (item == null)
                        continue;

                    if (cd.val <= item.torg)
                        continue;

                    _checked = true;

                    var tension = item.getTension(cd.val);
                    if (!conf.selectFix)
                    {
                        tension = item.Dt;
                    }

                    tot += (tension * tension);
                    if (_cause != null && tot >= _cause.tension)
                        return;

                    cd.Update = true;

                }
                if (tot > 0 && _checked // (tot > 0 //COMMENT on peut avoir ZERO ???? et pourtant
                    && (_cause == null || tot < _cause.tension))
                    _cause = new CauseDatasTension(cause, tot);

            }
            else
            {
                //foreach (CauseDataValue cd in cause.datas)
                //{
                //    if (cd.Virtuel && cd.Ok)
                //        return;
                //}

                double aux = 0;
                double min = int.MaxValue;
                CauseDataValue cdMin = null;
                foreach (CauseDataValue cd in cause.datas)
                {
                    if (cd.Virtuel)
                        continue;
                    if (!cd.Ok)
                        continue;
                    var item = items.Find(it => it.type == cd.type);
                    if (item == null)
                        continue;

                    if (cd.val >= item.torg)
                        continue;

                    var tension = item.getTension(cd.val);
                    if (conf.selectFix)
                    {
                        aux = -tension;
                    }

                    else
                    {
                        aux = tension - item.Tension;
                        if (conf.selectAbs && aux < 0)
                            aux = -aux;
                    }


                    if (aux < min)
                    {
                        min = aux;
                        cdMin = cd;
                    }

                }
                if (cdMin == null)
                    return;

                if (_cause == null || _cause.tension > min)
                {
                    cdMin.Update = true;
                    _cause = new CauseDatasTension(cause, min);
                }

            }

        }



    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Build\FilePub.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace pdb.podcast.Build
{
    class FilePub : IPub
    {
        private string location; 
        private DateTime pub;
        private DateTime offset;
        public static DateTime MIN = new DateTime(1970, 1, 1);

        public FilePub(string location)
        {
            this.location = location; 
        }
        public DateTime Pub
        {
            get
            {
                return pub; 
            }
            set
            {
                pub = value; 
            }
        }

        public DateTime Pub2 { set { } }

        public string Comment
        {
            get
            {
                return ""; 
            }
            set
            {
               
            }
        }

        public string Name
        {
            get { return "";  }
        }

        public string Location
        {
            get { return location;  }
        }

        public int Year
        {
            get { return 0;  }
        }

        public DateTime Added
        {
            get
            {
                return MIN; 
            }
            set
            {
               
            }
        }


        public int TrackNumber
        {
            get
            {
                return 0; 
            }
            set
            {
               
            }
        }


        public DateTime Offset
        {
            get
            {
                return offset;
            }
            set
            {
                offset = value; 
            }
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Build\IPub.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace pdb.podcast.Build
{
    /// <summary>
    /// Ensemble des propriétés permettant de déterminer la date de publication
    /// </summary>
    interface IPub
    {
        DateTime Pub { get; set; }
        DateTime Pub2 { set; }
        DateTime Offset { get;}
        string Comment { get; set; }
        string Name { get; }
        string Location { get; }
        int Year { get; }
        DateTime Added { get; set; }
        int TrackNumber { get; set; }

    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Build\PubLoader.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.IO;

namespace pdb.podcast.Build
{
    class PubLoader
    {
        const char SEP = '|';
        public static DateTime MIN = new DateTime(1970, 1, 1);
        private static Regex regexComment = new Regex(@".*(\d\d\d\d/\d\d/\d\d\ \d\d:\d\d).*");
        private static Regex regex1 = new Regex(@".*(\d\d\.\d\d\.\d\d\d\d).*");
        private static Regex regex2 = new Regex(@".*(\d\d\d\d)(\d\d)(\d\d).*");
        private static Regex regex3 = new Regex(@".*(\d\d)\.(\d\d)\.(\d\d)_(\d\d)\.(\d\d)_.*");
        private static Regex reg2000 = new Regex(@".*(\d\d)\.(\d\d)\.(\d\d)_.*");
        private IPub track;
        public PubLoader(IPub track)
        {
            this.track = track;
        }

        private static DateTime BUG2000 = new DateTime(1999, 12, 30);
        private static DateTime BUG2000_2 = new DateTime(99, 12, 30);

        public void setPub(bool updateNative)
        {
            string _comment = track.Comment ?? "";
            DateTime dateComment = DateTime.MinValue;
            bool pubYear = false;

            if (_comment.Contains(SEP))
            {
                var tab = _comment.Split(SEP);
                _comment = tab[1];
                try
                {
                    track.Pub2 = Convert.ToDateTime(tab[0]);
                }
                catch
                {
                }
            }

            try
            {
                var dt = DateTime.MinValue;
                if (DateTime.TryParse(_comment, out dt))
                    dateComment = dt;
                else
                {
                    if (regexComment.IsMatch(_comment))
                    {
                        Match m = regexComment.Match(_comment);
                        string strDate = m.Groups[1].Value;
                        try
                        {
                            var d = Convert.ToDateTime(strDate);
                            if (d != BUG2000)
                            {
                                track.Pub = d;
                                if (track.Pub.DayOfYear == 1)
                                    pubYear = true;
                            }

                        }
                        catch
                        {
                        }
                    }
                }


            }
            catch
            {

            }

            if (dateComment.Date == BUG2000)
            {
                dateComment = DateTime.MinValue;
            }

            if ((track.Pub < MIN || track.Pub.DayOfYear == 1) && (dateComment > MIN && dateComment.DayOfYear > 1))
            {
                track.Pub = dateComment;
            }
            string name = track.Name;
            checkDate1(name);
            checkDate2(name);
            checkDate3(name);



            if (!string.IsNullOrEmpty(track.Location))
            {
                string fileName = Path.GetFileName(track.Location);
                checkDate1(fileName);
                checkDate2(fileName);
                checkDate3(fileName);
                checkDate2000(fileName);
            }

            if (track.Pub <= MIN)
            {
                if (track.Year > 1970)
                {
                    DateTime dtYear = new DateTime(track.Year, 1, 1);
                    if (track.TrackNumber > 0)
                        dtYear = dtYear.AddDays(track.TrackNumber);
                    track.Pub = dtYear;
                    pubYear = true;
                }
            }


            if (track.Pub > MIN && track.Year > 1970)
            {
                if (track.Year != track.Pub.Year)
                {
                    var old = track.Pub;
                    track.Pub = new DateTime(track.Year, old.Month, old.Day, old.Hour, old.Minute, old.Second);
                }
            }



            if (track.Added < MIN) track.Added = MIN;

            // DateTime dt_ = track.Pub;
            if (track.Pub <= MIN)
                track.Pub = track.Added;


            string comment = track.Pub.ToString("yyyy/MM/dd HH:mm"); // dt_.Year + "-" + dt_.Month + "-" + dt_.Day;
            if (track.Offset > DateTime.MinValue)
                comment = track.Offset.ToString("yyyy/MM/dd") + SEP + comment;
            //if (pubYear)
            //    comment = getFileNameCmp(comment);
            if (_comment != comment)
            {
                try
                {
                    //string commentFound = track.Comment;
                    //string truc = commentFound;
                    if (_comment.Contains("_"))
                    {
                        //déjà fait
                        return;
                    }
                    //  truc = truc.Split('_')[0];

                    DateTime iComment = DateTime.MinValue;
                    bool ok = DateTime.TryParse(_comment, out iComment);
                    if (ok)
                    {
                        if (iComment != BUG2000 && iComment.DayOfYear != 1 && track.Pub.DayOfYear == 1)
                        {
                            track.Pub = iComment;
                        }
                        else
                        {
                            if (updateNative)
                                track.Comment = comment;
                        }
                    }
                    else
                    {
                        if (updateNative)
                            track.Comment = comment;
                    }
                }
                catch
                {
                    if (updateNative)
                        track.Comment = comment;
                }
            }



        }

        private string getFileNameCmp(string comment)
        {
            string fileName = Path.GetFileNameWithoutExtension(track.Location);

            if (fileName.Contains(" "))
            {
                var tab = fileName.Split(' ');
                fileName = tab[tab.GetLength(0) - 1];
            }

            if (fileName.Contains("_"))
            {
                var tab = fileName.Split('_');
                fileName = tab[tab.GetLength(0) - 1];
            }

            if (fileName.Length > 3)
                return comment;

            int nb = 0;
            bool isNum = Int32.TryParse(fileName, out nb);

            if (!isNum)
                return comment;

            while (fileName.Length < 3)
            {
                fileName = "0" + fileName;
            }
            return comment + "_" + fileName;
        }
        private void checkDate1(string info)
        {
            if (track.Pub > MIN)
                return;
            if (track.Pub < MIN)
                track.Pub = MIN;

            if (regex1.IsMatch(info))
            {
                try
                {
                    Match m = regex1.Match(info);
                    string strDate = m.Groups[1].Value;
                    DateTime dt = Convert.ToDateTime(strDate);
                    if (dt != BUG2000)
                        track.Pub = dt;
                }
                catch { }
            }
        }

        private void checkDate2(string info)
        {
            if (track.Pub > MIN)
                return;
            if (track.Pub < MIN)
                track.Pub = MIN;

            if (regex2.IsMatch(info))
            {
                try
                {
                    Match m = regex2.Match(info);
                    int year = Convert.ToInt16(m.Groups[1].Value);
                    int month = Convert.ToInt16(m.Groups[2].Value);
                    int day = Convert.ToInt16(m.Groups[3].Value);
                    DateTime dt = new DateTime(year, month, day);
                    if (dt != BUG2000)
                        track.Pub = dt;
                }
                catch { }
            }
        }

        private void checkDate3(string info)
        {
            if (track.Pub > MIN)
                return;
            if (track.Pub < MIN)
                track.Pub = MIN;

            if (regex3.IsMatch(info))
            {
                try
                {
                    Match m = regex3.Match(info);
                    int year = Convert.ToInt16(m.Groups[1].Value);
                    int month = Convert.ToInt16(m.Groups[2].Value);
                    int day = Convert.ToInt16(m.Groups[3].Value);
                    int hh = Convert.ToInt16(m.Groups[4].Value);
                    int mm = Convert.ToInt16(m.Groups[5].Value);

                    DateTime dt = new DateTime(year, month, day, hh, mm, 0);
                    if (dt != BUG2000 && dt != BUG2000_2)
                        track.Pub = dt;
                }
                catch { }
            }
        }

        private void checkDate2000(string info)
        {
            if (track.Pub > MIN)
                return;
            if (track.Pub < MIN)
                track.Pub = MIN;

            if (reg2000.IsMatch(info))
            {
                try
                {
                    Match m = reg2000.Match(info);
                    int year = Convert.ToInt16(m.Groups[1].Value) + 2000;
                    if (year > DateTime.Now.Year)
                        year -= 100;
                    int month = Convert.ToInt16(m.Groups[2].Value);
                    int day = Convert.ToInt16(m.Groups[3].Value);

                    DateTime dt = new DateTime(year, month, day);
                    if (dt != BUG2000)
                        track.Pub = dt;
                }
                catch { }
            }
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\DB\Db.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;
using System.Xml;
using pdb.util;
using pdb.podcast.Tuning;
using pdb.podcast.Albums;


namespace pdb.podcast.DB
{
    public class Db
    {
        public const string CURRENT_VERSION = "2.0";
        const string SEQ_PIECE = "seq";
        const string TOKEN_VERSION = "version";
        private static int pieceSequenceId = 0;
        private static int getPieceNextId { get { pieceSequenceId++; return pieceSequenceId; } }
        private BgDictString<TrackInfoItunes> dict = new BgDictString<TrackInfoItunes>();
        private BgDict<int, TrackInfoItunes> dictId = new BgDict<int, TrackInfoItunes>();
        private volatile object _lock = new object();






        string FILE = "..\\db.xml";
        string FILE_STAT = "..\\db_stats.xml";
        private List<string> sources = new List<string>();
        string SOV = "..\\sov\\";
        //   private XmlSerializer xmlSerializer;

        // private bool import;
        private bool loaded;

        public Db()
        {
            var conf = Conf.Db;
            FILE = conf.file;
            FILE_STAT = conf.fileStat;
            SOV = conf.sov;
            foreach (DbSource source in conf.sources)
            {
                sources.Add(source.file);
            }

            // this.import = import;
            //xmlSerializer = new XmlSerializer()
            //{
            //    FillLists = false,
            //    ManageListsWithArbo= false,
            //    IncludeDeclaration = true,
            //    ClearEmpy = true,             
            //    DateFormat = "dd/MM/yyyy HH:mm:ss",  
            //};


        }

        public List<TrackInfoItunes> Tracks
        {
            get
            {
                if (!loaded)
                {
                    lock (_lock)
                    {

                    }
                }

                return new List<TrackInfoItunes>(dict.Values);
            }
        }

        public TrackInfoItunes get(string location)
        {
            if (!loaded)
            {
                lock (_lock)
                {

                }
            }
            return dict[location];
        }

        public TrackInfoItunes get(TrackInfoItunes w)
        {
            return dictId[w.DbId];
        }

        public void Check(TrackInfoItunes track)
        {


            var location = track.ShortName;
            if (string.IsNullOrEmpty(location))
                return;
            var dbTrack = dict[location];
            if (dbTrack == null)
            {
                int id = ++pieceSequenceId;
                track.DbId = id;
            }
            else
            {
                track.DbId = dbTrack.DbId;
                //if (import)
                //{
                //    track.import(dbTrack);
                //}
            }
            track.Present = true;
            dict[location] = track;
            dictId[track.DbId] = track;
        }

        public void Import(IEnumerable<TrackInfoItunes> listIt)
        {
            foreach (TrackInfoItunes it in listIt)
            {
                var location = it.ShortName;
                var tdb = dict[location];
                if (tdb == null)
                    continue;

                it.import(tdb);
            }
        }

        public void createIfExist(pdb.it.ITrackBuilder loader, List<TrackInfoItunes> listIt)
        {
            foreach (TrackInfoItunes tdb in dict.Values)
            {
                if (tdb.isPresent())
                {
                    loader.createTrack(tdb);
                    tdb.import();
                }
            }
        }



        public void load()
        {
            lock (_lock)
            {
                try
                {
                    var strVersion = "1";
                    TrackAlbum current = null;
                    using (XmlReader reader = XmlReader.Create(FILE))
                    {
                        while (reader.Read())
                        {
                            if (reader.NodeType == XmlNodeType.Element)
                            {
                                if (reader.Name == "db")
                                {
                                    var seq = reader.GetAttribute(SEQ_PIECE);
                                    pieceSequenceId = Convert.ToInt32(seq);
                                    strVersion = reader.GetAttribute(TOKEN_VERSION);
                                }
                                else if (reader.Name == "a")
                                {
                                    current = readAlbum(reader);
                                    (TrackInfoItunes.AlbumMgr as AlbumMgr).Add(current);
                                }
                                else if (reader.Name == "t")
                                {
                                    var t = read(reader, current);
                                    dict[t.ShortName] = t;
                                    dictId[t.DbId] = t;
                                }
                            }
                        }

                    }

                    using (XmlReader reader = XmlReader.Create(FILE_STAT))
                    {
                        while (reader.Read())
                        {
                            if (reader.NodeType == XmlNodeType.Element)
                            {
                                if (reader.Name == "db")
                                {

                                }
                                else
                                {
                                    int id = Convert.ToInt32(reader.GetAttribute("id"));


                                    var t = dictId[id];
                                    if (t == null)
                                    {
                                        string loc = reader.GetAttribute("f");
                                        Program.log.log("track {0} dans les stats non vu dans db {1}", id, loc);
                                    }
                                    else
                                    {
                                        t.readStat(reader);
                                        t.readStatGlobal(reader);
                                    }
                                }
                            }
                        }

                    }


                    foreach (string source in sources)
                    {
                        try
                        {
                            using (XmlReader reader = XmlReader.Create(source))
                            {
                                while (reader.Read())
                                {
                                    if (reader.NodeType == XmlNodeType.Element)
                                    {
                                        if (reader.Name == "db")
                                        {

                                        }
                                        else
                                        {
                                            int id = Convert.ToInt32(reader.GetAttribute("id"));


                                            var t = dictId[id];
                                            if (t == null)
                                            {

                                            }
                                            else
                                            {
                                                t.readStatGlobal(reader);
                                            }
                                        }
                                    }
                                }

                            }
                        }

                        catch (Exception ex)
                        {
                            misc.log(ex);
                        }
                    }


                    //using (XmlReader reader = XmlReader.Create(GLOBAL_STAT))
                    //{
                    //    while (reader.Read())
                    //    {
                    //        if (reader.NodeType == XmlNodeType.Element)
                    //        {
                    //            if (reader.Name == "db")
                    //            {

                    //            }
                    //            else
                    //            {
                    //                int id = Convert.ToInt32(reader.GetAttribute("id"));


                    //                var t = dictId[id];
                    //                if (t == null)
                    //                {
                    //                    string loc = reader.GetAttribute("f");
                    //                    Program.log.log("track {0} dans les global stats non vu dans db {1}", id, loc);
                    //                }
                    //                else
                    //                {
                    //                    t.readStatGlobal(reader);
                    //                    t.consolidStat();
                    //                }
                    //            }
                    //        }
                    //    }

                    //}

                }

                finally
                {
                    loaded = true;
                }
            }
        }




        private TrackInfoItunes read(XmlReader reader, TrackAlbum album)
        {
            var t = new TrackInfoItunes();
            if (album != null)
            {
                (t as it.TrackInfoItunes).TrackAlbum = album;
                album.Add(t);
            }
            t.build(reader);
            return t;
        }

        private TrackAlbum readAlbum(XmlReader reader)
        {
            string name = reader.GetAttribute("name");
            var album = new TrackAlbum(name);
            if ("y" == reader.GetAttribute("rare"))
                album.Rare = true;
            if ("y" == reader.GetAttribute("info"))
                album.Info = true;

            var str = reader.GetAttribute("rating");
            if (!string.IsNullOrEmpty(str))
                album.AlbumRating = Convert.ToInt32(str);

            return album;
        }

        private void write(XmlWriter writer, TrackAlbum album)
        {
            writer.WriteStartElement("a");
            writer.WriteAttributeString("name", album.Album);
            if (album.AlbumRating > 0)
                writer.WriteAttributeString("rating", album.AlbumRating.ToString());
            if (album.Rare)
                writer.WriteAttributeString("rare", "y");
            if (album.Info)
                writer.WriteAttributeString("info", "y");

            var list = album.List;
            list.Sort(new PodCastComparer());

            foreach (TrackInfoItunes t in list)
            {
                if (!Conf.Db.purgemissing || t.isPresent())
                    write(writer, t);
                else
                    listMissing.Add(t);
            }

            writer.WriteEndElement();

        }

        private static void write(XmlWriter writer, TrackInfoItunes track)
        {
            writer.WriteStartElement("t");
            writer.WriteAttributeString("id", track.DbId.ToString());
            var location = track.Location;
            if (!string.IsNullOrEmpty(location))
            {
                if (location.StartsWith(TrackInfoItunes.DefaultFolder, true, CultureInfo.InvariantCulture))
                {
                    location = location.Substring(TrackInfoItunes.DefaultFolder.Length);
                }


            }
            writer.WriteAttributeString("f", location);
            // writer.WriteAttributeString("alb", track.Album);
            writer.WriteAttributeString("name", track.Name);
            if (track.Pub > DateTime.MinValue)
                writer.WriteAttributeString("pub", track.Pub.ToString());
            if (track.Pub2 > DateTime.MinValue && track.Pub2 > track.Pub)
                writer.WriteAttributeString("pub2", track.Pub2.ToString());
            if (track.PlayedDate > DateTime.MinValue)
                writer.WriteAttributeString("date", track.PlayedDate.ToString());
            if (track.PlayCount > 0)
                writer.WriteAttributeString("nbr", track.PlayCount.ToString());
            //if (track.AlbumRating > 0)
            //    writer.WriteAttributeString("albumRating", track.AlbumRating.ToString());
            if (track.Rating != track.AlbumRating)
                writer.WriteAttributeString("rating", track.Rating.ToString());


            //if (track.RatingComputed)
            //    writer.WriteAttributeString("computed", "y");
            //if (track.Rare)
            //    writer.WriteAttributeString("rare", "y");
            //if (track.Info)
            //    writer.WriteAttributeString("info", "y");
            var duree = track.Duree;
            if (duree.Value > 0)
            {
                writer.WriteAttributeString("d", duree.Value.ToString("0"));
                var size = track.Size;
                if (size > 0)
                    writer.WriteAttributeString("s", size.ToString());
            }
            if (!track.Enabled)
                writer.WriteAttributeString("disabled", "y");

            if (track.Added > DateTime.MinValue)
                writer.WriteAttributeString("add", track.Added.ToString());
            if (track.AddedFirst > DateTime.MinValue && track.AddedFirst < track.Added)
                writer.WriteAttributeString("add1", track.AddedFirst.ToString());




            if (!string.IsNullOrEmpty(track.HibernateLocation))
                writer.WriteAttributeString("hl", track.HibernateLocation);


            writer.WriteEndElement();

        }

        private static void writeStat(XmlWriter writer, TrackInfoItunes track)
        {
            if (track.In > DateTime.MinValue)
            {
                writer.WriteStartElement("t");
                writer.WriteAttributeString("id", track.DbId.ToString());
                var location = track.Location;
                if (!string.IsNullOrEmpty(location))
                {
                    if (location.StartsWith(TrackInfoItunes.DefaultFolder, true, CultureInfo.InvariantCulture))
                    {
                        location = location.Substring(TrackInfoItunes.DefaultFolder.Length);
                    }


                }
                writer.WriteAttributeString("f", location);



                if (track.Out == DateTime.MinValue || track.In < track.Out)
                {
                    writer.WriteAttributeString("in", track.In.ToString());
                    if (track.Out > DateTime.MinValue)
                        writer.WriteAttributeString("out", track.Out.ToString());
                }
                else
                {
                    writer.WriteAttributeString("out", track.Out.ToString());
                    writer.WriteAttributeString("in", track.In.ToString());
                }


                writer.WriteEndElement();
            }

        }

        public void recordIt(IEnumerable<TrackInfoItunes> listIt)
        {
            if (listIt != null)
            {
                foreach (TrackInfoItunes t in listIt)
                    Check(t);
            }
        }

        private List<TrackInfoItunes> listMissing;
        public void write()
        {
            misc.log("db::write");
            string timeStamp = DateTime.Now.ToString("yyyy-MM-dd HH_mm_ss");
            lock (_lock)
            {
                try
                {
                    if (!Directory.Exists(SOV))
                        Directory.CreateDirectory(SOV);

                    File.Copy(FILE, string.Format("{0}{1}_{2}", SOV, timeStamp, Path.GetFileName(FILE)), true);
                }
                catch (Exception ex)
                {
                    misc.log(ex);
                }


                listMissing = new List<TrackInfoItunes>();

                var settings = new XmlWriterSettings();
                settings.Indent = true;
                settings.Encoding = Encoding.UTF8;
                using (XmlWriter writer = XmlWriter.Create(FILE + ".tmp", settings))
                {

                    writer.WriteStartElement("db");
                    writer.WriteAttributeString(TOKEN_VERSION, CURRENT_VERSION.ToString());
                    writer.WriteAttributeString(SEQ_PIECE, pieceSequenceId.ToString());

                    AlbumMgr mgr = TrackInfoItunes.AlbumMgr as AlbumMgr;
                    var albums = mgr.List;
                    albums.Sort((x, y) => x.Album.CompareTo(y.Album));

                    foreach (TrackAlbum album in albums)
                    {
                        write(writer, album);
                    }

                    writer.WriteEndDocument();
                    writer.Flush();
                }
                File.Copy(FILE + ".tmp", FILE, true);

                if (listMissing.Count > 0)
                {
                    using (XmlWriter writerMissing = XmlWriter.Create(string.Format("{0}{1}__missing.xml", SOV, timeStamp), settings))
                    {
                        writerMissing.WriteStartElement("db");

                        foreach (TrackInfoItunes track in listMissing)
                        {
                            write(writerMissing, track);
                        }
                        writerMissing.WriteEndDocument();
                        writerMissing.Flush();
                    }

                }


                using (XmlWriter writer = XmlWriter.Create(FILE_STAT + ".tmp", settings))
                {

                    writer.WriteStartElement("db");
                    writer.WriteAttributeString(TOKEN_VERSION, CURRENT_VERSION.ToString());
                    writer.WriteAttributeString(SEQ_PIECE, pieceSequenceId.ToString());
                    var tracks = Tracks;
                    tracks.Sort(new PodCastComparer());
                    foreach (TrackInfoItunes track in tracks)
                    {
                        if (!Conf.Db.purgemissing || track.isPresent())
                            writeStat(writer, track);
                    }
                    writer.WriteEndDocument();
                    writer.Flush();
                }
                File.Copy(FILE_STAT + ".tmp", FILE_STAT, true);


                if (listMissing.Count > 0)
                {
                    using (XmlWriter writerMissing = XmlWriter.Create(string.Format("{0}{1}__missing_stat.xml", SOV, timeStamp), settings))
                    {
                        writerMissing.WriteStartElement("db");

                        foreach (TrackInfoItunes track in listMissing)
                        {
                            writeStat(writerMissing, track);
                        }
                        writerMissing.WriteEndDocument();
                        writerMissing.Flush();
                    }

                }

                misc.log("db::fin write");
                //File.Copy(REMOTE_FILE.FullName + ".tmp", REMOTE_FILE.FullName, true);
            }
        }


        // géopolitique 4 par défaut rating ->80 albumrating ->80 computed =true
        //RFI 0 de temps en temps surcharge pour un par défaut : rating null albumrating->20 computed = true
        //                                  pour un syrchargé  : rating non null ""   
        // adele 1                          pour les défaut   rating:20 album 20 computed
        //                                  pour un surchargé 4 rating 80 album 20 non computed

        //C'est quand même gavant. il fait pas la différence entre les étoiles pleines et creuses
        //prenons adele defaut : 20 /20 computed
        //          autre        80 /20 non computed


        // ayo album zero surcharge 1 deux étoiles creuses => 20/40/computed

        //Ah ok . cas computed 1. album=rating => c'est bien level album
        //                        album != rating => c'est bidon  "étoile creuse"                                
        //        sinon on lit directement level album

        // Quel con j'ai pas vu qu'il y avait RatingComputed et Album Rating computed
        // je me le refele
        //géopolitique ratinet alubm => 80 ratingComputed
        // RFi  defaut rating null album 20 albumcomputed
        //      surchargé   rating 20 idem     
        // adele defaut rating 20 rating computed albumrating 20




    }
}]]></content>
  </file>
  <file path="\pdb.podcast\Load\LimitItemLoader.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using pdb.podcast.Tuning;
using pdb.util;
using pdb.util.list;
using pdb.podcast.Auto;
using pdb.podcast.Selection;

//using TimeSpan = pdb.util.timeSpan; 

namespace pdb.podcast.Load
{
    public class LimitItemLoader
    {
        private static bool _selection;
        public static bool ModeSelection { get { return _selection; } set { _selection = value; } }
        private LimitItem limit;
        private LimitsLoader parent;
        private IDictionary<string, FeedLimitItemLoader> loaders = new BgDictString0<FeedLimitItemLoader>();
        //  public SequentialDictString<TrackInfoItunes> preloaded = new SequentialDictString<TrackInfoItunes>();
        public SequentialDictString<TrackInfoItunes> standAlone = new SequentialDictString<TrackInfoItunes>();
        public SequentialDictString<TrackInfoItunes> legacy = new SequentialDictString<TrackInfoItunes>();
        public SequentialDictString<TrackInfoItunes> legacyRelax = new SequentialDictString<TrackInfoItunes>();
        private SequentialDictString<TrackInfoItunes> selected = new SequentialDictString<TrackInfoItunes>();
        public SequentialDictString<TrackInfoItunes> exclu = new SequentialDictString<TrackInfoItunes>();
        /// <summary>
        /// Ensemble des tracks chargés en premier par la limite
        /// </summary>
        public List<TrackInfoItunes> use = new List<TrackInfoItunes>();
        private Logger log;
        timeSpan currentDuration = new timeSpan();
        // timeSpan currentDurationVirtual = new timeSpan();
        timeSpan durationStop = new timeSpan();
        timeSpan currentContrib = new timeSpan();
        timeSpan trackDurationMax;
        timeSpan trackDurationMin;



        // List<TrackInfoItunes> list = new List<TrackInfoItunes>();
        BgDictString0<TrackInfoItunes> selectedByFd = new BgDictString0<TrackInfoItunes>();
        BgDictString0<TrackInfoItunes> manageByFd = new BgDictString0<TrackInfoItunes>();
        bool loadEqSel;

        public LimitItemLoader(LimitsLoader parent, LimitItem limit)
        {
            this.parent = parent;
            this.limit = limit;
            log = limit.Logger;

            trackDurationMax = timeSpan.FromMinutes(limit.Td);
            trackDurationMin = timeSpan.FromMinutes(limit.TdMin);
        }


        public timeSpan _durationv;
        public timeSpan _datev;
        public timeSpan _fd;

        public int _nb;

        public void checkV(AutoBuilder auto, int nb, timeSpan fd, timeSpan d, timeSpan date)
        {
            BgDictString0<TrackInfoItunes> dict = new BgDictString0<TrackInfoItunes>();

            int nbMin = int.MaxValue;
            timeSpan fdMin = timeSpan.MaxValue;
            timeSpan dMin = timeSpan.MaxValue;
            timeSpan dateMin = timeSpan.MaxValue;
            foreach (FeedLimitItemLoader loader in loaders.Values)
            {
                loader.checkV(nb, fd);
                var _nb = loader.NbV;
                var _fd = loader.FdV;
                if (_nb > nb && _nb < nbMin)
                    nbMin = _nb;
                if (_fd > fd && fd < fdMin)
                    fdMin = _fd;
                for (int i = 0; i <= loader.IndexV; i++)
                {
                    var track = loader.Candidats[i];
                    if (dict.ContainsKey(track.Location))
                        continue;
                    var _d = currentDuration + track.Duree;
                    if (_d > d && d < dMin)
                        dMin = _d;
                    var _date = track.Ts;
                    if (_date > date && _date < dateMin)
                        dateMin = _date;
                    break;
                }



            }

           this._durationv = dMin;
            this._datev = dateMin;
            this._nb = nbMin;
            this._fd = fdMin;
        }

        public void loadCandidats(List<TrackInfoItunes> _loaded)
        {
            if (limit.Nb == 0 || limit.FeedDuration == 0 || limit.Duration == 0)
                return;

            var duration = limit.Duration;
            //var _loadDuration = limit.LoadDuration; 
            loadEqSel = true;
            //if (limit.Dir.Cascading)
            //{
            var dd = limit.LoadDuration;
            if (dd > duration)
            {
                loadEqSel = false;
                duration = dd;
            }
            //}

            if (loadEqSel)
                duration += 200;


            //var duration = limit.LoadDuration;
            var durationMax = timeSpan.FromMinutes(duration);
            var dateMin = limit.DateMin;
            var dateMax = limit.DateMax;

            foreach (TrackInfoItunes candidat in _loaded)
            {
                var location = candidat.Location;
                if (string.IsNullOrEmpty(location))
                    continue;

                if (standAlone.ContainsKey(location))
                    continue;

                var d = candidat.Pub2;
                if (d < dateMin)
                    continue;

                var duree = candidat.Duree;
                if (duree > trackDurationMax)
                    continue;
                if (duree < trackDurationMin)
                    continue;
                standAlone.Add(location, candidat);
                Exporter.Record(candidat);

                var loader = getLoader(candidat.Album);
                loader.AddCandidat(candidat);
                continue;

                //bool okDate = d <= dateMax;
                ////if (Conf.BorderVirtual)
                ////    limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, okDate, false));
                ////if (!okDate)
                ////    continue;
                ////  var tb = new TrackBorderItem(limit, candidat, borderType.m    axdate, candidat.Pub, okDate);
                ////  limit.signal(tb);

                ////if (Conf.BorderVirtual)
                ////{
                ////     var tb = new TrackBorderItem(limit, candidat, borderType.maxdate, candidat.Pub, border.);
                ////      limit.signal(tb);
                ////}

                ////if (!okDate && !Conf.BorderVirtual)
                ////    continue;


                //var loader = getLoader(candidat.Album);
                //bool _control = loader.control(candidat, false, okDate);

                ////if (!_control && !Conf.BorderVirtual)
                ////    continue;

                //var currentDurationBase = (okDate && _control) ? currentDuration : currentDurationVirtual;
                //var newDuration = currentDurationBase + candidat.Duree;
                //bool okTotalDuration = newDuration <= durationMax;
                //bool selected = _control && okTotalDuration; //
                //bool okNb = loader.OkNb;

                //////question fd
                ////if (loader.LoadEqSel)
                ////{
                ////    var dataRoot = new CauseDatas(okDate, new timeSpan(d - Conf.Date0),
                ////        loader.OkFd, loader.getDurationStop(okDate)
                ////        , okNb, loader.getNbStop(okDate)
                ////        , okTotalDuration, durationStop.Value == 0 ? newDuration : durationStop, candidat, limit);

                ////    Program.CauseRegister.signal(dataRoot); 

                ////    var dataAuto =  new CauseDatas(okDate, new timeSpan(d - Conf.Date0),
                ////        loader.OkFd, loader.getCurrentDuration(okDate)
                ////        , okNb, loader.getNbStop(okDate)
                ////        , okTotalDuration, newDuration, candidat, limit);

                ////    limit.signal(dataAuto); 

                ////    //Program.CauseRegister.Get(candidat).check(okDate, new timeSpan(d - Conf.Date0),
                ////    //    loader.OkFd, loader.getDurationStop(okDate)
                ////    //    , okNb, loader.getNbStop(okDate)
                ////    //    , okTotalDuration, durationStop.Value == 0 ? newDuration : durationStop, limit);

                ////    //limit.signal(new CauseData(okDate, borderType.maxdate, new timeSpan(d - Conf.Date0), limit, candidat));
                ////    //limit.signal(new CauseData(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit, candidat));
                ////    //limit.signal(new CauseData(okTotalDuration, borderType.d, newDuration, limit, candidat));



                ////    if (okDate && _control && okTotalDuration)
                ////        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.selectedStrict));
                ////    else if (okDate && okTotalDuration)
                ////    {
                ////        if (loader.EndByFd)
                ////            limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.rejectedStrict));
                ////    }
                ////    else if (Conf.BorderVirtual)
                ////    {
                ////        if (_control)
                ////            limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.selectedLight));
                ////        else if (loader.EndByFd)
                ////            limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.rejectedLight));
                ////    }


                ////    //if (!_control)
                ////    //{
                ////    //    if (okDate && okTotalDuration && loader.EndByFd)
                ////    //    {
                ////    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.rejectedStrict);
                ////    //        limit.signal(tb);
                ////    //    }
                ////    //    else if (Conf.BorderVirtual)
                ////    //    {
                ////    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.rejectedLight);
                ////    //        limit.signal(tb);
                ////    //    }
                ////    //}
                ////}

                ////if (loadEqSel)
                ////{
                ////    // question d
                ////    if (okDate && _control && okTotalDuration)
                ////        limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.selectedStrict));
                ////    else if (okDate && _control)
                ////        limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.rejectedStrict));
                ////    else if (Conf.BorderVirtual)
                ////    {
                ////        if (okTotalDuration)
                ////            limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.selectedLight));
                ////        else
                ////            limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.rejectedLight));
                ////    }
                ////    //if (!okTotalDuration)
                ////    //{
                ////    //    if (okDate && _control)
                ////    //    {
                ////    //        var tb = new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.rejectedStrict);
                ////    //        limit.signal(tb);
                ////    //    }
                ////    //    else if (Conf.BorderVirtual)
                ////    //    {
                ////    //        var tb = new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.rejectedLight);
                ////    //        limit.signal(tb);
                ////    //    }
                ////    //}

                ////    // question date
                ////    if (okDate && _control && okTotalDuration)
                ////        limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.selectedStrict));
                ////    else if (_control && okTotalDuration)
                ////        limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.rejectedStrict));
                ////    else if (Conf.BorderVirtual)
                ////    {
                ////        if (okDate)
                ////            limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.selectedLight));
                ////        else
                ////            limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.rejectedLight));
                ////    }

                ////}



                ////if (loadEqSel)
                ////{
                ////    if ((okDate && _control) || Conf.BorderVirtual)
                ////    {
                ////       var tb = new TrackBorderItem(limit, candidat, borderType.d, newDuration, okTotalDuration);
                ////        limit.signal(tb);
                ////    }
                ////}

                ////if ((okDate && _control))
                ////{                   
                ////    var tb = new TrackBorderItem(limit, candidat, borderType.d, newDuration, okTotalDuration,true);
                ////    limit.signal(tb);
                ////}

                ////if (_control && okTotalDuration)
                ////{
                ////    var tb = new TrackBorderItem(limit, candidat, borderType.maxdate, candidat.Pub, okDate);
                ////    limit.signal(tb);
                ////}

                ////if (okDate && okTotalDuration)
                ////{
                ////    if (!loader.limit.NbFeedLimit)
                ////    {
                ////        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.CurrentDuration, _control);
                ////        limit.signal(tb); 
                ////    }
                ////}

                //// limit.checkBorderDates(candidat, selected);

                //if (okDate && _control)
                //    currentDuration += candidat.Duree; // newDuration; //
                //currentDurationVirtual += candidat.Duree;

                //// preloaded.Add(location, candidat);
                //if (selected)
                //{
                //    //   standAlone.Add(location, candidat);
                //    candidat.select(selectMode.standAlone, limit);

                //}
                //else if (okDate && _control && !okTotalDuration)
                //{
                //    //if (!limit.LoadDurationLimitAtteinte)
                //    //    log.log("loadCandidats duréée limite atteinte {0}", (currentDuration)); //.TotalMinutes.ToString("0"));
                //    //limit.LoadDurationLimitAtteinte = true;
                //    if (durationStop.Value == 0)
                //    {
                //        durationStop = currentDuration;
                //    }
                //    // break;
                //}

                ////if (okDate && _control)
                ////    currentDuration = newDuration; // += candidat.Duree;
                ////   currentDurationVirtual += candidat.Duree;

            }

        }



        //private bool control(TrackInfoItunes track, bool select, bool real)
        //{
        //    var loader = getLoader(track.Album);
        //    return loader.control(track, select, real);
        //}

        private FeedLimitItemLoader getLoader(string album)
        {

            FeedLimitItemLoader loader = null;
            if (!loaders.ContainsKey(album))
            {
                loader = new FeedLimitItemLoader(limit, album, parent);
                loaders.Add(album, loader);
                if (parent.state == loadState.selection)
                    loader.phase2();
            }
            else
                loader = loaders[album];
            return loader;
        }

        public void phase2()
        {
            currentDuration = new timeSpan();
            //  currentDurationVirtual = new timeSpan();
            selectedByFd = new BgDictString0<TrackInfoItunes>();
            manageByFd = new BgDictString0<TrackInfoItunes>();

            if (_selection)
            {
                currentContrib = new timeSpan();
                limit.DurationLimitAtteinte = false;
                limit.ContributionLimitAtteinte = false;
                limit.DurationFeedLimit = false;
                limit.NbFeedLimit = false;
            }
            foreach (FeedLimitItemLoader loader in loaders.Values)
                loader.phase2();
        }

        public void recordGuest(TrackInfoItunes track, LimitItem itemSource)
        {
            if (itemSource == limit)
                return;
            var location = track.Location;
            if (string.IsNullOrEmpty(location))
                return;
            //if (standAlone.ContainsKey(location))
            //    return;
            bool transmitTotal = limit.Dir.TransmitTotalGuest;
            if (transmitTotal && legacy.ContainsKey(location))
                return;
            if (!transmitTotal && legacyRelax.ContainsKey(location))
                return;


            if (track.Duree <= trackDurationMax && track.Duree >= trackDurationMin) // && track.Pub >= dateMin)
            {

                if (transmitTotal)
                    legacy.Add(location, track);
                else
                    legacyRelax.Add(location, track);
            }
        }

        public void recordTrackFromChild(TrackInfoItunes track, LimitItem itemSource, bool transmitTotal)
        {
            var location = track.Location;
            if (string.IsNullOrEmpty(location))
                return;
            //if (standAlone.ContainsKey(location))
            //    return;
            if (transmitTotal && legacy.ContainsKey(location))
                return;
            if (!transmitTotal && legacyRelax.ContainsKey(location))
                return;
            if (track.Duree <= trackDurationMax && track.Duree >= trackDurationMin) // && track.Pub >= dateMin)
            {
                if (transmitTotal)
                    legacy.Add(location, track);
                else
                    legacyRelax.Add(location, track);

            }
        }



        //private timeSpan getDuration(int nb, timeSpan minfd)
        //{
        //    timeSpan tot = new timeSpan();
        //    foreach (FeedLimitItemLoader feed in loaders.Values)
        //    {
        //        tot += feed.getTotalDurationFor(nb, minfd);
        //    }
        //    return tot;
        //}

        public void Selection()
        {

            if (limit.Nb == 0 || limit.FeedDuration == 0 || limit.Duration == 0)
                return;

            var histo = limit.Dir.Histo;

            var relax = legacyRelax.List;
            if (relax.Count > 0)
            {
            }

            if (histo)
                relax.Sort(new PodCastComparer());
            else
                relax.Sort(new PodCastComparerInv());
            selection(relax, false, false);

            var list = legacy.List;
            if (histo)
                list.Sort(new PodCastComparer());
            else
                list.Sort(new PodCastComparerInv());

            selection(list, false, true);



            var list2 = standAlone.List;
            if (histo)
                list2.Sort(new PodCastComparer());
            else
                list2.Sort(new PodCastComparerInv());

            selection(list2, true, true);

        }


        private void selection(List<TrackInfoItunes> list, bool select, bool increment)
        {
            var duration = limit.Duration;
            var durationMax = timeSpan.FromMinutes(duration);
            var contributionMax = timeSpan.FromMinutes(limit.Contribution);

            int count = list.Count;
            for (int index = 0; index < count; index++)
            {
                TrackInfoItunes candidat = list[index];
                //foreach (TrackInfoItunes candidat in list)
                //{

                //if (candidat.Album == "Géopolitique")
                //{
                //}

                //if (candidat.Name == "Le monde selon Etienne Klein 17.01.13")
                //{
                //}
                var location = candidat.Location;
                if (string.IsNullOrEmpty(location))
                    continue;

                //if (_selection && selected.ContainsKey(location))
                //    continue;
                // vérification à postériori par rapports aux différents niveaux
                bool newContribut = candidat.Selected;

                var d = candidat.Pub2;
                bool okDate = d <= limit.DateMax && d <= limit.DateMax2;
                var loader = getLoader(candidat.Album);
                bool okTotalDuration = false;
                bool _control = false;

                //tester uniquement fd et nb
                // _control = loader.control(candidat, select, false, false);

                // var _newDuration = currentDuration;
                //if (increment)
                //    _newDuration = currentDuration + candidat.Duree;

                // savoir si ça passe uniquement avec le critère d
                okTotalDuration = currentDuration <= durationMax;

                bool okprovi = okDate && okTotalDuration;
                bool ok = okDate && okTotalDuration && _control;

                // rejouer le controle pour incrémenter nb et fd      
                if (!increment) // données venant de sous-dossier (histo, voisins....)
                {
                    _control = loader.control(candidat, select, false, okDate && okTotalDuration, true);
                    if (_control && !selectedByFd.ContainsKey(location))
                        selectedByFd.Add(location, candidat);
                    if (!manageByFd.ContainsKey(location))
                        manageByFd.Add(location, candidat);
                }



                //if (!loader.LoadEqSel)
                //{

                //    if (_control)
                //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.selectedLight));
                //    else if (loader.EndByFd)
                //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.rejectedLight));

                //}

                //if (!increment && !_selection) //!loader.LoadEqSel &&
                //{
                //    //  if (!loader.OkNb)
                //    //  Program.CauseRegister.Get(candidat).check(loader.OkNb, borderType.nb, timeSpan.FromMinutes(loader.getNb(okDate)), limit);
                //    // if (!loader.OkFd)
                //    // Program.CauseRegister.Get(candidat).check(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit);

                //    limit.Dir.CauseRegister.signal(new CauseDatas(loader.OkNb, borderType.nb, timeSpan.FromMinutes(loader.getNbStop(okDate)), limit, candidat));
                //    limit.Dir.CauseRegister.signal(new CauseDatas(loader.OkFd, borderType.fd, loader.getDurationStop(okDate), limit, candidat));

                //    limit.signal(new CauseDatas(okDate, borderType.maxdate, new timeSpan(d - Conf.Date0), limit, candidat));
                //    limit.signal(new CauseDatas(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit, candidat));
                //}

                //if (!control(candidat, select, okDuration))
                //    continue;

                if (increment)
                {
                    var newDuration = currentDuration + candidat.Duree;
                    okTotalDuration = newDuration <= durationMax;
                    if (manageByFd.ContainsKey(location))
                    {
                        _control = false;
                        if (selectedByFd.ContainsKey(location))
                            _control = true;
                    }
                    else
                    {
                        _control = loader.control(candidat, select, false, okDate && okTotalDuration, true);

                    }

                    if (_control)
                    {
                        //currentDurationVirtual += candidat.Duree;
                        if (okDate)
                            currentDuration += candidat.Duree;
                    }


                    // newDuration = currentDuration;
                    if (_control && !selectedByFd.ContainsKey(location))
                        selectedByFd.Add(location, candidat);
                    if (!manageByFd.ContainsKey(location))
                        manageByFd.Add(location, candidat);
                    //  okTotalDuration = newDuration <= durationMax;



                    //okTotalDuration = newDuration <= durationMax;
                    //_control = loader.control(candidat, select, okDate && okTotalDuration, true,true);

                    //if (okDate && _control)
                    //    currentDuration += candidat.Duree;
                    //currentDurationVirtual = currentDuration; // += candidat.Duree;

                    //var newDuration = okDate && _control ? currentDuration : currentDurationVirtual;

                    //  bool okTotalDuration = newDuration <= durationMax;

                    if (!_selection)
                    {


                        var _fd = loader.getCurrentDuration(false);

                        if (_fd > newDuration)
                        {
                            newDuration = _fd;
                            okTotalDuration = newDuration <= durationMax;
                        }
                        if (_control)
                        {
                        }
                        else
                        {
                            //var fd = loader.getCurrentDuration(true);
                            //var nb = loader.getNb(true);

                            //newDuration = new timeSpan();
                            //foreach (FeedLimitItemLoader l in loaders.Values)
                            //    l.phaseTest();
                            //for (int j = 0; j <= index; j++)
                            //{
                            //    TrackInfoItunes t = list[j];
                            //    var subloader = getLoader(t.Album);
                            //    var subok = subloader.test(nb, fd, t);
                            //    if (j >= subloader.IndexBase)
                            //    {
                            //        if (subok || selectedByFd.ContainsKey(location))
                            //            newDuration += t.Duree;
                            //    }

                            //}
                            //// newDuration += getDuration(nb, fd);

                            //if (newDuration < currentDuration)
                            //{
                            //}
                            //else if (newDuration > currentDurationVirtual)
                            //{
                            //}
                            //okTotalDuration = newDuration <= durationMax;
                        }


                        //question fd
                        //if (!loader.LoadEqSel)
                        //{
                        var dataRoot = new CauseDatas(okDate, new timeSpan(d - Conf.Date0),
                      loader.OkFd, loader.getDurationStop(okDate)
                      , loader.OkNb, loader.getNbStop(okDate)
                      , okTotalDuration, durationStop.Value == 0 ? newDuration : durationStop, candidat, limit);

                        limit.Dir.CauseRegister.signal(dataRoot);

                        var dataAuto = new CauseDatas(okDate, new timeSpan(d - Conf.Date0),
                            //loader.OkFd, loader.getCurrentDuration(okDate && okTotalDuration)
                            //, loader.OkNb, loader.getNb(okDate && okTotalDuration)
                            //, okTotalDuration, newDuration, candidat, limit);
                                loader.OkFd, _fd// loader.getCurrentDuration (false)
                        , loader.OkNb, loader.getNb(false)
                        , okTotalDuration, newDuration, candidat, limit);

                        limit.signal(dataAuto);
                    }




                    //   Program.CauseRegister.Get(candidat).check(okDate, new timeSpan(d - Conf.Date0),
                    //loader.OkFd, loader.getDurationStop(okDate)
                    //, loader.OkNb, loader.getNbStop(okDate)
                    //, okTotalDuration, durationStop.Value == 0 ? newDuration : durationStop, limit);

                    //   limit.signal(new CauseData(okDate, borderType.maxdate, new timeSpan(d - Conf.Date0), limit, candidat));
                    //   limit.signal(new CauseData(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit, candidat));
                    //   limit.signal(new CauseData(okTotalDuration, borderType.d, newDuration, limit, candidat));

                    if (Conf.BorderTb)
                    {
                        if (okDate && _control && okTotalDuration)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.selectedStrict));
                        else if (okDate && okTotalDuration)
                        {
                            if (loader.EndByFd)
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.rejectedStrict));
                        }
                        //else if (Conf.BorderVirtual)
                        //{
                        //    if (_control)
                        //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.selectedLight));
                        //    else if (loader.EndByFd)
                        //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.rejectedLight));
                        //}


                        //}

                        //if (!loadEqSel)
                        //{
                        // question d
                        if (okDate && _control && okTotalDuration)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.selectedStrict));
                        else if (okDate && _control)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.rejectedStrict));
                        else if (Conf.BorderVirtual)
                        {
                            if (okTotalDuration)
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.selectedLight));
                            else
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.rejectedLight));
                        }


                        // question date
                        if (okDate && _control && okTotalDuration)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.selectedStrict));
                        else if (_control && okTotalDuration)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.rejectedStrict));
                        else if (Conf.BorderVirtual)
                        {
                            if (okDate)
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.selectedLight));
                            else
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.rejectedLight));
                        }

                        //}

                    }


                    ////question duree
                    //if (okDate && _control) // || Conf.BorderVirtual)
                    //{
                    //    var tb = new TrackBorderItem(limit, candidat, borderType.d, newDuration, okDuration, true); limit.signal(tb);
                    //}
                    //else if (Conf.BorderVirtual)
                    //{
                    //    var tb = new TrackBorderItem(limit, candidat, borderType.d, newDuration, okDuration, false); limit.signal(tb);
                    //}

                    ////question fd

                    //if (_control)
                    //{
                    //    if (okDate && okDuration)
                    //    {
                    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.selectedStrict); limit.signal(tb);
                    //    }
                    //    else if (Conf.BorderVirtual)
                    //    {
                    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.selectedLight); limit.signal(tb);

                    //    }
                    //}
                    //else //if (!loader.limit.NbFeedLimit)
                    //{
                    //    if (okDate && okDuration)
                    //    {
                    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.rejectedStrict);
                    //        limit.signal(tb);
                    //    }
                    //    else if (Conf.BorderVirtual)
                    //    {
                    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.rejectedLight);
                    //        limit.signal(tb);
                    //    }
                    //}
                    ////question date
                    //if (_control && okDuration)
                    //{
                    //    var tb = new TrackBorderItem(limit, candidat, borderType.maxdate, candidat.Pub, okDate, true);
                    //    limit.signal(tb);
                    //}
                    //else if (Conf.BorderVirtual)
                    //{
                    //    var tb = new TrackBorderItem(limit, candidat, borderType.maxdate, candidat.Pub, okDate, false);
                    //    limit.signal(tb);
                    //}



                    //if (!_control && !Conf.BorderVirtual)
                    //    continue;
                    if (!okDate)
                        continue;

                    if (!_control)
                        continue;
                    newDuration = currentDuration;
                    okTotalDuration = newDuration <= durationMax;
                    if (!okTotalDuration)
                    {
                        if (!Logger.CreateNullLoggers)
                            log.log("duration {0}", (newDuration)); //.TotalMinutes.ToString("0"));

                        if (_selection)
                            limit.DurationLimitAtteinte = true;
                        if (durationStop.Value == 0)
                        {
                            // currentDuration = newDuration;
                            durationStop = currentDuration;
                        }

                    }

                    if (!okTotalDuration)
                        continue;


                    if (_selection && !newContribut)
                    {
                        // pour l'instant ? on ne gère pas la contribtion en mode rejeu

                        currentContrib += candidat.Duree;
                        if (currentContrib > contributionMax)
                        {
                            log.log("contribution {0}", (currentContrib)); //.TotalMinutes.ToString("0"));
                            limit.ContributionLimitAtteinte = true;
                            break;
                        }

                        use.Add(candidat);
                    }

                    //   currentDuration = newDuration;




                    if (_selection)
                    {
                        // enregistrement pour stockage et stats // et NON ! en plus gestion de la propagation des sous-répertoires vers les répertoires parent
                        limit.Dir.recordTrack(candidat, limit);
                        // enregistrement pour stockage et stats // et NON ! en plus gestion de la propagation des sous-répertoires vers les répertoires parent
                        //  limit.Dir.recordTrack(candidat, limit);

                        selected.Add(location, candidat);

                        if (select)
                            exclu.Add(location, candidat);
                    }





                }

            }
        }


        private void selection0(List<TrackInfoItunes> list, bool select, bool increment)
        {
            var duration = limit.Duration;
            var durationMax = timeSpan.FromMinutes(duration);
            var contributionMax = timeSpan.FromMinutes(limit.Contribution);

            int count = list.Count;
            for (int index = 0; index < count; index++)
            {
                TrackInfoItunes candidat = list[index];
                //foreach (TrackInfoItunes candidat in list)
                //{

                //if (candidat.Album == "Géopolitique")
                //{
                //}

                //if (candidat.Name == "Le monde selon Etienne Klein 17.01.13")
                //{
                //}
                var location = candidat.Location;
                if (string.IsNullOrEmpty(location))
                    continue;

                //if (_selection && selected.ContainsKey(location))
                //    continue;
                // vérification à postériori par rapports aux différents niveaux
                bool newContribut = candidat.Selected;

                var d = candidat.Pub2;
                bool okDate = d <= limit.DateMax && d <= limit.DateMax2;
                var loader = getLoader(candidat.Album);
                bool okTotalDuration = false;
                bool _control = false;

                //tester uniquement fd et nb
                // _control = loader.control(candidat, select, false, false);

                // var _newDuration = currentDuration;
                //if (increment)
                //    _newDuration = currentDuration + candidat.Duree;

                // savoir si ça passe uniquement avec le critère d
                okTotalDuration = currentDuration <= durationMax;

                bool okprovi = okDate && okTotalDuration;
                bool ok = okDate && okTotalDuration && _control;

                // rejouer le controle pour incrémenter nb et fd      
                if (!increment) // données venant de sous-dossier (histo, voisins....)
                {
                    _control = loader.control(candidat, select, false, okDate && okTotalDuration, true);
                    if (_control && !selectedByFd.ContainsKey(location))
                        selectedByFd.Add(location, candidat);
                    if (!manageByFd.ContainsKey(location))
                        manageByFd.Add(location, candidat);
                }



                //if (!loader.LoadEqSel)
                //{

                //    if (_control)
                //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.selectedLight));
                //    else if (loader.EndByFd)
                //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.rejectedLight));

                //}

                //if (!increment && !_selection) //!loader.LoadEqSel &&
                //{
                //    //  if (!loader.OkNb)
                //    //  Program.CauseRegister.Get(candidat).check(loader.OkNb, borderType.nb, timeSpan.FromMinutes(loader.getNb(okDate)), limit);
                //    // if (!loader.OkFd)
                //    // Program.CauseRegister.Get(candidat).check(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit);

                //    limit.Dir.CauseRegister.signal(new CauseDatas(loader.OkNb, borderType.nb, timeSpan.FromMinutes(loader.getNbStop(okDate)), limit, candidat));
                //    limit.Dir.CauseRegister.signal(new CauseDatas(loader.OkFd, borderType.fd, loader.getDurationStop(okDate), limit, candidat));

                //    limit.signal(new CauseDatas(okDate, borderType.maxdate, new timeSpan(d - Conf.Date0), limit, candidat));
                //    limit.signal(new CauseDatas(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit, candidat));
                //}

                //if (!control(candidat, select, okDuration))
                //    continue;

                if (increment)
                {
                    var newDuration = currentDuration + candidat.Duree;
                    okTotalDuration = newDuration <= durationMax;
                    if (manageByFd.ContainsKey(location))
                    {
                        _control = false;
                        if (selectedByFd.ContainsKey(location))
                            _control = true;
                    }
                    else
                    {
                        _control = loader.control(candidat, select, false, okDate && okTotalDuration, true);

                    }

                    if (_control)
                    {
                        //currentDurationVirtual += candidat.Duree;
                        if (okDate)
                            currentDuration += candidat.Duree;
                    }


                    // newDuration = currentDuration;
                    if (_control && !selectedByFd.ContainsKey(location))
                        selectedByFd.Add(location, candidat);
                    if (!manageByFd.ContainsKey(location))
                        manageByFd.Add(location, candidat);
                    //  okTotalDuration = newDuration <= durationMax;



                    //okTotalDuration = newDuration <= durationMax;
                    //_control = loader.control(candidat, select, okDate && okTotalDuration, true,true);

                    //if (okDate && _control)
                    //    currentDuration += candidat.Duree;
                    //currentDurationVirtual = currentDuration; // += candidat.Duree;

                    //var newDuration = okDate && _control ? currentDuration : currentDurationVirtual;

                    //  bool okTotalDuration = newDuration <= durationMax;

                    if (!_selection)
                    {


                        var _fd = loader.getCurrentDuration(false);

                        if (_fd > newDuration)
                        {
                            newDuration = _fd;
                            okTotalDuration = newDuration <= durationMax;
                        }
                        if (_control)
                        {
                        }
                        else
                        {
                            //var fd = loader.getCurrentDuration(true);
                            //var nb = loader.getNb(true);

                            //newDuration = new timeSpan();
                            //foreach (FeedLimitItemLoader l in loaders.Values)
                            //    l.phaseTest();
                            //for (int j = 0; j <= index; j++)
                            //{
                            //    TrackInfoItunes t = list[j];
                            //    var subloader = getLoader(t.Album);
                            //    var subok = subloader.test(nb, fd, t);
                            //    if (j >= subloader.IndexBase)
                            //    {
                            //        if (subok || selectedByFd.ContainsKey(location))
                            //            newDuration += t.Duree;
                            //    }

                            //}
                            //// newDuration += getDuration(nb, fd);

                            //if (newDuration < currentDuration)
                            //{
                            //}
                            //else if (newDuration > currentDurationVirtual)
                            //{
                            //}
                            //okTotalDuration = newDuration <= durationMax;
                        }


                        //question fd
                        //if (!loader.LoadEqSel)
                        //{
                        var dataRoot = new CauseDatas(okDate, new timeSpan(d - Conf.Date0),
                      loader.OkFd, loader.getDurationStop(okDate)
                      , loader.OkNb, loader.getNbStop(okDate)
                      , okTotalDuration, durationStop.Value == 0 ? newDuration : durationStop, candidat, limit);

                        limit.Dir.CauseRegister.signal(dataRoot);

                        var dataAuto = new CauseDatas(okDate, new timeSpan(d - Conf.Date0),
                            //loader.OkFd, loader.getCurrentDuration(okDate && okTotalDuration)
                            //, loader.OkNb, loader.getNb(okDate && okTotalDuration)
                            //, okTotalDuration, newDuration, candidat, limit);
                                loader.OkFd, _fd// loader.getCurrentDuration (false)
                        , loader.OkNb, loader.getNb(false)
                        , okTotalDuration, newDuration, candidat, limit);

                        limit.signal(dataAuto);
                    }




                    //   Program.CauseRegister.Get(candidat).check(okDate, new timeSpan(d - Conf.Date0),
                    //loader.OkFd, loader.getDurationStop(okDate)
                    //, loader.OkNb, loader.getNbStop(okDate)
                    //, okTotalDuration, durationStop.Value == 0 ? newDuration : durationStop, limit);

                    //   limit.signal(new CauseData(okDate, borderType.maxdate, new timeSpan(d - Conf.Date0), limit, candidat));
                    //   limit.signal(new CauseData(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit, candidat));
                    //   limit.signal(new CauseData(okTotalDuration, borderType.d, newDuration, limit, candidat));

                    if (Conf.BorderTb)
                    {
                        if (okDate && _control && okTotalDuration)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.selectedStrict));
                        else if (okDate && okTotalDuration)
                        {
                            if (loader.EndByFd)
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.rejectedStrict));
                        }
                        //else if (Conf.BorderVirtual)
                        //{
                        //    if (_control)
                        //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.selectedLight));
                        //    else if (loader.EndByFd)
                        //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.rejectedLight));
                        //}


                        //}

                        //if (!loadEqSel)
                        //{
                        // question d
                        if (okDate && _control && okTotalDuration)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.selectedStrict));
                        else if (okDate && _control)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.rejectedStrict));
                        else if (Conf.BorderVirtual)
                        {
                            if (okTotalDuration)
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.selectedLight));
                            else
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.rejectedLight));
                        }


                        // question date
                        if (okDate && _control && okTotalDuration)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.selectedStrict));
                        else if (_control && okTotalDuration)
                            limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.rejectedStrict));
                        else if (Conf.BorderVirtual)
                        {
                            if (okDate)
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.selectedLight));
                            else
                                limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.rejectedLight));
                        }

                        //}

                    }


                    ////question duree
                    //if (okDate && _control) // || Conf.BorderVirtual)
                    //{
                    //    var tb = new TrackBorderItem(limit, candidat, borderType.d, newDuration, okDuration, true); limit.signal(tb);
                    //}
                    //else if (Conf.BorderVirtual)
                    //{
                    //    var tb = new TrackBorderItem(limit, candidat, borderType.d, newDuration, okDuration, false); limit.signal(tb);
                    //}

                    ////question fd

                    //if (_control)
                    //{
                    //    if (okDate && okDuration)
                    //    {
                    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.selectedStrict); limit.signal(tb);
                    //    }
                    //    else if (Conf.BorderVirtual)
                    //    {
                    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.selectedLight); limit.signal(tb);

                    //    }
                    //}
                    //else //if (!loader.limit.NbFeedLimit)
                    //{
                    //    if (okDate && okDuration)
                    //    {
                    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.rejectedStrict);
                    //        limit.signal(tb);
                    //    }
                    //    else if (Conf.BorderVirtual)
                    //    {
                    //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.rejectedLight);
                    //        limit.signal(tb);
                    //    }
                    //}
                    ////question date
                    //if (_control && okDuration)
                    //{
                    //    var tb = new TrackBorderItem(limit, candidat, borderType.maxdate, candidat.Pub, okDate, true);
                    //    limit.signal(tb);
                    //}
                    //else if (Conf.BorderVirtual)
                    //{
                    //    var tb = new TrackBorderItem(limit, candidat, borderType.maxdate, candidat.Pub, okDate, false);
                    //    limit.signal(tb);
                    //}



                    //if (!_control && !Conf.BorderVirtual)
                    //    continue;
                    if (!okDate)
                        continue;

                    if (!_control)
                        continue;
                    newDuration = currentDuration;
                    okTotalDuration = newDuration <= durationMax;
                    if (!okTotalDuration)
                    {
                        if (!Logger.CreateNullLoggers)
                            log.log("duration {0}", (newDuration)); //.TotalMinutes.ToString("0"));

                        if (_selection)
                            limit.DurationLimitAtteinte = true;
                        if (durationStop.Value == 0)
                        {
                            // currentDuration = newDuration;
                            durationStop = currentDuration;
                        }

                    }

                    if (!okTotalDuration)
                        continue;


                    if (_selection && !newContribut)
                    {
                        // pour l'instant ? on ne gère pas la contribtion en mode rejeu

                        currentContrib += candidat.Duree;
                        if (currentContrib > contributionMax)
                        {
                            log.log("contribution {0}", (currentContrib)); //.TotalMinutes.ToString("0"));
                            limit.ContributionLimitAtteinte = true;
                            break;
                        }

                        use.Add(candidat);
                    }

                    //   currentDuration = newDuration;




                    if (_selection)
                    {
                        // enregistrement pour stockage et stats // et NON ! en plus gestion de la propagation des sous-répertoires vers les répertoires parent
                        limit.Dir.recordTrack(candidat, limit);
                        // enregistrement pour stockage et stats // et NON ! en plus gestion de la propagation des sous-répertoires vers les répertoires parent
                        //  limit.Dir.recordTrack(candidat, limit);

                        selected.Add(location, candidat);

                        if (select)
                            exclu.Add(location, candidat);
                    }





                }

            }
        }

        public LimitItem Item { get { return limit; } }
        public override string ToString()
        {
            return limit.ToString();
        }

    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Load\LimitsLoader.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;

using pdb.podcast.Tuning;
using pdb.util.list;
using pdb.util;
using pdb.podcast.Report;
using System.Xml;
using pdb.podcast.Selection;

namespace pdb.podcast.Load
{
    public interface IWriter
    {
        void StartElement(string elt);
        void SetAttribute(string name, object value);
        void EndElement();
    }
    public class WriterXml : IWriter
    {
        private XmlWriter writer;
        public WriterXml(XmlWriter writer)
        {
            this.writer = writer;
        }
        public void StartElement(string elt)
        {
            writer.WriteStartElement(elt);
        }

        public void SetAttribute(string name, object value)
        {
            writer.WriteAttributeString(name, value.ToString());
        }

        public void EndElement()
        {
            writer.WriteEndElement();
        }
    }

    public class WriterHtml : IWriter
    {
        private ITextWriter writer;
        int level;
        void beginLine()
        {
            writer.AppendLine();
            for (int i = 0; i < level; i++)
                writer.Append("\t");
        }
        public WriterHtml(ITextWriter writer)
        {
            this.writer = writer;
        }
        public void StartElement(string elt)
        {
            StartElement(elt, null);
        }

        private void StartElement(string elt, string class_)
        {
            beginLine();
            if (string.IsNullOrEmpty(class_))
                writer.Append("<div>");
            else
            {
                writer.Append("<div class='");
                writer.Append(class_);
                writer.Append("'>");
            }
            if (elt.Length > 1)
            {
                writer.Append(elt);
                writer.Append("&nbsp;");
            }
            level++;
        }


        public void Start(string elt)
        {
            StartElement(elt, "tree");
        }

        public void SetAttribute(string name, object value)
        {
            if (name == "track")
            {
                writer.Append("<span class='track'>");
                writer.Append(value);
                writer.Append("</span>");

            }
            else if (name == "album")
            {
                writer.Append("<span class='album'>");
                writer.Append(value);
                writer.Append("</span>");
            }
            else
            {
                writer.Append(name);
                writer.Append("=");
                writer.Append(value);
            }
            writer.Append("&nbsp");

        }

        public void EndElement()
        {
            level--;
            beginLine();
            writer.Append("</div>");
        }
    }

    public
    class LimitsLoader
    {
        private DirConf dir;
        private Limits limit;
        // private IDictionary<string, TrackInfoItunes> loaded;
        private LimitLoader[] limites = new LimitLoader[Limits.NB];
        public loadState state;
        private Logger log;
        private static IWriter writer;
        public LimitsLoader(DirConf dir)
        {
            this.dir = dir;
            this.limit = dir.Limites;
            for (int i = 0; i < Limits.NB; i++)
            {
                limites[i] = new LimitLoader(this, limit[i]);
            }
            log = Logger.getLogger(dir.getPath() + "\\dir", null, false);
        }

        public void getLoaders(List<LimitItemLoader> list)
        {
            for (int i = 0; i < Limits.NB; i++)
            {
                limites[i].getLoaders(list); 
            }
        }

        public void loadCandidats()
        {
            try
            {
                var feeds = dir.Feeds; 
                string feedName = null;
                bool histo = dir.Histo;
                bool? histoAll = dir.HistoAll;
                if (histo && false.Equals(histoAll))
                    feedName = dir.Name;

                bool? dirInfo = dir.Info;
                bool? dirRare = dir.Rare;

                var _loaded = feeds.Loaded;
                List<TrackInfoItunes> loaded = new List<TrackInfoItunes>();



                foreach (TrackInfoItunes track in _loaded)
                {

                    if (feedName != null && track.Album != feedName)
                        continue;

                    if (dirInfo.HasValue && dirInfo.Value != track.Info)
                        continue;

                    if (dirRare.HasValue && dirRare.Value != track.Rare)
                        continue;
                    loaded.Add(track);
                }

                if (histo)
                    loaded.Sort(new PodCastComparer());
                else
                    loaded.Sort(new PodCastComparerInv());


                for (int i = dir.Cascading ? Limits.NB - 1 : 0; ((i >= 0 && dir.Cascading) || (i < Limits.NB && !dir.Cascading)); i = dir.Cascading ? i - 1 : i + 1)
                {
                    var limit = limites[i];
                    limit.loadCandidats(loaded);

                }

              
            }
            finally
            {
                state = loadState.selection;
            }
        }

        private bool recordGuests;
        public void phase2()
        {
            state = loadState.selection;
            if (dir.Cascading)
                recordGuests = true;
            foreach (LimitLoader item in limites)
            {
                item.phase2();
            }
        }

        public void recordLimitItemCandidat(TrackInfoItunes track, LimitItem item)
        {

            if (!recordGuests)
                return;


            for (int i = 0; i < Limits.NB; i++)
            {
                limites[i].recordGuest(track, item);
            }
        }

        public void recordTrackFromChild(TrackInfoItunes track, LimitItem itemSource, bool transmitTotal)
        {
            for (int i = 0; i < Limits.NB; i++)
            {
                limites[i].recordTrackFromChild(track, itemSource, transmitTotal);
            }
        }


        public void WriteLists()
        {
            if (dir.Parent == null || Conf.WritePlayLists)
            {
                // var preSel = feeds.PreSel;
                var list = dir.getListe();

                var limits = dir.Limites;
                var usegenPrior = Conf.GenUsePrior;
                var exclugenPrior = Conf.GenExcluPrior;

                for (int i = 0; i < Limits.NB; i++)
                {
                    var limit = limites[i];
                    List<TrackInfoItunes> items;
                    foreach (LimitItemLoader item in limit.Items)
                    {
                        // var index = limit.index(item);
                        if (Conf.WriteItems)
                        {
                            items = item.exclu.List; // list.FindAll(t => t.containsSelect(item));
                            buildList(item.Item.ID, items, "_sel");
                        }

                        if (Conf.WritePreSel)
                        {
                            items = item.standAlone.List; // preSel.FindAll(t => t.containsStandAlone(item));
                            buildList(item.Item.ID, items, "_sel0");
                        }
                        if (Conf.WriteUse)
                        {
                            items = item.use;
                            buildList(item.Item.ID, usegenPrior, items, "_use");
                        }
                        if (Conf.WriteExclu)
                        {
                            var limite = item.Item;
                            items = item.use.FindAll(t => t.Exclu == limite);
                            buildList(item.Item.ID, exclugenPrior, items, "_exclu");
                        }

                    }
                }

                //if (dir.Parent == null)
                //{
                if (dir.Parent == null)
                {

                    var lfolders = dir.Folders;

                    buildListPrior("_auto", list, lfolders);

                    //var lHisto = list.FindAll(t => t.Histo);
                    //buildList("_histo", lHisto, lfolders);

                    //var lPasHisto = list.FindAll(t => !t.Histo);
                    //buildList("_pasHisto", lPasHisto, lfolders);

                    //var lSerie = list.FindAll(t => t.Serial);
                    //buildList("_serie", lSerie, lfolders);
                }
                // }
            }
        }



        private static void buildList(string name, List<TrackInfoItunes> list, string folder)
        {
            Program.buildList(name, list, int.MaxValue, folder);
        }

        private static void buildList(string name, int prior, List<TrackInfoItunes> list, string folder)
        {
            Program.buildList(name, list, prior, folder);
        }

        private static void buildList(string name, List<TrackInfoItunes> list, List<string> folders)
        {
            Program.buildList(name, list, folders);
        }
        private static void buildListPrior(string name, List<TrackInfoItunes> list, List<string> folders)
        {
            Program.buildList(name, list, 0, folders);
        }



        private void writeStat(GroupStat stat, bool? onlyUse)
        {
            writeStat(stat.Total, onlyUse);
        }

        private void writeStat(DoubleStat stat, bool? onlyUse)
        {
            if (onlyUse == null)
                return;
            string strStat = "";
            if (true == onlyUse)
                strStat = stat.getUseValues();
            else
                strStat = stat.getStats();
            writer.SetAttribute("stats", strStat);
        }

        private void writeTrackList(List<TrackInfoItunes> list, bool includeAlbum, bool includeLevel, bool includeItem)
        {
            var conf = Conf.Html;
            int nbmax = conf.trackCause;
            int nb = 0; 
            foreach (TrackInfoItunes track in list)
            {
                nb++; 
                writer.StartElement("t");
                writer.SetAttribute("date", track.Pub);
                if (track.Pub2 > track.Pub)
                    writer.SetAttribute("pub2", track.Pub2);
                if (includeItem)
                {
                    writer.SetAttribute("i", track.GetProvider());
                    if (conf.trackItemDetail)
                    {
                        var lim = track.Provider;
                        if (lim != null)
                        {
                            var sb = new StringBuilder();
                            lim.writeStatHeader(sb);
                            lim.Stat.Total.buildValues(sb);
                            writer.SetAttribute("stats", sb.ToString());
                        }
                    }
                    
                }

                if (includeAlbum)
                    writer.SetAttribute("album", track.Album);
                if (includeLevel)
                    writer.SetAttribute("l", (track.Rating / 20).ToString());
                writer.SetAttribute("track", track.Name);
                if (nb <= nbmax)
                {
                    WriteCause(dir.CauseRegister.Get(track),true,true);
                    WriteCause(dir.CauseRegister.Get(track), true, false);
                    WriteCause(dir.CauseRegister.Get(track), false, true);
                    WriteCause(dir.CauseRegister.Get(track), false,false);

                }
                writer.EndElement();
            }
        }

        private List<TrackInfoItunes> getItems(DirConf dir, DoubleStat stat)
        {
            var items = new List<TrackInfoItunes>(stat.Use.List);
            if (dir.Histo)
                items.Sort(new PodCastComparer());
            else
                items.Sort(new PodCastComparerInv());
            return items;

        }

        internal void writeTracks(DirConf dir, GroupStat stat, bool? onlyUseStat, bool includeTrackItem)
        {
            writeStat(stat, onlyUseStat);

            var items = getItems(dir, stat.Total);
            if (items.Count == 0)
                return;

            int nbLevel = 0;



            #region tracks
            writer.StartElement("tracks");

            for (int i = 0; i < Limits.NB; i++)
            {
                var soutot = stat.SousTotaux[i];
                if (soutot.Empty)
                    continue;
                nbLevel++;
                if (nbLevel > 1)
                    break;
            }
            if (nbLevel > 1)
            {
                #region levels
                writer.StartElement("levels");
                for (int i = 0; i < Limits.NB; i++)
                {
                    var soutot = stat.SousTotaux[i];
                    if (soutot.Empty)
                        continue;
                    #region level
                    writer.StartElement("level");
                    writer.SetAttribute("level", i.ToString());
                    writeStat(soutot, true);
                    var subItems = getItems(dir, soutot);
                    #region subItems
                    writeTrackList(subItems, true, false, includeTrackItem);

                    #endregion

                    writer.EndElement();
                    #endregion

                }
                writer.EndElement();
                #endregion
            }

            writeTrackList(items, true, true, includeTrackItem);

            writer.EndElement();
            #endregion


            if (false != dir.HistoAll)
            {
                int nbAlbum = 0;
                foreach (FeedLimitItemStat f in stat.Feed.getFeeds())
                {
                    var listInAlbum = items.FindAll(t => t.Album == f.Album);
                    if (listInAlbum.Count == 0)
                        continue;
                    nbAlbum++;
                    if (nbAlbum > 1)
                        break;
                }
                if (nbAlbum > 1)
                {
                    #region albums
                    writer.StartElement("albums");
                    foreach (FeedLimitItemStat f in stat.Feed.getFeeds())
                    {
                        var listInAlbum = items.FindAll(t => t.Album == f.Album);
                        if (listInAlbum.Count == 0)
                            continue;
                        #region album
                        writer.StartElement("album");
                        writer.SetAttribute("name", f.Album);

                        writeStat(f.Totaux, true);
                        writeTrackList(listInAlbum, false, true, includeTrackItem);

                        writer.EndElement();
                        #endregion

                    }
                    writer.EndElement();
                    #endregion
                }
            }
        }
        public static IWriter Writer { set { writer = value; } }
        public void WriteTracksPre()
        {
            if (writer is WriterHtml && dir.Parent == null)
            {
                (writer as WriterHtml).Start("dir");
            }
            else
                writer.StartElement("dir");
            writer.SetAttribute("name", this.dir.Name);




            var dirStat = dir.Stat;
            if (dirStat == null)
                return;

            writeTracks(dir, dir.Conteneur.Tracks, true, true);

            var limits = dir.Limites;


            bool hasLimit = false;
            #region limites
            for (int i = 0; i < Limits.NB; i++)
            {
                var limit = limites[i];
                bool hasLimitItem = false;

                var limite = limit.Limit;
                var limitStat = limite.Stat;
                if (limitStat == null)
                    continue;
                if (limitStat.Total.Empty)
                    continue;


                if (!hasLimit)
                {
                    writer.StartElement("limites");
                    writeTracks(dir, dir.Stat, true, true);
                }
                hasLimit = true;

                #region limite
                writer.StartElement("limite");
                writer.SetAttribute("level", i.ToString());

                writeTracks(dir, limitStat, true, true);


                #region items
                foreach (LimitItemLoader item in limit.Items)
                {
                    var lim = item.Item;
                    var items = item.use;
                    if (items.Count == 0)
                        continue;
                    if (!hasLimitItem)
                        writer.StartElement("items");
                    hasLimitItem = true;

                    #region item
                    writer.StartElement("i");
                    writer.SetAttribute("name", lim.ToString().Replace(dir.getPath(), ""));
                    var sb = new StringBuilder();
                    lim.writeStatHeader(sb);
                    lim.Stat.Total.buildValues(sb);
                    writer.SetAttribute("stats", sb.ToString());

                    writeTracks(dir, lim.Stat, null, false);

                    writer.EndElement();
                    #endregion
                }
                if (hasLimitItem)
                    writer.EndElement();
                #endregion
                writer.EndElement();
                #endregion

            }
            if (hasLimit)
                writer.EndElement();
            #endregion


        }

        private void WriteCause(Causes causes, bool strict, bool ok)
        {
            //  writer.StartElement("causes");
            foreach (CauseItem cause in causes.getCauses(strict,ok, ok)) 
            {
                string str = "cause"; 
                if (strict)
                    str+="strict";
                if (!ok)
                    str += "nok"; 
                writer.StartElement(str);

            
                writer.SetAttribute("type", cause.type);
                writer.SetAttribute("val", cause.val);


                var lim = cause.limit as LimitItem;


                #region item
                //  writer.StartElement("i");
                writer.SetAttribute("name", lim.ToString());
                if (Conf.Html.trackCauseItemDetail)
                {
                    var sb = new StringBuilder();
                    lim.writeStatHeader(sb);
                    lim.Stat.Total.buildValues(sb);
                    writer.SetAttribute("stats", sb.ToString());
                }

                //   writer.EndElement();
                #endregion


                writer.EndElement();
            }
            //     writer.EndElement();
        }
        public void WriteTracksPost()
        {
            if (Conf.Html.writeCause >0)
            {
                if (dir.Parent == null)
                {
                    int nbMax = Conf.Html.writeCause;
                    int nb = 0; 
                    #region nonretenus
                    writer.StartElement("exclus");
                    var list =  dir.CauseRegister.getList(true);
                    foreach (Causes causes in list)
                    {
                        nb++;
                        if (nb > nbMax)
                            break; 
                        var track = causes.candidat;
                        writer.StartElement("t");
                        writer.SetAttribute("date", track.Pub);
                        if (track.Pub2 > track.Pub)
                            writer.SetAttribute("pub2", track.Pub2);
                        writer.SetAttribute("album", track.Album);
                        writer.SetAttribute("l", (track.Rating / 20).ToString());
                        writer.SetAttribute("track", track.Name);

                        WriteCause(causes,true,true);
                        WriteCause(causes, true, false);

                        WriteCause(causes, false, true);
                        WriteCause(causes, false,false);
                        writer.EndElement();
                    }
                    writer.EndElement();
                    #endregion
                }
            }
            writer.EndElement();

        }

        public void SelectionPre()
        {
            if (dir.SelectionPre)
                selection();
        }

        public void SelectionPost()
        {
            if (!dir.SelectionPre)
                selection();
        }

        private void selection()
        {

            log.log("{0} Selection", dir);

            for (int i = dir.Cascading ? Limits.NB - 1 : 0; ((i >= 0 && dir.Cascading) || (i < Limits.NB && !dir.Cascading)); i = dir.Cascading ? i - 1 : i + 1)
            {
                var limit = limites[i];
                limit.Selection();

            }

        }

        public override string ToString()
        {
            return dir.ToString(); 
        }

    }
}]]></content>
  </file>
  <file path="\pdb.podcast\Sort\Album.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using pdb.podcast.Tuning.Sort;
using pdb.util;
using pdb.podcast.Albums;

namespace pdb.podcast.Sort
{
    class Album
    {
        const char SEP = '|';
        private TrackAlbum album;
        private SortItem conf;
        private List<TrackInfoItunes> list = new List<TrackInfoItunes>();
        private static HashSet<int> lastReads = new HashSet<int>();
        //   private int indexLastRead = -1;
        timeSpan limit;
        private static int nbrepeches = 0;
        public static void clearReads() { lastReads.Clear(); nbrepeches = 0; }
        public static HashSet<int> LastRead { get { return lastReads; } }

        public Album(SortItem conf, TrackAlbum album)
        {
            this.conf = conf;
            this.album = album;
            limit = timeSpan.FromMinutes(conf.dureeMin);
        }

        public void check(TrackInfoItunes track)
        {
            if (track.Duree >= limit)
                list.Add(track);
        }

        public void build(Loader loader)
        {
            if (conf.enabled == sortMode.no)
                return;
            if (list.Count == 0)
                return;
            int indexLastRead = -1;
            int indexNextSelected = -1;
            DateTime lastPlayed = DateTime.MinValue;
            TrackInfoItunes next = null;

            for (int i = 0; i < list.Count; i++)
            {
                var track = list[i];
                if (track.Played) // && track.PlayedDate > lastPlayed)
                {
                    indexLastRead = i;
                    lastPlayed = track.PlayedDate;
                }

                if (track.Selected && track.Enabled)
                {
                    next = track;
                    indexNextSelected = i;
                    break;
                }
            }


            if (indexLastRead < 0)
                return;
            if (next == null)
                return;
            var intervalle = conf.getIntervalle(album.Rare);
            TrackInfoItunes lastRead = list[indexLastRead];
            lastReads.Add(lastRead.DbId);
            DateTime pub2 = lastRead.Pub2;
            if (pub2 == lastRead.Pub)
            {
                loader.reviveIfNecessary(lastRead);
                var comment = lastRead.Comment;
                if (comment.Contains(SEP))
                {
                    try
                    {
                        pub2 = Convert.ToDateTime(comment.Split(SEP)[0]);
                        lastRead.Pub2 = pub2;
                    }
                    catch
                    {
                    }
                }
            }

            var deltaLecture = (DateTime.Now - lastRead.PlayedDate).TotalDays;

            int nbRead = 0;
            int nbTotal = 0;
            double delta = conf.getIntervalle(album.Rare);
            var _histo = conf.getHisto(album.Rare);
            if (_histo > 0)
            {
                double histo = _histo;


                DateTime limit = next.Pub.AddDays(-histo);
                for (int i = indexNextSelected - 1; i >= 0; i--)
                {
                    var t = list[i];
                    var dt = t.Pub;
                    if (dt < limit)
                        break;

                    if (t.Played)
                        nbRead++;

                    if (t.Played || t.Enabled)
                        nbTotal++;

                }


                if (nbRead > 0)
                {
                    //  album.Rare ? conf.intervalleR : conf.intervalle;
                    var ecouteMax = conf.getEcouteMax(album.Rare); // album.Rare ? conf.ecouteMaxR : conf.ecouteMax;

                    delta = (intervalle * (double)nbTotal) / (ecouteMax * (double)nbRead);
                    if (delta > intervalle)
                        delta = intervalle;


                }

                //misc.log("{3} {4}/{5} [{0}] {1} {2} ", name, lastRead.Name, lastRead.Pub, delta.ToString("#.##"), nbRead, nbTotal, name);
                Program.log.log("{0} {1}/{2} [{3}] {4} {5} ({6}) lecture={7} ", delta.ToString("#.##"), nbRead, nbTotal, album.Album, lastRead.Name, lastRead.Pub, pub2, deltaLecture.ToString("#.##"));


            }



            if (conf.extPente > 0)
            {
                var d0 = (DateTime.Now - pub2).TotalDays;
                var dl = conf.extDelta;
                if (dl == 0)
                {
                    dl = d0;
                }

                delta = d0 / conf.extPente;
                //01/01/2014 ->01/01/2017
                //04/01/2017 -> 04/01/2014
                var dateLimitEcoule = DateTime.Now.AddDays(-dl);

                var deltaLimiteEcoule = (dateLimitEcoule - pub2).TotalDays;
                Program.log.log("{0} {1}", delta.ToString("0.##"), deltaLimiteEcoule.ToString("0.##"));

                if (deltaLimiteEcoule > delta)
                    delta = deltaLimiteEcoule;

                if (delta < 1)
                    delta = 1;

                if (delta > intervalle)
                    delta = intervalle;
            }

            DateTime limitFuture = pub2.AddDays(delta);

            DateTime nextDate = limitFuture;
            int nb = 0;
            int nblissage = 0;
            double deltaMinutes = 1;

            if (conf.noCollision)
                deltaMinutes = TimeSpan.FromDays(delta).TotalMinutes;

            if (conf.deltaConst)
            {

            }

            else
            {

                for (int i = indexLastRead + 1; i < list.Count; i++)
                {
                    var t = list[i];

                    if (!t.Selected)
                        continue;
                    if (!t.Enabled)
                        continue;

                    if (t.Pub >= limitFuture)
                    {
                        nextDate = t.Pub;
                        nblissage++;
                        if (nblissage > conf.lissage)
                            break;
                    }
                    nb++;
                }

                if (nextDate > limitFuture && nb > 0 && conf.noCollision)
                    deltaMinutes = (nextDate - limitFuture).TotalMinutes / (double)nb;
            }

            if (deltaMinutes < 1)
                deltaMinutes = 1;


            nb = 0;
            for (int i = indexLastRead + 1; i < list.Count; i++)
            {

                var t = list[i];

                if (!t.Selected)
                    continue;
                if (!t.Enabled)
                    continue;
                var dt = limitFuture.AddMinutes(deltaMinutes * nb);
                var _delta = (dt - lastRead.Pub2).TotalDays;
                if (t.Pub >= dt || conf.enabled == sortMode.reset || deltaLecture > _delta)
                    eraseSort(t);
                else
                {
                    writeComment(t, limitFuture, deltaMinutes * nb);
                    nb++;
                }


            }


        }

        private void writeComment(TrackInfoItunes track)
        {
            string comment = track.Pub.ToString("yyyy/MM/dd HH:mm");
            if (track.Pub2 > track.Pub)
                comment = string.Format("{0}|{1}", track.Pub2.ToString("yyyy/MM/dd HH:mm"), track.Pub.ToString("yyyy/MM/dd HH:mm"));

            if (comment != track.Comment)
                track.Comment = comment;
        }

        private void eraseSort(TrackInfoItunes track)
        {
            DateTime pub = track.Pub;
            if (pub < TrackInfoItunes.Date0)
            {
                Program.log.log("pub2 erase mais maintien Date0 {0} {1}", track.Name, TrackInfoItunes.Date0);
                nbrepeches++;
                track.Pub2 = TrackInfoItunes.Date0.AddSeconds(nbrepeches);
                
            }
            else
            {
                track.Pub2 = track.Pub;
            }

            writeComment(track);
        }

        private void writeComment(TrackInfoItunes track, DateTime limitFuture, double deltaMinutes)
        {

            var dt = limitFuture.AddMinutes(deltaMinutes);
            if (dt < TrackInfoItunes.Date0)
            {
                Program.log.log("pub2 set mais maintien Date0 {0} {1}", track.Name, TrackInfoItunes.Date0);
                nbrepeches++;
                track.Pub2 = TrackInfoItunes.Date0.AddSeconds(nbrepeches);
            }
            else
                track.Pub2 = dt;
            Program.log.log("\t{0} {1}/{2}\t{3}", track.Name, track.Pub, limitFuture, track.Pub2);
            writeComment(track); 

            

        }
    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Sort\Sorter.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using pdb.util;
using pdb.podcast.Tuning.Sort;

namespace pdb.podcast.Sort
{
    class Sorter
    {
        private List<TrackInfoItunes> tracks;
        private pdb.podcast.Tuning.Sort.Sort sort;
        private Dictionary<string, Album> dict = new Dictionary<string, Album>();
      

        public Sorter(pdb.podcast.Tuning.Sort.Sort sort, IEnumerable<TrackInfoItunes> _list)
        {
            this.sort = sort;
            tracks = new List<TrackInfoItunes>();
            //   timeSpan limit = timeSpan.FromMinutes(sort.dureeMin); 
            foreach (TrackInfoItunes t in _list)
            {
                // if (t.Duree >= limit)
                tracks.Add(t);
            }
            tracks.Sort(new PodCastComparer());
        }

        public void build(Loader loader)
        {
            Album.clearReads(); 
            foreach (TrackInfoItunes track in tracks)
            {
                var album = track.TrackAlbum;
                //  string _feed = track.Feed;

                string key = album.Album;
                //if (!string.IsNullOrEmpty(_feed))
                //    key = _feed;
                if (string.IsNullOrEmpty(key))
                {
                    misc.log("pas d'album pour " + track);
                    continue;
                }



                if (!dict.ContainsKey(key))
                {
                    SortItem item = sort;
                    var _surcharge = sort.getItem(key);
                    if (_surcharge != null)
                        item = _surcharge;
                    Album a = new Album(item, album);
                    dict.Add(key, a);
                }
                dict[key].check(track);
            }

            foreach (Album a in dict.Values)
            {
                a.build(loader);
            }
        }
    }
}
]]></content>
  </file>
  <file path="\pieceDb.iT\Conf.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using pdb.util;
using pdb.it.detect;

namespace pdb.it
{
    public class Conf
    {
        private bool deleteFile;
        public bool DeleteFile { get { return deleteFile; } }
        private bool scanListLimit;
        public bool ScanListLimit { get { return scanListLimit; } }

        private bool singleThread;
        public bool SingleThread { get { return singleThread; } }

        private int maxScan = 3;
        public int MaxScan { get { return maxScan; } }

        private int delay = 1000;
        public int Delay { get { return delay; } }

        private bool gcCollect;
        public bool GcCollect { get { return gcCollect; } }



        private TimeSpan refreshMax = TimeSpan.MaxValue;
        public TimeSpan RefreshMax { get { return refreshMax; } }



        private ConfDetect detect = new ConfDetect();
        internal ConfDetect Detect { get { return detect; } }

        private TimeSpan refresh = TimeSpan.FromSeconds(0);
        public TimeSpan Refresh { get { return refresh; } }

        public bool WaitForNextSong { get { return refresh.TotalSeconds < 0; } }

        private bool autoPlay;
        private int autoList;
        public bool AutoPlay { get { return autoPlay; } }
        public int AutoList { get { return autoList; } }
        private bool deleteCurrentAlbum = true;
        public bool DeleteCurrentAlbum { get { return deleteCurrentAlbum; } }
        private bool complexSearch;
        public bool ComplexSearch { get { return complexSearch; } }

        //private bool checkFileExist;
        //public bool CheckFileExist { get { return checkFileExist; } }

        private bool playListAddFile;
        public bool PlayListAddFile { get { return playListAddFile; } }

        private string dbTrack;
        public string DbTrack { get { return dbTrack; } }

        private string dbTrackList;
        public string DbTrackList { get { return dbTrackList; } }

        private bool proxyTrack;
        public bool ProxyTrack { get { return proxyTrack; } }

        private bool proxyTrackList;
        public bool ProxyTrackList { get { return proxyTrackList; } }

        private bool persistIt;
        public bool PersistIt { get { return persistIt; } }

        private int lockWarn;
        public int LockWarn { get { return lockWarn; } }

        private int lockAbort;
        public int LockAbort { get { return lockAbort; } }

        //private string dbTrackBib;
        //public string DbTrackBib { get { return dbTrackBib; } }

        private List<string> logicalLists = new List<string>();
        private List<string> includeLists = new List<string>();

        public List<string> LogicalLists { get { return logicalLists; } }
        public List<string> IncludeLists { get { return includeLists; } }

        private string defaultFolder; public string DefaultFolder { get { return defaultFolder; } }

        public bool slave; 


        public Conf()
        {
        }

        public Conf(XmlElement root)
        {
            XmlElement xit = XMLTool.NodeLookUp(root, "it");
            if (xit == null)
                return;
            XMLTool l_xmlConf = new XMLTool(xit);

            scanListLimit = l_xmlConf.getBoolValue("scanListLimit");
            singleThread = l_xmlConf.getBoolValue("singleThread");
            gcCollect = l_xmlConf.getBoolValue("gcCollect");
            proxyTrack = l_xmlConf.getBoolValue("proxyTrack");
            proxyTrackList = l_xmlConf.getBoolValue("proxyTrackList");
            persistIt = l_xmlConf.getBoolValue("persistIt", true);
            slave = l_xmlConf.getBoolValue("slave", true);


            string l_str = l_xmlConf.getNodeValue("maxScan");
            if (!string.IsNullOrEmpty(l_str))
            {
                maxScan = Convert.ToInt32(l_str);

            }

            l_str = l_xmlConf.getNodeValue("deleteFile");
            if (!string.IsNullOrEmpty(l_str))
                deleteFile = Convert.ToBoolean(l_str);

            l_str = l_xmlConf.getNodeValue("refreshMax");
            if (!string.IsNullOrEmpty(l_str))
                refreshMax = TimeSpan.FromSeconds(Convert.ToDouble(l_str));



            l_str = l_xmlConf.getNodeValue("delay");
            if (!string.IsNullOrEmpty(l_str))
                delay = Convert.ToInt32(l_str);

            l_str = l_xmlConf.getNodeValue("lockWarn");
            if (!string.IsNullOrEmpty(l_str))
                lockWarn = Convert.ToInt32(l_str);
            Locker.LockWarn = lockWarn;  

            l_str = l_xmlConf.getNodeValue("lockAbort");
            if (!string.IsNullOrEmpty(l_str))
                lockAbort = Convert.ToInt32(l_str);
            Locker.LockAbort = lockAbort;  

            l_str = l_xmlConf.getNodeValue("refresh");
            if (!string.IsNullOrEmpty(l_str))
                refresh = TimeSpan.FromSeconds(Convert.ToDouble(l_str));
            autoPlay = l_xmlConf.getBoolValue("autoPlay");
            deleteCurrentAlbum = l_xmlConf.getBoolValue("deleteCurrentAlbum");

            l_str = l_xmlConf.getNodeValue("autoList");
            if (!string.IsNullOrEmpty(l_str))
                autoList = Convert.ToInt32(l_str);

            // checkFileExist = l_xmlConf.getBoolValue("checkFileExist");
            playListAddFile = l_xmlConf.getBoolValue("playListAddFile");
            complexSearch = l_xmlConf.getBoolValue("complexSearch");
            dbTrack = l_xmlConf.getNodeValue("dbTrack");
            //   dbTrackBib = l_xmlConf.getNodeValue("dbTrackBib");
            dbTrackList = l_xmlConf.getNodeValue("dbTrackList");

            defaultFolder = l_xmlConf.getNodeValue("defaultFolder"); 

            buildList(logicalLists, l_xmlConf.getNode("logicalLists"));
            buildList(includeLists, l_xmlConf.getNode("includeLists"));

            detect = new ConfDetect(xit);
        }

        private void buildList(List<string> list, XMLTool xml)
        {
            if (xml == null)
                return;
            foreach (XMLTool sub in xml)
                list.Add(sub.InnerText);

        }

    }
}
]]></content>
  </file>
  <file path="\pieceDb.iT\Loader.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using System.Threading;
using System.Xml;
using iTunesLib;
using pdb.obj;
using pdb.util;
using System.Diagnostics;
using pdb.it.detect;
using System.Collections;
using pdb.it.auto;
using pdb.it.persistance;
using pdb.ordo;
using System.Threading.Tasks;

namespace pdb.it
{

    public class Loader : ILoader, ITrackBuilder, IAbortTask // : ILoader
    {
        private Action abortList;
        protected Logger log = Logger.getLogger("Loader");
        private iTunesApp app;
        private IITSource mainLibrairy;
        private IITPlaylistCollection mainPlayLists;
        //  private IITUserPlaylist BIB;
        private PlayList root = PlayList.create("root", null);
        private List<PlayList> logicals = new List<PlayList>();
        private bool listLoaded;
        //private CPlayList rootComposite = new PlayListComposite("root");
        private String m_defaultFolder = @"D:\zique\";
        private String _dBLegacyPath = "";
        private String _dBLegacyDir = "";
        private XmlElement contentXml;

        private ITrackBuilder trackBuilder;
        private List<ITrackInfoItunes> list;
        public ITrackBuilder TrackBuilder { set { trackBuilder = value; } }
        private IPlayListFilter filterPlaylist = new PlayListDefaultFilter();
        public IPlayListFilter PlayListFilter { set { filterPlaylist = value; } }
        public int VolumeMin = -125;

        public bool Slave { get { return conf.slave; } }


        private BgDict<int, TrackInfoItunes> m_htPieces = new BgDict<int, TrackInfoItunes>();
        private BgDictString<TrackInfoItunes> m_htLoc = new BgDictString<TrackInfoItunes>();
        private BgDict<int, IITFileOrCDTrack> m_htTracks = new BgDict<int, IITFileOrCDTrack>();

        public void getNatives(ArrayList list)
        {
            foreach (IITFileOrCDTrack t in m_htTracks.Values)
                list.Add(t);
        }

        // private Dictionary<string, IITFileOrCDTrack> m_htFileTracks = new Dictionary<string, IITFileOrCDTrack>();

        //   private Dictionary<int, TrackInList> m_htPiecesInAList = new Dictionary<int, TrackInList>();
        private BgDict<int, PlayListComposite> m_htPlayLists = new BgDict<int, PlayListComposite>();
        private PlayListRegister m_htLegacyPLayList; // Dictionary<int, IITUserPlaylist>();

        /// <summary>
        /// index des listes suivant persistantID (Xml) 
        /// </summary>
        private BgDictString<PlayList> persistentIDs = new BgDictString<PlayList>();

        #region parsing natif asynchrone
        //  private bool bParsingNativeAsync = true;
        //  private ThreadUtil loopbgLoadTracksNative;

        /// <summary>
        /// dictionnaire des Tracks musique par ID
        /// </summary>
        private BgDict<int, IITFileOrCDTrack> dictTracks = new BgDict<int, IITFileOrCDTrack>();

        private TracksDb persist;
        /// <summary>
        /// dictionnaire tracks par location
        /// </summary>
        //   private BgDictString<IITFileOrCDTrack> locationTrack = new BgDictString<IITFileOrCDTrack>();
        //  private TrackDb persistTracks; 
        //  private BgDictString<IITFileOrCDTrack> locationTrack = new BgDictString<IITFileOrCDTrack>();
        /// <summary>
        /// dictionnaires des tracks de playlist par ID (pas l'ID du track de liste mais l'ID du track de bib)
        /// </summary>
        private BgDict<int, IITFileOrCDTrack> dictTrackList = new BgDict<int, IITFileOrCDTrack>();

        /// <summary>
        /// Cumul des dictionnaires des tracks de playList par location
        /// </summary>
        // private BgDictString<IITFileOrCDTrack> memoTrackList = new BgDictString<IITFileOrCDTrack>();
        //  private TrackDb memoTrackList;

        private BgDictString<TrackInList> dictTrackInList = new BgDictString<TrackInList>();

        private BgDictString<TrackInList> logicalDictTrackInList = new BgDictString<TrackInList>();
        private BgDictString<TrackInList> logicalDictTrackInListDeleted = new BgDictString<TrackInList>();


        private static string getKey(string path, string location)
        {
            return String.Concat(path, ":", location).ToLower();
        }

        /// <summary>
        /// Récupération d'un track base ou liste pour ajout de trackListe
        /// </summary>
        /// <param name="location"></param>
        /// <returns></returns>
        public TrackId getAnyTrackByLocation(string location)
        {
            if (string.IsNullOrEmpty(location))
                return null;
            var t = persist.getTrack(location);
            if (t == null)
            {
                if (FileRegister.Exist(location)) //  File.Exists(location))
                    loadScan("recherche location" + location);
            }
            return t;
        }



        public TrackInList getTrackInList(string path, string location)
        {
            if (string.IsNullOrEmpty(location))
                return null;
            return dictTrackInList[getKey(path, location)];
        }

        public void recordTrackList(string pl, IITFileOrCDTrack track, int trackDataBaseID, string location, bool memo)
        {
            if (track == null)
                return;
            if (string.IsNullOrEmpty(location))
            {
                StackTrace st = new StackTrace();
                log.log("Loader::recordTrackList location nulle " + st.ToString());
                return;
            }
            //if (!dictTrackList.ContainsKey(trackDataBaseID))
            dictTrackList[trackDataBaseID] = track;
            var key = getKey(pl, location);
            persist.recordTrackList(key, location, track);
            //if (!locationTrack.ContainsKey(location))
            //    locationTrack.record(location, track);

            //if (memo && !memoTrackList.ContainsKey(key))
            //    memoTrackList.record(key, track);

            //  return id;

        }

        public void invalidationTrack(TrackInfoItunes info)
        {
            log.log("invalidation track lors de modification " + info);

            dictTracks.Remove(info.ID);
            dictTrackList.Remove(info.ID);
            persist.invalidation(info.Location);
        }

        public void invalidationTrackInList(string pl, TrackInList tl, IITUserPlaylist _pl)
        {
            log.log("invalidation trackinList " + tl);
            removeTrackInList(pl, tl, _pl);
        }

        /// <summary>
        /// Appelé en cas d'erreur ajout trackList
        /// </summary>
        /// <param name="location"></param>
        /// <param name="id"></param>
        public void invalidationLocation(string location)
        {
            log.log("invalidation track (AddTrack)" + location);
            persist.invalidation(location);
        }


        //public void recordTrackList(PlayList pl, IITFileOrCDTrack track, string location)
        //{

        //    if (!locationTrack.ContainsKey(location))
        //        locationTrack[location] = track;
        //    var key = getKey(pl, location);
        //    memoTrackList[key] = track;
        //}

        public TrackId getMemoTrackList(string path, IITUserPlaylist pl, string location)
        {
            var key = getKey(path, location);
            return persist.getTrackList(key, path, pl);
            // return memoTrackList.getTrackList(key, pl); //  [key];
        }



        private static bool erreurTrackList;
        public static bool ErreurTrackKist { get { return erreurTrackList; } set { erreurTrackList = value; } }



        public void recordTrackInList(string pl, TrackInList track, bool verifDoublon)
        {
            if (track == null)
                return;
            string key = getKey(pl, track.Location);
            //if (dictTrackInList.ContainsKey(key))
            //{
            //    if (verifDoublon)
            //    {
            //        string txt = "pas deux fois le même élément de liste \r\n" + track + "\r\n" + track.Location;
            //        log.log(txt);

            //        throw new ApplicationException(txt);
            //    }
            //}
            //else
            if (!dictTrackInList.ContainsKey(key))
                dictTrackInList[key] = track;
            // dictTrackInList[getKey(pl, track.Location)] = track;
        }

        public void removeTrackInList(string pl, TrackInList track, IITUserPlaylist plt)
        {
            if (track == null)
                return;
            string key = getKey(pl, track.Location);
            if (dictTrackInList.ContainsKey(key))
                dictTrackInList.Remove(key);


            persist.removeTrackList(key, track.Location, plt);

            dictTrackList.Remove(track.TrackDataBaseId);
            //  locationTrack.remove(track.Location);

        }

        public void removeTrackInList(string pl, string location, int TrackDataBaseId, IITUserPlaylist plt)
        {

            string key = getKey(pl, location);
            if (dictTrackInList.ContainsKey(key))
                dictTrackInList.Remove(key);


            persist.removeTrackList(key, location, plt);

            dictTrackList.Remove(TrackDataBaseId);
            //  locationTrack.remove(track.Location);
        }

        public void removeTrack(TrackInfoItunes track)
        {
            persist.removeTrack(track.Location);
        }
        /// <summary>
        /// Utilisé pour vérifier avant l'ajout que le track existe
        /// </summary>
        /// <param name="pl"></param>
        /// <param name="track"></param>
        /// <returns></returns>
        public bool LogicalContainsTrackInList(string pl, string location)
        {
            if (string.IsNullOrEmpty(location))
                return false;
            string key = getKey(pl, location);
            return logicalDictTrackInList.ContainsKey(key);
        }

        public bool LogicalTrackInListDeleted(string pl, string location)
        {
            if (string.IsNullOrEmpty(location))
                return false;
            string key = getKey(pl, location);
            return logicalDictTrackInListDeleted.ContainsKey(key);
        }


        public void LogicalRecordTrackInList(string pl, TrackInList track)
        {
            string location = track.Location;
            if (string.IsNullOrEmpty(location))
                return;
            string key = getKey(pl, location);
            logicalDictTrackInListDeleted.Remove(key);
            logicalDictTrackInList.Add(key, track);
        }

        public void LogicalRemoveTrackInList(string pl, TrackInList track)
        {
            string location = track.Location;
            if (string.IsNullOrEmpty(location))
                return;
            string key = getKey(pl, location);
            logicalDictTrackInList.Remove(key);
            logicalDictTrackInListDeleted.Add(key, track);
        }



        #endregion






        private bool modeXml = true;
        private bool deleteFile;
        private bool errorAccess;
        private bool singleThread;

        //public static Loader Instance
        //{
        //    get
        //    {
        //        if (_instance == null)
        //            _instance = new Loader();
        //        return _instance;
        //    }
        //}


        private Conf conf = new Conf();

        public Conf Conf
        {
            set
            {
                conf = value;
                if (detector != null)
                    detector.Conf = value.Detect;

                PlayList.Conf = conf;
                if (player != null)
                    player.Conf = value;
                TrackWrapper.SingleThread = conf.SingleThread;
                ItUtil.SingleThread = conf.SingleThread;
                singleThread = conf.SingleThread;

            }
        }
        public bool ModeXml { set { modeXml = value; } }
        private Loader(bool deleteFile)
        {
            this.deleteFile = deleteFile;

        }



        #region events
        private string currentReading = "";
        void app_OnPlayerPlayingTrackChangedEvent(object iTrack)
        {

            log.log("app_OnPlayerPlayingTrackChangedEvent:" + iTrack);
            checkChangeSong();
        }

        void app_OnPlayerPlayEvent(object iTrack)
        {
            try
            {
                log.log("app_OnPlayerPlayEvent:" + iTrack);
                checkChangeSong();

            }
            catch (Exception ex)
            {
                log.log(ex.ToString());
            }

        }

        private string currentSong;
        private DateTime currentSongDt;
        private void getCurrentSong()
        {
            getCurrentTrack();
            getCurrentPlayList();
            currentSongDt = DateTime.Now;


            try
            {

                if (_currentTrack != null)
                {
                    getPlayerState();

                    BackGroundTaskMgr.Playing = _playerState != ITPlayerState.ITPlayerStateStopped;
                    currentSong = _currentTrack.Location + " " + _playerState.ToString();
                }
            }
            catch { }
            getCurrentPlayList();
        }
        private string CurrentSong
        {
            get
            {
                if ((DateTime.Now - currentSongDt).TotalMinutes > 1)
                {
                    getCurrentSong();
                }

                return currentSong;
            }
        }

        private PlayListComposite _currentPlayList;
        private DateTime _currentPlayListTempo;
        private void getCurrentPlayList()
        {
            _currentPlayListTempo = DateTime.Now;
            try
            {
                enter();
                var _cur = app.CurrentPlaylist;
                if (_cur == null)
                    _currentPlayList = null;
                else
                    _currentPlayList = m_htPlayLists[_cur.playlistID];
            }
            finally
            {
                release();
            }
        }
        private IITFileOrCDTrack _currentTrack;
        private void getCurrentTrack()
        {
            currentTrackTempo = DateTime.Now;
            try
            {
                enter();
                _currentTrack = TrackWrapper.create(app.CurrentTrack);
                _currentTrackLocation = "";
                if (_currentTrack != null)
                    _currentTrackLocation = _currentTrack.Location;
            }
            finally
            {
                release();
            }
        }
        public PlayListComposite CurrentPlaylist
        {
            get
            {
                if ((DateTime.Now - _currentPlayListTempo).TotalMinutes > 1)
                {
                    getCurrentPlayList();
                }
                return _currentPlayList;
            }
        }
        private DateTime currentTrackTempo;
        public IITFileOrCDTrack CurrentTrack
        {
            get
            {
                if ((DateTime.Now - currentTrackTempo).TotalMinutes > 1)
                {
                    getCurrentTrack();
                }
                return _currentTrack;
            }

        }
        private string _currentTrackLocation;
        public string CurrentTrackLocation
        {
            get
            {
                if ((DateTime.Now - currentTrackTempo).TotalMinutes > 1)
                {
                    getCurrentTrack();
                }
                return _currentTrackLocation;

            }
        }

        private ITPlayerState _playerState;
        private void getPlayerState()
        {
            currentStateTempo = DateTime.Now;
            try
            {
                enter();
                _playerState = app.PlayerState;
            }
            finally
            {
                release();
            }
        }
        private DateTime currentStateTempo;
        public ITPlayerState PlayerState
        {
            get
            {
                if ((DateTime.Now - currentStateTempo).TotalMinutes > 1)
                    getPlayerState();
                return _playerState;
            }
        }


        private void checkChangeSong()
        {
            getCurrentSong();

            var track = CurrentTrackLocation;
            if (!track.Equals(currentReading))
            {
                currentReading = track;
                PlayComputedTrack();
            }

        }
        #endregion



        private bool useDetect;
        public Loader(Conf conf, bool useDetect)
            : this(conf.DeleteFile)
        {
            this.Conf = conf;
            this.m_defaultFolder = conf.DefaultFolder;
            if (!m_defaultFolder.EndsWith(@"\"))
                m_defaultFolder += @"\";
            this.useDetect = useDetect;

            this.player = new AutoPlayer(this, conf);

        }

        public Loader(Conf conf, Action abortList)
            : this(conf, true)
        {
            this.abortList = abortList;
        }

        public void saveIds()
        {
            if (persist != null)
                persist.record();
        }

        private bool initialized;

        public void init()
        {
            if (initialized)
                return;
            initialized = true;
            app = new iTunesApp();

            mainLibrairy = app.LibrarySource;
            mainPlayLists = mainLibrairy.Playlists;

            TrackInfoItunes.Loader = this;
            PlayList.Loader = this;
            //BackGroundTaskMgr.Async = true;
            //BackGroundTaskMgr.start(); 
            trackBuilder = this;
            m_htLegacyPLayList = new PlayListRegister(this.app);
            m_htLegacyPLayList.load("init");

            app.OnPlayerPlayEvent += new _IiTunesEvents_OnPlayerPlayEventEventHandler(app_OnPlayerPlayEvent);
            app.OnPlayerPlayingTrackChangedEvent += new _IiTunesEvents_OnPlayerPlayingTrackChangedEventEventHandler(app_OnPlayerPlayingTrackChangedEvent);


            detector = new Detector(app.LibraryXMLPath, logDetect, conf.Detect);
            if (useDetect)
                detector.start();


            string file = app.LibraryXMLPath;
            // bool exists = File.Exists(file);
            //while (!File.Exists(file))
            //    Thread.Sleep(30);
            m_defaultFolder = getDefaultFolder();
            log.log(m_defaultFolder);

            log.log("suppression:{0} erreur accès:{1}", deleteFile, errorAccess);

            FileInfo fTrack = new FileInfo(_dBLegacyDir + conf.DbTrack);
            DirectoryInfo dir = fTrack.Directory;
            if (!dir.Exists) dir.Create();
            // persistTracks = new TrackDb(app, f.FullName);

            var fTrackList = new FileInfo(_dBLegacyDir + conf.DbTrackList);
            dir = fTrackList.Directory;
            if (!dir.Exists) dir.Create();
            //memoTrackList = new TrackDb(app, f.FullName);

            persist = new TracksDb(app, fTrack.FullName, fTrackList.FullName, conf.ProxyTrack, conf.ProxyTrackList, conf.PersistIt, conf.SingleThread);








            //if (deleteFile)
            //{

            //    //  log.log("suppression de " + file);
            //    while (true)
            //    {
            //        try
            //        {
            //            //if (!errorAccess)
            //            log.log("suppression de " + file);
            //            File.Delete(app.LibraryXMLPath);
            //            break;
            //        }
            //        catch (Exception e)
            //        {
            //            // log.log("error acces " + file);
            //            errorAccess = true;
            //            Thread.Sleep(1000);
            //        }
            //    }
            //}



            //if (deleteFile && errorAccess)
            //    log.log("finalement pas suppression de " + file + " car erreur accès");


        }

        private void enter()
        {
            if (singleThread)
            {
                BgTask.chrono.bip("l:ent0");
                Locker.Enter();
                BgTask.chrono.bip("l:ent1");
            }
        }
        private void release()
        {
            if (singleThread)
                Locker.Release();
        }

        # region detect
        //  private bool waitForNextSong;


        // public bool WaitForNextSong { get { return waitForNextSong; } set { waitForNextSong = value; } }



        private DateTime lastLoad;
        //private DateTime confirmLoad = DateTime.MaxValue;
        private string currentSongWhenLoaded = "";
        private Detector detector;

        public void logDetect(string info)
        {
            log.logNoDate("------------------------------------------------------------------------------------");
            log.log(info);
            log.logNoDate("------------------------------------------------------------------------------------");
        }

        public bool detectModif() { return !detector.canLoad(); }

        public void checkDetect(DateTime ini)
        {
            detector.check(ini);
        }

        public void exception()
        {
            currentSongWhenLoaded = "-";
        }
        public void reset(bool firstStep, bool forceLoad)
        {
            string _current = CurrentSong;
            log.log("reset ::firstStep {0} forceLoad {1} currentSongWhenLoaded :{2} currentSong:{3}", firstStep, forceLoad, currentSongWhenLoaded, _current);

            if (!forceLoad)
                detector.reset();
            //  DateTime lastLoad = DateTime.Now;
            // string currentSongWhenLoaded = "";

            //if (waitForNextSong)
            //    currentSongWhenLoaded = CurrentSong;


            //if (!deleteFile && firstStep)
            //    lastLoad = DateTime.MinValue;
            bool canread = false;

            FileInfo fLibrary = new FileInfo(app.LibraryXMLPath);
            bool condition = false;

            while (!canread)
            {

                try
                {
                    Thread.Sleep(1000);
                    _current = CurrentSong;
                    fLibrary.Refresh();
                    if (fLibrary.Exists)
                    {
                        //DateTime dt = fLibrary.LastWriteTime;
                        ////if (lastLoad == DateTime.MinValue)
                        ////{
                        ////    lastLoad = dt;
                        ////    confirmLoad = dt.AddSeconds(conf.Confirm);
                        ////    condition = true;
                        ////    log.logNoDate("------------------------------------------------------------------------------------");
                        ////    log.log("temps chargement:{0} confirm :{1}", lastLoad, confirmLoad);
                        ////    log.logNoDate("------------------------------------------------------------------------------------");
                        ////}
                        DateTime now = DateTime.Now;
                        TimeSpan _delta = now - lastLoad;


                        if (condition)
                        {
                            bool load = true;
                            if (!forceLoad)
                                load = detector.canLoad();
                            //if (now > confirmLoad)
                            //{
                            //    log.logNoDate("------------------------------------------------------------------------------------");
                            //    log.log("temps de confirmation dépassé {0}", confirmLoad);
                            //    log.logNoDate("------------------------------------------------------------------------------------");
                            //    load = true;
                            //}
                            //else if (dt > lastLoad)
                            //{
                            //    nbTick++;
                            //    log.logNoDate("------------------------------------------------------------------------------------");
                            //    log.log("library modifiée {0} {1}", dt, nbTick);
                            //    log.logNoDate("------------------------------------------------------------------------------------");
                            //    lastLoad = dt;

                            //    if (nbTick <= conf.TickRefresh)
                            //    {
                            //        int delta = conf.ConfirmTick; // (nbTick <= 1) ? conf.Confirm : conf.ConfirmTick;
                            //        DateTime dt0 = dt; // (nbTick <= 1) ? DateTime.Now : dt;
                            //        var _confirmLoad = dt0.AddSeconds(delta);
                            //        var _confirmLoad2 = lastLoad.AddSeconds(conf.Confirm);
                            //        if (_confirmLoad2 > _confirmLoad)
                            //            _confirmLoad = _confirmLoad2; 
                            //        if (_confirmLoad > confirmLoad)
                            //            confirmLoad = _confirmLoad;
                            //        log.log("confirm {0}", confirmLoad);
                            //    }

                            //}

                            if (load)
                            {
                                DateTime ini = DateTime.Now;
                                try
                                {

                                    log.logNoDate("***********************************************************************");
                                    log.log("chargement library {0} {1}", _current, _delta);
                                    log.logNoDate("***********************************************************************");
                                    DateTime __tick = DateTime.Now;
                                    XmlDocument doc = new XmlDocument();
                                    doc.XmlResolver = null;
                                    contentXml = null;

                                    gcCollect();
                                    string itXml = app.LibraryXMLPath;
                                    doc.Load(itXml);



                                    var root = doc.DocumentElement;
                                    contentXml = root.ChildNodes[0] as XmlElement;

                                    doc = null;
                                    root = null;
                                    gcCollect();
                                    if (!forceLoad)
                                    {

                                        if (conf.Detect.CancelLoad && !detector.canLoad())
                                        {
                                            log.log("Abort car modif fichiers");
                                            continue;
                                        }
                                        checkDetect(ini);
                                        detector.signalLoad();
                                        canread = true;
                                        lastLoad = DateTime.Now;
                                        condition = false;
                                    }

                                    //   confirmLoad = DateTime.MaxValue;
                                    currentSongWhenLoaded = _current;
                                    log.logNoDate("***********************************************************************");
                                    log.log("fin chargement library {0} ", (DateTime.Now - __tick));
                                    log.logNoDate("***********************************************************************");


                                    return;
                                }
                                catch (Exception ex)
                                {

                                    log.log(ex.ToString());
                                    Thread.Sleep(1000);
                                    //nbTick++;
                                    //dt = fLibrary.LastWriteTime;

                                    //int delta = (nbTick <= 1) ? conf.Confirm : conf.ConfirmTick;
                                    //DateTime dt0 = dt; // (nbTick <= 1) ? DateTime.Now : dt;

                                    //var _confirmLoad = dt0.AddSeconds(delta);
                                    //if (_confirmLoad > confirmLoad)
                                    //    confirmLoad = _confirmLoad;
                                    //var _confirmLoad2 = lastLoad.AddSeconds(conf.Confirm);
                                    //if (_confirmLoad2 > _confirmLoad)
                                    //    _confirmLoad = _confirmLoad2; 
                                    //log.log("confirm {0}", confirmLoad);
                                }
                            }
                            else
                            {
                                misc.Pre = "[Load " + detector.Limit.ToLongTimeString() + "] ";
                                continue;
                            }
                        }



                        //  log.log("library modifiée {0}", dt);

                        bool conditionWait = false;
                        bool conditionNoWait = false;


                        if (conf.WaitForNextSong)
                        {
                            conditionWait = _current != currentSongWhenLoaded;
                        }
                        else
                        {
                            conditionNoWait = _delta > conf.Refresh;
                        }




                        if (firstStep || forceLoad || conditionWait || conditionNoWait || _delta > conf.RefreshMax)
                        {

                            condition = true;
                            if (!forceLoad)
                                detector.reset();
                            checkChangeSong();
                            if (abortList != null)
                                abortList();
                            // lastLoad = dt;

                            //if (firstStep)
                            //    confirmLoad = dt.AddSeconds(conf.Confirm);
                            //else
                            //{
                            //    log.log("library modifiée {0} attente modif {1}", dt, (nbTick + 1));
                            //    // if (nbTick <= 1)
                            //    confirmLoad = now.AddSeconds(conf.Confirm);
                            //    log.log("confirm {0}", confirmLoad);


                            //}

                        }
                        //}
                    }


                }
                catch (Exception ex)
                {
                    log.log(ex.ToString());
                }

                if (!canread)
                {
                    Thread.Sleep(100);
                    if (!condition)
                    {
                        if (conf.WaitForNextSong)
                            Thread.Sleep(conf.Delay);
                    }
                }

            }


        }

        #endregion

        #region Infos

        //public CPiece getPiece(IITTrack track)
        //{
        //    return m_htPieces[track.TrackDatabaseID];
        //}


        //public IITFileOrCDTrack getPieceInList(PieceInAList trackList)
        //{
        //    return m_htPiecesInAList[trackList.ID];
        //}

        //public void deleteTrackInList(PieceInAList trackList)
        //{
        //    TrackInList track = m_htPiecesInAList[trackList.ID];
        //    track.Delete();
        //    //   track.Track.Delete();
        //    m_htPiecesInAList.Remove(trackList.ID);
        //}

        private String getDefaultFolder()
        {
            string path = app.LibraryXMLPath;

            _dBLegacyDir = Path.GetDirectoryName(path) + Path.DirectorySeparatorChar;
            _dBLegacyPath = _dBLegacyDir + "iTunes Library.itl";

            String uri = "";

            String token = "<key>Music Folder</key><string>";
            //<key>Music Folder</key><string>file://localhost/F:/bernard/zique/</string>
            log.log("load {0}", path);

            while (true)
            {
                try
                {
                    foreach (String line in File.ReadAllLines(path))
                    {
                        if (line.Contains(token))
                        {
                            Regex regex = new Regex("<string>(.+)</string>");
                            Match m = regex.Match(line);
                            if (!m.Success) return "";
                            uri = m.Groups[1].Value;
                            return new Uri(uri).LocalPath.Replace("\\\\localhost\\", "");
                        }
                    }
                }
                catch
                {
                    errorAccess = true;
                    Thread.Sleep(30);
                }
            }
        }
        public String DefaultFolder
        {
            get
            {
                return m_defaultFolder;
            }
        }
        #endregion

       

        //public void replace(TrackInfoItunes native, TrackInfoItunes local)
        //{
        //    local.ID = native.ID;
        //    if (m_htPieces.ContainsKey(native.ID))
        //    {
        //        m_htPieces.Remove(native.ID);
        //    }
        //    native.synchroLegacy(local);
        //    m_htPieces[native.ID] = local;
        //}

        #region chargement

        

        public TrackInfoItunes getInfo(int trackDataBaseId)
        {
            return m_htPieces[trackDataBaseId];
        }

        public void loadTracks(List<ITrackInfoItunes> list)
        {
            lock (this)
            {
                erreurTrackList = false;
                this.list = list;

                //   m_htPieces = new Dictionary<int, TrackInfoItunes>();
                m_htTracks = new BgDict<int, IITFileOrCDTrack>();
                // private Dictionary<string, IITFileOrCDTrack> m_htFileTracks = new Dictionary<string, IITFileOrCDTrack>();
                // m_htPiecesInAList = new Dictionary<int, TrackInList>();
                m_htPlayLists = new BgDict<int, PlayListComposite>();
                persistentIDs = new BgDictString<PlayList>();
                // m_htLegacyPLayList.load("loadTracks"); //  = new Dictionary<int, IITUserPlaylist>();


                /// <summary>
                /// dictionnaire asynchrone
                /// </summary>
                //dictTracks = new BgDict<int, IITFileOrCDTrack>();
                //locationTrack = new BgDict<string, IITFileOrCDTrack>();
                //dictTrackList = new BgDict<int, IITFileOrCDTrack>();
                dictTrackInList = new BgDictString<TrackInList>();

                log.log("DEBUT loadTracks");
                if (!modeXml)
                {
                    loadTracksNative();
                    return;
                }


                //XmlDocument test = new XmlDocument();
                //test.Load(@"C:\Users\bd\Music\iTunes\test.xml");
                //var trackTest = new TrackInfoItunes(test.DocumentElement); 
                //  list = new List<TrackInfoItunes>();

                //recherche du noeud contenant les données Track
                XmlNode xtracks = null;
                for (int i = 0; i < contentXml.ChildNodes.Count; i += 2)
                {
                    XmlNode aux = contentXml.ChildNodes[i];
                    if (aux.InnerText == "Tracks")
                    {
                        xtracks = contentXml.ChildNodes[i + 1];
                        break;
                    }
                }

                //   int nb = 0;
                int count = xtracks.ChildNodes.Count;
                bool impair = false;
                foreach (XmlNode xTrack in xtracks.ChildNodes)

                // for (int i = 0; i < count; i += 2)
                {
                    impair = !impair;
                    if (impair)
                        continue;

                    //  var xTrack = xtracks.ChildNodes[i + 1];
                    //int ID = TrackInfoItunes.getID(xTrack);
                    string loc = TrackInfoItunes.getLocation(xTrack);
                    //TrackInfoItunes track = trackBuilder.create(xTrack);


                    TrackInfoItunes track = null;
                    if (m_htLoc.ContainsKey(loc))
                    {
                        track = m_htLoc[loc];
                        track.build(xTrack);

                    }
                    //  log.log("add track {0}", track);

                    else
                    {
                        track = create(loc);
                        track.build(xTrack);
                        if (track.Strange)
                            continue;



                        m_htPieces.Add(track.ID, track);
                        m_htLoc.Add(loc, track);
                    }

                    string location = track.Location;
                    if (string.IsNullOrEmpty(location))
                    {
                        log.log("phase load :: suppression du track sans localisation " + track.Album + "/" + track.Name);
                        track.Delete();
                        continue;
                    }
                    else if (!FileRegister.Exist(location)) // conf.CheckFileExist && !File.Exists(location))
                    {
                        log.log("phase load :: suppression du track absent " + track.Album + "/" + track.Name + " " + location);
                        track.Delete();
                        continue;
                    }




                    list.Add(track);
                    //  track.Index = nb;
                    //   nb++;

#if VERIF
                track.verif();
#endif
                }
                log.log("FIN loadTracks");
            }

        }

        //private void buildIndexesTracks()
        //{
        //    int count = list.Count;
        //    for (int i = 0; i < count; i++)
        //    {
        //        list[i].Index = i;
        //    }
        //}

        private void bgLoadTracksNative()
        {

            try
            {



                IITTrackCollection tracks = null;
                int count = 0;
                IEnumerator enumerator = null;
                try
                {
                    enter(); tracks = app.LibraryPlaylist.Tracks;
                    count = tracks.Count;
                    enumerator = tracks.GetEnumerator();
                }
                finally { release(); }

                int i = 0;
                while (true)
                //int count  = tracks.Count; 
                //for (int i= 1; i<=count; i++)
                {
                    while (BackGroundTaskMgr.PauseKeyBoard)
                        Thread.Sleep(100);
                    bool _cont = false;

                    try
                    { enter(); _cont = enumerator.MoveNext(); }
                    finally { release(); }
                    if (!_cont)
                        break;
                    i++;

                    try
                    {
                        IITFileOrCDTrack track = null;
                        try
                        {
                            enter();
                            //   var t = tracks[i];
                            track = TrackWrapper.create(enumerator.Current as IITFileOrCDTrack);
                        }
                        finally
                        {
                            release();
                        }
                        if (track == null)
                            continue;

                        //if (t.Kind == ITTrackKind.ITTrackKindFile)
                        //{
                        //lock (this)
                        //{
                        // IITFileOrCDTrack track = t as IITFileOrCDTrack;
                        int l_id = 0;
                        string location = "";
                        try
                        {
                            enter();
                            l_id = track.TrackDatabaseID;
                        }
                        finally
                        {
                            release();
                        }
                        try
                        {
                            enter();
                            location = track.Location;
                        }
                        finally
                        {
                            release();
                        }
                        if (i % 1000 == 0)
                            log.log("scan {0}/{1} id:{2} {3}", i, count, l_id, location);


                        if (location == null)
                        {
                            log.log("suppression du track sans localisation " + track.Album + "/" + track.Name);
                            try
                            {
                                enter(); track.Delete();
                            }
                            finally
                            {
                                release();
                            }
                            continue;
                        }
                        else
                        {

                            //  log.log("bg Add track " + location);
                            dictTracks[l_id] = track;
                            dictTrackList[l_id] = track;
                            this.persist.recordTrack(location, track);


                        }

                    }
                    catch (Exception e)
                    {
                        log.log(e.ToString());
                    }
                }
                log.logNoDate("***************************************************************************************************");
                log.logNoDate("***************************************************************************************************");
                log.log("!!!!!!!!!!!!!!!!!!!>>>!!!!!!!!!!!!!!!!!>>>>>>!!!!!!!!!!!!!!!!!!>>>>FIN bgLoadTracksNative ");
                log.logNoDate("***************************************************************************************************");
                log.logNoDate("***************************************************************************************************");
            }
            finally
            {
                lock (this)
                    scanLoaded = false;

                //list = new CListPieceWithoutPodcast(m_htPieces.Values);
            }
        }

        public void loadTracksNative()
        {

            IITTrackCollection tracks = app.LibraryPlaylist.Tracks;

            foreach (IITTrack t in tracks)
            {
                if (t.Kind == ITTrackKind.ITTrackKindFile)
                {
                    IITFileOrCDTrack track = TrackWrapper.create(t);
                    string location = "";
                    try
                    {
                        location = track.Location;
                    }
                    catch
                    {
                    }
                    log.log("add track " + location);

                    if (location.isNullorEmpty())
                    {
                        log.log("suppression du track sans localisation " + track.Album + "/" + track.Name);
                        track.Delete();
                        continue;
                    }
                    if (!FileRegister.Exist(location)) //  File.Exists(location))
                    {
                        log.log("Suppression du track absent " + track.Album + "/" + track.Name);
                        track.Delete();
                        continue;
                    }



                    //if (persist.containsTrack(location))
                    //{
                    //    log.log("suppression du track doublon " + track.Album + "/" + track.Name + " " + track.Location);
                    ////    track.Delete();
                    //    continue;
                    //}

                    persist.recordTrack(location, track);
                    //              String l_strFile = track.Location.Replace(m_defaultFolder, "");
                    int l_id = track.TrackDatabaseID;

                    //string l_Artist = track.Artist.TrimSafe();
                    //string l_Album = track.Album.TrimSafe();
                    //string l_Name = track.Name.TrimSafe();
                    //int l_trackNumber = -1;
                    //if (track.TrackNumber > 100) track.TrackNumber = 0;
                    //if (track.TrackNumber > 0)
                    //{
                    //    l_trackNumber = track.TrackNumber;
                    //}

                    //CPieceReference l_details = new CPieceReference(l_Artist, l_Album, l_Name, l_trackNumber);

                    //int l_year = -1; if (track.Year > 0) l_year = track.Year;
                    //CPieceInfo l_infos = new CPieceInfo(l_year);

                    //int l_rating = 0; if (track.Rating > 0) l_rating = track.Rating;


                    //DateTime l_date = DateTime.MinValue; if (track.PlayedDate > DateTime.MinValue) l_date = track.PlayedDate;

                    //int l_duration = track.Duration;
                    //bool l_enabled = track.Enabled;


                    //CPiece l_piece = new CPiece(l_details, l_strFile, l_infos, l_rating, l_date, l_duration, l_enabled);
                    TrackInfoItunes l_piece = create(location);
                    l_piece.build(track);
                    //new TrackInfoItunes(track);
                    l_piece.classNameChanged += new EventHandler<TrackInfoItunes.TrackClassNameEventArgs>(Track_classNameChanged);

                    m_htTracks[l_id] = track;
                    m_htPieces[l_id] = l_piece;
                    //l_piece.ID = l_id;
                    //   buildArt(track); 
                    list.Add(l_piece);
                    //  log.log("add track {0}", l_piece);

                }
            }

            log.log("FIN LoadTracksNative ");
            //list = new CListPieceWithoutPodcast(m_htPieces.Values);
        }

        ///// <summary>
        ///// Récupération d'un track  Itunes en fonction de son index
        ///// </summary>
        ///// <param name="id"></param>
        ///// <returns></returns>
        //public IITFileOrCDTrack getTrack(string location)
        //{
        //    if (m_htFileTracks.ContainsKey(location))
        //        return m_htFileTracks[location];

        //    foreach (IITTrack t in app.LibraryPlaylist.Tracks)
        //    {
        //        if (t.Kind == ITTrackKind.ITTrackKindFile)
        //        {
        //            IITFileOrCDTrack track = t as IITFileOrCDTrack;
        //            string _loc = track.Location;
        //            if (!m_htFileTracks.ContainsKey(_loc))
        //            {
        //                m_htFileTracks.Add(_loc, track);
        //                if (location.Equals(_loc))
        //                    return track;
        //            }
        //        }
        //    }

        //    return null;



        //}
        /// <summary>
        /// Récupération d'un track en vue de le supprimmer
        /// </summary>
        /// <param name="trackInfoItunes"></param>
        /// <returns></returns>
        public TrackId getTrackTrack(TrackInfoItunes trackInfoItunes)
        {
            IITFileOrCDTrack _track = null;
            int ID = trackInfoItunes.ID;

            _track = dictTracks[ID].check(trackInfoItunes.Location);
            TrackPersistantId _id = null;
            TrackId trackId = persist.getTrackTrack(trackInfoItunes.Location);

            if (trackId != null)
            {
                _id = trackId.Id;
                _track = trackId.Track.check(trackInfoItunes.Location);
            }
            #region complique
            if (conf.ComplexSearch)
            {
                if (_track == null)
                {
                    try
                    {
                        enter();
                        int index = list.IndexOf(trackInfoItunes);
                        if (index >= 0)
                            _track = TrackWrapper.create(app.LibraryPlaylist.Tracks[index + 1]).check(trackInfoItunes.Location);


                        if (_track == null)
                        {
                            loadScan("recherche TrackTrack " + trackInfoItunes.Location);
                            return null;
                        }

                        string attendu = trackInfoItunes.Location;
                        string mesure = _track.Location;
                        persist.recordTrack(mesure, _track); // [mesure] = _track;
                        dictTracks[_track.TrackDatabaseID] = _track;

                        if (attendu.Equals(mesure))
                        {
                            //    log.log("-->bg Add track via getTrack: " + _track.Location);
                            // dictTracks[ID] = _track;
                        }
                        else
                        {

                            //   log.log("-->bg Add BAD track via getTrack attendu :{0}, mesuré {1}", attendu, mesure);
                            loadScan("TrackTrack attendu " + attendu + " <> mesuré " + mesure);
                            return null;
                        }
                    }
                    finally { release(); }
                }
            }
            #endregion
            if (_track == null)
                loadScan("?");

            return new TrackId(_id, _track);
        }



        /// <summary>
        /// Récupération d'un track en vue de le modifier
        /// </summary>
        /// <param name="trackInfoItunes"></param>
        /// <returns></returns>
        public IITFileOrCDTrack getTrack(TrackInfoItunes trackInfoItunes)
        {
            IITFileOrCDTrack _track = null;
            int ID = trackInfoItunes.ID;
            //  TrackPersistantId _id = null;
            int IDFound = -1;
            try
            {

                _track = dictTracks[ID];

                if (_track == null)
                {
                    var _t = persist.getTrack(trackInfoItunes.Location);
                    if (_t != null && _t.Track != null)
                    {
                        _track = _t.Track;
                        //_id = _t.Id;
                    }
                }
                BgTask.chrono.bip("getT");
                #region complique
                if (conf.ComplexSearch)
                {
                    if (_track == null)
                    {
                        try
                        {
                            enter();
                            //loadScan("recherche track " + trackInfoItunes);
                            int index = list.IndexOf(trackInfoItunes);
                            if (index >= 0)
                                _track = TrackWrapper.create(app.LibraryPlaylist.Tracks[index + 1]).check(trackInfoItunes.Location);

                            if (_track != null)
                            {
                                IDFound = _track.TrackDatabaseID;
                                dictTracks[IDFound] = _track;
                                dictTrackList[IDFound] = _track;
                                persist.recordTrack(_track); // [_track.Location] = _track;


                                if (IDFound == ID)
                                { //    log.log("getTrack by ID: " + trackInfoItunes.Location);
                                }
                                else if (_track.Location == trackInfoItunes.Location)
                                    log.log("getTrack by location: " + trackInfoItunes.Location);
                                else
                                {
                                    _track = null;
                                }
                            }
                        }
                        finally { release(); }

                    }


                    if (_track == null || _track.TrackDatabaseID != ID)
                    {
                        loadScan("recherche track 2 " + trackInfoItunes);
                        _track = dictTrackList[ID];
                    }


                    if (_track == null || _track.TrackDatabaseID != ID)
                    {
                        loadScan("recherche track 4 " + trackInfoItunes);
                        _track = null;
                    }
                }

                #endregion



            }
            catch (Exception ex)
            {
                log.log(ex.ToString());
                loadScan("recherche track Exception " + trackInfoItunes);
            }

            #region complique
            if (conf.ComplexSearch)
            {
                if (_track != null)
                {
                    IDFound = _track.TrackDatabaseID;
                    dictTracks[IDFound] = _track;
                    dictTrackList[IDFound] = _track;
                    persist.recordTrack(_track);
                }
            }
            #endregion

            // return new TrackId(_id, _track);
            return _track;
        }

        void Track_classNameChanged(object sender, TrackInfoItunes.TrackClassNameEventArgs e)
        {
            TrackInfoItunes track = sender as TrackInfoItunes;
            updateClassList(track);
        }

        private void updateClassList(TrackInfoItunes piece)
        {

            List<CPlayList> copy = new List<CPlayList>();
            foreach (CPlayList list in piece.ClassPlayLists)
            {
                PieceInAList pieceInList = list.getPieceInList(piece);
                if (pieceInList != null)
                {

                    // deleteTrackInList(pieceInList);
                    pieceInList.Delete();
                    //    list.remove(pieceInList);
                    copy.Add(list); //  piece.removePlayList(list);
                }
            }

            String plName = piece.ClassName;
            setClassPlayList(piece, plName);

            foreach (CPlayList list in copy)
            {
                piece.removePlayList(list);
            }


        }

        public IEnumerable<ITrackInfoItunes> ListAllTracks { get { return list; } }
        public IEnumerable<ITrackInfoItunes> ListTracks { get { return list.FindAll(t => !t.isPodcast); } }
        public IEnumerable<ITrackInfoItunes> ListPodCast { get { return list.FindAll(t => t.isPodcast); } }
        public void loadListsNative()
        {
            IITSourceCollection sources = app.Sources;

            for (int i = 1; i <= sources.Count; i++)
            {
                loadPlayListsNative(sources[i]);
            }
            //   Console.WriteLine(root.ToString());
        }

        private bool scanLoaded;
        public void loadScan(string raison)
        {
            if (scanLoaded)
                return;

            lock (this)
            {
                if (scanLoaded)
                    return;
                scanLoaded = true;

                log.logNoDate("***************************************************************************************************");
                log.logNoDate("***************************************************************************************************");
                log.log("!!!!!!!!!!!!!!!!!!!>>>!!!>>>>DEBUT bgLoadTracksNative ( " + raison + " ) ");
                log.logNoDate("***************************************************************************************************");
                log.logNoDate("***************************************************************************************************");


                var loopbgLoadTracksNative = new ThreadUtil(bgLoadTracksNative, "BgT");
                // loopbgLoadTracksNative.Name = "BgT";
                loopbgLoadTracksNative.Start();
            }
        }
        public void loadLists()
        {
            lock (this)
            {
                log.log("Début load list");
                DateTime begin = DateTime.Now;
                // persistentIDs = new Dictionary<string, PlayList>();
                if (listLoaded)
                {
                    foreach (PlayList logical in logicals)
                    {
                        logical.DeleteBase();
                    }
                }
                root.DeleteChilds(); // = new PlayList("root", null);
                gcCollect();
                if (!modeXml)
                {
                    loadListsNative();
                    return;
                }
                // IITSourceCollection sources = app.Sources;


                //for (int i = 1; i <= sources.Count; i++)
                //{
                //    IITSource source = sources[i];
                //    var playlists = source.Playlists;

                //    foreach (IITPlaylist pl in playlists)
                //    {
                //        if (pl.Kind == ITPlaylistKind.ITPlaylistKindUser)
                //        {
                //            var upl = pl as IITUserPlaylist;
                //            recordlegacyPlayList(upl);
                //        }
                //        checkDetect(begin);
                //    }
                //}


                //if (bParsingNativeAsync)
                //{
                //    Thread loopbgLoadTracksNative = new Thread(bgLoadTracksNative);
                //    loopbgLoadTracksNative.Name = "BgT";
                //    loopbgLoadTracksNative.Start();
                //}



                XmlNode xPlaylists = null;
                int count = contentXml.ChildNodes.Count;
                for (int i = 0; i < count; i += 2)
                {
                    XmlNode aux = contentXml.ChildNodes[i];
                    if (aux.InnerText == "Playlists")
                    {
                        xPlaylists = contentXml.ChildNodes[i + 1];
                        break;
                    }
                    continue;
                }


                foreach (XmlNode xDist in xPlaylists.ChildNodes)
                {
                    string KEY = "key";
                    int ID = -1;
                    string persistentID = null;
                    string parentPersistentID = null;
                    bool forgetIt = false;
                    bool folder = false;
                    string name = null;
                    XmlNode contentList = null;
                    int count2 = xDist.ChildNodes.Count;
                    for (int i = 0; i < count2; i += 2)
                    {
                        XmlNode meta = xDist.ChildNodes[i];
                        string value = xDist.ChildNodes[i + 1].InnerText;
                        if (meta.Name == KEY)
                        {
                            switch (meta.InnerText)
                            {
                                case "Master": forgetIt = true; break;
                                case "Distinguished Kind": forgetIt = true; break;
                                case "Name": name = value; break;
                                case "Playlist ID": ID = Convert.ToInt32(value); break;
                                case "Playlist Persistent ID": persistentID = value; break;
                                case "Folder": folder = true; break;
                                case "Parent Persistent ID": parentPersistentID = value; break;
                                case "Playlist Items": contentList = xDist.ChildNodes[i + 1]; break;

                            }

                        }
                    }

                    if (forgetIt)
                        continue;
                    PlayList parent = null;


                    if (parentPersistentID == null)
                        parent = root;
                    else parent = persistentIDs[parentPersistentID];

                    IITUserPlaylist upl = null;
                    try
                    {
                        upl = m_htLegacyPLayList.getItPl(ID, name);
                    }
                    catch
                    {
                        log.log("impossible de charger la liste " + ID + " " + name);
                        throw;
                    }
                    PlayList current = addChildPlayList2(upl, parent, name, ID, persistentID);
                    log.log("add pl {0}", current);

                    if (folder)
                        continue;
                    if (contentList == null)
                        continue;
                    bool _blogic = false;
                    if (listLoaded)
                    {
                        foreach (PlayList logical in logicals)
                        {
                            if (current.isSubList(logical))
                            {
                                _blogic = true;
                                break;
                            }
                        }
                        if (_blogic)
                            continue;
                    }


                    bool go = filterPlaylist.consider(current);
                    if (!go) continue;

                    ////    if (current.isSubList("gen")) continue;
                    //    if (current.isSubList("auto")) continue;
                    //    if (current.isSubList("d")) continue;
                    //    if (current.isSubList("c")) continue;




                    int countList = contentList.ChildNodes.Count;
                    int ii = 0;
                    foreach (XmlNode xdictTrack in contentList.ChildNodes)
                    {
                        int id = Convert.ToInt32(xdictTrack.ChildNodes[1].InnerText);

                        TrackInfoItunes piece = m_htPieces[id];
                        if (piece == null)
                            continue;

                        TrackInList plPiece = new TrackInList(current, piece, id);
                        plPiece.ID = ID * 1000 * 1000 + ii;
                        current.add(plPiece);
                        //current.addPiece(piece);
                        ii++;
                        afterCreate(current, piece, id);
                    }



                    //   current.scanTracks();



#if VERIF
                current.verif();
#endif
                    log.log("{0} elts", current.ChildsCount);
                }

                if (listLoaded)
                    reintegrateLogical();



                contentXml = null;
                gcCollect();

                checkDetect(begin);
                listLoaded = true;
                log.log("Fin de load Lists");
            }






        }

        private void reintegrateLogical()
        {
            foreach (PlayList pl in logicals)
                pl.reintegrate();
        }

        protected virtual void afterCreate(PlayList playlist, TrackInfoItunes track, int id)
        {
        }

        //private void loadPlayLists(IITSource source)
        //{
        //    log.log("Loader:loadPlayLists source");
        //    IITPlaylist pl;
        //    IITUserPlaylist upl;

        //    for (int index = 1; index <= source.Playlists.Count; index++)
        //    {
        //        pl = source.Playlists[index];
        //        log.log("Loader:loadPlayLists check {0}", pl.Name);
        //        if (pl.Kind == ITPlaylistKind.ITPlaylistKindUser)
        //        {
        //            upl = pl as IITUserPlaylist;
        //            recordlegacyPlayList(upl);


        //            if (upl.SpecialKind == ITUserPlaylistSpecialKind.ITUserPlaylistSpecialKindNone ||
        //                upl.SpecialKind == ITUserPlaylistSpecialKind.ITUserPlaylistSpecialKindFolder)
        //            {

        //                PlayListComposite parent = null;
        //                IITUserPlaylist iparent = upl.get_Parent();
        //                if (iparent != null)
        //                {
        //                    parent = m_htPlayLists[iparent.playlistID];
        //                }
        //                else
        //                {
        //                    parent = root;
        //                }


        //                CPlayList current = addChildPlayList(parent, upl);

        //                if (current.isSubList("gen")) continue;
        //                if (current.isSubList("auto")) continue;
        //                if (current.isSubList("d")) continue;
        //                if (current.isSubList("c")) continue;

        //                log.log("add pl {0}", current);




        //                //current.ID = upl.playlistID;
        //                //m_htPlayLists.Add(upl.playlistID, current);

        //                //parent.add(current);


        //                if (upl.SpecialKind == ITUserPlaylistSpecialKind.ITUserPlaylistSpecialKindNone)
        //                {
        //                    foreach (IITTrack t in upl.Tracks)
        //                    {
        //                        if (t.Kind == ITTrackKind.ITTrackKindFile)
        //                        {
        //                            IITFileOrCDTrack track = t as IITFileOrCDTrack;
        //                            if (!track.Podcast)
        //                            {
        //                                TrackInfoItunes piece = m_htPieces[track.TrackDatabaseID];
        //                                TrackInList plPiece = new TrackInList(piece, track);
        //                                plPiece.ID = track.trackID;
        //                                m_htPiecesInAList.Add(plPiece.ID, plPiece);
        //                                current.add(plPiece);
        //                                current.addPiece(piece);
        //                            }
        //                        }
        //                    }
        //                    log.log("{0} elts", current.ChildsCount);
        //                }


        //            }

        //        }
        //    }

        //}

        private void loadPlayListsNative(IITSource source)
        {
            log.log("Loader:loadPlayLists source");
            IITPlaylist pl;
            IITUserPlaylist upl;

            for (int index = 1; index <= source.Playlists.Count; index++)
            {
                pl = source.Playlists[index];
                log.log("Loader:loadPlayLists check {0}", pl.Name);
                if (pl.Kind == ITPlaylistKind.ITPlaylistKindUser)
                {
                    upl = pl as IITUserPlaylist;
                    recordlegacyPlayList(upl);


                    if (upl.SpecialKind == ITUserPlaylistSpecialKind.ITUserPlaylistSpecialKindNone ||
                        upl.SpecialKind == ITUserPlaylistSpecialKind.ITUserPlaylistSpecialKindFolder)
                    {

                        PlayListComposite parent = null;
                        IITUserPlaylist iparent = upl.get_Parent();
                        if (iparent != null)
                        {
                            parent = m_htPlayLists[iparent.playlistID];
                        }
                        else
                        {
                            parent = root;
                        }


                        CPlayList current = addChildPlayList(parent, upl);

                        // if (current.isSubList("gen")) continue;
                        if (current.isSubList("auto")) continue;
                        if (current.isSubList("d")) continue;
                        if (current.isSubList("c")) continue;

                        log.log("add pl {0}", current);




                        //current.ID = upl.playlistID;
                        //m_htPlayLists.Add(upl.playlistID, current);

                        //parent.add(current);


                        if (upl.SpecialKind == ITUserPlaylistSpecialKind.ITUserPlaylistSpecialKindNone)
                        {
                            foreach (IITTrack t in upl.Tracks)
                            {
                                if (t.Kind == ITTrackKind.ITTrackKindFile)
                                {
                                    IITFileOrCDTrack track = TrackWrapper.create(t); // as IITFileOrCDTrack;
                                    if (!track.Podcast)
                                    {
                                        TrackInfoItunes piece = m_htPieces[track.TrackDatabaseID];
                                        TrackInList plPiece = new TrackInList(piece, track);
                                        plPiece.ID = track.trackID;
                                        // m_htPiecesInAList.Add(plPiece.ID, plPiece);
                                        current.add(plPiece);
                                       // current.addPiece(piece);
                                    }
                                }
                            }
                            log.log("{0} elts", current.ChildsCount);
                        }


                    }

                }
            }

        }

        private CPlayList addChildPlayList(PlayListComposite parent, IITPlaylist iSubList)
        {
            CPlayList subList = new CPlayList(iSubList.Name);
            subList.ID = iSubList.playlistID;
            //  if (m_htPlayLists.ContainsKey(subList.ID))
            m_htPlayLists.Add(subList.ID, subList);
            m_htLegacyPLayList.recordlegacyPlayList(iSubList as IITUserPlaylist);

            parent.add(subList);
            return subList;
        }

        private PlayList addChildPlayList2(IITUserPlaylist upl, PlayList parent, string name, int ID, string persistentID)
        {
            try
            {
                enter();
                if (!m_htPlayLists.ContainsKey(ID))
                {
                    PlayList subList = null;
                    //bool subListIsGenerated = false; // listLoaded && parent.isSubList(gen);
                    //bool subListIsGen = false; // = parent == root && name == "gen";


                    if (listLoaded)
                    {
                        foreach (PlayList logical in logicals)
                        {
                            if (logical.Parent != null && parent != null)
                            {
                                if (parent.isSubList(logical))
                                {
                                    subList = parent.getComposite(ID) as PlayList;
                                    break;
                                }
                            }
                        }
                    }

                    if (subList == null)
                    {

                        var strLists = conf.LogicalLists;
                        for (int l = 0; l < strLists.Count; l++)
                        {
                            if (subList != null)
                                break;
                            string strList = strLists[l];
                            string path = strList; // "root" + strList;
                            string[] parts = path.Split('\\');
                            int count = parts.GetLength(0);
                            PlayListComposite current = root;
                            for (int i = 0; i < count; i++)
                            {
                                string part = parts[i];
                                if (string.IsNullOrEmpty(part))
                                    continue;
                                var plPart = current.getComposite(part) as PlayList;
                                //if (plPart == null)
                                //{
                                //    if (listLoaded)
                                //        break;
                                //}
                                if (i == count - 1)
                                {
                                    if (name == part)
                                    {
                                        if (listLoaded)
                                        {
                                            PlayList pl = logicals.Find(lo => lo.Name == name);
                                            if (pl.Parent == null)
                                            {
                                                current.add(pl);
                                                subList = pl;
                                                break;
                                            }
                                        }
                                        else
                                        {
                                            subList = PlayList.create(name, parent, upl);
                                            if (!logicals.Contains(subList))
                                                logicals.Add(subList);
                                            break;

                                        }
                                    }
                                }

                                current = plPart;
                                if (current == null)
                                    break;
                            }

                        }
                    }

                    //if (listLoaded)
                    //{
                    //    foreach (PlayList logical in logicals)
                    //    {
                    //        if (parent.isSubList(logical))
                    //        {
                    //            subList = parent.getComposite(name) as PlayList;
                    //        }
                    //    }
                    //}



                    //if (subListIsGenerated)
                    //    subList = parent.getComposite(name) as PlayList;
                    //else if (subListIsGen && listLoaded)
                    //{
                    //    subList = gen;
                    //    root.add(gen);
                    //}

                    if (subList == null)
                        subList = PlayList.create(name, parent, upl);
                    //if (subListIsGen)
                    //    gen = subList;

                    if (m_htPlayLists.ContainsKey(ID))
                    {
                        var str = string.Format("zarb:ID{0} subList.ID {1} clé existante {2} {3}", ID, subList.ID, subList.getPath(), m_htPlayLists[ID].getPath());

                    }
                    else
                    {

                        subList.ID = ID;

                        m_htPlayLists.Add(subList.ID, subList);
                        persistentIDs.Add(persistentID, subList);
                    }

                }




            }
            finally { release(); }




            return persistentIDs[persistentID]; // subList;
        }




        private void recordlegacyPlayList(IITUserPlaylist upl)
        {
            //  log.log(upl.playlistID + " " + upl.Name);
            //  m_htLegacyPLayList.Add(upl.playlistID, upl);
        }

        //private void recordlegacyPlayList(IITUserPlaylist upl, int index)
        //{
        //    log.log(upl.playlistID + " " + upl.Name);
        //    m_htLegacyPLayList.Add(index, upl);
        //}

        #endregion

        #region manip
        public PlayListComposite getOrCreateFolder(String folder)
        {
            PlayListComposite plFolder = root.getComposite(folder);
            if (plFolder == null)
            {
                IITPlaylist itFolder = app.createFolder(folder);
                recordlegacyPlayList(itFolder as IITUserPlaylist);
                plFolder = addChildPlayList(root, itFolder);
            }
            return plFolder;
        }

        public PlayListComposite getOrCreateFolder(PlayListComposite folder, String name, bool buildIf)
        {
            PlayListComposite pSub = folder.getComposite(name);
            if (pSub == null && buildIf)
            {
                IITUserPlaylist itFolder = m_htLegacyPLayList.getItPl(folder.ID, folder.Name);
                IITPlaylist itSub = itFolder.createFolder(name);

                pSub = addChildPlayList(folder, itSub);
            }
            return pSub;
        }

        public CPlayList getList(PlayListComposite folder, String name)
        {
            lock (this)
            {
                PlayListComposite plist = folder.getComposite(name);

                if (plist == null)
                {
                    IITUserPlaylist itFolder = m_htLegacyPLayList.getItPl(folder.ID, folder.Name);
                    var itPlist = itFolder.createPlaylist(name);
                    recordlegacyPlayList(itPlist);
                    plist = addChildPlayList(folder, itPlist);
                }
                return plist as CPlayList;
            }

        }

        public PlayList getPlayList(PlayListComposite folder, string name, bool buildIf)
        {
            if (folder == null)
                return null;
            lock (this)
            {
                PlayListComposite plist = folder.getComposite(name);

                if (plist == null && buildIf)
                {
                    IITUserPlaylist itFolder = m_htLegacyPLayList.getItPl(folder.ID, folder.Name);
                    IITPlaylist itPlist = itFolder.createPlaylist(name);
                    recordlegacyPlayList(itPlist as IITUserPlaylist);
                    plist = addChildPlayList(folder, itPlist);

                    return PlayList.create(name, folder as CPlayList, itPlist as IITUserPlaylist);
                }

                return plist as PlayList;
            }


        }

        public void mergeList(CPlayList playlist, ICollection<IFile> newElements_, bool withOrder, IAbortTask writer, IBgTask task)
        {
            PlayList pl = playlist as PlayList;
            if (pl == null)
            {
                log.log("pas un PLayList {0}", playlist);
                return;
            }

            withOrder = !pl.VerifyDoublon;
            if (withOrder)
                pl.mergeListWithOrder(newElements_, writer, task);
            else
                pl.mergeList(newElements_, writer);
        }




        public void removeList(PlayListComposite folder, String name)
        {
            PlayListComposite plist = folder.getComposite(name);
            if (plist != null)
            {
                IITPlaylist itPlist = m_htLegacyPLayList.getItPl(plist.ID, plist.Name);
                itPlist.Delete();
                m_htLegacyPLayList.Remove(plist.ID, plist.Name);
                m_htPlayLists.Remove(plist.ID);
                folder.remove(plist);
            }
        }

        public void SynchronizePodcast()
        {
            log.log("UpdateIPod");
            app.UpdateIPod();
        }

        public void addList(PlayListComposite folder, String name, ICollection<IFile> list)
        {
            lock (this)
            {
                IITUserPlaylist itFolder = m_htLegacyPLayList.getItPl(folder.ID, folder.Name);
                IITUserPlaylist itPlist = itFolder.createPlaylist(name);
                recordlegacyPlayList(itPlist as IITUserPlaylist);

                if (list.Count == 0) return;

                //   String[] paths = new String[list.Count+1];

                //for(int i=0; i<list.Count; i++)
                //{
                //    paths[i+1] = list[i].Path ; 
                //}
                //   object objPath = (object)paths;
                //   itPlist.AddFiles(ref objPath); 



                foreach (IFile piece in list)
                {
                    itPlist.AddFile(piece.Location);
                }
            }
        }
        #endregion

        /// <summary>
        /// Rangement de la classList
        /// </summary>
        /// <param name="track"></param>
        /// <param name="orgClassName"></param>
        /// <param name="newClassName"></param>
        public void setClassPlayList(TrackInfoItunes track, string orgClassName, string newClassName)
        {
            lock (this)
            {

                //1. Suppression
                var list = new List<CPlayList>(track.ClassPlayLists);
                foreach (CPlayList pl in list)
                {
                    if (pl.Name.Equals(newClassName))
                        continue;
                    var trackInList = pl.getPieceInList(track);
                    if (trackInList != null)
                        trackInList.Delete();
                }

                //2. vérif que la liste cible ne contient pas déjà le track
                foreach (CPlayList pl in list)
                {
                    if (!pl.Name.Equals(newClassName))
                        continue;
                    var trackInList = pl.getPieceInList(track);
                    if (trackInList != null)
                        return;
                }

                //3. ajout
                PlayList newpl = getClassPlayList(newClassName);
                newpl.Add(track.Location, "setClassPlayList", true);

            }


        }

        public PlayList getFolderOrList(PlayList root, string name, bool findFolder)
        {
            if (root == null)
                root = this.root;
            var current = root;

            foreach (PlComponent plComponent in current)
            {
                if (plComponent is PlayListComposite)
                {
                    var plComposite = plComponent as PlayListComposite;
                    if (plComposite.Name == name)
                    {
                        var playList = plComposite as PlayList;
                        var specialKind = ITUserPlaylistSpecialKind.ITUserPlaylistSpecialKindNone;
                        if (findFolder)
                            specialKind = ITUserPlaylistSpecialKind.ITUserPlaylistSpecialKindFolder;
                        if (playList.ItPlayList.SpecialKind == specialKind)
                        {
                            return playList;

                        }
                    }

                }
            }

            return null;

        }

        private PlayList searchClassList(PlayList current, string listName)
        {
            foreach (PlComponent plComponent in current)
            {
                if (plComponent is PlayListComposite)
                {

                    var plComposite = plComponent as PlayListComposite;
                    var name = plComposite.Name;

                    bool sameBase = true;

                    for (int i = 0; i < listName.Length && i < name.Length; i++)
                    {
                        if (!listName[i].Equals(name[i]))
                        {
                            sameBase = false;
                            break;
                        }
                    }

                    if (!sameBase)
                        continue;

                    var playList = plComposite as PlayList;
                    var subSearch = searchClassList(playList, listName);

                    if (subSearch != null)
                        return subSearch;

                    if (name.Equals(listName))
                    {
                        if (playList.ItPlayList.SpecialKind == ITUserPlaylistSpecialKind.ITUserPlaylistSpecialKindNone)
                            return playList;
                    }

                }
            }
            return null;
        }


        private PlayList getClassPlayList(string listName)
        {
            lock (this)
            {
                if (listName.isNullorEmpty())
                    return null;
                var classement = root.getComposite(CPlayList.CLASSEMENT) as PlayList;

                var search = searchClassList(classement, listName);
                if (search != null)
                    return search;
                var current = classement;

                for (int i = 0; i < listName.Length - 1; i++)
                {
                    String FolderOrList = listName.Substring(0, i + 1);
                    PlayList found = getFolderOrList(current, FolderOrList, true);

                    if (found == null)
                    {
                        IITUserPlaylist itFolder = current.ItPlayList.createFolder(FolderOrList);
                        recordlegacyPlayList(itFolder as IITUserPlaylist);
                        found = PlayList.create(FolderOrList, current, itFolder);
                    }
                    current = found as PlayList;
                }

                var last = getFolderOrList(current, listName, false);
                if (last == null)
                {

                    IITUserPlaylist itPlayList = current.ItPlayList.createPlaylist(listName);
                    recordlegacyPlayList(itPlayList as IITUserPlaylist);
                    last = PlayList.create(listName, current, itPlayList);


                }

                return last as PlayList;
            }

        }


        private PlayList getClassPlayList__OLD(string listName)
        {
            lock (this)
            {
                if (listName.isNullorEmpty())
                    return null;
                var classement = root.getComposite(CPlayList.CLASSEMENT) as PlayList;
                var current = classement;

                for (int i = 0; i < listName.Length - 1; i++)
                {
                    String FolderOrList = listName.Substring(0, i + 1);
                    PlayList found = getFolderOrList(current, FolderOrList, true);

                    if (found == null)
                    {
                        IITUserPlaylist itFolder = current.ItPlayList.createFolder(FolderOrList);
                        recordlegacyPlayList(itFolder as IITUserPlaylist);
                        found = PlayList.create(FolderOrList, current, itFolder);
                    }
                    current = found as PlayList;
                }

                var last = getFolderOrList(current, listName, false); // current.getComposite(listName);
                if (last == null)
                {
                    //if (current.ItPlayList.SpecialKind == ITUserPlaylistSpecialKind.ITUserPlaylistSpecialKindFolder)
                    //{
                    IITUserPlaylist itPlayList = current.ItPlayList.createPlaylist(listName);
                    recordlegacyPlayList(itPlayList as IITUserPlaylist);
                    last = PlayList.create(listName, current, itPlayList);
                    //}

                }

                return last as PlayList;
            }

        }


        public PlayList getOrCreatePlayList(PlayList root, string listName, bool isFolder)
        {
            if (_aborted)
                return null;
            lock (this)
            {
                if (listName.isNullorEmpty())
                    return null;

                if (root == null)
                    root = this.root;


                var pl = getFolderOrList(root, listName, isFolder);

                if (pl == null)
                {
                    if (_aborted)
                        return null;
                    IITUserPlaylist itPlayList = null;
                    if (isFolder)
                    {
                        if (root == this.root)
                            itPlayList = app.createFolder(listName);
                        else
                            itPlayList = root.ItPlayList.createFolder(listName);

                    }
                    else
                    {
                        if (root == this.root)
                            itPlayList = app.createPlaylist(listName);
                        else
                            itPlayList = root.ItPlayList.createPlaylist(listName);
                    }

                    recordlegacyPlayList(itPlayList as IITUserPlaylist);
                    pl = PlayList.create(listName, root, itPlayList);
                }

                return pl;
            }
        }

        //public PlayList getOrCreatePlayList(string listName, bool isFolder)
        //{
        //    return getOrCreatePlayList(this.root, listName, isFolder);
        //}



        public void setClassPlayList(ITrackMetaData piece, String listName)
        {
            lock (this)
            {
                if (String.IsNullOrEmpty(listName)) return;
                //String listName = piece.ClassList;
                IITUserPlaylist itCurrent;
                PlayListComposite classement = getOrCreateFolder(CPlayList.CLASSEMENT);

                PlayListComposite current = classement;


                if (listName.isInteger())
                {

                    for (int i = 0; i < listName.Length; i++)
                    {
                        String FolderOrList = listName.Substring(0, i + 1);

                        PlayListComposite subList = current.getComposite(FolderOrList);
                        //  PlayListComposite parent = current.Parent; 
                        IITUserPlaylist itSubList;
                        // IITUserPlaylist itParent = m_htLegacyPLayList[parent.ID]; 
                        if (subList == null)
                        {
                            itCurrent = m_htLegacyPLayList.getItPl(current.ID, current.Name);

                            if (itCurrent.SpecialKind == ITUserPlaylistSpecialKind.ITUserPlaylistSpecialKindNone)
                            {

                                var currentName = itCurrent.Name;
                                // suppression et mémorisation des pistes
                                var listAux = new List<ITrackMetaData>();
                                foreach (IITFileOrCDTrack track in itCurrent.Tracks)
                                {
                                    ITrackMetaData pieceToMove = m_htPieces[track.TrackDatabaseID];
                                    listAux.Add(pieceToMove);
                                    // m_htPiecesInAList.Remove(track.trackID);
                                    track.Delete();
                                }

                                // suppression de la liste
                                PlayListComposite parent = current.Parent;
                                IITUserPlaylist itParent = m_htLegacyPLayList.getItPl(parent.ID, parent.Name);

                                itCurrent.Delete();
                                parent.remove(current);
                                m_htPlayLists.Remove(current.ID);

                                // création durépertoire                                                       
                                itCurrent = itParent.createFolder(currentName) as IITUserPlaylist;
                                recordlegacyPlayList(itCurrent);
                                current = addChildPlayList(parent, itCurrent);

                                //remplacement de la liste supprimée
                                IITUserPlaylist itRempl = itCurrent.createPlaylist(currentName) as IITUserPlaylist;
                                recordlegacyPlayList(itRempl);
                                PlayListComposite rempl = addChildPlayList(current, itRempl);

                                // ajout des morceaux
                                foreach (ITrackMetaData pieceToMove in listAux)
                                {
                                    IITOperationStatus status = itRempl.AddFile(pieceToMove.Location);
                                    IITFileOrCDTrack track = TrackWrapper.create(status.Tracks[1]); // as IITFileOrCDTrack;

                                    TrackInList plPiece = new TrackInList(pieceToMove, track);
                                    plPiece.ID = track.trackID;
                                    //  m_htPiecesInAList.Add(plPiece.ID, plPiece);
                                    rempl.add(plPiece);
                                }

                            }
                            itSubList = i < listName.Length - 1 ? itCurrent.createFolder(FolderOrList) as IITUserPlaylist : itCurrent.createPlaylist(FolderOrList) as IITUserPlaylist;
                            recordlegacyPlayList(itSubList as IITUserPlaylist);
                            subList = addChildPlayList(current, itSubList);
                        }
                        current = subList;
                    }

                }
                else
                {
                    PlayListComposite subList = current.getComposite(listName);
                    if (subList == null)
                    {
                        itCurrent = m_htLegacyPLayList.getItPl(current.ID, current.Name); // [current.ID];
                        IITPlaylist itSubList = itCurrent.createPlaylist(listName);
                        recordlegacyPlayList(itSubList as IITUserPlaylist);
                        subList = addChildPlayList(current, itSubList);
                    }
                    current = subList;
                }

                itCurrent = m_htLegacyPLayList.getItPl(current.ID, current.Name); //  [current.ID];
                if (itCurrent.SpecialKind == ITUserPlaylistSpecialKind.ITUserPlaylistSpecialKindFolder)
                {
                    PlayListComposite sub = current.getComposite(itCurrent.Name);
                    if (sub == null)
                    {
                        IITUserPlaylist itSubList = itCurrent.createPlaylist(itCurrent.Name) as IITUserPlaylist;
                        recordlegacyPlayList(itSubList);
                        sub = addChildPlayList(current, itSubList);
                    }
                    current = sub;
                    itCurrent = m_htLegacyPLayList.getItPl(current.ID, current.Name);
                }


                {
                    IITOperationStatus status = itCurrent.AddFile(piece.Location);
                    if (status == null)
                    {
                        log.log("unable to add {0}", piece);
                        return;
                    }

                    IITFileOrCDTrack track = TrackWrapper.create(status.Tracks[1]); // as IITFileOrCDTrack;

                    if (track == null)
                    {
                        log.log("unable to add {0}", piece);
                        return;
                    }

                    TrackInList plPiece = new TrackInList(piece, track);
                    plPiece.ID = track.trackID;
                    //  m_htPiecesInAList.Add(plPiece.ID, plPiece);
                    current.add(plPiece);
                    TrackInfoItunes trackBib = m_htPieces[track.TrackDatabaseID];
                    CPlayList pl = current as CPlayList;
                    //if (pl != null)
                    //    pl.addPiece(trackBib);

                }
            }


        }
        //public ITrackMetaData getTrack(ITrackMetaData piece)
        //{
        //    TrackInfoItunes track = piece as TrackInfoItunes; 
        //    if (track == null || !exists(piece) )
        //        return new TrackInfoItunes(getNewTrack(piece));

        //    return track;
        //}


        //public IITFileOrCDTrack AddFile(IITUserPlaylist pl, string location)
        //{
        //    IITFileOrCDTrack track = null;
        //    IITOperationStatus status = pl.AddFile(location);
        //    if (status == null)
        //    {
        //        log.log("{0} : unable to AddFile {0}", pl.Name, location);
        //        return null;
        //    }
        //    while (status.InProgress || (!app.AppCommandMessageProcessingEnabled))
        //    {
        //        Thread.Sleep(30);
        //    }

        //    track = status.Tracks[1] as IITFileOrCDTrack;
        //    return track;
        //}


        public virtual void createTrack(TrackInfoItunes piece)
        {

            try
            {
                log.log(String.Format("create track for {0}", piece.ToString()));
                IITFileOrCDTrack track = null;
                IITOperationStatus status = app.LibraryPlaylist.AddFile(piece.Location);
                if (status == null)
                {
                    log.log(String.Format("unable to load track {0}", piece.ToString()));
                    return;
                }
                while (status.InProgress || (!app.AppCommandMessageProcessingEnabled))
                {
                    Thread.Sleep(30);
                }

                track = TrackWrapper.create(status.Tracks[1]);
              
                if (track.Location == null)
                {
                    log.log(String.Format("track sans localaisation {0}", piece));
                    piece.TrackTrack = new NoTrack(piece);
                    return;
                }

                if (m_htTracks.ContainsKey(track.TrackDatabaseID))
                {
                    log.log(String.Format("track déja présent: {0}", piece));
                    piece.TrackTrack = track;
                    return; // m_htTracks[track.TrackDatabaseID];
                }

                m_htTracks.Add(track.TrackDatabaseID, track);

                if (m_htPieces.ContainsKey(track.TrackDatabaseID))
                {
                    log.log(String.Format("track déja présent: {0}", piece));
                    piece.TrackTrack = track;
                    return; // m_htTracks[track.TrackDatabaseID];
                }

                // intern.classNameChanged += new EventHandler<TrackInfoItunes.TrackClassNameEventArgs>(Track_classNameChanged);

               
                //var id = persist.recordTrack(track);
                //intern.PersistantId = id;

                m_htPieces.Add(track.TrackDatabaseID, piece);
                m_htLoc.Add(piece.Location, piece);
                piece.TrackTrack = track;
            }
            catch (Exception e)
            {
                log.log(e.ToString());
            }

        }

        public TrackInfoItunes getNewTrack(IFile piece)
        {

            TrackInfoItunes intern = null;
            try
            {
                log.log(String.Format("create track for {0}", piece.ToString()));
                IITFileOrCDTrack track = null;
                IITOperationStatus status = app.LibraryPlaylist.AddFile(piece.Location);
                if (status == null)
                {
                    log.log(String.Format("unable to load track {0}", piece.ToString()));
                    return null;
                }
                while (status.InProgress || (!app.AppCommandMessageProcessingEnabled))
                {
                    Thread.Sleep(30);
                }

                track = TrackWrapper.create(status.Tracks[1]);
                if (m_htTracks.ContainsKey(track.TrackDatabaseID))
                {
                    log.log(String.Format("track déja présent: {0}", piece));
                    return m_htPieces[track.TrackDatabaseID]; // m_htTracks[track.TrackDatabaseID];
                }
                if (track.Location == null)
                {
                    log.log(String.Format("track sans localaisation {0}", piece));
                    return null;
                }

                intern = create(track.Location);
                intern.build(track);
                // intern.classNameChanged += new EventHandler<TrackInfoItunes.TrackClassNameEventArgs>(Track_classNameChanged);

                m_htTracks.Add(track.TrackDatabaseID, track);
                //var id = persist.recordTrack(track);
                //intern.PersistantId = id;

                m_htPieces.Add(track.TrackDatabaseID, intern);
                m_htLoc.Add(track.Location, intern); 
            }
            catch (Exception e)
            {
                log.log(e.ToString());
            }
            return intern;
        }



        private TrackInfoItunes getNewTrack(ITrackNative piece)
        {

            //PlayListComposite plNew = root.getComposite("news");
            //IITUserPlaylist itNews;
            //if (plNew == null)
            //{
            //    itNews = app.CreatePlaylist("news") as IITUserPlaylist;
            //    recordlegacyPlayList(itNews);
            //    plNew = addChildPlayList(root, itNews);
            //}

            //itNews = m_htLegacyPLayList[plNew.ID];

            //// String[] path = new String[] { piece.Path };
            //IITOperationStatus status = itNews.AddFile(piece.Path);
            //track = status.Tracks[1] as IITFileOrCDTrack;
            //piece.ID = track.TrackDatabaseID;
            //m_htTracks.Add(track.TrackDatabaseID, track);
            //m_htPieces.Add(track.TrackDatabaseID, piece);
            //return track;

            TrackInfoItunes intern = getNewTrack(piece as IFile);

            try
            {
                intern.Artist = piece.Artist;
            }
            catch { log.log("unable to change artist {0}  {1}", piece.Artist, piece); }
            try
            {
                intern.Album = piece.Album;
            }
            catch { log.log("unable to change album  {0}  {1}", piece.Album, piece); }
            try
            {
                intern.Name = piece.Name;
            }
            catch { log.log("unable to change name  {0}  {1}", piece.Name, piece); }
            try
            {
                if (piece.TrackNumber > 100000) intern.TrackNumber = 0;
                if (piece.TrackNumber > 0)
                {
                    intern.TrackNumber = piece.TrackNumber;
                }
                else
                {
                    intern.TrackNumber = 0;
                }
            }
            catch { log.log("unable to change number  {0} {1}", piece.TrackNumber, piece); }
            if (piece.Year > 0) try { intern.Year = piece.Year; }
                catch { log.log("unable to change year  {0} {1}", piece.Year, piece); }

            if (piece.Rating >= 0) try { intern.Rating = piece.Rating; }
                catch { log.log("unable to change rating  {0} {1}", piece.Rating, piece); }

            try
            {
                if (!string.IsNullOrEmpty(piece.ClassName))
                {
                    setClassPlayList(intern, "", piece.ClassName);
                }
            }
            catch
            {
                log.log("unable to change className  {0} {1}", intern.ClassName, piece);
            }

            try { intern.Enabled = piece.Enabled; }
            catch { log.log("unable to change check  {0} {1}", piece.Enabled, piece); }

            return intern;


        }


        //private bool exists(ITrackMetaData piece)
        //{
        //    TrackInfoItunes track = piece as TrackInfoItunes;
        //    if (track == null) return false;
        //    return m_htTracks.ContainsKey(track.ID);
        //}

        public ITrackInfoItunes createLegacyTrack(ITrackNative piece)
        {
            return getNewTrack(piece);
        }

        //public IITTrackCollection Tracks
        //{
        //    get { return app.LibraryPlaylist.Tracks; }
        //}

        public void Disconnect()
        {
            app = null;
            gcCollect();
        }
        private void gcCollect()
        {
            if (conf.GcCollect)
                misc.gcCollect("Loader");
        }
        public String DbPath { get { return _dBLegacyPath; } }
        public string DbDir { get { return _dBLegacyDir; } }

        public void deleteTrack(String location)
        {
            if (location.isNullorEmpty())
            {
                log.log("Loader: unable to delete track, location empty!");
                return;
            }
            location = location.ToLower();
            //     private Dictionary<int, TrackInfoItunes> m_htPieces = new Dictionary<int, TrackInfoItunes>();
            //private Dictionary<int, IITFileOrCDTrack> m_htTracks = new Dictionary<int, IITFileOrCDTrack>();
            // private Dictionary<int, IITFileOrCDTrack> m_htPiecesInAList = new Dictionary<int, IITFileOrCDTrack>();
            // private Dictionary<int, PlayListComposite> m_htPlayLists = new Dictionary<int, PlayListComposite>();
            // private Dictionary<int, IITUserPlaylist> m_htLegacyPLayList = new Dictionary<int, IITUserPlaylist>();
            TrackInfoItunes info = null;
            foreach (TrackInfoItunes _info in m_htPieces.Values)
            {
                if (_info.Location.isNullorEmpty()) continue;
                if (_info.Location.ToLower() == location)
                {
                    info = _info;
                    break;
                }

            }
            if (info == null)
            {
                log.log("Loader:deleteTrack '{0}' non trouvé", location);
                return;
            }

            try
            {
                log.log("Loader:deleteTrack: delete'{0}'", location);
                int ID = info.ID;
                // IITFileOrCDTrack track = info.Track;

                List<TrackInList> listToDelete = new List<TrackInList>();
                //foreach (TrackInList trackInList in info.ClassPlayLists
                //{
                //    if (trackInList.ID == ID)
                //    {
                //        listToDelete.Add(trackInList);
                //    }
                //}

                //foreach (TrackInList trackInList in listToDelete)
                //{
                //    m_htPiecesInAList.Remove(trackInList.ID);
                //    trackInList.Delete();
                //}


                info.Delete();
                list.Remove(info);
                //buildIndexesTracks();
            }
            catch
            {

                log.log("Loader:unable to deleteTrack: '{0}'", location);
            }
        }



        public ITrackInfoItunes createTrack(int id, String location)
        {
            if (!location.isMusic())
                return null;
            //if (location.ToLower().EndsWith(".m3u")) return null;
            //if (location.ToLower().EndsWith(".pls")) return null;
            //if (location.ToLower().EndsWith(".jpg")) return null;
            //if (location.ToLower().EndsWith(".png")) return null;
            return getNewTrack(new FileLocation(location, id));
        }
        private class FileLocation : IFile
        {
            String file;
            int id;
            public FileLocation(String file, int id) { this.file = file; this.id = id; }
            public string Location { get { return file; } }

            public override string ToString()
            {
                return file;
            }



            public int PieceId
            {
                get { return id; }
            }


            public string getLocation()
            {
                return file; 
            }
        }


        public PlayListComposite TreePlayList
        {
            get { return root; }
        }



        #region ITrackBuilder Members



        #endregion

        public virtual TrackInfoItunes create(string location)
        {
            return new TrackInfoItunes() { Location = location };
        }

        # region lecture
        private AutoPlayer player;
        public List<TrackInList> NextTracks { set { player.NextTracks = value; } }
        public TrackInList CurrentTrackInList { get { return player.CurrentTrack; } }
        public void PlayComputedTrack()
        {
            player.PlayComputedTrack();
        }
        //private TrackInList nextTrack;
        //private TrackInList currentTrack; 
        //public TrackInList NextTrack
        //{
        //    set
        //    {
        //        if (value == null)
        //            return;
        //        log.log("NextTrack:: old : {0}, new {1}", nextTrack, value);
        //        nextTrack = value;
        //    }
        //    get
        //    {
        //        return nextTrack;
        //    }
        //}

        //public TrackInList CurrentTrackInList
        //{
        //    set
        //    {
        //        if (value == null)
        //            return;
        //        log.log("CurrentTrack:: old : {0}, new {1}", currentTrack, value);
        //        currentTrack = value;
        //    }
        //    get
        //    {
        //        return currentTrack;
        //    }
        //}

        //public void PlayComputedTrack()
        //{
        //    if (conf == null || !conf.AutoPlay)
        //        return;
        //    try
        //    {
        //        if (app.PlayerState != ITPlayerState.ITPlayerStatePlaying)
        //            return;
        //        var usualTrack = CurrentTrackLocation;
        //        if (nextTrack == null)
        //            return;
        //        if (currentTrack == null)
        //            return;
        //        if (usualTrack.Equals(currentTrack.Location))
        //            return;
        //        if (usualTrack.Equals(nextTrack.Location))
        //            return;
        //        log.log("PlayComputedTrack::usualTrack:{0} nextTrack:{1}", usualTrack, nextTrack.Location);
        //        nextTrack.play();
        //        currentReading = nextTrack.Location;
        //        nextTrack = null;


        //    }
        //    catch (Exception e)
        //    {
        //        log.log(e.ToString());
        //    }


        //}
        #endregion

        private bool _aborted;
        public bool Aborted
        {
            get
            {
                return _aborted;
            }
            set
            {
                _aborted = value;
            }
        }
    }

    public static class TrackUtil
    {

    }
}


]]></content>
  </file>
</db>
