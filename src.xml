<db path="C:\Bernard\db1\pdb4">
  <file path="\pdb.player\Vue\ConfAlbumSortW.xaml">
    <content><![CDATA[<Window x:Class="pdb.player.Vue.ConfAlbumSortW"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Height="400"
        Title="ConfAlbumSortW" Loaded="Window_Loaded"  xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d" d:DesignHeight="258" d:DesignWidth="508" >
    <Grid  IsSharedSizeScope="True" >

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid Grid.Row="0" Name="gfirst" IsSharedSizeScope="True"/>

        <Grid Grid.Row="1" Name="gsecond"  IsSharedSizeScope="True"/>
        <!--<Grid Grid.ColumnSpan="2" Margin="0,0,-172,0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="236*" />
            </Grid.ColumnDefinitions>
            <CheckBox Grid.Row="0" Grid.Column="0" Name="cb_enabled" ToolTip="utilisé" Margin="5" Padding="2" />
            <ComboBox Grid.Row="0" Grid.Column="1" Name="cbxSort" Height="22" Padding="4" >
                <ComboBoxItem ToolTip="pas de conf" Name="none"></ComboBoxItem>
                <ComboBoxItem ToolTip="tri sur moyenne quand aucun des albums n'a défini sa médianne" Name="strict">strict</ComboBoxItem>
                <ComboBoxItem ToolTip="calcul Médianne moins strict" Name="light" >light</ComboBoxItem>
                <ComboBoxItem ToolTip="tri uniquement sur la moyenne" Name="moy" >moy</ComboBoxItem>
            </ComboBox>

            <TextBox  Grid.Row="0" Grid.Column="2" Name="tb_medianne" Width="30" ToolTip="medianne" Margin="5" />
            <CheckBox  Grid.Row="0" Grid.Column="3" Name="cb_quasi" ToolTip="quasi" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="4" Name="cb_lissage" ToolTip="lissage" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="5" Name="cb_removeEpsilon" ToolTip="removeEpsilon" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="6" Name="cb_reSort" ToolTip="reSort" Margin="5" Padding="2" />
            <TextBox  Grid.Row="0" Grid.Column="7" Name="tb_safe" Width="30" ToolTip="safe" Margin="5" KeyUp="tb_safe_KeyUp" />
            <TextBox  Grid.Row="0" Grid.Column="8" Name="tb_coeff" Width="40" ToolTip="coeff des morceaux virtuels" Margin="5" KeyUp="tb_safe_KeyUp" />
            <TextBox  Grid.Row="0" Grid.Column="9" Name="tb_coeffT" Width="40" ToolTip="coeff total des morceaux virtuels" Margin="5" KeyUp="tb_coeffT_KeyUp" />
            <CheckBox  Grid.Row="0" Grid.Column="10" Name="cb_removeFirst" ToolTip="mise à zero des premiers" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="11" Name="cb_deleteFirst" ToolTip="suppression des premiers" Margin="5" Padding="2" />
            <ComboBox ToolTip="removelast" Grid.Row="0" Grid.Column="12" Name="cbx1_removeLast" Height="22" Padding="4" >
                <ComboBoxItem>non</ComboBoxItem>
                <ComboBoxItem>unselected</ComboBoxItem>
                <ComboBoxItem>virtuels</ComboBoxItem>
                <ComboBoxItem>tous</ComboBoxItem>
            </ComboBox>
            <CheckBox  Grid.Row="0" Grid.Column="13" Name="cb_cumul" ToolTip="cumul" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="14" Name="cb_noAdd" ToolTip="pas d'ajout" Margin="5" Padding="2" />
            <TextBox  Grid.Row="0" Grid.Column="15" Name="tb_exp" Width="30" ToolTip="exposant proportion des morceaux gérés" Margin="5" />
            <CheckBox  Grid.Row="0" Grid.Column="16" Name="cb_removeEnabled" ToolTip="remove enabled" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="17" Name="cb_virtOnlyDisabled" ToolTip="virtuel: seulement les décochés" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="18" Name="cb_forceCoeffVirt" ToolTip="virtuel: coeff forcé" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="19" Name="cb_virtAlignSelected" ToolTip="virtuel: aligné sur le coché" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="20" Name="cb_virtAlignPrec" ToolTip="virtuel: aligné sur le précédent" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="21" Name="cb_coeffVirtAdjust" ToolTip="coeffvirt ajusté sur coeff selected" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="22" Name="cb_coeffVirtAuto" ToolTip="coeffvirt automatique" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="23" Name="cb_noaddEnd" ToolTip="en fin d'alum pas de virtuel" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="0" Grid.Column="24" Name="cb_noaddAll" ToolTip="tout virtuel" Margin="5" Padding="2" />

            <ComboBox ToolTip="ajusté avec le plus mauvais coché si besoin" Grid.Row="0" Grid.Column="25" Name="cbx_cmpMinn" Height="22" Padding="4" >
                <ComboBoxItem ToolTip="pas géré" >non</ComboBoxItem>
                <ComboBoxItem ToolTip="ce qui reste dispo est plus grand que la médianne">orphelin</ComboBoxItem>
                <ComboBoxItem ToolTip="tou ce qui est noté et coché">toujours</ComboBoxItem>
            </ComboBox>
            <TextBox  Grid.Row="0" Grid.Column="26" Name="tb_zero" Width="120" ToolTip="zéro" Margin="5" />

            <CheckBox Grid.Row="1" Grid.Column="0"  Name="cb2_enabled" ToolTip="utilisé" Margin="5" Padding="2" />
            <ComboBox Grid.Row="1" Grid.Column="1" Name="cbx2Sort" Height="22" Padding="4" >
                <ComboBoxItem ToolTip="pas de conf" Name="none2"></ComboBoxItem>
                <ComboBoxItem ToolTip="tri sur moyenne quand aucun des albums n'a défini sa médianne" Name="strict2">strict</ComboBoxItem>
                <ComboBoxItem ToolTip="calcul Médianne moins strict" Name="light2" >light</ComboBoxItem>
                <ComboBoxItem ToolTip="tri uniquement sur la moyenne" Name="moy2" >moy</ComboBoxItem>
            </ComboBox>

            <TextBox Grid.Row="1" Grid.Column="2"  Name="tb2_medianne" Width="30" ToolTip="medianne" Margin="5" />
            <CheckBox Grid.Row="1" Grid.Column="3" Name="cb2_quasi" ToolTip="quasi" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="4" Name="cb2_lissage" ToolTip="lissage" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="5" Name="cb2_removeEpsilon" ToolTip="removeEpsilon" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="6" Name="cb2_reSort" ToolTip="reSort" Margin="5" Padding="2" />
            <TextBox  Grid.Row="1" Grid.Column="7" Name="tb2_safe" Width="30" ToolTip="safe" Margin="5" />
            <TextBox  Grid.Row="1" Grid.Column="8" Name="tb2_coeff" Width="40" ToolTip="coeff des morceaux virtuels" Margin="5" />
            <TextBox  Grid.Row="1" Grid.Column="9" Name="tb2_coeffT" Width="40" ToolTip="coeff total des morceaux virtuels" Margin="5"  />
            <CheckBox  Grid.Row="1" Grid.Column="10" Name="cb2_removeFirst" ToolTip="removeFirst" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="11" Name="cb2_deleteFirst" ToolTip="deleteFirst" Margin="5" Padding="2" />
            <ComboBox ToolTip="removelast" Grid.Row="1" Grid.Column="12" Name="cbx2_removeLast" Height="22" Padding="4" >
                <ComboBoxItem>non</ComboBoxItem>
                <ComboBoxItem>unselected</ComboBoxItem>
                <ComboBoxItem>virtuels</ComboBoxItem>
                <ComboBoxItem>tous</ComboBoxItem>
            </ComboBox>
            <CheckBox  Grid.Row="1" Grid.Column="13" Name="cb2_cumul" ToolTip="cumul" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="14" Name="cb2_noAdd" ToolTip="pas d'ajout" Margin="5" Padding="2" />
            <TextBox  Grid.Row="1" Grid.Column="15" Name="tb2_exp" Width="30" ToolTip="exposant proportion des morceaux gérés" Margin="5" />
            <CheckBox  Grid.Row="1" Grid.Column="16" Name="cb2_removeEnabled" ToolTip="remove enabled" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="17" Name="cb2_virtOnlyDisabled" ToolTip="virtuel: seulement les décochés" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="18" Name="cb2_forceCoeffVirt" ToolTip="virtuel: coeff forcé" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="19" Name="cb2_virtAlignSelected" ToolTip="virtuel: aligné sur le coché" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="20" Name="cb2_virtAlignPrec" ToolTip="virtuel: aligné sur le précédent" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="21" Name="cb2_coeffVirtAdjust" ToolTip="coeffvirt ajusté sur coeff selected" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="22" Name="cb2_coeffVirtAuto" ToolTip="coeffvirt automatique" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="23" Name="cb2_noaddEnd" ToolTip="en fin d'alum pas de virtuel" Margin="5" Padding="2" />
            <CheckBox  Grid.Row="1" Grid.Column="24" Name="cb2_noaddAll" ToolTip="tout virtuel" Margin="5" Padding="2" />
            <ComboBox ToolTip="ajusté avec le plus mauvais coché si besoin" Grid.Row="1" Grid.Column="25" Name="cbx2_cmpMinn" Height="22" Padding="4" >
                <ComboBoxItem ToolTip="pas géré" >non</ComboBoxItem>
                <ComboBoxItem ToolTip="ce qui reste dispo est plus grand que la médianne">orphelin</ComboBoxItem>
                <ComboBoxItem ToolTip="tou ce qui est noté et coché">toujours</ComboBoxItem>
            </ComboBox>
            <TextBox  Grid.Row="1" Grid.Column="26" Name="tb2_zero" Width="120" ToolTip="zéro" Margin="5" />
        </Grid>-->
        <Grid Grid.Row="2" Height="137" Margin="0,0,34,34">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
                <RowDefinition  Height="30"/>

            </Grid.RowDefinitions>
            <StackPanel Grid.Row="0" Orientation="Horizontal"  HorizontalAlignment="Center"  Margin="0,5" >
                <CheckBox Name="cb_createCourant" ToolTip="générer stats en cours (désactivés)"  Margin="5" Padding="2"></CheckBox>
                <CheckBox Name="cb_createInter" ToolTip="générer stats en cours + provisoire"  Margin="5" Padding="2"></CheckBox>
                <CheckBox Name="cb_createAll" ToolTip="générer stats de tout"  Margin="5" Padding="2"></CheckBox>
                <DatePicker Name="dp_date" ToolTip="Date seuil pour considérer un classement provisoire" />
            </StackPanel>
            <StackPanel Grid.Row="1" Orientation="Horizontal"  HorizontalAlignment="Center">
                <TextBox Grid.Row="2" Name="tb_stackSize" Width="30"  VerticalAlignment="Center" Text="20" ToolTip="taille de la pile d'exclusion" Margin="5" Padding="2"/>
                <TextBox Grid.Row="2" Name="tb_stackBefore" Width="30"  VerticalAlignment="Center" Text="10" ToolTip="nb d'éléments devant la pile d'exclusion" Margin="5" Padding="2"/>
                <CheckBox Grid.Row="2" Name="cb_stackEnabled" Width="30"  VerticalAlignment="Center" ToolTip="Utiliser la pile d'exclusion" Margin="5" Padding="2" />
                <CheckBox Grid.Row="2" Name="cb_checkStack" Width="30"  VerticalAlignment="Center" ToolTip="Ne pas prendre en compte les albums retardés dans la file d'attente pour la cinématique" Margin="5" Padding="2" />
                <CheckBox Grid.Row="2" Name="cb_only_new" Width="30"  VerticalAlignment="Center" ToolTip="Ne retarder que les nouveaux" Margin="5" Padding="2" />
                <CheckBox Grid.Row="2" Name="cb_idem" Width="30"  VerticalAlignment="Center" ToolTip="Lier les items" Margin="5" Padding="2" Click="cb_idem_Click" />

                <Button Grid.Row="2" Name="bt_cancel" IsCancel="true" Height="25" HorizontalAlignment="Right" Content="Cancel" Click="bt_cancel_Click"   Margin="5" Padding="2"/>
                <Button Grid.Row="2" Name="bt_ok" Height="25" HorizontalAlignment="Right" Content="Ok" Click="bt_ok_Click"   Margin="5" Padding="2"/>
                <Button Grid.Row="2" Name="bt_coul" Height="25" HorizontalAlignment="Right" Content="Couleurs" Click="bt_coul_Click"   Margin="5" Padding="2"/>
                <Button Grid.Row="2" Name="bt_debug" Height="25" HorizontalAlignment="Right" Content="Debug" Click="bt_debug_Click"   Margin="5" Padding="2"/>
                <Button Grid.Row="2" Name="bt_compact" Height="25" HorizontalAlignment="Right" Content="Compact" Click="bt_compact_Click"   Margin="5" Padding="2"/>
            </StackPanel>
            <StackPanel Grid.Row="2" Orientation="Horizontal"  HorizontalAlignment="Center">
                <TextBox Name="tb_path" Text="pdbr.xml" />
                <TextBox Name="tb_nb" Text="100" />
                <Button Name="btBd" Content="Extraction" Click="btBd_Click" />
            </StackPanel>
        </Grid>
    </Grid>

</Window>
]]></content>
  </file>
  <file path="\pdb.player\Vue\ConfAlbumSortW.xaml.cs">
    <content><![CDATA[using System;
using System.Windows;
using pdb.gen.Tuning;
using pdb.gen;
using pdb.db.piece.type;
using pdb.player.Vue.Conf;
using System.Windows.Controls;
using pdb.gen.stat;
using pdb.player.ViewModel;
using System.Collections.Generic;
using pdb.db.obj;

namespace pdb.player.Vue
{
    /// <summary>
    /// Interaction logic for ConfAlbumSortW.xaml
    /// </summary>
    public partial class ConfAlbumSortW : Window, IConfSort
    {
        private ConfAlbumSort conf;
        private ConfMedianneW first;
        private ConfMedianneW second;
        private static bool _idem;
        public ConfAlbumSortW()
        {
            InitializeComponent();
            this.Loaded += new RoutedEventHandler(ConfAlbumSortW_Loaded);
        }

        void ConfAlbumSortW_Loaded(object sender, RoutedEventArgs e)
        {
            bt_ok.IsDefault = true;

            display();
        }

        public ConfAlbumSortW(ConfAlbumSort conf)
            : this()
        {
            this.conf = conf;
            first = new ConfMedianneW(conf.Composants[0], this);
            gfirst.Children.Add(first);
            if (conf.Composants.Count > 1)
            {
                second = new ConfMedianneW(conf.Composants[1], this);
                gsecond.Children.Add(second);
            }

            InitializeComponent();
        }

        void display()
        {
          
            tb_stackSize.Text = conf.stackSize.ToString();
            tb_stackBefore.Text = conf.stackBefore.ToString();
         
            cb_createAll.IsChecked = conf.createAll;
            cb_createInter.IsChecked = conf.createInter;
            cb_createCourant.IsChecked = conf.createCourant;
            dp_date.SelectedDate = conf.lastModif;
            cb_idem.IsChecked = _idem;
            cb_checkStack.IsChecked = conf.checkStack;
            cb_stackEnabled.IsChecked = conf.stackEnabled;
            cb_only_new.IsChecked = conf.stackOnlyNew; 
         

            first.display();
            if (second != null)
                second.display();


            //var list = conf.Composants;
            //var item1 = list[0];
            //cb_enabled.IsChecked = item1.enabled;
            //cbxSort.SelectedIndex = (int)item1.type;
            //tb_medianne.Text = item1.medianne.ToString();
            //cb_quasi.IsChecked = item1.quasi;
            //cb_lissage.IsChecked = item1.lissage;
            //cb_removeEpsilon.IsChecked = item1.removeEpsilon;
            //cb_reSort.IsChecked = item1.reSort;
            //cb_removeFirst.IsChecked = item1.removeFirst;
            //cb_deleteFirst.IsChecked = item1.deleteFirst;
            //cbx1_removeLast.SelectedIndex = (int)item1.removeLast;
            //cb_cumul.IsChecked = item1.cumul;
            //cb_noAdd.IsChecked = item1.noAdd;
            //tb_safe.Text = item1.safe.ToString();
            //tb_coeff.Text = item1.coeffVirt.ToString();
            //tb_exp.Text = item1.expEnabled.ToString();
            //tb_zero.Text = Piece.getClassementEquiv(item1.zero);
            //cb_removeEnabled.IsChecked = item1.removeEnabled;
            //cb_virtOnlyDisabled.IsChecked = item1.virtOnlyDisabled;
            //cb_forceCoeffVirt.IsChecked = item1.forceCoeffVirt;
            //cb_virtAlignPrec.IsChecked = item1.virtAlignPrec;
            //cb_virtAlignSelected.IsChecked = item1.virtAlignSelected;
            //cb_coeffVirtAdjust.IsChecked = item1.coeffVirtAdjust;
            //cb_coeffVirtAuto.IsChecked = item1.coeffVirtAuto;
            //cbx_cmpMinn.SelectedIndex = (int)item1.cmpMin;
            //cb_noaddEnd.IsChecked = item1.noAddEnd;
            //cb_noaddAll.IsChecked = item1.noAddAll; 





            //if (list.Count > 1)
            //{
            //    item1 = list[1];
            //    cb2_enabled.IsChecked = item1.enabled;
            //    cbx2Sort.SelectedIndex = (int)item1.type;
            //    tb2_medianne.Text = item1.medianne.ToString();
            //    cb2_quasi.IsChecked = item1.quasi;
            //    cb2_lissage.IsChecked = item1.lissage;
            //    cb2_removeEpsilon.IsChecked = item1.removeEpsilon;
            //    cb2_reSort.IsChecked = item1.reSort;
            //    cb2_removeFirst.IsChecked = item1.removeFirst;
            //    cb2_deleteFirst.IsChecked = item1.deleteFirst;
            //    cbx2_removeLast.SelectedIndex = (int)item1.removeLast;
            //    cb2_cumul.IsChecked = item1.cumul;
            //    cb2_noAdd.IsChecked = item1.noAdd;
            //    tb2_safe.Text = item1.safe.ToString();
            //    tb2_coeff.Text = item1.coeffVirt.ToString();
            //    tb2_exp.Text = item1.expEnabled.ToString();
            //    tb2_zero.Text = Piece.getClassementEquiv(item1.zero);
            //    cb2_removeEnabled.IsChecked = item1.removeEnabled;
            //    cb2_virtOnlyDisabled.IsChecked = item1.virtOnlyDisabled;
            //    cb2_forceCoeffVirt.IsChecked = item1.forceCoeffVirt;
            //    cb2_virtAlignPrec.IsChecked = item1.virtAlignPrec;
            //    cb2_virtAlignSelected.IsChecked = item1.virtAlignSelected;
            //    cb2_coeffVirtAdjust.IsChecked = item1.coeffVirtAdjust;
            //    cb2_coeffVirtAuto.IsChecked = item1.coeffVirtAuto;
            //    cbx2_cmpMinn.SelectedIndex = (int)item1.cmpMin;
            //    cb2_noaddEnd.IsChecked = item1.noAddEnd;
            //    cb2_noaddAll.IsChecked = item1.noAddAll; 
            //}
        }
        void record()
        {
          
            conf.stackSize = Convert.ToInt32(tb_stackSize.Text);
            conf.stackBefore = Convert.ToInt32(tb_stackBefore.Text);
            conf.createCourant = cb_createCourant.IsChecked.Value;
            conf.createInter = cb_createInter.IsChecked.Value;
            conf.createAll = cb_createAll.IsChecked.Value;
            conf.lastModif = dp_date.SelectedDate.Value;
            conf.checkStack = cb_checkStack.IsChecked.Value;
            conf.stackEnabled = cb_stackEnabled.IsChecked.Value;
            conf.stackOnlyNew = cb_only_new.IsChecked.Value; 
          

            first.record();
            if (second != null)
                second.record();

           


            //var list = conf.Composants;
            //var item1 = list[0];
            //item1.enabled = cb_enabled.IsChecked.Value;
            //item1.type = (util.medianneMode)cbxSort.SelectedIndex;
            //item1.medianne = Convert.ToDecimal(tb_medianne.Text);
            //item1.quasi = cb_quasi.IsChecked.Value;
            //item1.lissage = cb_lissage.IsChecked.Value;
            //item1.removeEpsilon = cb_removeEpsilon.IsChecked.Value;
            //item1.reSort = cb_reSort.IsChecked.Value;
            //item1.removeFirst = cb_removeFirst.IsChecked.Value;
            //item1.deleteFirst = cb_deleteFirst.IsChecked.Value;
            //item1.removeLast = (util.removeLast)cbx1_removeLast.SelectedIndex;
            //item1.cumul = cb_cumul.IsChecked.Value;
            //item1.noAdd = cb_noAdd.IsChecked.Value;
            //item1.safe = Convert.ToInt32(tb_safe.Text);
            //item1.coeffVirt = Convert.ToDecimal(tb_coeff.Text);
            //item1.expEnabled = Convert.ToDecimal(tb_exp.Text);
            //var cl = Classement.create(tb_zero.Text);
            //item1.zero = cl.RapportClassement;
            //item1.removeEnabled = cb_removeEnabled.IsChecked.Value;
            //item1.virtOnlyDisabled = cb_virtOnlyDisabled.IsChecked.Value;
            //item1.forceCoeffVirt = cb_forceCoeffVirt.IsChecked.Value;
            //item1.virtAlignPrec = cb_virtAlignPrec.IsChecked.Value;
            //item1.virtAlignSelected = cb_virtAlignSelected.IsChecked.Value;
            //item1.coeffVirtAuto = cb_coeffVirtAuto.IsChecked.Value;
            //item1.coeffVirtAdjust = cb_coeffVirtAdjust.IsChecked.Value;
            //item1.cmpMin = (util.modeMin)cbx_cmpMinn.SelectedIndex;
            //item1.noAddEnd = cb_noaddEnd.IsChecked.Value;
            //item1.noAddAll = cb_noaddAll.IsChecked.Value; 

            //if (list.Count > 1)
            //{
            //    if (cbx2Sort.SelectedIndex == 0)
            //    {
            //        list.RemoveAt(1);
            //        return;
            //    }
            //}
            //else
            //{
            //    if (cbx2Sort.SelectedIndex > 0)
            //    {
            //        item1 = new util.ConfMedianne();
            //        list.Add(item1);
            //    }
            //}

            //if (list.Count > 1)
            //{
            //    item1 = list[1];

            //    item1.enabled = cb2_enabled.IsChecked.Value;
            //    item1.type = (util.medianneMode)cbx2Sort.SelectedIndex;
            //    item1.medianne = Convert.ToDecimal(tb2_medianne.Text);
            //    item1.quasi = cb2_quasi.IsChecked.Value;
            //    item1.lissage = cb2_lissage.IsChecked.Value;
            //    item1.removeEpsilon = cb2_removeEpsilon.IsChecked.Value;
            //    item1.reSort = cb2_reSort.IsChecked.Value;
            //    item1.removeFirst = cb2_removeFirst.IsChecked.Value;
            //    item1.deleteFirst = cb2_deleteFirst.IsChecked.Value;
            //    item1.removeLast = (util.removeLast)cbx2_removeLast.SelectedIndex;
            //    item1.cumul = cb2_cumul.IsChecked.Value;
            //    item1.noAdd = cb2_noAdd.IsChecked.Value;
            //    item1.safe = Convert.ToInt32(tb2_safe.Text);
            //    item1.coeffVirt = Convert.ToDecimal(tb2_coeff.Text);
            //    item1.expEnabled = Convert.ToDecimal(tb2_exp.Text);
            //    item1.zero = Convert.ToDecimal(tb2_zero.Text);

            //    cl = Classement.create(tb2_zero.Text);
            //    item1.zero = cl.RapportClassement;
            //    item1.removeEnabled = cb2_removeEnabled.IsChecked.Value;
            //    item1.virtOnlyDisabled = cb2_virtOnlyDisabled.IsChecked.Value;
            //    item1.forceCoeffVirt = cb2_forceCoeffVirt.IsChecked.Value;
            //    item1.virtAlignPrec = cb2_virtAlignPrec.IsChecked.Value;
            //    item1.virtAlignSelected = cb2_virtAlignSelected.IsChecked.Value;
            //    item1.coeffVirtAuto = cb2_coeffVirtAuto.IsChecked.Value;
            //    item1.coeffVirtAdjust = cb2_coeffVirtAdjust.IsChecked.Value;
            //    item1.cmpMin = (util.modeMin)cbx2_cmpMinn.SelectedIndex;
            //    item1.noAddEnd = cb2_noaddEnd.IsChecked.Value;
            //    item1.noAddAll = cb2_noaddAll.IsChecked.Value; 
            //}
        }

        private void bt_cancel_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        private void bt_ok_Click(object sender, RoutedEventArgs e)
        {
            record();
            Close();
            conf.Calcul();
            App.go();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {

        }




        //public string CoeffEnabled
        //{
        //    get { return tb_coeffEnabled.Text; }
        //}

        public bool DuplicateItem
        {
            get
            {
                bool ret = cb_idem.IsChecked.Value;
                _idem = ret;
                return ret;
            }
        }
        private void tb_safe_KeyUp(object sender, System.Windows.Input.KeyEventArgs e)
        {
            first.onchange();

            if (second != null)
                second.onchange();
        }

        private void bt_coul_Click(object sender, RoutedEventArgs e)
        {
            new ConfCouleurs().Show();
        }

        private void cb_idem_Click(object sender, RoutedEventArgs e)
        {
            first.checkIdem();
            if (second != null)
                second.checkIdem();
        }

        private void bt_debug_Click(object sender, RoutedEventArgs e)
        {
            var w = new Debug(conf);
            w.Show(); 
        }

        private void bt_compact_Click(object sender, RoutedEventArgs e)
        {
            Condenseur.deleteFile();
            App.gen.GoCompact();
            App.go(); 
        }

        private void btBd_Click(object sender, RoutedEventArgs e)
        {
            var pl = PlayListViewModel.SelectedPlayList;
            var listT = pl.ExportTracks;
            var list = new List<CPiece>();
            var hs = new HashSet<int>(); 
            int count = Convert.ToInt32(tb_nb.Text);
            string file = tb_path.Text;
            int nb = 0; 
            for (int i = 0; i < listT.Count; i++)
            {
                var track = listT[i];
                if (track.album.Virtual)
                    continue; 
                var p = track.Piece;
                if (hs.Add(p.PieceId))
                {
                    list.Add(p);
                    nb++;
                    if (nb >= count)
                        break;
                }
            }
            App.Db.export(file, list); 
        }

    }
}
]]></content>
  </file>
  <file path="\PieceDb.Db\CDb.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading;
using System.Xml;
using pdb.db.obj;
using pdb.db.piece.data;
using pdb.obj;
using pdb.util;
using Math = System.Math;

namespace pdb.db
{
    public enum mergePriority
    {
        left = -1,
        right = 1,
        none = 0
    }
    /// <summary>
    /// g�re la persistence
    /// </summary>  
    /// <remarks></remarks>
    public class CDb
    {
        public const int CURRENT_VERSION = 3;
        public static int Version;

        const string SEQ_PIECE = "seq_piece";
        const string SEQ_LIST = "seq_list";
        private static int pieceSequenceId = 0;
        private static int listSequenceId = 0;
        private static int getPieceNextId { get { pieceSequenceId++; return pieceSequenceId; } }
        private static int getListNextId { get { listSequenceId++; return listSequenceId; } }
        private FileInfo LOCAL_FILE;
        private FileInfo REMOTE_FILE;
        private FileInfo LastFullFile;
        private FileInfo DiffFile;
        private FileInfo SOV;
        private CListPiece m_list;
        private CListPiece lastFull; private CListPiece remoteOrg;
        private CListPiece trace;
        private DateTime now;
        private string sovRep;
        private DateTime lastSov;
        private int nbOpe;

        private bool loadRemote;
        private bool loadTrace;
        //private bool loadLastFull;
        //private bool loadDiff;



        private FileInfo remoteTrace;
        private DataConf conf;

        private dbMode mode;
        public dbMode Mode { get { return mode; } }
        public CDb(DataConf conf)
        {
            this.conf = conf;
            LOCAL_FILE = conf.dbLocal;
            REMOTE_FILE = conf.dbRemote;
            remoteTrace = conf.dbTrace;
            LastFullFile = conf.dbLastFull;
            DiffFile = conf.dbDiff;
            SOV = conf.dbSov;
            this.mode = conf.mode;

            init();
        }

        public string DefaultFolder { get { return conf.defaultFolder; } }

        private void init()
        {
            this.now = DateTime.Now;
            lastSov = now;
            sovRep = now.ToString("yy-MM-dd_HH-mm-ss");



            System.DateTime l_localDate = System.DateTime.MinValue;
            System.DateTime l_remoteDate = System.DateTime.MinValue;

            if (LOCAL_FILE.Exists)
                l_localDate = LOCAL_FILE.LastWriteTime;
            if (REMOTE_FILE.Exists)
                l_remoteDate = REMOTE_FILE.LastWriteTime;


            TimeSpan l_dif = l_localDate.Subtract(l_remoteDate);
            double l_sec = l_dif.TotalSeconds;
            if (REMOTE_FILE.Exists)
            {

                if (Math.Abs(l_sec) > 3 || (LOCAL_FILE.Exists && REMOTE_FILE.Length != LOCAL_FILE.Length))
                {
                    loadRemote = true;
                }
                else
                {
                    log("not load remote, same file");
                }
            }
            else
            {
                log("remote file does not exist");
            }

            if (remoteTrace != null && remoteTrace.Exists)
                loadTrace = true;




        }

        public void loadData()
        {
            // cas diff-> je mémorise lastFull, je r�cup�re l'instantan�
            // cas full -> je ne m�morise pas lastFull, je r�cup�re le diff et fait le merge

            // gestion des diff
            //if (mode == dbMode.diff)
            //{
            // je sauvegarde lastFull
            misc.log("mode:{0}  LastFullFile.Exists: {1} DiffFile.Exists: {2}", mode, LastFullFile.Exists, DiffFile.Exists);
            if (mode == dbMode.diff)
            {
                if (LastFullFile.Exists)
                {
                    log("load lastFull");
                    lastFull = loadData(LastFullFile);
                }
                else
                {
                    log("load local for lastFull");
                    lastFull = loadData(LOCAL_FILE);
                    File.Copy(LOCAL_FILE.FullName, LastFullFile.FullName, true);
                }

                log("load local");
                m_list = loadData(LOCAL_FILE);
            }

            else
            {

                log("load local");
                m_list = loadData(LOCAL_FILE);
                if (DiffFile.Exists)
                {


                    log("load diff");
                    var diff = loadData(DiffFile);


                    log("consolid diff and local");
                    foreach (CPiece pdiff in diff)
                    {
                        m_list.Consolid(pdiff, mergePriority.right);
                    }

                    var sov = DiffFile.FullName.Replace(".xml", ".sov.xml");
                    DiffFile.CopyTo(sov, true);
                    DiffFile.Delete();


                    write();

                    log("load local consolidé for lastFull");
                    lastFull = loadData(LOCAL_FILE);
                    File.Copy(LOCAL_FILE.FullName, LastFullFile.FullName, true);
                    addToZip(true, LOCAL_FILE.FullName);
                }
                else
                {
                    log("load local for lastFull");
                    lastFull = loadData(LOCAL_FILE);
                    File.Copy(LOCAL_FILE.FullName, LastFullFile.FullName, true);

                    if (loadRemote)
                    {
                        log("load remote");
                        remoteOrg = loadData(REMOTE_FILE);
                        log("consolid remote and local");
                        m_list.Consolid(remoteOrg);
                    }
                }
            }


            if (loadTrace)
            {
                log("load trace");
                trace = loadData(remoteTrace);
            }
        }

        public void eraseClassementForEnabled()
        {

            foreach (CPiece piece in m_list)
            {
                if (piece.Enabled)
                {
                    piece.eraseClassement();
                }
            }
        }

        public List<ITrackIdentity> Files
        {
            get
            {
                return new List<ITrackIdentity>(m_list.getList());
            }
        }

        // r�cup�ration des infos externes
        public void LegacyConsolid(CListPiece list, DateTime date)
        {
            misc.log("Cdb::LegacyConsolid");

            DateTime now = DateTime.Now;
            ChronoData.refreshDate(date);

            foreach (CPiece ext in list)
            {
                m_list.legacyConsolid(ext);
            }

            m_list.bilanNatives();

            // setAlbumArtistFromFile();

        }

        public void LegacyConsolid(CPiece ext)
        {
            m_list.legacyConsolid(ext);
        }

        public void SynchroNative(DateTime date)
        {
            misc.log("Cdb::SynchroNative");
            ChronoData.refreshDate(date);
            foreach (CPiece piece in m_list)
            {
                piece.SynchroNative();
            }

        }

        //private void setAlbumArtistFromFile()
        //{
        //    foreach (ITrackMetaData piece in m_list)
        //    {
        //        setAlbumArtistFromFile(piece);
        //    }
        //}



        private void setAlbumArtistFromFile(ITrackMetaData piece)
        {

            try
            {
                string location = piece.Location;
                if (location.isNullorEmpty())
                    return;
                FileInfo file = new FileInfo(location);
                DirectoryInfo dAlbum = file.Directory;
                string dirAlbum = dAlbum.Name;
                string dirArtist = dAlbum.Parent.Name;
                string artist = piece.Artist;
                string album = piece.Album;

                string newArtist = artist;
                string newAlbum = album;




                if (artist.isNullorEmpty())
                {
                    if (!TrackIdentity.UNKNOW_ARTIST.Equals(dirArtist))
                        newArtist = dirArtist;
                    //if (!UNKNOW_ARTIST.Equals(newArtist))
                    //    piece.Artist = newArtist;
                }

                if (album.isNullorEmpty())
                {
                    if (!dirAlbum.Contains(TrackIdentity.UNKNOW_ALBUM))
                    {
                        newAlbum = dirAlbum;
                        if (newArtist.NotNullOrEmpty())
                        {
                            if (!TrackIdentity.UNKNOW_ARTIST.Equals(newArtist))
                                newAlbum = newAlbum.Replace(newArtist, "");
                        }
                    }
                }

                //if (TrackIdentity.UNKNOW_ARTIST.Equals(newArtist))
                //    piece.Artist = "";
                //else 
                if (newArtist != artist)
                    piece.Artist = newArtist;

                //if (TrackIdentity.UNKNOW_ALBUM.Equals(newAlbum))
                //    piece.Album = "";
                //else
                if (newAlbum != album)
                    piece.Album = newAlbum;

            }
            catch (Exception e)
            {
                misc.log(e.ToString());
            }
        }



        #region "sauvegarde"



        public void Sov(string fileIt)
        {
            if (SOV == null)
                return;
            var list = new List<string> { fileIt, LOCAL_FILE.FullName };
            if (loadRemote)
                list.Add(REMOTE_FILE.FullName);
            if (loadTrace)
                list.Add(remoteTrace.FullName);

            ZipUtil.compress(SOV.FullName, sovRep, list);
        }

        public void SovIni()
        {
            if (SOV == null)
                return;
            var list = new List<string> { LOCAL_FILE.FullName, LastFullFile.FullName, DiffFile.FullName };
            if (loadRemote)
                list.Add(REMOTE_FILE.FullName);
            if (loadTrace)
                list.Add(remoteTrace.FullName);

            list.AddRange(conf.othersIni);

            ZipUtil.compress(SOV.FullName, sovRep, list);
        }


        #endregion

        public void removeVersions()
        {
            misc.log("Suppression des versions !!!");
            foreach (CPiece piece in m_list)
            {
                piece.removeVersions();
            }
        }

        public void Menage()
        {
            foreach (CPiece piece in m_list)
            {
                piece.Menage();
            }
        }

        public void WriteDB1()
        {

            misc.log("CDb:WriteDB1");

            lock (lockSave)
            {
                write();
                File.Copy(REMOTE_FILE.FullName + ".tmp", REMOTE_FILE.FullName, true);
                misc.log("CDb:fin WriteDB1");
            }

        }
        public void saveAsync()
        {
            lock (this)
            {
                _goSave = true;
                if (thSave == null)
                {
                    thSave = new Thread(loopSave);
                    thSave.Start();
                }
            }
        }
        private Thread thSave;
        private bool _goSave;
        private volatile object lockSave = new object();

        public void export(string filename, List<CPiece> l)
        {

            var list = new List<CPiece>();
            var hs = new HashSet<int>();
            foreach (CPiece p in l)
            {
                if (hs.Add(p.PieceId))
                    list.Add(p);
                if (p.PieceParentId > 0)
                {
                    var parent = m_list.getPiece(p.PieceParentId);
                    if (hs.Add(parent.PieceId))
                        list.Add(p); 
                }
            }

            m_list.Sort(list); 

            var f = conf.getFilename(filename);
            var settings = new XmlWriterSettings();
            settings.Indent = true;
            settings.Encoding = Encoding.UTF8;
            using (XmlWriter writer = XmlWriter.Create(f, settings))
            {
                writer.WriteStartElement("db");
                writer.WriteAttributeString("version", CURRENT_VERSION.ToString());
                writer.WriteAttributeString(SEQ_PIECE, pieceSequenceId.ToString());
                writer.WriteAttributeString(SEQ_LIST, listSequenceId.ToString());


                writer.WriteStartElement(CListPiece.PIECES);

                foreach (CPiece l_piece in list)
                {
                    l_piece.write(writer);
                }
                writer.WriteEndElement();   


                writer.WriteEndDocument();
                writer.Flush();
            }
        }

        private void write()
        {
            var settings = new XmlWriterSettings();
            settings.Indent = true;
            settings.Encoding = Encoding.UTF8;
            using (XmlWriter writer = XmlWriter.Create(REMOTE_FILE.FullName + ".tmp", settings))
            {
                writer.WriteStartElement("db");
                writer.WriteAttributeString("version", CURRENT_VERSION.ToString());
                writer.WriteAttributeString(SEQ_PIECE, pieceSequenceId.ToString());
                writer.WriteAttributeString(SEQ_LIST, listSequenceId.ToString());
                m_list.write(writer);
                writer.WriteEndDocument();
                writer.Flush();
            }

            File.Copy(REMOTE_FILE.FullName + ".tmp", REMOTE_FILE.FullName, true);



            if (lastFull != null)
            {
                try
                {
                    var diff = DiffFile.FullName;
                    if (mode == dbMode.full)
                        diff = diff.Replace(".xml", ".d.xml");

                    using (XmlWriter writer = XmlWriter.Create(diff + ".tmp", settings))
                    {
                        writer.WriteStartElement("db");
                        writer.WriteAttributeString("version", CURRENT_VERSION.ToString());
                        writer.WriteAttributeString(SEQ_PIECE, pieceSequenceId.ToString());
                        m_list.writeDiff(writer, lastFull);
                        writer.WriteEndDocument();
                        writer.Flush();
                    }

                    File.Copy(diff + ".tmp", DiffFile.FullName, true);
                }
                catch (Exception ex)
                {
                    misc.log(ex.ToString());
                }
            }

            WriteDB2();
        }
        private void loopSave()
        {
            while (true)
            {
                Thread.Sleep(1000);
                if (!_goSave)
                    continue;
                lock (this)
                    _goSave = false;

                lock (lockSave)
                {

                    try
                    {
                        write();
                    }
                    catch (Exception ex)
                    {
                        misc.log(ex.ToString());
                        lock (this)
                            _goSave = true;
                    }
                }

            }
        }

        public void WriteDB2()
        {

            misc.log("CDb:WriteDB2");
            lock (lockSave)
                REMOTE_FILE.CopyTo(LOCAL_FILE.FullName, true);
            misc.log("CDb:WriteDB2");

            nbOpe++;
            var now = DateTime.Now;
            var ts = now - lastSov;
            if (nbOpe >= conf.sovNb || ts > conf.sovMin)
            {
                nbOpe = 0;
                lastSov = now;
                DiffFile.Refresh();
                if (DiffFile.Exists)
                {
                    var list = new List<string> { DiffFile.FullName };
                    list.AddRange(conf.othersDiff);
                    addToZip(true, list.ToArray());
                    //var cp = DiffFile.DirectoryName + Path.DirectorySeparatorChar + now.ToString("yy-MM-dd_HH-mm-ss") + DiffFile.Name;
                    //DiffFile.CopyTo(cp);
                    //var list = new List<string> { cp };
                    //ZipUtil.compress(SOV.FullName, sovRep, list);
                    //File.Delete(cp); 
                }


            }
        }

        private void addToZip(bool withHorodate, params string[] list)
        {
            ZipUtil.compress(SOV.FullName, sovRep, list, withHorodate);
        }


        public CListPiece List
        {
            get
            {
                return m_list;

            }

        }

        public CListPiece Remote
        {
            get
            {
                if (loadRemote)
                    return remoteOrg;
                return null;
            }

        }

        public CListPiece Trace
        {
            get { return trace; }
        }

        private XmlElement loadList(FileInfo file, List<CPiece> list)
        {
            XmlElement root = null;
            if (file.Exists)
            {
                XmlDocument l_doc = new XmlDocument();


                l_doc.Load(file.FullName);

                root = l_doc.DocumentElement;
                var xmlTool = new XMLTool(root);
                var version = xmlTool.getIntAttValue("version");
                if (version > 0)
                    Version = version;


                var seqPiece = xmlTool.getIntAttValue(SEQ_PIECE);
                if (seqPiece > pieceSequenceId)
                {
                    pieceSequenceId = seqPiece;
                }

                var seqList = xmlTool.getIntAttValue(SEQ_LIST);
                if (seqList > listSequenceId)
                {
                    listSequenceId = seqList;
                }

                var pieceRoot = root;
                if (version > 0)
                    pieceRoot = root.ChildNodes[0] as XmlElement;



                foreach (XmlElement l_xml in pieceRoot.ChildNodes)
                {
                    CPiece l_piece = new CPiece(l_xml);

                    list.Add(l_piece); //TODO provisoire
                    if (version > 0)
                        checkId(l_piece);
                    else
                    {
                        if (m_list != null)
                        {
                            m_list.checkId(l_piece);
                        }
                        checkId(l_piece);
                    }
                    //}
                }
                misc.log("aux list: " + list.Count);




            }
            else
            {

            }

            return root;
        }



        private CListPiece loadData(FileInfo file)
        {
            if (file.Exists)
            {

                List<CPiece> l_list = new List<CPiece>();
                var root = loadList(file, l_list);


                misc.log("aux list: " + l_list.Count);
                System.DateTime l_date = file.LastWriteTime; // File.GetLastWriteTime(a_path);

                //chasse aux doublons
                CListPiece l_ret = new CListPiece(l_list, l_date);
                misc.log(" list: " + l_ret.Count);

                var xLists = XMLTool.NodeLookUp(root, CListPiece.TOKEN_LISTS);

                l_ret.loadListes(xLists);
                return l_ret;
            }
            else
            {
                return new CListPiece();
            }

        }

        public static void checkId(CPiece l_piece)
        {
            if (l_piece.PieceId < 0)
                l_piece.setId(getPieceNextId);
            if (l_piece.PieceId > pieceSequenceId)
                pieceSequenceId = l_piece.PieceId;
        }

        public static void checkId(CPlayList pl)
        {
            if (pl.ID < 0)
                pl.ID = getListNextId;
            if (pl.ID > listSequenceId)
                listSequenceId = pl.ID;
        }
        private void log(String txt)
        {
            misc.log(txt);
        }

        public CPiece getPiece(string location)
        {
            return m_list.getPiece(location);
        }

        public CPiece getPiece(int id)
        {
            return m_list.getPiece(id);
        }
    }


}


]]></content>
  </file>
  <file path="\PieceDb.Db\CListPiece.cs">
    <content><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using pdb.db.obj;
using pdb.obj;
using pdb.util;
/// <summary>
/// Liste de pieces contenues dans un fichier
/// Liste de pieces � sauvegarder
/// </summary>
/// <remarks>
/// La liste doit s'assurer de l'absence de doublons
/// maintenir une r�f�rence unique pour un morceau
/// 
/// 
/// </remarks>
namespace pdb.db
{
    public interface IReference
    {
        void referenceChange(CPiece piece);
    }

    public class CListPiece : IData, IReference
    {

        public const string TOKEN_LISTS = "lists";
        public const string TOKEN_LIST = "l";
        public const string TOKEN_LIST_NAME = "n";
        public const string TOKEN_LIST_TRACK = "t";

        private System.DateTime m_date = System.DateTime.MinValue;

        private DictRef<CPiece> ht = new DictRef<CPiece>();
        private BgDict<int, CPiece> htIds = new BgDict<int, CPiece>();
        private BgDictString<CPiece> htLoc = new BgDictString<CPiece>();
        private CPlayList listes = new CPlayList("listes");
        public CPlayList Listes { get { return listes; } }

        public const string PIECES = "pieces";
        #region "constructeurs"
        /// <summary>
        /// Création à partir d'une simple collection de Piece
        /// </summary>
        /// <param name="a_list"></param>
        /// <remarks>recherche doublons - merge manuel �ventuel</remarks>
        public CListPiece(ICollection<CPiece> a_list, System.DateTime a_date)
            : this()
        {
            m_date = a_date;
            foreach (CPiece l_file in a_list)
            {
                htIds[l_file.PieceId] = l_file;
                foreach (CFile file in l_file.Files)
                {
                    htLoc[file.Path] = l_file;
                }
            }

            foreach (CPiece piece in a_list)
            {
                int parentId = piece.PieceParentId;
                if (parentId > 0)
                {
                    piece.setParent( htIds[parentId]);
                }

                //if (!piece.Exists)
                //{
                //    misc.log("absent: {0}", piece.PathAndRef + " " + piece.Comment);
                //}
            }



            //DateTime maxEnabled = DateTime.MinValue;
            foreach (CPiece l_file in a_list)
            {
                Add(l_file);
                //if (l_file.Enabled)
                //{
                //    var t = l_file.LastModifClass;
                //    if (t > maxEnabled)
                //        maxEnabled = t;
                //}
            }
            //misc.log("***********************************************************");
            //misc.log("maxEnabled: {0}", maxEnabled);
            //misc.log("***********************************************************");
        }

        public CListPiece()
        {

        }

        #endregion


        public void checkId(CPiece toCheck)
        {
            foreach (CFile f in toCheck.Files)
            {
                if (htLoc.ContainsKey(f.Path))
                {
                    var pOrg = htLoc[f.Path];
                    toCheck.setId(pOrg.PieceId);
                    toCheck.PieceParentId = pOrg.PieceParentId;
                }
            }
        }

        /// <summary>
        /// merge de la base locale et distante
        /// </summary>
        /// <param name="a_remote"></param>
        /// <remarks></remarks>
        public void Consolid(CListPiece a_remote)
        {
            log("ListPiece:Consolid");
            mergePriority l_remotePriority = mergePriority.none;
            System.DateTime l_remoteDate = a_remote.m_date;
            if (l_remoteDate > System.DateTime.MinValue && l_remoteDate.AddSeconds(-3) > m_date)
                l_remotePriority = mergePriority.right;
            foreach (CPiece l_file in a_remote)
            {
                Consolid(l_file, l_remotePriority);
            }

        }

        public void bilanNatives()
        {
            misc.log("Bilan Natives");
            foreach (CPiece piece in this)
            {
                if (piece.HasNoNative)
                    misc.logNoDate(piece.ToString());
            }
        }

        private void merge(CPiece org, CPiece cand)
        {
            misc.log("CList:Add MERGE with key {0}: {1} // {2}", org.Key, org, cand);
            org.merge(cand);
        }

        public void AddOrMerge(CPiece piece, CPiece org)
        {          
            if (org != null)
            {              
                org.consolid(piece, mergePriority.right); 
            }
            else
            {
                ht.set(piece, piece.Key);

                piece.addReferenceObs(this);
                CDb.checkId(piece);
                htIds[piece.PieceId] = piece;
                foreach (CFile file in piece.Files)
                {
                    htLoc[file.Path] = piece;
                }

            }
        }


        public void Add(CPiece piece)
        {
            TrackIdentity key = piece.Key;

            CPiece org = null;

            // recherche d'une piece avec un niveau de d�tail �gal ou inf�rieur
            org = ht[key];


            if (org != null)
            {
                misc.log("CList:Add MERGE {0}", key);
                org.merge(piece);
            }
            else
            {
                ht.set(piece, piece.Key);

                piece.addReferenceObs(this);
                CDb.checkId(piece);
                htIds[piece.PieceId] = piece;
                foreach (CFile file in piece.Files)
                {
                    htLoc[file.Path] = piece;
                }

            }
        }


        public void fusion(CPiece master, CPiece toDelete)
        {
            if (master == null)
                return;
            if (toDelete == null)
                return;
            if (master == toDelete)
                return;
            misc.log("CList:Fusion  {0}  {1}", master, toDelete);
            master.addData(toDelete);
            ht.Remove(toDelete);
            htIds.Remove(toDelete.PieceId);

        }

        public void delete(CPiece toDelete)
        {
            if (toDelete == null)
                return;
            ht.Remove(toDelete);
            htIds.Remove(toDelete.PieceId);
            foreach (CFile file in toDelete.Files)
            {
                htLoc.Remove(file.Path);
            }
        }

        public void referenceChange(CPiece piece)
        {
            piece.keyGener();
            ht.Remove(piece);

            piece.keyGener();
            ht.set(piece, piece.Key);

        }






        public bool Contains(CPiece piece)
        {
            var key = piece.Key;
            return ht[key] != null;
        }

        public void Consolid(CPiece remote, mergePriority a_priority)
        {
            if (remote.PieceParentId > 0)
            {
                if (remote.Parent == null)
                    remote.Parent = htIds[remote.PieceParentId];


            }
            CPiece l_pieceOrg = getPiece(remote);

            if (l_pieceOrg == null)
            {
                if (!remote.Deleted)
                {
                    l_pieceOrg = new CPiece();
                    l_pieceOrg.consolid(remote, a_priority);
                    Add(l_pieceOrg);
                }
                else
                    misc.log("remote deleted!! Pourquoi je le trouve pas ?? {0}", remote);
            }
            else
            {
                if (remote.Deleted && a_priority == mergePriority.right)
                {
                    l_pieceOrg.Deleted = true;
                    return;
                }
                if (remote.PieceParentId > 0)
                {
                    var parent = htIds[remote.PieceParentId];
                    misc.log(l_pieceOrg + " a maintenant un parent: " + parent);
                    l_pieceOrg.PieceParentId = remote.PieceParentId;
                    l_pieceOrg.Parent = parent;
                }
                //if (remote.PieceId > 0 && l_pieceOrg.PieceId < 0)
                //    l_pieceOrg.Parent = htIds[remote.PieceParentId];
                l_pieceOrg.consolid(remote, a_priority);
            }
        }

        /// <summary>
        /// synchro enrte base locale et liste native
        /// </summary>
        /// <param name="native"></param>
        /// <remarks></remarks>
        public void legacyConsolid(CPiece native)
        {
            CPiece l_pieceOrg = getPiece(native);

            if (l_pieceOrg == null)
            {
                log("add from business:" + native.ToString());
                l_pieceOrg = new CPiece(native);
                l_pieceOrg.legacyConsolid(native);
                Add(l_pieceOrg);
            }
            else
            {
                l_pieceOrg.legacyConsolid(native);
            }

        }

        private CPiece getPiece(TrackIdentity key)
        {
            return ht[key];
        }

        public CPiece getPiece(ITrackMetaData a_piece)
        {
            TrackIdentity key = a_piece.Key;
            return getPiece(key);
        }

        public CPiece getPiece(CPiece a_piece)
        {
            TrackIdentity key = a_piece.Key;
            return getPiece(key);
        }

        public CPiece getPiece(string location)
        {
            return htLoc[location];
        }

        public CPiece getPiece(int id)
        {
            return htIds[id];
        }

        private bool exists(CPiece a_piece)
        {
            return getPiece(a_piece) != null;
        }

        #region IData Members
        public void write(ITextWriter a_sw)
        {
            XMLTool.openBalise(a_sw, PIECES);
            foreach (CPiece l_piece in this)
            {
                l_piece.write(a_sw);
            }
            XMLTool.closeBalise(a_sw, PIECES);
        }

        public void write(System.Xml.XmlWriter w)
        {
            w.WriteStartElement(PIECES);

            foreach (CPiece l_piece in getList())
            {
                l_piece.write(w);
            }
            w.WriteEndElement();
            w.WriteStartElement(TOKEN_LISTS);
            writeList(w, listes);
            w.WriteEndElement();
        }

        public void writeDiff(System.Xml.XmlWriter w, CListPiece lastFull)
        {
            w.WriteStartElement(PIECES);

            foreach (CPiece l_piece in getList())
            {
                var org = lastFull.getPiece(l_piece.PieceId);
                try
                {
                    l_piece.writeDiff(w, org);
                }
                catch (Exception ex)
                {
                    misc.log("impossible d'enregistrer les modifs de " + l_piece, ex.ToString());  
                }
            }

            foreach (CPiece org in lastFull)
            {
                var newP = this.getPiece(org.PieceId);
                if (newP == null)
                {
                    org.Deleted = true;
                    org.writeDeleted(w);
                }
            }
            w.WriteEndElement();
        }

        #endregion


        public IEnumerator GetEnumerator()
        {
            return ht.GetEnumerator();
        }

        public int Count
        {
            get { return ht.Count; }
        }
        //public System.Collections.Generic.IEnumerator<CPiece> GetEnumerator1()
        //{
        //    return ht.GetEnumerator1();
        //}
        //System.Collections.Generic.IEnumerator<CPiece> System.Collections.Generic.IEnumerable<CPiece>.GetEnumerator()
        //{
        //    return GetEnumerator1();
        //}

        public List<CPiece> getList()
        {
            var list = new List<CPiece>(ht.Count);
            foreach (CPiece p in ht)
            {
                if (!p.Deleted)
                    list.Add(p);
            }

            Sort(list); 

            return list;
        }

        public void Sort(List<CPiece> list)
        {
            list.Sort(new PieceComparer());
        }

        private class PieceComparer : IComparer<CPiece>
        {
            public int Compare(CPiece x, CPiece y)
            {
                int cmp = x.MasterId.CompareTo(y.MasterId);
                if (cmp != 0)
                    return cmp;
                cmp = x.PieceParentId.CompareTo(y.PieceParentId);
                if (cmp != 0)
                    return cmp;
                return x.PieceId.CompareTo(y.PieceId);
            }
        }

        private void log(String txt)
        {
            misc.log(txt);
        }


        #region listes
        public void loadListes(XmlElement xml)
        {
            if (xml == null)
                return;
            buildList(xml, listes);
        }

        private void buildList(XmlElement xparent, CPlayList parent)
        {
            foreach (XmlElement xsub in xparent.ChildNodes)
            {
                var tool = new XMLTool(xsub);
                if (xsub.Name == TOKEN_LIST)
                {
                    string name = tool.getAttValue(TOKEN_LIST_NAME);
                    int id = tool.getIntAttValue("id");
                    CPlayList sub = new CPlayList(name, parent);
                    sub.ID = id;
                    CDb.checkId(sub);
                    buildList(xsub, sub);
                }
                else if (xsub.Name == TOKEN_LIST_TRACK)
                {
                    int id = tool.getIntAttValue("id");
                    var piece = htIds[id];
                    var tl = new TrackList(piece);
                    parent.add(tl);
                }
            }
        }

        private void writeList(XmlWriter w, CPlayList parent)
        {
            foreach (PlComponent c in parent)
            {
                if (c is CPlayList)
                {
                    var pl = c as CPlayList;
                    w.WriteStartElement(TOKEN_LIST);
                    w.WriteAttributeString("id", pl.ID.ToString());
                    w.WriteAttributeString(TOKEN_LIST_NAME, pl.Name);
                    writeList(w, pl);
                    w.WriteEndElement();
                }
                else if (c is TrackList)
                {
                    var t = c as TrackList;
                    w.WriteStartElement(TOKEN_LIST_TRACK);
                    w.WriteAttributeString("id", t.PieceId.ToString());
                    w.WriteEndElement();
                }
            }
        }

        public void buildLists(CPlayList listes)
        {
            this.listes.DeleteChilds();
            buildList(this.listes, listes);
        }

        private void buildList(CPlayList mine, CPlayList ext)
        {
            foreach (PlComponent c in ext)
            {
                if (c is CPlayList)
                {
                    var subExt = c as CPlayList;
                    var sub = new CPlayList(subExt.Name, mine);
                    sub.ID = subExt.ID;
                    CDb.checkId(sub);
                    subExt.ID = sub.ID;

                    buildList(sub, subExt);
                }
                else
                {
                    var t = c as IFile;
                    var piece = htIds[t.PieceId];
                    mine.add(new TrackList(piece));
                }
            }
        }
        #endregion
    }

}






]]></content>
  </file>
  <file path="\PieceDb.Db\DataConf.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Xml;
using pdb.util;

namespace pdb.db
{

    public class DataConf : TuningBase
    {
        public readonly FileInfo dbLocal;
        public readonly FileInfo dbRemote;
        public readonly FileInfo dbTrace;
        public readonly FileInfo dbSov;
        public readonly FileInfo dbLastFull;
        public readonly FileInfo dbDiff;
        public readonly dbMode mode;
        public int sovNb = 10;
        public TimeSpan sovMin = TimeSpan.FromHours(1);

        public string sZip = @"C:\Program Files\7-Zip\7z.exe";
        public readonly string defaultFolder;
        private string root;
        public List<string> othersIni = new List<string>();
        public List<string> othersDiff = new List<string>();

        public string getFilename(string str)
        {
            return root + str;
        }

        public DataConf(XmlElement node)
            : base()
        {
            if (node == null)
                return;

            root = DIR_CONF;

            var dataNode = XMLTool.NodeLookUp(node, "data");
            if (dataNode == null)
                return;

            var att = dataNode.Attributes["root"];
            if (att != null)
            {
                root = root + att.Value;
            }
            this.child = dataNode;
            XMLTool l_xmlConf = new XMLTool(dataNode);
            string str = l_xmlConf.getNodeValue("dbLocal");
            dbLocal = new FileInfo(getFilename(str));

            str = l_xmlConf.getNodeValue("dbRemote");
            dbRemote = new FileInfo(getFilename(str));

            str = l_xmlConf.getNodeValue("dbSov");
            if (string.IsNullOrEmpty(str))
                dbSov = null;
            else
                dbSov = new FileInfo(DIR_CONF + str);

            str = l_xmlConf.getNodeValue("dbTrace");
            dbTrace = new FileInfo(getFilename(str));

            str = l_xmlConf.getNodeValue("dbLastFull");
            dbLastFull = new FileInfo(getFilename(str));

            str = l_xmlConf.getNodeValue("dbDiff");
            dbDiff = new FileInfo(getFilename(str));

            str = l_xmlConf.getNodeValue("mode");
            if (!string.IsNullOrEmpty(str))
                mode = (dbMode)Enum.Parse(typeof(dbMode), str);


            str = l_xmlConf.getNodeValue("zip");
            sZip = str;

            defaultFolder = l_xmlConf.getNodeValue("defaultFolder");

            buildi("sovNb", (v) => sovNb = v);
            double _deltaMin = -1;
            buildd("sovMin", (v) => _deltaMin = v);
            if (_deltaMin > 0)
                sovMin = TimeSpan.FromMinutes(_deltaMin);

            var xother = XMLTool.NodeLookUp(dataNode, "others");
            if (xother != null)
            {
                foreach (XmlNode xsub in xother.ChildNodes)
                {
                    if (xsub is XmlElement)
                    {
                        var name = xsub.Name;
                        var content = DIR_CONF + xsub.InnerText;
                        if (name == "ini")
                            othersIni.Add(content);
                        else if (name == "diff")
                            othersDiff.Add(content);
                    }
                }
            }

        }
        public string Zip { get { return sZip; } }
    }
}
]]></content>
  </file>
</db>
