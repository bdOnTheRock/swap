<db path="C:\bernard\db1\db4">
  <file path="\pdb.player\App.xaml.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Threading;
using pdb.db;
using pdb.db.piece.data;
using pdb.gen;
using pdb.gen.conf;
using pdb.gen.Tuning;
using pdb.obj;
using pdb.ordo;
using pdb.player.ViewModel;
using pdb.player.ViewModel.Commande.PlayList;
using pdb.player.ViewModel.gen;
using pdb.player.Vue;
using pdb.util;
using pdb.db.obj;
using pdb.gen.albums;
using System.Linq;
using System.Linq.Expressions;
using System.Windows.Input;

namespace pdb.player
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application, IIhm
    {
        public static Logger log = Logger.getLogger("Program");
        public static Logger logPerf = Logger.getLogger("Perf");
        public static CDb Db;
        public static Consolid gen;
        //  public static LegacyApp app;
        // internal static HomeLoader loader;
        internal static BibViewModel bib;
        static int step = -5;
        public const string PHASE1 = "PHASE1";
        public const string PHASE2 = "PHASE2";

        private static Export export;
        private static Import import;
        public static DispatcherPriority DISPATCHER_PRIORITY = DispatcherPriority.Normal;

        public static void setDispatcherPriority()
        {
            var str = CConf.DispatcherPriority;
            if (!string.IsNullOrEmpty(str))
            {
                DISPATCHER_PRIORITY = (DispatcherPriority)Enum.Parse(typeof(DispatcherPriority), str);
            }
        }

        private class UIItem
        {
            public readonly Action action;
            public readonly IClient client;
            public UIItem(Action action, IClient client)
            {
                this.action = action;
                this.client = client;
            }
        }

        private pdb.util.Queue<UIItem> uiItems = new util.Queue<UIItem>();
       // private DispatcherTimer uiTimer;


        static ILogger logDispatch;
        public static void Dispatch(Action action, IClient client)
        {
            Instance.dispatch(action, client);
        }
        public void dispatch(Action action, IClient client)
        {
            if (!client.HasLog)
                client.Log = logDispatch;
            //if (uiTimer == null)
            //{

            //    lock (_lock)
            //    {
            //        if (uiTimer == null)
            //        {
            //            uiTimer = new DispatcherTimer();

            //        }
            //    }
            //}

            if (!CheckAccess())
            {
                client.log("async");
                client.isAsync = true;
                Dispatcher.BeginInvoke(action, DISPATCHER_PRIORITY);
            }
            else
            {
                Dispatcher.BeginInvoke(action, DISPATCHER_PRIORITY);
                //action();
            }
        }

        //public void dispatchLessPrior(Action action, IClient client)
        //{
        //    Dispatcher.BeginInvoke(action, DispatcherPriority.ApplicationIdle);
        //}



        private void syncAction(Action action, IClient client)
        {
            client.log("debut Effectif");
            action();
            client.log("fin");
        }

        private static Thread thLoop;
        private static bool __go;
        private static bool __end;
        private static volatile object _lock = new object();
        private static ListWriter listWriter;
        private static App _instance;
        public static App Instance { get { return _instance; } }
        private static DetailClassementViewModel detailClassementViewModel;
        internal static DetailClassementViewModel DetailClassementViewModel { set { detailClassementViewModel = value; } }

        public App()
            : base()
        {
            var xmlConf = CConf.loadConf();
            setDispatcherPriority();
            pdb.player.ViewModel.Colors.MementoColor.recover();
            AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(CurrentDomain_UnhandledException);
            this.DispatcherUnhandledException += new DispatcherUnhandledExceptionEventHandler(App_DispatcherUnhandledException);
            Application.Current.DispatcherUnhandledException += new DispatcherUnhandledExceptionEventHandler(Current_DispatcherUnhandledException);
            TaskScheduler.UnobservedTaskException += new EventHandler<UnobservedTaskExceptionEventArgs>(TaskScheduler_UnobservedTaskException);
            _instance = this;
        }

        void TaskScheduler_UnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs e)
        {
            e.SetObserved();
            CheckException("Task", sender, e.Exception);
        }

        void Current_DispatcherUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e)
        {
            e.Handled = true;
            CheckException("AppDispatcher", sender, e.Exception);
        }

        void App_DispatcherUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e)
        {
            e.Handled = true;
            CheckException("Dispatcher", sender, e.Exception);
        }

        void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e)
        {
            CheckException("Domain", sender, e.ExceptionObject);
        }

        private bool displayMsg;
        private string lastMessage;
        private void CheckException(string from, object sender, object ex)
        {
            if (ex is Exception)
            {
                var mess = (ex as Exception).Message;
                if (mess == lastMessage)
                {
                    displayMsg = true;
                }
                lastMessage = mess;

            }
            string message = string.Format("Erreur:\r\n from->{0}\r\nsender ->{1}\r\n{2}", from, sender, ex.ToString());  // "Erreur->sender:" + sender +" from:" + from + " " + ex.ToString();
            if (log != null)
                log.log(message);
            var msgBox = message;
            if (msgBox.Length > 2000)
                msgBox = msgBox.Substring(0, 1998);
            if (!displayMsg)
            {
                displayMsg = true;
                var result = MessageBox.Show(msgBox, "Erreur", MessageBoxButton.OK, MessageBoxImage.Error);
                displayMsg = false;
            }

        }
        private static bool changing;
        public static void setChanging() { changing = true; }
        public static void releaseChanging() { changing = false; }
        public static void invalidateAlbums()
        {
            if (gen == null)
                return;

            gen.invalidateAlbums();
            if (changing)
                return;
            go();
        }
        [STAThread]
        protected override void OnStartup(StartupEventArgs e)
        {
            try
            {
                var xmlConf = CConf.loadConf();
                setDispatcherPriority();

                base.OnStartup(e);
                Thread.CurrentThread.Name = "GUI";

                //   app = new LegacyApp(); 
                Logger.init(Environment.CurrentDirectory.Replace("\\", "_"));
                log = Logger.getLogger("Program");
                logDispatch = Logger.getLogger("Dispatch");
                misc.init(log);



                //  IPlayerEngine player = PlayerBuilder.create("vlcplugin");



                Piece.Compact = CConf.Compact;
                CPieceClassement.DateMin = CConf.ConfGen.MinClassDate;
                export = CConf.Export;
                import = CConf.Import;

                gen = new Consolid();
                gen.FilterNext = CConf.ConfGen.FilterNext;
                var mementoAlbum = Memento.Instance.confAlbum;
                if (mementoAlbum != null && mementoAlbum.Composants.Count > 0)
                    gen.SortAlbumMode = mementoAlbum;
                else
                    gen.SortAlbumMode = CConf.ConfGen.AlbumSort;
                Memento.Instance.confAlbum = gen.SortAlbumMode;
                CConf.ConfGen.AlbumSort = gen.SortAlbumMode;

                Piece.SeuilProvisoire = gen.SortAlbumMode.lastModif;
                Piece.SeuilCompact = gen.SortAlbumMode.compact;

                BackGroundTaskMgr.Conf = CConf.ConfOrdo;
                BackGroundTaskMgr.Start();
                DataConf dbConf = new DataConf(xmlConf);
                CFile.DefaultFolder = dbConf.defaultFolder;
                ZipUtil.Exe = dbConf.sZip;
                Db = new CDb(dbConf);

                //  loader = new HomeLoader(Db);
                //  app.init(loader);
                Db.SovIni();
                Db.loadData();

                if (dbConf.compressID || dbConf.synchroID)
                {
                    Environment.Exit(0);
                }

                //ChronoData.refreshDate(DateTime.MinValue);
                //ChronoData.DateAuto = false;
                //Db.eraseClassementForEnabled();
                //Db.WriteDB1(); 
                //return;
                // app.loadData(Db, CConf.Scan);

                // Db.LegacyConsolid(app.LegacyList, DateTime.Now);




                goInit();

                //  Memento.Instance.save();
                thLoop = new Thread(loop);
                thLoop.Start();

                MemUtil.Start(CConf.GcCollect);
                //  go();
            }
            catch (Exception ex)
            {
                if (log != null)
                    log.log(ex.ToString());
            }



        }



        private static void loop()
        {
            Thread.CurrentThread.Name = "App";
            while (!__end)
            {
                Thread.Sleep(30);
                if (!__go)
                    continue;
                lock (_lock)
                {
                    if (!__go)
                        continue;
                    __go = false;
                }
                _go();

            }

        }
        private static bool _updateStats;
        private static TrackListViewModel _currentTrack;
        public static void go()
        {
            go(false);
        }
        public static void go(bool updateStats)
        {
            lock (_lock)
            {
                _updateStats |= updateStats;
                __go = true;
                if (bib != null)
                    bib.Aborted = true;
            }
        }

        public static void go(TrackListViewModel current)
        {
            lock (_lock)
            {
                _currentTrack = current;
                go(true);
            }
        }

        private static void resetOneCl()
        {
            lock (_lock)
            {
                try
                {
                    if (CConf.ResetOneCl)
                    {

                        // CPieceClassement.DateMin = DateTime.MinValue;
                        //   Classement zero = Classement.create("0.0"); decimal zer0d = zero.ClassementValueDecimal;
                        var oldKepp = new List<Piece>();

                        var _albums = gen.Albums;
                        foreach (var album in _albums.List)
                        {
                            var l = album.Tracks;
                            foreach (Piece t in l)
                            {
                                if (t.Keep)
                                {
                                    t.setKeep(0); //t.Keep = false;
                                    oldKepp.Add(t);
                                    //t.resetMedianneCompact();
                                    //t.invalidateCache(true); 
                                }
                            }
                        }
                        foreach (var album in _albums.List)
                        {
                            var l = album.Tracks;
                            Classement pluspetitNonNull = null;
                            Piece min = null;
                            int nbnotes = 0;
                            int nbRecent = 1;
                            foreach (Piece t in l)
                            {
                                var cl = t.DeepClassement; // p.Classement.DbValue;
                                // decimal clValue = obj.Classement.create(cl.ToString()).ClassementValueDecimal; //  Piece.classementHash.getCache(cl.ToString()).ClassementValueDecimal; // t.ClassementValueDecimal(false);
                                if (cl.isPositive())// > zer0d)
                                {
                                    nbnotes++;
                                    if (t.LastClassementRecent || !t.Enabled)
                                    {
                                        //min = null;
                                        //break;
                                        nbRecent++;
                                        continue;
                                    }
                                    if (pluspetitNonNull == null || cl < pluspetitNonNull)
                                    {
                                        pluspetitNonNull = cl;
                                        min = t;
                                    }
                                }
                            }

                            if (min != null)
                            {
                                var coeff = (decimal)nbnotes * nbRecent / (l.Count * l.Count);
                                min.setKeep(coeff);
                            }
                        }

                        foreach (Piece t in oldKepp)
                        {

                            if (!t.Keep)
                            {
                                t.resetMedianneCompact();
                                t.invalidateCache(true);
                            }
                        }


                    }
                }
                finally
                {
                    //  CPieceClassement.DateMin = CConf.ConfGen.MinClassDate;
                }
            }
        }



        private static void goInit()
        {
            var client = new SimpleClient("goInit\t", logPerf);
            var root = gen.Root;

            ChronoData.DateAuto = false;
            DateTime now = DateTime.Now;
            gen.Now = now;
            gen.Step = -1;




            if (CConf.ResetOneCl)
            {
                gen.ConsolidInit(Db.List.getList());
                client.log(" gen.ConsolidInit(Db.List.getList());");
                resetOneCl();
                client.log("resetOneCl");
                //CPieceClassement.DateMin = DateTime.MinValue;
                ////Classement min = Classement.create("00003.0"); decimal mind = min.ClassementValueDecimal;
                //Classement zero = Classement.create("0.0"); decimal zer0d = zero.ClassementValueDecimal;

                ////foreach (Piece p in gen.sortByClass())
                ////{
                ////    decimal clValue = p.ClassementValueDecimal(false) ;
                ////    if (clValue > zer0d)
                ////    {
                ////        if (clValue >= zer0d)
                ////        {
                ////            var dPiece = Db.getPiece(p.PieceId);
                ////            var strNewCl = "0000" + dPiece.getClassement().ToString();
                ////            var newCl = Classement.create(strNewCl);
                ////            p.Enabled = true;

                ////            p.setClassement(newCl.ClassList, newCl.Rating);
                ////            dPiece.Classement.eraseClassement2(newCl);
                ////        }
                ////        else
                ////            p.Enabled = false;
                ////    }
                ////}

                //var _albums = gen.Albums;
                //foreach (var album in _albums.List)
                //{
                //    var l = album.Tracks;
                //    decimal pluspetitNonNull = int.MaxValue;
                //    Piece min = null;
                //    foreach (Piece t in l)
                //    {
                //        decimal clValue = t.ClassementValueDecimal(false);
                //        if (clValue > zer0d)
                //        {
                //            if (clValue < pluspetitNonNull)
                //            {
                //                pluspetitNonNull = clValue;
                //                min = t;
                //            }
                //        }

                //    }

                //    if (min != null)
                //    {
                //        (min.Track as CPiece).Classement.keepValue();
                //    }
                //}
                ////    foreach (Piece t in l)
                ////    {
                ////        if (t.Parent == null)
                ////        {
                ////            decimal clValue = t.ClassementValueDecimal(false);
                ////            if (t.isClassListNumeric && clValue > zer0d)
                ////            {
                ////                if (clValue > pluspetitNonNull)
                ////                {
                ////                    var dPiece = Db.getPiece(t.PieceId);
                ////                    t.Enabled = true;
                ////                    t.setClassement("0", 0);
                ////                    dPiece.Classement.eraseClassement2();
                ////                }
                ////            }
                ////        }
                ////    }
                ////}

                ////gen.MakeConsolid(Db.List.getList(), true);
                CPieceClassement.DateMin = CConf.ConfGen.MinClassDate;
            }

            gen.MakeConsolid(null, true, true, client);
            //  if (CConf.ConfGen.LimitList <= 0)
            gen.buildMusique();
            // gen.buildClassTree();
            gen.buildLists(Db.List.Listes);

            bib = new BibViewModel(root);
            client.log("creation bib");
            ChronoData.DateAuto = true;
            //  var classement = root.getOrCreate("classement");



            ListWriterMgr.Async = false;
            listWriter = new ListWriter(bib);
            //   gen.createRot(CConf.ListBase, listWriter); 
            //bib = new BibViewModel(Db.Root); 
            //gen.createRot(CConf.ListBase, bib);
            //   if (bgClass.IsEnd) BackGroundTaskMgr.Start();


            //  gen.timeRanking();
            // gen.eraseGrouping();
            // gen.writeComment();
            Piece.SeuilProvisoire = gen.SortAlbumMode.lastModif;
            gen.createRot(CConf.ListBase, client, listWriter);
            PlayListViewModel.Log = true;
            //   gen.builStats();
            //gen.CommentGo = true;
            //gen.GroupinGO = true;
            //  PlayerViewModel.Instance.SortAlbumMode = gen.SortAlbumMode;
            PlayerViewModel.Instance.WithVirtualAlbum = gen.AlbumVirtual;
            PlayerViewModel.ConfAlbumSort = gen.SortAlbumMode;
            Memento.Instance.confAlbum = gen.SortAlbumMode;
            Piece.SeuilProvisoire = gen.SortAlbumMode.lastModif;


            //foreach (CPiece p in Db.List)
            //{
            //    if (p.DurationInSec == 0 && p.Exists)
            //    {
            //        try
            //        {
            //            PlayerViewModel.Instance.Player.getDuration(p);
            //            log.log("{0} duration {1} s", p, p.DurationInSec);
            //        }
            //        catch (Exception ex)
            //        {
            //            log.log(ex.ToString());
            //        }

            //    }
            //}


            // detailClassementViewModel.IhmInDispo = ihmInDispo.stat;
            // new Thread(() =>
            gen.builStats(null);
            client.log("Fin goInit");
        }

        private static bool mustBuildCompleteAlbums(TrackListViewModel currentTrack)
        {
            var tracks = new List<TrackListViewModel>();
            foreach (TrackListViewModel t in PlayerViewModel.Instance.PresentationTracks)
            {
                tracks.Add(t);
            }
            tracks.Sort((x, y) => x.RankAlbumReverse.CompareTo(y.RankAlbumReverse));
            int count = tracks.Count;
            int rank0 = currentTrack.RankAlbumReverse;

            int i = 0;
            // recherche trou avant ex rank0=3 pas de 1 ni de 2
            for (; i < count; i++)
            {
                var t = tracks[i];
                if (t.RankAlbumReverse >= rank0)
                    break;

                if (t.RankAlbumReverse > i + 1)
                    return true;
            }

            //if (i + 1 < count && tracks[i + 1].RankAlbumReverse > rank0 + 1)
            //{
            //    return true;
            //}

            return false;
        }

        private static void buildAffectedAlbumsWhenCurrentTrackChange(TrackListViewModel currentTrack, IDictionary<string, Album> dict, HashSet<Album> depot, bool navQuick)
        {
            if (currentTrack == null)
                return;
            TrackListViewModel item = currentTrack;
            var cl = item.PieceGen.getClassement(true);
            var _dict = dict;  // new Dictionary<string,Album>(); 

            //foreach (Album album in dict.Values)
            //{
            //    var current = album.PlusPetitEnabled; 
            //    if (current == null || cl<=current.getClassement(true))
            //        _dict.Add(album.Key, album); 
            //}

            var tracks = new List<TrackListViewModel>();
            foreach (TrackListViewModel t in PlayerViewModel.Instance.PresentationTracks)
            {
                tracks.Add(t);
            }
            tracks.Sort((x, y) => x.Index.CompareTo(y.Index));
            int count = tracks.Count;

            //int index = -1;
            //for (int i = 0; i < count; i++)
            //{
            //    var t = tracks[i];
            //    if (t.PieceId == currentTrack.PieceId)
            //    {
            //        index = i;
            //        break;
            //    }
            //}

            //if (index < 0)
            //{
            //    foreach (Album a in dict.Values)
            //        depot.Add(a);
            //    return;
            //}

            var hs = new HashSet<int>();
            if (navQuick)
                hs.Add(item.MasterId);
            int index = -1;
            try
            {
                while (true)
                {
                    index++;
                    if (index >= count)
                        return;

                    var t = tracks[index];
                    if (!hs.Add(t.MasterId))
                        continue;
                    if (navQuick && t.album == item.album)
                        continue;
                    //if (t.album == item.album)
                    //    continue;

                    if (_dict.ContainsKey(t.album.Key))
                    {
                        depot.Add(t.album);
                        if (depot.Count >= _dict.Count)
                            return;
                    }
                    else
                        break;

                }
            }
            catch (Exception ex)
            {
                log.log(ex.ToString());
            }
            finally
            {

            }
        }

        private void automateNextTrack()
        {
            var client = new SimpleClient("automateNextTrack\t");
            this.dispatch(
                () =>
                {
                    PlayerViewModel.Instance.forwardAuto();
                    App.go();
                }, client);
            //if (!CheckAccess())
            //    Dispatcher.BeginInvoke(new Action(this.automateNextTrack), App.DISPATCHER_PRIORITY);
            //else
            //{
            //    PlayerViewModel.Instance.forwardAuto();
            //    App.go();
            //}
        }

        static int nbGo = 0;
        static bool classementChange;
        private static SimpleClient client;
        public static bool Indispo { get; set; }
        private static void _go()
        {
            gen.Albums.endParallelSort();
            bool classementChange = App.classementChange;
            var _currentTrack = App._currentTrack;
            nbGo++;
            bool urgence = false;
            if (client != null)
            {
                client.log("FIN new step");
                client.cancel();
            }

            client = new SimpleClient("<--- chrono " + nbGo + "\t", logPerf);
            var clientArgs = new ClientEventArgs(client);

            try
            {

                bool reInit = !gen.AlbumBuild;
                var confSort = PlayerViewModel.ConfAlbumSort;
                if (confSort != null)
                {
                    Piece.SeuilProvisoire = confSort.lastModif;
                    CConf.ConfGen.AlbumSort = confSort;
                }
                //   gen.compact(); 
                if (detailClassementViewModel != null)
                    detailClassementViewModel.IhmInDispo = ihmInDispo.rot;
                //gen.CommentGo = false;
                //gen.GroupinGO = false;
                bib.Aborted = true;

                step++;
                gen.Step = step;

                ChronoData.DateAuto = false;
                DateTime now = DateTime.Now;
                gen.Now = now;
                ChronoData.DateAuto = false;

                urgence = gen.Urgence && TrackListViewModel.CurrentPlaying == _currentTrack;
                if (!urgence)
                {
                    Db.saveAsync();
                    Memento.Instance.save();
                }
                client.log(string.Format("debut classementChange={0} gen.ClassementChanged={1} gen.Urgence={2} _currentTrack={3}", classementChange, gen.ClassementChanged, gen.Urgence, _currentTrack));
                if (PlayerViewModel.Instance.CreateRot)
                {

                    if (gen.ClassementChanged)
                    {
                        classementChange = true;
                        App.classementChange = true;
                    }

                    if (!urgence && classementChange)
                    {
                        resetOneCl();
                        client.log("resetOneCl");
                        App.classementChange = false;
                    }

                    if (_currentTrack != null)
                    {
                        int nbAlbums = 0;
                        // bool sortDone = false;
                        if (urgence)
                        {
                            var affectedAlbums = gen.Albums.GetAndInvalidateAlbums(_currentTrack.PieceGen);
                            bool mustComplete = mustBuildCompleteAlbums(_currentTrack);

                            if (!mustComplete)
                            {

                                //}

                                var depot = new HashSet<Album>();
                                buildAffectedAlbumsWhenCurrentTrackChange(_currentTrack, affectedAlbums, depot, CConf.ConfGen.NavQuick);
                                if (depot.Count == 0)
                                {
                                    if (_currentTrack == TrackListViewModel.CurrentPlaying)
                                    {
                                        log.log("pas de makeSort. on passe au suivant on verra après");
                                        _currentTrack = null;
                                        gen.Urgence = false;

                                        App.Instance.automateNextTrack();
                                        return;

                                    }
                                    else
                                    {
                                        log.log("trop naze c'est trop long");
                                        gen.Urgence = false;

                                    }


                                }
                                //}
                                //}
                                else
                                {
                                    log.log("depot:");
                                    nbAlbums = gen.Albums.makeSort(depot, log);
                                    //sortDone = true;
                                }

                            }
                            else
                            {
                                log.log("y a des trous dans la raquette on force le makesort");
                                gen.Urgence = false;
                            }
                            //if (!sortDone && gen.Urgence)
                            //{
                            //    log.log("affected albums");
                            //    nbAlbums = gen.Albums.makeSort(_currentTrack.PieceGen, log);
                            //}
                            client.log(string.Format("makeSort partial {0} elt", nbAlbums));
                            _currentTrack.refresh();
                            while (Indispo)
                                Thread.Sleep(100);
                            if (nbAlbums > 0)
                            {
                                if (refreshAlbum != null)
                                    refreshAlbum("", clientArgs);
                                client.log("refreshAlbum");
                            }
                        }
                    }

                    _currentTrack = null;


                    // if (__end || __go) return;


                    //  gen.SortAlbumMode = PlayerViewModel.Instance.SortAlbumMode;
                    //    gen.AlbumVirtual = PlayerViewModel.Instance.WithVirtualAlbum; 

                    while (Indispo)
                        Thread.Sleep(100);
                    gen.MakeConsolid(null, _updateStats, classementChange, client); //   bib.Musique.Tracks);
                    if (reInit)
                        gen.buildMusiqueAgain();
                    //  if (__end || __go) return;
                    // AlbumCtl.Instance.init();
                    //   if (__end || __go) return;
                    //gen.timeRanking();
                    //  if (__end || __go) return;
                    ChronoData.DateAuto = true;

                    //bool navAuto = PlayerViewModel.Instance.NavAuto; 
                    //if (navAuto)
                    //{
                    //    if (refresh != null)
                    //        refresh(PHASE1, EventArgs.Empty);
                    //}



                    //      if (__end || __go) return;
                    bib.Aborted = false;
                    ListWriterMgr.Async = false;
                    //listWriter = new ListWriter(root);
                    try
                    {
                        CConf.loadConf();
                        setDispatcherPriority();
                    }
                    catch (Exception ex)
                    {
                        log.log(ex.ToString());
                    }
                    // gen.SortByAlbum = PlayerViewModel.Instance.SortByAlbum;
                    while (Indispo)
                        Thread.Sleep(100);
                    gen.createRot(CConf.ListBase, client, App.bib);
                    if (reInit)
                        bib.syncMusique();
                    //if (refresh != null)
                    //    refresh(PHASE1, EventArgs.Empty);


                    //log.log("visibles"); 
                    //foreach (TrackListViewModel visible in Player.VisibleItems)
                    //{
                    //    if (__end || __go) return;
                    //    visible.PieceGen.writeCommentGrouping();
                    //    visible.refresh(); 
                    //}
                    //if (refresh != null)
                    //    refresh(PHASE2, EventArgs.Empty);

                    //if (__end || __go) return;
                    //gen.writeComment();
                    //if (__end || __go) return;
                    //gen.writeGrouping();

                    while (Indispo)
                        Thread.Sleep(100);
                    if (refresh != null)
                        refresh(PHASE2, clientArgs);
                    client.log("refresh après createRot");


                    //if (__end || __go) return;

                    //gen.CommentGo = true;
                    //gen.GroupinGO = true;



                    //if (refresh != null)
                    //    refresh(PHASE2, EventArgs.Empty);
                    // _refresh = true;
                    lock (_lock)
                    {
                        if (_updateStats && !urgence)
                        {
                            if (detailClassementViewModel != null)
                                detailClassementViewModel.IhmInDispo = ihmInDispo.stat;
                            //new Thread(() =>
                            gen.builStats(() => { if (detailClassementViewModel != null) detailClassementViewModel.IhmInDispo = ihmInDispo.none; });

                        }
                        else
                        {
                            if (detailClassementViewModel != null)
                                detailClassementViewModel.IhmInDispo = ihmInDispo.none;
                        }
                    }
                    //bib = new BibViewModel(Db.Root); 
                    //gen.createRot(CConf.ListBase, bib);
                    //   if (bgClass.IsEnd) BackGroundTaskMgr.Start();
                    //gen.CommentGo = true;
                    //gen.GroupinGO = true;


                }


            }
            catch (Exception ex)
            {
                log.log(ex.ToString());
            }

            finally
            {
                //   gen.eraseGrouping(); 
                //if (refresh != null && PlayerViewModel.Instance.CreateRot)
                //    refresh(PHASE2, EventArgs.Empty);

                // detailClassementViewModel.IhmInDispo = ihmInDispo.none;
                lock (_lock)
                {
                    _currentTrack = null;
#if EXPORT
                    ExportCmd.CalculExport();
#endif
                    if (_updateStats && !urgence)
                    {
                        _updateStats = false;
                    }
                }
                client.log("FIN _go()");
                if (urgence && !DetailClassementViewModel.Instance.Auto)
                    go(false);

                if (classementChange && !urgence)
                    gen.Albums.parallelSort();


            }


        }

        public static event EventHandler<ClientEventArgs> refresh;
        public static event EventHandler<ClientEventArgs> refreshAlbum;

        public static void shutdown()
        {
            MemUtil.End();
            __end = true;
            if (App.bib != null)
                App.bib.Aborted = true;
            Db.WriteDB1();
            if (App.bib != null)
                App.bib.Aborted = true;
            Environment.Exit(0);
        }

        public static List<TrackListViewModel> getAlbum(TrackListViewModel track)
        {
            if (gen == null)
                return null;

            var ll = new List<TrackListViewModel>();

            var l = gen.getTracksAlbum(track.PieceGen);
            if (l == null)
                return null;
            foreach (Piece p in l)
            {

                TrackListViewModel trackList = TrackListViewModel.getOrCreate(p); // PlayListViewModel.findTrack(bib.Musique, p.PieceId);
                if (trackList == null)
                    continue;
                ll.Add(trackList);
            }

            return ll;

        }

        public void InfoIHm(string message, string caption)
        {
            MessageBox.Show(message, caption, MessageBoxButton.OK);
        }

        public bool Confirm(string question, string caption)
        {
            return MessageBox.Show(question, caption, MessageBoxButton.YesNo) == MessageBoxResult.Yes;
        }

        public bool? TriChoix(string question, string caption)
        {
            var result = MessageBox.Show(question, caption, MessageBoxButton.YesNoCancel);
            switch (result)
            {
                case MessageBoxResult.Cancel:
                return null;
                case MessageBoxResult.No:
                return false;
                case MessageBoxResult.None:
                return null;
                case MessageBoxResult.OK:
                return true;
                case MessageBoxResult.Yes: return true;
                default: return null;

            }
        }
        public Export getConfExport(string question)
        {
            var dialog = new ConfExport(question, export);
            dialog.ShowDialog();
            return export;
        }

        public Import getConfImport(string question)
        {
            var dialog = new ConfImport(question, import);
            dialog.ShowDialog();
            return import;
        }

        public string folderDialog()
        {
            var dialog = new FolderBrowserDialogW(Db.DefaultFolder); // new System.Windows.Forms.FolderBrowserDialog();
            dialog.ShowDialog();
            //dialog.SelectedPath = Db.DefaultFolder;
            //System.Windows.Forms.DialogResult result = dialog.ShowDialog();
            //string dir = null;
            //if (result == System.Windows.Forms.DialogResult.OK)
            //{
            //    dir = dialog.SelectedPath;
            //}

            //return dir;
            return dialog.Dir;
        }

        public int getNb(string question)
        {
            var w = new getNb(question, 2);
            w.ShowDialog();
            return w.Nb;
        }


        public bool changeName(string title, IName data)
        {
            var stringDialog = new StringDialog(title, data);
            stringDialog.ShowDialog();
            return stringDialog.Ok;
        }

        public PlayListViewModel selectPlayList(string title)
        {
            var dialog = new BrowsePlayList(title);
            dialog.ShowDialog();
            if (dialog.Ok)
            {
                return dialog.Selected;
            }

            return null;
        }

        public static void buildList()
        {
            Db.List.buildLists(bib.Listes.PlayList);
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\pdb.player.csproj">
    <content><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">x86</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4166FA60-B33F-4496-9352-EDD8F3214021}</ProjectGuid>
    <OutputType>Exe</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>pdb.player</RootNamespace>
    <AssemblyName>pdb.player</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
    <FileAlignment>512</FileAlignment>
    <ProjectTypeGuids>{60dc8134-eba5-43b8-bcc9-bb4bc16c2548};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
    <PlatformTarget>x86</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>TRACE;DEBUG;NONI</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
    <PlatformTarget>x86</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug|AnyCPU'">
    <DebugSymbols>true</DebugSymbols>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>TRACE;DEBUG;COMPACT</DefineConstants>
    <DebugType>full</DebugType>
    <PlatformTarget>x86</PlatformTarget>
    <CodeAnalysisLogFile>bin\pdb.player.exe.CodeAnalysisLog.xml</CodeAnalysisLogFile>
    <CodeAnalysisUseTypeNameInSuppression>true</CodeAnalysisUseTypeNameInSuppression>
    <CodeAnalysisModuleSuppressionsFile>GlobalSuppressions.cs</CodeAnalysisModuleSuppressionsFile>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSetDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\\Rule Sets</CodeAnalysisRuleSetDirectories>
    <CodeAnalysisIgnoreBuiltInRuleSets>true</CodeAnalysisIgnoreBuiltInRuleSets>
    <CodeAnalysisRuleDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\FxCop\\Rules</CodeAnalysisRuleDirectories>
    <CodeAnalysisIgnoreBuiltInRules>true</CodeAnalysisIgnoreBuiltInRules>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|AnyCPU'">
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <Optimize>true</Optimize>
    <DebugType>pdbonly</DebugType>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <CodeAnalysisLogFile>bin\Release\pdb.player.exe.CodeAnalysisLog.xml</CodeAnalysisLogFile>
    <CodeAnalysisUseTypeNameInSuppression>true</CodeAnalysisUseTypeNameInSuppression>
    <CodeAnalysisModuleSuppressionsFile>GlobalSuppressions.cs</CodeAnalysisModuleSuppressionsFile>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSetDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\\Rule Sets</CodeAnalysisRuleSetDirectories>
    <CodeAnalysisIgnoreBuiltInRuleSets>false</CodeAnalysisIgnoreBuiltInRuleSets>
    <CodeAnalysisRuleDirectories>;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\FxCop\\Rules</CodeAnalysisRuleDirectories>
    <CodeAnalysisIgnoreBuiltInRules>true</CodeAnalysisIgnoreBuiltInRules>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup>
    <StartupObject>pdb.player.App</StartupObject>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Interop.AXVLC, Version=1.0.0.0, Culture=neutral, processorArchitecture=x86">
      <SpecificVersion>False</SpecificVersion>
      <EmbedInteropTypes>False</EmbedInteropTypes>
      <HintPath>bin\Interop.AXVLC.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="policy.2.0.taglib-sharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=db62eba44689b5b0, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>bin\policy.2.0.taglib-sharp.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Runtime.Serialization" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.Xaml">
      <RequiredTargetFramework>4.0</RequiredTargetFramework>
    </Reference>
    <Reference Include="taglib-sharp, Version=2.1.0.0, Culture=neutral, PublicKeyToken=db62eba44689b5b0, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>bin\taglib-sharp.dll</HintPath>
    </Reference>
    <Reference Include="WindowsBase" />
    <Reference Include="PresentationCore" />
    <Reference Include="PresentationFramework" />
    <Reference Include="Xceed.Wpf.Toolkit">
      <HintPath>libs\Extended WPF Toolkit Binaries\Xceed.Wpf.Toolkit.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <ApplicationDefinition Include="App.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </ApplicationDefinition>
    <Compile Include="MainWindow.xaml.cs">
      <DependentUpon>MainWindow.xaml</DependentUpon>
    </Compile>
    <Compile Include="model\ArtWorkManager.cs" />
    <Compile Include="model\Equalization.cs" />
    <Compile Include="ViewModel\AllTracksViewModel.cs" />
    <Compile Include="ViewModel\BibViewModel.cs" />
    <Compile Include="ViewModel\BibViewModelBase.cs" />
    <Compile Include="ViewModel\BibViewModelTree.cs" />
    <Compile Include="ViewModel\Colors\ColorViewModel.cs" />
    <Compile Include="ViewModel\Colors\Couleurs.cs" />
    <Compile Include="ViewModel\Colors\MementoColor.cs" />
    <Compile Include="ViewModel\Commande\CommandeBase.cs" />
    <Compile Include="ViewModel\Commande\CoulHistoryBack.cs" />
    <Compile Include="ViewModel\Commande\CreateListCmd.cs" />
    <Compile Include="ViewModel\Commande\DeleteCmd.cs" />
    <Compile Include="ViewModel\Commande\Explorer.cs" />
    <Compile Include="ViewModel\Commande\ImportCmd.cs" />
    <Compile Include="ViewModel\Commande\InfoCmd.cs" />
    <Compile Include="ViewModel\Commande\Link\LinkRegister.cs" />
    <Compile Include="ViewModel\Commande\Link\RecordFather.cs" />
    <Compile Include="ViewModel\Commande\Play.cs" />
    <Compile Include="ViewModel\Commande\PlayList\AddToList.cs" />
    <Compile Include="ViewModel\Commande\PlayList\CheckCmd.cs" />
    <Compile Include="ViewModel\Commande\PlayList\DbDeleteLastClassement.cs" />
    <Compile Include="ViewModel\Commande\PlayList\DbDeleteLastRead.cs" />
    <Compile Include="ViewModel\Commande\PlayList\ExportCmd.cs" />
    <Compile Include="ViewModel\Commande\PlayList\ExportCompress.cs" />
    <Compile Include="ViewModel\Commande\PlayList\PlayListCommande.cs" />
    <Compile Include="ViewModel\Commande\RecordClassement.cs" />
    <Compile Include="ViewModel\Commande\RefreshAlbum.cs" />
    <Compile Include="ViewModel\DetailAlbumViewModel.cs" />
    <Compile Include="ViewModel\DetailClassementViewModel.cs" />
    <Compile Include="ViewModel\ClientEventArgs.cs" />
    <Compile Include="ViewModel\gen\ListWriter.cs" />
    <Compile Include="ViewModel\InfoViewModel.cs" />
    <Compile Include="ViewModel\Interfaces.cs" />
    <Compile Include="ViewModel\PlayerViewModel.cs" />
    <Compile Include="ViewModel\StatItemViewModel.cs" />
    <Compile Include="ViewModel\TrackListViewModel.cs" />
    <Compile Include="ViewModel\PlayListViewModel.cs" />
    <Compile Include="ViewModel\ViewModelBase.cs" />
    <Compile Include="Vue\Adorn\AdornedControl.cs" />
    <Compile Include="Vue\Adorn\AdornerPlacement.cs" />
    <Compile Include="Vue\Adorn\FrameworkElementAdorner.cs" />
    <Compile Include="Vue\AlbumCtl.xaml.cs">
      <DependentUpon>AlbumCtl.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\BarAdorner.cs" />
    <Compile Include="Vue\BibCtl.xaml.cs">
      <DependentUpon>BibCtl.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\BrowsePlayList.xaml.cs">
      <DependentUpon>BrowsePlayList.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\ClassementCtl.xaml.cs">
      <DependentUpon>ClassementCtl.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\ConfAlbumSortW.xaml.cs">
      <DependentUpon>ConfAlbumSortW.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\ConfExport.xaml.cs">
      <DependentUpon>ConfExport.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\ConfFilterW.xaml.cs">
      <DependentUpon>ConfFilterW.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\ConfImport.xaml.cs">
      <DependentUpon>ConfImport.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\Conf\ConfMedianneW.xaml.cs">
      <DependentUpon>ConfMedianneW.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\Conf\ConfVirt.xaml.cs">
      <DependentUpon>ConfVirt.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\ConfCouleurs.xaml.cs">
      <DependentUpon>ConfCouleurs.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\Conf\Debug.xaml.cs">
      <DependentUpon>Debug.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\Conf\Miscellaneous.xaml.cs">
      <DependentUpon>Miscellaneous.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\DataGridPlayList.xaml.cs">
      <DependentUpon>DataGridPlayList.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\EnhancedDataGrid.cs" />
    <Compile Include="Vue\FolderBrowserDialog.xaml.cs">
      <DependentUpon>FolderBrowserDialog.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\FolderBrowserDialogW.xaml.cs">
      <DependentUpon>FolderBrowserDialogW.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\getNb.xaml.cs">
      <DependentUpon>getNb.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\Info.xaml.cs">
      <DependentUpon>Info.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\Memento.cs" />
    <Compile Include="Vue\PlayerControler.xaml.cs">
      <DependentUpon>PlayerControler.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\StatCtl.xaml.cs">
      <DependentUpon>StatCtl.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\StateBar.xaml.cs">
      <DependentUpon>StateBar.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\StringDialog.xaml.cs">
      <DependentUpon>StringDialog.xaml</DependentUpon>
    </Compile>
    <Compile Include="Vue\Util\BaseConverter.cs" />
    <Compile Include="Vue\Util\GradiantBuilder.cs" />
    <Compile Include="Vue\Util\StringFormatConverter.cs" />
    <Compile Include="Vue\Util\Utils.cs" />
    <Page Include="MainWindow.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Page Include="Player.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Compile Include="App.xaml.cs">
      <DependentUpon>App.xaml</DependentUpon>
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="Player.xaml.cs">
      <DependentUpon>Player.xaml</DependentUpon>
      <SubType>Code</SubType>
    </Compile>
    <Page Include="Vue\AlbumCtl.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\BibCtl.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\BrowsePlayList.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\ClassementCtl.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\ConfAlbumSortW.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\ConfExport.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\ConfFilterW.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\ConfImport.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\Conf\ConfMedianneW.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\Conf\ConfVirt.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\ConfCouleurs.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\Conf\Debug.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\Conf\Miscellaneous.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\DataGridPlayList.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\FolderBrowserDialog.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\FolderBrowserDialogW.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\getNb.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
    <Page Include="Vue\Info.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\PlayerControler.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\StatCtl.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\StateBar.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Vue\StringDialog.xaml">
      <SubType>Designer</SubType>
      <Generator>MSBuild:Compile</Generator>
    </Page>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <None Include="app.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <AppDesigner Include="Properties\" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\engine\pdb.player.engine.build\pdb.player.engine.build.csproj">
      <Project>{0F3BC2CF-E69D-4019-B6EA-A4B50A7FEB54}</Project>
      <Name>pdb.player.engine.build</Name>
    </ProjectReference>
    <ProjectReference Include="..\engine\pdb.player.engine\pdb.player.engine.csproj">
      <Project>{778B94A9-80ED-4440-9AC3-7E6E6F4AD49D}</Project>
      <Name>pdb.player.engine</Name>
    </ProjectReference>
    <ProjectReference Include="..\pdb.ordo\pdb.ordo.csproj">
      <Project>{30823d1d-851c-456b-ac4c-b0beec173361}</Project>
      <Name>pdb.ordo</Name>
    </ProjectReference>
    <ProjectReference Include="..\pdb.util\pdb.util.csproj">
      <Project>{c2b34ca9-3bb2-464f-8691-5f5b7cb2b997}</Project>
      <Name>pdb.util</Name>
    </ProjectReference>
    <ProjectReference Include="..\PieceDb.Consolid\pdb.gen.csproj">
      <Project>{DFC524F3-50BB-40E3-BAC0-CA56950BBB5A}</Project>
      <Name>pdb.gen</Name>
    </ProjectReference>
    <ProjectReference Include="..\PieceDb.Db\pdb.db.csproj">
      <Project>{43D27B47-E615-451D-AD25-67C5B8447C4A}</Project>
      <Name>pdb.db</Name>
    </ProjectReference>
    <ProjectReference Include="..\PieceDb.obj\pdb.obj.csproj">
      <Project>{9B849072-2B8E-4CE4-8AD7-D173724A9644}</Project>
      <Name>pdb.obj</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <Resource Include="Vue\images\Toolbar-MP3-Forward-icon.png">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Resource>
    <Resource Include="Vue\images\Toolbar-MP3-Pause-icon.png" />
    <Resource Include="Vue\images\Toolbar-MP3-Play-icon.png">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Resource>
    <Resource Include="Vue\images\Toolbar-MP3-Rewind-icon.png">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Resource>
    <Resource Include="Vue\images\Toolbar-MP3-Stop-icon.png">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Resource>
  </ItemGroup>
  <ItemGroup>
    <Resource Include="Vue\images\cbCoche.png" />
    <Resource Include="Vue\images\cbDecoche.png" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>]]></content>
  </file>
  <file path="\pdb.player\ViewModel\ClientEventArgs.cs">
    <content><![CDATA[using pdb.util;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace pdb.player.ViewModel
{
    public class ClientEventArgs : EventArgs
    {
        public readonly IClient client;
        public ClientEventArgs(IClient client)
        {
            this.client = client;
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\DetailAlbumViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Input;
using pdb.player.ViewModel.Commande.PlayList;
using pdb.gen.albums;
using System.Text.RegularExpressions;
using pdb.player.ViewModel.Commande.Link;
using pdb.player.ViewModel.Commande;
using pdb.db;
using System.Windows.Media.Imaging;
using System.IO;
using pdb.util;
using System.Windows.Media;
using pdb.player.model;
using System.Collections.ObjectModel;
using pdb.obj;


namespace pdb.player.ViewModel
{

    public enum albumMode
    {
        identique,
        origine,
        origineSiVirtuel,
        plusLong,
        plusCourt
    }
    class DetailAlbumViewModel : ViewModelBase, ISelectedTracks
    {
        private static ArtWorkManager artworkManager = new ArtWorkManager();
        private TrackListViewModel humanSelected;
        private Album currentAlbum;
        // private List<TrackListViewModel> tracks;
        private albumMode mode;
        private bool albumVirtual;
        private static Logger log = Logger.getLogger("Img");
        private PlayList pl;
        private PlayListViewModel plv;
        public PlayListViewModel PlayListViewModel { get { return plv; } }


        public albumMode Mode
        {
            get
            {
                return mode;
            }
            set
            {
                if (value != mode)
                {
                    mode = value;
                    var client = new SimpleClient("Mode", log);
                    init(null, client);
                    OnPropertyChanged("");
                }
            }
        }

        public DetailAlbumViewModel()
        {
            TrackListViewModel.CurrentHumanSelectedChanged += new EventHandler<ClientEventArgs>(TrackListViewModel_CurrentSelectedChanged);
        }


        //  private ObservableCollection<ImageSource> images; 

        private void init(TrackListViewModel h, IClient client)
        {
            // tracks = null;
            if (client.Cancel)
                return;
            img = null;
            //images = new ObservableCollection<ImageSource>() ;
            //  long sizeImgMax = 0;
            // if (humanSelected == null)
            if (h == null)
                humanSelected = TrackListViewModel.HumanSelected;
            if (humanSelected != null)
            {
                var p = humanSelected.PieceGen;
                var idOrg = p.PieceId;

                switch (mode)
                {
                    case albumMode.identique:
                    break;
                    case albumMode.origine:
                    p = p.Master;
                    break;
                    case albumMode.origineSiVirtuel:
                    if (p.Virtual)
                        p = p.Master;
                    break;
                    case albumMode.plusLong:
                    if (p.Virtual)
                    {
                        var virt = p.PieceAlbum.Count;
                        var master = p.Master.PieceAlbum.Count;
                        if (master > virt)
                            p = p.Master;
                    }

                    break;

                    case albumMode.plusCourt:
                    if (p.Virtual)
                    {
                        var virt = p.PieceAlbum.Count;
                        var master = p.Master.PieceAlbum.Count;
                        if (master < virt)
                            p = p.Master;
                    }

                    break;


                    default:
                    break;
                }

                albumVirtual = idOrg != p.PieceId;

                if (client.Cancel)
                    return;
                img = artworkManager.get(humanSelected.PieceGen);
                client.log("DetailAlbum::init::artworkManager");

                if (client.Cancel)
                    return;
                currentAlbum = p.PieceAlbum;
                initAlbums();

                client.log("DetailAlbum::init::initAlbums");
            }
            else
            {
                // currentAlbum = null;
                //tracks = new List<TrackListViewModel>();
            }
        }

        //public ObservableCollection<ImageSource> Images
        //{
        //    get
        //    {
        //        return images; 
        //    }
        //}

        void TrackListViewModel_CurrentSelectedChanged(object sender, ClientEventArgs e)
        {
            if (humanSelected != TrackListViewModel.HumanSelected)
            {
                init(null, e.client);

            }
        }
        private class PieceTrackNumberComparer : IComparer<TrackListViewModel>
        {
            public int Compare(TrackListViewModel x, TrackListViewModel y)
            {
                var cmp = x.TrackNumber.CompareTo(y.TrackNumber);
                if (cmp != 0)
                    return cmp;
                return x.getLocation().CompareTo(y.getLocation());
                //  return x.TrackNumber.CompareTo(y.TrackNumber);
            }
        }
        private class PieceVirtualClassementComparer : IComparer<TrackListViewModel>
        {
            private static PieceTrackNumberComparer tn = new PieceTrackNumberComparer();
            public int Compare(TrackListViewModel x, TrackListViewModel y)
            {
                int cmp = x.PieceGen.Classement.CompareTo(y.PieceGen.Classement);


                if (cmp != 0) return -cmp;
                //cmp = x.RapportClassement.CompareTo(y.RapportClassement);
                //if (cmp != 0) return -cmp;
                return tn.Compare(x, y);
                //  return -x.RapportClassement.CompareTo(y.RapportClassement);
            }
        }

        public List<TrackListViewModel> Album
        {
            get
            {
                if (currentAlbum == null || plv == null)
                    return new List<TrackListViewModel>();
                var tracks = plv.Tracks;
                tracks.Sort(new PieceVirtualClassementComparer());
                //int index = 0;
                //foreach (TrackListViewModel t in tracks)
                //{
                //    index++;
                //    t.Index = index;
                //    if (humanSelected != null && t.MasterId == humanSelected.MasterId)
                //        t.IsSelected = true;
                //    else
                //        t.IsSelected = false; 
                //}
                return tracks;

                //var tracks = new List<TrackListViewModel>(); 
                //foreach (var t in currentAlbum.Tracks)
                //{
                //    TrackListViewModel trackList = TrackListViewModel.get(t.PieceId); 
                //    //index++;
                //    //TrackListViewModel trackList = PlayListViewModel.findTrack(App.bib.Musique, t.PieceId);
                //    //if (trackList == null)
                //    //    continue;
                //    //trackList.Index = index;
                //    //if (t.MasterId == humanSelected.MasterId)
                //    //    trackList.IsSelected = true;
                //    //else
                //    //    trackList.IsSelected = false;
                //    tracks.Add(trackList);
                //}
                // //if (tracks != null)
                // //    return tracks;
                //// tracks = new List<TrackListViewModel>();
                // if (currentAlbum == null)
                // {
                //     //tracks = new List<TrackListViewModel>();
                // }
                // else
                // {
                //     // var ll = new List<TrackListViewModel>();

                //   //  int index = 0;
                //     foreach (var t in currentAlbum.Tracks)
                //     {
                //       //  index++;
                //         TrackListViewModel trackList = TrackListViewModel.getOrCreate(t); // PlayListViewModel.findTrack(App.bib.Musique, t.PieceId);
                //         if (trackList == null)
                //             continue;
                //        // trackList.Index = index;
                //         if (t.PieceId == humanSelected.PieceId)
                //             trackList.IsSelected = true;
                //         else
                //             trackList.IsSelected = false;
                //         tracks.Add(trackList);
                //     }
                // }
                //return tracks;

            }
        }

        public TrackListViewModel SelectedTrackInAlbumView
        {
            get
            {


                //var t = humanSelected;


                //if (!albumVirtual)
                //    return t;
                //if (plv != null && !plv.contains(t.PieceId))
                //{
                //    t = plv.Tracks.Find(tt => tt.MasterId == humanSelected.MasterId);
                //    if (t != null)
                //        return t;
                //}
                return humanSelected;

                //if (humanSelected == null)
                //    return null;
                //var tracks = Album;
                //if (tracks == null || tracks.Count == 0)
                //    return null;
                //var tt = tracks.Find(t => t.MasterId == humanSelected.MasterId);
                //return tt;
            }
            set
            {
                if (value == null)
                    return;
                if (humanSelected != null)
                    humanSelected.IsSelected = false;
                humanSelected = value;
                if (humanSelected != null)
                    humanSelected.IsSelected = true;
                // TrackListViewModel.setHumanSelected(App.bib.Musique, value);
                //  initAlbums(); 
                // TrackListViewModel.HumanSelected = humanSelected; 
                var client = new SimpleClient("SelectedTrackInAlbumView", log);
                init(humanSelected, client);
                OnPropertyChanged("");
            }
        }


        #region cmd

        private ICommand _contextCmdCheck;
        public ICommand ContextCmdCheck { get { if (_contextCmdCheck == null) _contextCmdCheck = new CheckCmd(this); return _contextCmdCheck; } }

        private ICommand _contextCmdUnCheck;
        public ICommand ContextCmdUnCheck { get { if (_contextCmdUnCheck == null) _contextCmdUnCheck = new UnCheckCmd(this); return _contextCmdUnCheck; } }


        private ICommand _contextLinkFather;
        public ICommand LinkFather { get { if (_contextLinkFather == null) _contextLinkFather = new LinkFather(); return _contextLinkFather; } }

        private ICommand _contextLinkChild;
        public ICommand LinkChild { get { if (_contextLinkChild == null) _contextLinkChild = new LinkChild(); return _contextLinkChild; } }

        private ICommand _contextLinkFusion;
        public ICommand LinkFusion { get { if (_contextLinkFusion == null) _contextLinkFusion = new LinkFusion(); return _contextLinkFusion; } }

        private ICommand _contextUnLink;
        public ICommand LinkReset { get { if (_contextUnLink == null) _contextUnLink = new LinkReset(); return _contextUnLink; } }

        private ICommand _contextDelete;
        public ICommand DeleteTrack { get { if (_contextDelete == null) _contextDelete = new DeleteCmd(); return _contextDelete; } }

        private ICommand _contexExplorer;
        public ICommand Explorer { get { if (_contexExplorer == null) _contexExplorer = new Explorer(); return _contexExplorer; } }

        private ICommand _contextInfo;
        public ICommand Info { get { if (_contextInfo == null) _contextInfo = new InfoCmd(); return _contextInfo; } }



        private ICommand _ContextCmdAddToList;
        public ICommand ContextCmdAddToList { get { if (_ContextCmdAddToList == null) _ContextCmdAddToList = new AddToList(this, App.Instance); return _ContextCmdAddToList; } }

        private ICommand _ContextCmdDbDeleteClassement;
        public ICommand ContextCmdDbDeleteClassement { get { if (_ContextCmdDbDeleteClassement == null) _ContextCmdDbDeleteClassement = new DbDeleteLastClassement(this); return _ContextCmdDbDeleteClassement; } }

        private ICommand _ContextCmdDbDeleteRead;
        public ICommand ContextCmdDbDeleteRead { get { if (_ContextCmdDbDeleteRead == null) _ContextCmdDbDeleteRead = new DbDeleteLastRead(this); return _ContextCmdDbDeleteRead; } }


        #endregion

        //  static Regex reg = new Regex(@"\[(.*)\]");
        /// <summary>
        /// moche mais pour l'instant on s'en contente
        /// </summary>
        public string Grouping
        {
            get
            {
                return getGrouping(false);
            }
        }

        private string getGrouping(bool albumVirt)
        {
            if (humanSelected == null)
                return "";
            var t = humanSelected.PieceGen;
            if (albumVirt)
                t = humanSelected.PieceGen.Master;

            var a = t.PieceAlbum;
            if (a == null)
                return "";
            string delta = "-";
            var updateClassement = a.UpdateClassement;
            if (updateClassement != null)
                delta = ((int)(DateTime.Now.Date - updateClassement.Value.Date).TotalDays).ToString();

            return string.Format("{0} {1} [{2}] {3}", t.StackIndex, delta, t.RankAlbumReverse, a.EquivLight);

            //var str = t.Grouping;

            //if (!reg.IsMatch(str))
            //    return str;

            //return reg.Match(str).Groups[1].Value;
        }

        public string GroupingAlt
        {
            get
            {
                return getGrouping(true);
            }
        }

        public bool WithVirtualAlbum
        {
            get
            {
                if (humanSelected == null)
                    return false;
                return humanSelected.PieceGen.PieceAlbum.Virtual;
            }
        }

        public string Name
        {
            get
            {
                if (humanSelected == null)
                    return "";
                return humanSelected.Album;
            }
        }

        public string NameAlt
        {
            get
            {
                if (humanSelected == null)
                    return "";
                return humanSelected.Piece.Master.Album;
            }
        }

        #region image
        private ImageSource img;
        public bool HasArtWork
        {
            get
            {
                return img != null;
            }
        }

        public ImageSource ArtWork { get { return img; } }

        #region albums
        public List<TrackListViewModel> Albums { get { return albums; } }
        private List<TrackListViewModel> albums = new List<TrackListViewModel>();
        private void initAlbums()
        {
            if (currentAlbum == null)
                return;

            var _albumName = currentAlbum.Name;
            //if (pl == null || _albumName != pl.Name)
            //{
            pl = new PlayList(_albumName);
            plv = new PlayListViewModel(pl);
            //  plv.setSecondary(); 
            foreach (var t in currentAlbum.Tracks)
            {
                pl.add(t);
            }
            plv.init();
            foreach (TrackListViewModel t in plv.Tracks)
            {
                if (t.PieceId == humanSelected.PieceId)
                    t.IsSelected = true;
                else
                    t.IsSelected = false;
            }
            if (humanSelected == null)
                return;

            albums = new List<TrackListViewModel>();


            foreach (var p in humanSelected.PieceGen.Master)
            {
                var pp = TrackListViewModel.getOrCreate(p); // pl.FindTrack(p.PieceId);
                if (pp != null)
                    albums.Add(pp);
            }
            albums.Sort(new AlbumComparer());

            //foreach (TrackListViewModel t in albums)
            //{
            //    t.IsSelected = t.PieceId == humanSelected.PieceId;
            //}
            //  return albums;
            //TrackListViewModel trackList = TrackListViewModel.getOrCreate(t); // PlayListViewModel.findTrack(App.bib.Musique, t.PieceId);
            //if (trackList == null)
            //    continue;
            //// trackList.Index = index;
            //if (t.PieceId == humanSelected.PieceId)
            //    trackList.IsSelected = true;
            //else
            //    trackList.IsSelected = false;
            //tracks.Add(trackList);
            // }


            //var albums = new List<TrackListViewModel>();
            //if (humanSelected == null)
            //    return albums;
            //var pl_ = PlayListViewModel.SelectedPlayList;
            //if (pl_ == null)
            //    return albums;
            //foreach (var p in humanSelected.PieceGen.Master)
            //{
            //    var pp = TrackListViewModel.getOrCreate(p); // pl.FindTrack(p.PieceId);
            //    if (pp != null)
            //        albums.Add(pp);
            //}
            //albums.Sort(new AlbumComparer());

            //foreach (TrackListViewModel t in albums)
            //{
            //    t.IsSelected = t.PieceId == humanSelected.PieceId;
            //}
            //return albums;


        }



        public TrackListViewModel SelectedTrackInAlbumsView
        {
            get
            {
                return humanSelected;

            }
            set
            {
                if (value == null)
                    return;
                if (humanSelected != null)
                    humanSelected.IsSelected = false;
                humanSelected = value;
                if (humanSelected != null)
                    humanSelected.IsSelected = true;
                //if (humanSelected != null)
                //    humanSelected.IsSelected = true;
                // TrackListViewModel.setHumanSelected(App.bib.Musique, value); // HumanSelected = value;
                var client = new SimpleClient("SelectedTrackInAlbumsView", log);
                init(humanSelected, client);
                OnPropertyChanged("");

            }
        }


        private class AlbumComparer : IComparer<TrackListViewModel>
        {
            //private int theOne; 
            //public AlbumComparer(TrackListViewModel humanselected)
            //{
            //    theOne = humanselected.PieceId; 
            //}

            public int Compare(TrackListViewModel x, TrackListViewModel y)
            {

                //if (x.PieceId == theOne)
                //    return -1;
                //if (y.PieceId == theOne)
                //    return 1;
                return x.RankAlbumReverse.CompareTo(y.RankAlbumReverse);
            }
        }
        #endregion
        #endregion


        public List<TrackListViewModel> SelectedTracks
        {
            get { return Album; }
        }
    }
}

]]></content>
  </file>
  <file path="\pdb.player\ViewModel\DetailClassementViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Data;
using System.Windows.Input;
using pdb.gen.stat;
using pdb.player.ViewModel.Commande;
using pdb.obj;
using pdb.util;
using System.Threading;

namespace pdb.player.ViewModel
{
    enum ihmInDispo
    {
        none,
        rot,
        stat
    }

    public interface IRecordClassmentObserver
    {
        void signalClassementChange();
        void autoNextTrack(TrackListViewModel currentPlaying);
    }
    public interface IClassementObserver
    {
        void signalClassementChange(IClient client);
    }
    class DetailClassementViewModel : ViewModelBase
    {
        private static DetailClassementViewModel _instance;
        public static DetailClassementViewModel Instance { get { return _instance; } }
        private static IRecordClassmentObserver recordClassementObserver;
        public static IRecordClassmentObserver RecordObserver { set { recordClassementObserver = value; } }
        // private CPlayList _root;
        private PlayListViewModel currentClassList;
        private TrackListViewModel currentTrack;


        //   private CPlayList _currentClassList;
        private ICommand cmdRecord;
        private IClassementObserver ihm;
        public DetailClassementViewModel(IClassementObserver ihm)
        {
            this.ihm = ihm;
            cmdRecord = new RecordClassement(this);
            TrackListViewModel.CurrentHumanSelectedChanged += new EventHandler<ClientEventArgs>(TrackListViewModel_CurrentSelectedChanged);
            //this._root = root.getOrCreate("classement");
            //_currentClassList = _root;
            // findCurrentPlaylist();
            _instance = this;
        }

        void TrackListViewModel_CurrentSelectedChanged(object sender, ClientEventArgs e)
        {
            //if (currentTrack == null)
            //{
            if (currentTrack != TrackListViewModel.HumanSelected)
            {
                currentTrack = TrackListViewModel.HumanSelected;
                if (currentTrack != null)
                {
                    setClassment(currentTrack.Classement, e.client);
                    Name = currentTrack.Name;
                }
                //  OnPropertyChanged(""); 

            }
            //}
        }

        private bool onlyDisabled = false;
        public bool OnlyDisabled
        {
            get { return onlyDisabled; }
            set
            {
                if (value != onlyDisabled)
                {
                    onlyDisabled = value;
                    OnPropertyChanged("OnlyDisabled");
                }
            }
        }


        private bool uncheckAfter = false;
        public bool UncheckAfter
        {
            get { return uncheckAfter; }
            set
            {
                if (value != uncheckAfter)
                {
                    uncheckAfter = value;
                    OnPropertyChanged("UncheckAfter");
                }
            }
        }

        private bool auto = true;
        public bool Auto
        {
            get { return auto; }
            set
            {
                if (value != auto)
                {
                    auto = value;
                    OnPropertyChanged("Auto");
                }
            }
        }

        private ihmInDispo inDispo;
        public ihmInDispo IhmInDispo
        {
            get { return inDispo; }
            set
            {
                if (value != inDispo)
                {
                    inDispo = value;
                    OnPropertyChanged("IhmInDispo");
                }
            }
        }


        public string Name
        {
            get { if (currentTrack != null) return currentTrack.Name; return ""; }
            set { OnPropertyChanged("Name"); }
        }
        private string classement = "-";
        public string Classement
        {
            get { return classement; }
            set
            {
                setClassment(value, null); 
            }

        }

        public void setClassment(string value, IClient client)
        {
            if (value != classement)
            {
                if (isClassment(value))
                {
                    classement = value;
                    if (this.client != null)
                        this.client.cancel();
                    //var client = new SimpleClient("buildStat\t", Logger.getLogger("Classement"));
                    if (client == null)
                        client = new SimpleClient("buildStat\t", Logger.getLogger("Classement"));
                    if (client.Cancel)
                        return; 
                    client.log(value);
                    this.client = client;


                    if (!client.Cancel)
                    {
                       // waitBeforeSignalClassChange(client, value); 
                        new Thread(() => waitBeforeSignalClassChange(client, value)).Start();
                    }
                }

            }
        }


        private void waitBeforeSignalClassChange(IClient client, string value)
        {
            Thread.Sleep(30);
            if (client.Cancel)
                return;
            findCurrentPlaylist(client);
            if (client.Cancel)
                return;
            client.log("fin stats " + value);
            Thread.Sleep(30);
            if (client.Cancel)
                return;
            ihm.signalClassementChange(client);
        }

        public static bool isClassment(string str)
        {
            return pdb.obj.Classement.canBeClassement(str);
        }
        private IClient client;
        private void findCurrentPlaylist(IClient client)
        {
            if (App.bib == null)
                return;
            try
            {
                if (string.IsNullOrEmpty(classement))
                {
                    //  _currentClassList = _root;
                    currentClassList = App.bib.getClass("", true); // new PlayListViewModel(_root);
                }
                else
                {
                    if (!pdb.obj.Classement.canBeClassement(classement))
                        return;

                    currentClassList = App.bib.getClass(classement, true);

                    //var tab = classement.ToCharArray();
                    //var pl = _root;

                    //foreach (char c in tab)
                    //{
                    //    if (c == '.')
                    //        break;
                    //    pl = pl.get(c.ToString());
                    //}
                    //_currentClassList = pl;
                    //  currentClassList = new PlayListViewModel(pl);
                }

                buildStats(client);
            }
            finally
            {
                //  OnPropertyChanged("");
            }
        }

        #region stats
        int d0, d1, d2, d3, d4, d5, d01, d23, d45, d02, d35;
        const int NB_ROW = 4;
        const int NB_COL = 6;
        private int[,] tab = new int[NB_ROW, NB_ROW];
        private DynamicStat stats = null;
        private void buildStats(IClient client)
        {
            if (currentClassList == null)
                return;
            if (App.gen == null)
                return;


            stats = App.gen.generStat(client, classement, onlyDisabled);
            if (client.Cancel)
                return;
            d0 = get(0); // currentClassList.get("0", false).AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d1 = get(1); // currentClassList.get("1").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d2 = get(2);  //currentClassList.get("2").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d3 = get(3); //currentClassList.get("3").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d4 = get(4); //currentClassList.get("4").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d5 = get(5); //currentClassList.get("5").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;

            d01 = d0 + d1;
            d23 = d2 + d3;
            d45 = d4 + d5;

            d02 = d0 + d1 + d2;
            d35 = d3 + d4 + d5;

            //   OnPropertyChanged("");
        }

        public DataTable Stats
        {
            get
            {
                if (stats == null)
                    return null;
                var dt = new DataTable();
                for (int i = -DynamicStatLigne.SEMI_COLS; i <= DynamicStatLigne.SEMI_COLS; i++)
                {
                    dt.Columns.Add(i.ToString(), typeof(int));
                }

                foreach (DynamicStatLigne ligne in stats.rows)
                {
                    DataRow row = dt.Rows.Add();
                    for (int i = -DynamicStatLigne.SEMI_COLS; i <= DynamicStatLigne.SEMI_COLS; i++)
                    {
                        row[i.ToString()] = ligne[i];
                    }

                }

                return dt;

            }
        }

        public DynamicStat getStats(IClient client)
        {
            if (stats == null)
                buildStats(client);
            return stats;
        }

        private int get(int level)
        {
            if (currentClassList == null)
                return 0;
            if (stats == null)
                return 0;

            int row = 2;
            if (classement.Contains("."))
                row = 4;

            return stats[row][level];

            //var sub = currentClassList.get(level.ToString());
            //var pl = currentClassList;
            //int nb = 0;


            //if (onlyDisabled)
            //    nb += currentClassList.AlltracksVmd.Tracks.FindAll(t => t.PieceParentId < 0 && t.Rating == 20 * level).Count;
            //else
            //    nb += currentClassList.AlltracksVm.Tracks.FindAll(t => t.PieceParentId < 0 && t.Rating == 20 * level && (!t.Enabled || t.PieceGen.ClassementProvisoireRecent)).Count;

            //if (sub != null)
            //{
            //    if (onlyDisabled)
            //        nb += sub.AlltracksVmd.AllTracks.FindAll(t => t.PieceParentId < 0).Count;
            //    else
            //        nb += sub.AlltracksVm.AllTracks.FindAll(t => t.PieceParentId < 0 && (!t.Enabled || t.PieceGen.ClassementProvisoireRecent)).Count;
            //}

            //return nb;

            //if (!onlyDisabled)
            //    return tracks.Count;

            //tracks = tracks.FindAll(t => !t.Enabled);

            //return tracks.Count;

        }

        //private int get(string className, int level)
        //{
        //    var currentClassList = App.bib.getClass(className, false);
        //    var sub = currentClassList.get(level.ToString());
        //    List<TrackListViewModel> tracks;
        //    if (sub == null)
        //    {
        //        tracks = currentClassList.Tracks.FindAll(t => t.Rating == 20 * level);
        //    }
        //    else
        //    {
        //        tracks = sub.AllTracks;
        //    }

        //    if (!onlyDisabled)
        //        return tracks.Count;

        //    tracks = tracks.FindAll(t => !t.Enabled);

        //    return tracks.Count;

        //}

        private string getOffset(string classBase, int offset)
        {
            if (string.IsNullOrEmpty(classBase))
                return "";
            return "";
        }


        public int D0 { get { return d0; } }
        public int D1 { get { return d1; } }
        public int D2 { get { return d2; } }
        public int D3 { get { return d3; } }
        public int D4 { get { return d4; } }
        public int D5 { get { return d5; } }

        public int D01 { get { return d01; } }
        public int D23 { get { return d23; } }
        public int D45 { get { return d45; } }

        public int D02 { get { return d02; } }
        public int D35 { get { return d35; } }
        #endregion

        private List<TrackListViewModel> _list;
        public List<TrackListViewModel> getTracks(IClient client)
        {

            if (_list == null)
            {
                if (App.gen == null)
                    return new List<TrackListViewModel>();
                if (client == null)
                    client = new SimpleClient("ClassementTracks", Logger.getLogger("ClassementTracks"));
                var list = App.gen.getTracks(client, classement, onlyDisabled);
                _list = new List<TrackListViewModel>();
                foreach (var p in list)
                {
                    TrackListViewModel t = TrackListViewModel.getOrCreate(p); // App.bib.Musique.FindTrack(p.PieceId);
                    if (t != null)
                        _list.Add(t);
                }
            }
            return _list;

        }
        public void reset()
        {
            _list = null;
        }
        //public AllTracksViewModel Tracks0
        //{
        //    get
        //    {
        //        AllTracksViewModel tracks = null;
        //        if (currentClassList == null)
        //            return null;
        //        if (onlyDisabled)
        //            tracks = currentClassList.AllTrackFatherDisabled;
        //        else
        //            tracks = currentClassList.AllTrackFather;
        //        if (tracks == null)
        //            return null;
        //        if (!onlyDisabled)
        //            tracks = currentClassList.AllTrackFather; 
        //        tracks.refresh();

        //        return tracks;

        //        //var list = currentClassList.AlltracksVm;
        //        //if (onlyDisabled)
        //        //    list = list.FindAll(t => !t.Enabled);

        //        ////if (currentTrack != null)
        //        ////{
        //        ////    foreach (TrackListViewModel t in list)
        //        ////    {
        //        ////        if (t.Location == currentTrack.Location)
        //        ////            t.IsSelected = true;
        //        ////        else
        //        ////            t.IsSelected = false;
        //        ////    }
        //        ////}
        //        //return currentClassList.AlltracksVm; 
        //        //return list;
        //    }
        //}

        public List<TrackListViewModel> Album
        {
            get
            {
                if (currentClassList == null)
                    return null;
                if (currentTrack == null)
                    return null;
                var tracks = App.getAlbum(currentTrack);
                //foreach (TrackListViewModel t in tracks)
                //{
                //    if (t.Location == currentTrack.Location)
                //        t.IsSelected = true;
                //    else
                //        t.IsSelected = false; 
                //}

                return tracks;
            }
        }



        public TrackListViewModel SelectedTrackInClassView
        {
            get
            {
                if (currentTrack == null | currentClassList == null)
                    return null;
                return currentTrack;
            }
            set
            {
            }
        }

        public TrackListViewModel SelectedTrackInAlbumView
        {
            get
            {
                if (currentTrack == null || currentClassList == null)
                    return null;
                var tracks = Album;
                if (tracks == null || tracks.Count == 0)
                    return null;
                return tracks.Find(t => t.PieceId == currentTrack.PieceId);
            }
            set
            {
            }
        }

        public void record()
        {
            App.Indispo = false;
            if (currentTrack == null)
                return;
            var currentPlaying = TrackListViewModel.CurrentPlaying;
            if (currentPlaying != null && currentPlaying.MasterId != currentTrack.MasterId)
            {
                IIhm ihm = App.Instance;
                if (!ihm.Confirm("Modifier le classement de " + currentTrack + " ?", "Classement"))
                    return;
            }



            currentTrack.Classement = classement;


            if (uncheckAfter)
                currentTrack.Enabled = false;

            if (recordClassementObserver != null)
            {
                recordClassementObserver.signalClassementChange();
                if (auto)
                    recordClassementObserver.autoNextTrack(currentTrack);
            }

        }

        //void IClient.log(string phase)
        //{
        //   if (client ==null)
        //        return; 
        //   client.log(phase); 
        //}

        public bool CanRecord
        {
            get
            {
                return currentTrack != null && currentTrack.Enabled && isClassment(classement);
            }
        }

        public ICommand Record { get { return cmdRecord; } }

        //bool IClient.Cancel
        //{
        //    get
        //    {
        //        if (client ==null)
        //            return false; 
        //        return client.Cancel; 
        //    }
        //}
    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\InfoViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using pdb.gen;
using System.Windows.Input;
using pdb.player.ViewModel.Commande;
using pdb.player.ViewModel.Commande.PlayList;
using pdb.util;

namespace pdb.player.ViewModel
{

    class InfoViewModel : ViewModelBase, ISelectedTracks
    {
        private List<TrackListViewModel> list = new List<TrackListViewModel>();
        private HashSet<int> hs = new HashSet<int>();


        private bool withAlbum;
        private bool real;
        private bool withParent;


        private string album;
        private string artist;
        private string name;
        private int? trackNumber;
        private int? year;

        private bool applyAlbum;
        private bool applyArtist;
        private bool applyName;
        private bool applyTrackNumber;
        private bool applyYear;

        private bool loading;

        private TrackListViewModel current;

        public InfoViewModel(TrackListViewModel current)
        {
            this.current = current;
            buidList();
            TrackListViewModel.CurrentHumanSelectedChanged += new EventHandler<ClientEventArgs>(TrackListViewModel_CurrentHumanSelectedChanged);
        }

        void TrackListViewModel_CurrentHumanSelectedChanged(object sender, ClientEventArgs e)
        {
            if (TrackListViewModel.HumanSelected != current)
            {
                this.current = TrackListViewModel.HumanSelected;
                buidList();
            }
        }

        public void init()
        {
            string album = null;
            string artist = null;
            string name = null;
            int? tn = null;
            int? y = null;

            for (int i = 0; i < list.Count; i++)
            {
                var t = list[i];
                if (i == 0)
                {
                    album = t.Album.toKey();
                    artist = t.Artist.toKey();
                    name = t.Name.toKey();
                    if (t.Year > 0)
                        y = t.Year;

                    if (t.TrackNumber > 0)
                        tn = t.TrackNumber;
                }

                else
                {
                    if (t.Album.toKey() != album)
                        album = null;
                    if (t.Artist.toKey() != artist)
                        artist = null;
                    if (t.Name.toKey() != name)
                        name = null;
                    if (!t.Year.Equals(y))// y != null && t.Year != y.Value)
                        y = null;
                    if (!t.TrackNumber.Equals(tn))
                        tn = null;
                }
                if (album == null && artist == null && name == null && tn == null && year == null)
                    break;
            }

            Album = album;
            Artist = artist;
            Name = name;
            // if (tn.HasValue)
            TrackNumber = tn;
            // if (y.HasValue)
            Year = y;



            applyAlbum = false;
            applyArtist = false;
            applyName = false;
            applyTrackNumber = false;
            applyYear = false;
            list.Sort(new TrackComparer());
            OnPropertyChanged("");
        }

        //private void buildAlbum(Piece t)
        //{
        //    foreach (Piece p in t.PieceAlbum)
        //    {
        //        TrackListViewModel tt = TrackListViewModel.getOrCreate(p);
        //        list.Add(tt);
        //    }
        //}



        private void add(Piece p)
        {
            Piece toInsert = p;
            if (real && p.Virtual)
                p = p.Parent;
            if (hs.Add(p.PieceId))
            {
                TrackListViewModel tt = TrackListViewModel.getOrCreate(p);
                list.Add(tt);
            }
            if (withParent && p.Parent != null)
            {
                p = p = p.Parent;
                if (hs.Add(p.PieceId))
                {
                    TrackListViewModel tt = TrackListViewModel.getOrCreate(p);
                    list.Add(tt);
                }
            }

        }

        private void buidList()
        {
            list.Clear();
            hs.Clear();
            loading = true;
            var source = current.PieceGen;
            if (source.Virtual && real)
                source = source.Parent;


            if (withAlbum)
            {
                foreach (Piece p in source.PieceAlbum)
                {
                    add(p);
                }
            }
            else
                add(source);

            init();
            loading = false;
            OnPropertyChanged("List");
        }

        public void Apply()
        {
            App.setChanging();
            foreach (TrackListViewModel t in list)
            {
                if (applyAlbum)
                    t.Album = album;
                if (applyArtist)
                    t.Artist = artist;
                if (applyName)
                    t.Name = name;
                if (applyTrackNumber)
                {
                    if (trackNumber == null)
                        t.TrackNumber = -1;
                    else
                        t.TrackNumber = trackNumber.Value;
                }

                if (applyYear)
                {
                    if (year == null)
                        t.Year = -1;
                    else
                        t.Year = year.Value;
                }

            }

            App.releaseChanging();
            App.invalidateAlbums();
            App.go();
        }

        private bool isUnique { get { return list.Count < 2; } }

        public List<TrackListViewModel> List { get { return list; } }

        public string Album
        {
            get
            {
                return album;
            }
            set
            {
                if (value != album)
                {
                    album = value;
                    ApplyAlbum = true;
                    if (!loading) OnPropertyChanged("Album");
                }
            }
        }

        public string Artist
        {
            get
            {
                return artist;
            }
            set
            {
                if (value != artist)
                {
                    artist = value;
                    ApplyArtist = true;
                    if (!loading) OnPropertyChanged("Artist");
                }
            }
        }


        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                if (value != name)
                {
                    name = value;
                    ApplyName = true;
                    if (!loading) OnPropertyChanged("Name");
                }
            }
        }

        public int? TrackNumber
        {
            get
            {
                return trackNumber;
            }
            set
            {
                if (value != trackNumber)
                {
                    trackNumber = value;
                    ApplyTrackNumber = true;
                    if (!loading) OnPropertyChanged("TrackNumber");
                }
            }
        }

        public int? Year
        {
            get
            {
                return year;
            }
            set
            {
                if (value != year)
                {
                    year = value;
                    ApplyYear = true;
                    if (!loading) OnPropertyChanged("Year");
                }
            }
        }

        public bool ApplyAlbum
        {
            get
            {
                return applyAlbum;
            }
            set
            {

                if (value != applyAlbum)
                {
                    applyAlbum = value;
                    if (!loading) OnPropertyChanged("ApplyAlbum");
                }
            }
        }

        public bool ApplyArtist
        {
            get
            {
                return applyArtist;
            }
            set
            {
                if (value != applyArtist)
                {
                    applyArtist = value;
                    if (!loading) OnPropertyChanged("ApplyArtist");
                }
            }
        }

        public bool ApplyName
        {
            get
            {
                return applyName;
            }
            set
            {
                if (value != applyName)
                {
                    applyName = value;
                    if (!loading) OnPropertyChanged("ApplyName");
                }
            }
        }


        public bool ApplyTrackNumber
        {
            get
            {
                return applyTrackNumber;
            }
            set
            {
                if (value != applyTrackNumber)
                {
                    applyTrackNumber = value;
                    if (!loading) OnPropertyChanged("ApplyTrackNumber");
                }
            }
        }

        public bool ApplyYear
        {
            get
            {
                return applyYear;
            }
            set
            {
                if (value != applyYear)
                {
                    applyYear = value;
                    if (!loading) OnPropertyChanged("ApplyYear");
                }
            }
        }


        public bool WithAlbum
        {
            get
            {
                return withAlbum;
            }
            set
            {
                if (value != withAlbum)
                {
                    withAlbum = value;
                    buidList();
                    OnPropertyChanged("WithAlbum");
                }
            }
        }

        public bool WithParent
        {
            get
            {
                return withParent;
            }
            set
            {
                if (value != withParent)
                {
                    withParent = value;
                    buidList();
                    OnPropertyChanged("WithParent");
                }
            }
        }

        public bool Real
        {
            get
            {
                return real;
            }
            set
            {
                if (value != real)
                {
                    real = value;
                    buidList();
                    OnPropertyChanged("Real");
                }
            }
        }


        private ICommand _contextInfo;
        public ICommand Info { get { if (_contextInfo == null) _contextInfo = new InfoCmd(); return _contextInfo; } }

        private ICommand _ContextCmdAddToList;
        public ICommand ContextCmdAddToList { get { if (_ContextCmdAddToList == null) _ContextCmdAddToList = new AddToList(this, App.Instance); return _ContextCmdAddToList; } }






        List<TrackListViewModel> ISelectedTracks.SelectedTracks
        {
            get { return list; }
        }

        private class TrackComparer : IComparer<TrackListViewModel>

        {
            public int Compare(TrackListViewModel x, TrackListViewModel y)
            {
                var xx = x.PieceId;
                var yy = y.PieceId;
                if (xx > 0)
                {
                    if (yy > 0)
                        return xx.CompareTo(yy);
                    else
                        return -1;
                }
                else
                {
                    if (yy < 0)
                        return xx.CompareTo(yy);
                    else
                        return -1;
                }

            }


        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\PlayerViewModel.cs">
    <content><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Threading;
using System.Windows.Input;
using System.Windows.Threading;
using pdb.gen;
using pdb.gen.conf;
using pdb.gen.medianne;
using pdb.gen.Tuning;
using pdb.player.engine;
using pdb.player.engine.build;
using pdb.player.ViewModel.Commande;
using pdb.util;
using pdb.gen.auto;
using pdb.gen.albums;

namespace pdb.player.ViewModel
{


    enum positionstate
    {
        free,
        cannotPrevious,
        cannotForward
    }

    class HiddenPlayList : ItrackProvider
    {
        private ICollectionView viewOrg;
        private PlayListViewModel pl;
        private static List<TrackListViewModel> hiddenSelected = new List<TrackListViewModel>();

        public HiddenPlayList(PlayListViewModel pl, ICollectionView viewOrg)
        {
            this.viewOrg = viewOrg;
            this.pl = pl;
        }
        public ICollectionView PresentationTracks
        {
            get { return viewOrg; }
        }

        public void Focus(TrackListViewModel t)
        {

        }

        public PlayListViewModel PlayList
        {
            get { return pl; }
        }


        public void doFilter(string filter)
        {
            PlayerViewModel.doFilter(PresentationTracks, filter);
        }


        public List<TrackListViewModel> SelectedTracks
        {
            get { return hiddenSelected; }
        }
    }



    class PlayerViewModel : ViewModelBase
    {
        private static PlayerViewModel _instance;
        private static volatile object _lock = new object();
        private static ConfAlbumSort confAlbumSort;
        public static ConfAlbumSort ConfAlbumSort { get { return confAlbumSort; } set { confAlbumSort = value; } }
        public static PlayerViewModel Instance
        {
            get
            {
                if (_instance == null)
                {
                    lock (_lock)
                    {
                        if (_instance == null)
                            _instance = new PlayerViewModel();
                    }
                }
                return _instance;
            }
        }

        public ConfFilter ConfFilter { get { return FilterTask.conf; } }
        private IPlayerEngine _player;

        public IPlayerEngine Player
        {
            get
            {
                if (_player == null)
                {
                    lock (_lock)
                    {
                        if (_player == null)
                        {
                            _player = PlayerBuilder.create("vlcplugin");
                            _player.mediaEndReached += player_mediaEndReached;
                            _player.Volume = volume;

                            new Thread(refreshLoop).Start();
                        }
                    }
                }
                return _player;
            }
        }

        private TrackListViewModel currentTrack;
        private PlayListViewModel currentPl;
        public event EventHandler currentTrackChange;
        public event EventHandler resumeChange;
        public static event EventHandler autoChange;
        private playerstate state;
        private positionstate _positionstate;
        private bool onlyEnabled = true;
        // private bool sortByAlbum = true;
        private bool withVirtualAlbum = CConf.ConfGen.AlbumVirtual;
        private bool withArtistVirtual = CConf.ConfGen.ArtistVirtual;
        private bool navAuto = CConf.ConfGen.NavAuto;
        public bool NavAuto
        {
            get { return navAuto; }
            set
            {
                if (value != navAuto)
                {
                    navAuto = value;
                    OnPropertyChanged("NavAuto");
                }
            }
        }

        private bool selectAuto = CConf.SelectAuto;
        public bool SelectAuto
        {
            get { return selectAuto; }
            set
            {
                if (value != selectAuto)
                {
                    selectAuto = value;
                    OnPropertyChanged("SelectAuto");
                }
            }
        }

        private bool filterOnlyNext = false;
        public bool FilterNext
        {
            get { return filterOnlyNext; }
            set
            {
                if (value != filterOnlyNext)
                {
                    filterOnlyNext = value;
                    OnPropertyChanged("FilterNext");
                    //  App.gen.FilterNext = value;
                }
            }
        }
        ItrackProvider _real;
        private Logger log;
        // public static IPlayerEngine Player { get { return Instance.player; } }


        public bool OnlyEnabled
        {
            get
            {
                return onlyEnabled;
            }
            set
            {
                if (value != onlyEnabled)
                {
                    onlyEnabled = value;
                    OnPropertyChanged("OnlyEnabled");
                }
            }
        }
        private bool createRot = true;
        public bool CreateRot
        {
            get
            {
                return createRot;
            }
            set
            {
                if (value != createRot)
                {
                    createRot = value;
                    OnPropertyChanged("CreateRot");
                }
            }
        }

        public bool SortByAlbum
        {
            get
            {
                return confAlbumSort.Enabled;
            }
        }
        //private albumSortMode sortAlbumMode;
        //public albumSortMode SortAlbumMode
        //{
        //    get { return sortAlbumMode; }
        //    set
        //    {
        //        if (value != sortAlbumMode)
        //        {
        //            sortAlbumMode = value;
        //            OnPropertyChanged("SortAlbumMode");
        //            App.go();
        //        }
        //    }
        //}

        public bool WithVirtualAlbum
        {
            get { return withVirtualAlbum; }
            set
            {
                if (value != withVirtualAlbum)
                {
                    withVirtualAlbum = value;
                    OnPropertyChanged("WithVirtualAlbum");
                    App.go();
                }
            }
        }

        public bool WithVirtualArtist
        {
            get { return withArtistVirtual; }
            set
            {
                if (value != withArtistVirtual)
                {
                    withArtistVirtual = value;
                    OnPropertyChanged("WithVirtualArtist");
                    App.go();
                }
            }
        }



        private PlayerViewModel()
        {
            this.log = Logger.getLogger("PlayerViewModel");
            //player.mediaEndReached += player_mediaEndReached;
            //player.Volume = volume;

           // TrackListViewModel.CurrentHumanSelectedChanged += TrackListViewModel_CurrentHumanSelectedChanged;


            //new Thread(refreshLoop).Start();
            this.currentPl = PlayListViewModel.SelectedPlayList;
        }

        void player_mediaEndReached(object sender, EventArgs e)
        {
            var track = this.CurrentTrack;
            if (track != null)
                track.Piece.recordJustReadTrack();
            next();
            App.go();
        }

        #region commande
        private ICommand cmdPlayPause;
        private ICommand cmdForward;
        private ICommand cmdStop;
        private ICommand cmdBackWard;
        private readonly static TimeSpan LIMIT_BACK = TimeSpan.FromSeconds(5.1);

        public ICommand Play
        {
            get
            {
                if (cmdPlayPause == null)
                    cmdPlayPause = new PlayPause();
                return cmdPlayPause;
            }
        }

        public ICommand Forward
        {
            get
            {
                if (cmdForward == null)
                    cmdForward = new ForWard();
                return cmdForward;
            }
        }

        public ICommand BackWard
        {
            get
            {
                if (cmdBackWard == null)
                    cmdBackWard = new BackWard();
                return cmdBackWard;
            }
        }

        public bool canForward()
        {
            return canPlay() && _positionstate != positionstate.cannotForward;
        }
        public bool canBackWard()
        {
            if (!canPlay())
                return false;
            if (PlayJustStarted)
                return _positionstate != positionstate.cannotPrevious;
            return true;

        }

        public void backWard()
        {
            if (PlayJustStarted)
                movetoPrevious();
            else
                goStartTrack();
        }

        public void checkNavIni()
        {
            if (!navAuto)
                return;

            var tracks = PresentationTracks;
            if (tracks == null)
                return;
            bool foundFirst = false;
            TrackListViewModel f = null;

            foreach (TrackListViewModel t in tracks)
            {
                if (t.Index == 1)
                {
                    foundFirst = true;
                }
                if (foundFirst && t.PieceGen.IsNext)
                {
                    f = t;
                    break;
                }
            }

            if (f == null)
                return;

            tracks.MoveCurrentTo(f);
            focus(f);

        }


        public void forwardAuto()
        {
            var _track = new List<TrackListViewModel>();
            var __collec = PresentationTracks;

            int maxIndex = int.MaxValue;
            int target = 1;
            TrackListViewModel _next = null;

            foreach (TrackListViewModel tt in __collec)
            {
                var index = tt.Index;
                if (tt == currentTrack)
                {
                    if (currentTrack.Index == 1)
                        target = 2;
                    continue;
                }
                if (tt.MasterId == currentTrack.MasterId)
                    continue;
                if (index < maxIndex)
                {
                    maxIndex = index;
                    _next = tt;
                    if (maxIndex == target)
                        break;
                }

            }

            if (_next != null)
            {
                __collec.MoveCurrentTo(_next);
                CurrentTrack = _next;

                Player.play(_next.Location, true);

                var currentPlaying = TrackListViewModel.CurrentPlaying;
                if (currentPlaying != null)
                    TrackListViewModel.setHumanSelected(PlayListViewModel.SelectedPlayList, currentPlaying); //   .HumanSelected = currentPlaying; 


            }


        }

        public void forward()
        {
            if (!navAuto)
                movetoNext(true);
            else
            {
                try
                {
                    var t = TrackListViewModel.HumanSelected;
                    if (t != null)
                    {
                        t.refresh();
                        //  var g = t.Grouping; 
                    }

                    var pl = PlayListViewModel.SelectedPlayList;
                    if (pl == null || currentTrack == null)
                    {
                        movetoNext(true);
                        return;
                    }





                    string _album = "";
                    if (currentTrack != null)
                        _album = currentTrack.Album;
                    movetoNext(true); // des fois le morceaux affiché n'est pas celui joué. Dommage...
                    if (currentTrack != null && currentTrack.Album == _album)
                    {
                        if (state == playerstate.play)
                            play(false, true);
                        return;
                    }

                    if (currentTrack == null)
                        return;
                    var album = App.gen.Albums.getAlbum(CurrentTrack.PieceGen);
                    var tracks = album.Tracks;
                    //    tracks.Sort(new PieceClassementComparer());
                    //  decimal val = int.MaxValue;
                    int i = 0;
                    TrackListViewModel choose = null;
                    if (confAlbumSort.ComposantsUtiles[0].cmpMin > modeMin.non)
                    {
                        var next = album.Next;
                        if (next != null)
                            choose = TrackListViewModel.getOrCreate(next); // pl.FindTrack(next.PieceId);
                    }
                    else
                    {
                        for (i = 0; i < tracks.Count; i++)
                        {
                            var item = tracks[i];
                            if (item != null && (!onlyEnabled || item.Enabled))
                            {
                                var tl = TrackListViewModel.getOrCreate(item); // pl.FindTrack(item.PieceId);
                                if (!tl.ExistsNow)
                                    continue;
                                choose = tl;

                                //val = v;
                                // choose = tl;
                                if (!item.Classement.isPositive())
                                {
                                    break;
                                    //if (confAlbumSort.ComposantsUtiles[0].cmpMin != modeMin.toujours)
                                    //    choose = tl;
                                    //break;
                                }
                                // choose = tl;
                            }
                        }
                    }

                    if (choose != null)
                    {
                        //var p = choose.PieceGen;
                        //if (p != null)
                        //   confAlbumSort.auto(p.AutoCoeff1, p.AutoCoeff2); 
                        if (choose != currentTrack)
                        {
                            reset(provider, choose, state == playerstate.play);
                            var coll = PresentationTracks;
                            coll.MoveCurrentTo(choose);
                        }

                        focus(choose);

                    }
                }
                finally
                {
                    refresh();
                    //doFilter(_lastFilter);
                }

            }
        }

        public bool isHidden { get { return provider is HiddenPlayList; } }

        public void pause()
        {
            State = playerstate.pause;
            Player.pause();
        }

        private bool PlayJustStarted { get { return ElapsedTime < LIMIT_BACK; } }

        #endregion

        #region navigation
        public bool canPlay()
        {
            //if (currentPl == null)
            //    return false;
            var tracks = PresentationTracks;
            if (tracks == null)
                return false;
            if (tracks.IsEmpty)
                return false;
            return true;
        }



        private void movetoNext(bool autoPlay)
        {
            move(true, autoPlay);
            //   doFilter(_lastFilter);
        }

        private void goStartTrack()
        {
            Position = 0;
        }

        private void move(bool _toNext, bool autoPlay)
        {
            bool playing = state == playerstate.play;
            TrackListViewModel item = null;



            var tracks = PresentationTracks;

            Func<bool> _move;
            if (_toNext)
                _move = tracks.MoveCurrentToNext;
            else
                _move = tracks.MoveCurrentToPrevious;
            try
            {

                int masterId = 0;
                if (currentTrack != null)
                {
                    tracks.MoveCurrentTo(currentTrack);
                    masterId = currentTrack.MasterId;
                }
                if (!_move())
                {
                    return;
                }

                while (true)
                {
                    item = tracks.CurrentItem as TrackListViewModel;
                    if (item != null && item.ExistsNow && (!onlyEnabled || item.Enabled) && item.MasterId != masterId)
                        break;
                    if (!_move())
                    {
                        item = null;
                        return;
                    }

                }



            }
            finally
            {
                if (item == null)
                    _positionstate = _toNext ? positionstate.cannotForward : positionstate.cannotPrevious;
                CurrentTrack = item;
                tracks.MoveCurrentTo(currentTrack);
                if (item != null)
                {
                    // focus(item);
                    if (playing && autoPlay)
                    {
                        Player.play(item.Location, true);
                        if (selectAuto)
                            TrackListViewModel.setHumanSelected(currentPl, item);
                    }
                    // focus(item);
                }

                refresh();

            }
        }


        private void movetoPrevious()
        {
            move(false, true);
            //bool playing = state == playerstate.play;
            //TrackListViewModel item = null;

            //var tracks = PresentationTracks;
            //try
            //{


            //    if (currentTrack != null)
            //        tracks.MoveCurrentTo(currentTrack);
            //    if (!tracks.MoveCurrentToPrevious())
            //    {
            //        _positionstate = positionstate.cannotPrevious;
            //        state = playerstate.stop;
            //        return;
            //    }

            //    while (true)
            //    {
            //        item = tracks.CurrentItem as TrackListViewModel;
            //        if (item.Enabled)
            //            break;
            //        if (!tracks.MoveCurrentToPrevious())
            //        {
            //            _positionstate = positionstate.cannotPrevious;
            //            state = playerstate.stop;
            //            return;
            //        }

            //    }



            //}
            //finally
            //{
            //    CurrentTrack = item;
            //    tracks.MoveCurrentTo(currentTrack);
            //    if (item != null)
            //    {
            //        focus(tracks.CurrentPosition);
            //        if (playing)
            //        {
            //            player.play(item.Location, true);

            //        }
            //    }

            //}
        }



        public void play(bool forceDisabled, bool reload)
        {

            TrackListViewModel item = currentTrack;
            var tracks = PresentationTracks;
            try
            {
                if (!canPlay())
                    return;

                while (true)
                {
                    if (item == null)
                    {
                        _positionstate = positionstate.cannotPrevious;

                        if (!tracks.MoveCurrentToFirst())
                        {
                            //_positionstate = positionstate.cannotPrevious; 
                            return;
                        }

                        while (true)
                        {
                            item = tracks.CurrentItem as TrackListViewModel;
                            if (item != null && item.ExistsNow && (!onlyEnabled || item.Enabled))
                                break;
                            else if (currentTrack != null)
                            {
                                item = currentTrack;
                                break;
                            }
                            if (!tracks.MoveCurrentToNext())
                            {
                                _positionstate = positionstate.cannotForward;
                                return;
                            }
                            _positionstate = positionstate.free;
                        }

                        if (item == null)
                            return;


                    }
                    tracks.MoveCurrentTo(item);
                    if (tracks.CurrentPosition >= 0)
                        break;
                    item = null;
                }

                CurrentTrack = item;

                //  focus(item);

                State = playerstate.play;
                //item.Playing = true;
                Player.play(currentTrack.Location, reload);
                // Volume = Volume;
                focus(item);
            }
            finally
            {
                if (!canPlay() || currentTrack == null)
                    stop();
                refresh();
            }
        }



        public void stop()
        {

            if (isHidden)
            {
                provider = _real;
                tracks = provider.PresentationTracks;
            }

            State = playerstate.stop;
            Player.stop();
            refresh();

        }

        private void next()
        {
            if (navAuto)
                forward();
            else
                movetoNext(true);
        }



        #endregion

        private ItrackProvider provider;
        //internal ItrackProvider Provider
        //{
        //    set
        //    {

        //        //if (state != playerstate.stop)
        //        //{
        //        //    if (provider != null)
        //        //    {
        //        //        if (provider is HiddenPlayList)
        //        //        {
        //        //        }
        //        //        else
        //        //        {
        //        //            provider = new HiddenPlayList(provider.PresentationTracks);
        //        //        }
        //        //    }
        //        //    else
        //        //        provider = value;
        //        //}
        //        provider = value;
        //    }
        //}
        public ICollectionView PresentationTracks
        {
            get
            {
                if (provider == null)
                    return null;
                return provider.PresentationTracks;
            }
        }

        public void focusHelp()
        {
            var t = TrackListViewModel.CurrentPlaying;
            if (t == null)
                t = TrackListViewModel.HumanSelected;
            if (t == null) return;
            focus(t);
        }
        private void focus(TrackListViewModel t)
        {
            if (provider == null)
                return;
            provider.Focus(t);
        }






        public playerstate State
        {
            get
            {
                return state;
            }
            set
            {
                if (value != state)
                {
                    state = value;
                    OnPropertyChanged("State");
                    OnPropertyChanged("SrcPlayPause");
                }
            }
        }



        private bool bEnd;
        private void refreshLoop()
        {
            while (!bEnd)
            {
                Thread.Sleep(1000);
                refresh();
            }
        }

        private void refresh()
        {
            try
            {

                //  this.IndexList = infos.IndexList;
                var _position = _player.Position;
                if (_position != position) { position = _position; OnPropertyChanged("Position"); }

                this.ElapsedTime = _player.Elapsed;
                this.Length = _player.Duration;

                this.RemainingTime = Length - ElapsedTime;
                if (CurrentTrack == null)
                {
                    CurrentName = "";
                    CurrentAuthorAlbum = "";
                }
                else
                {
                    CurrentName = currentTrack.Name;
                    var sb = new System.Text.StringBuilder();
                    sb.Append(currentTrack.Artist);
                    sb.Append(" - ");
                    sb.Append(currentTrack.Album);
                    if (currentTrack.PieceGen != null)
                    {
                        if (currentTrack.PieceGen.Virtual)
                        {
                            sb.Append(" (");
                            sb.Append(currentTrack.PieceGen.Master.Album);
                            sb.Append(")");
                        }
                    }
                    CurrentAuthorAlbum = sb.ToString();
                    if (currentTrack.ExistsNow)
                        currentTrack.Duration = length;

                }

            }
            catch { }

        }


        public TrackListViewModel CurrentTrack
        {
            get { return currentTrack; }
            set
            {
                if (value != null)
                    value.Playing = true;
                if (value != currentTrack)
                {
                    if (currentTrack != null)
                        currentTrack.Playing = false;
                    currentTrack = value;
                    if (currentTrack == null)
                        stop();
                    if (currentTrackChange != null)
                        currentTrackChange(Instance, EventArgs.Empty);
                }
            }
        }

        public static void reset(ItrackProvider provider, TrackListViewModel track)
        {
            reset(provider, track, true);
        }

        public static void makeauto(TrackListViewModel current)
        {
            if (current != null)
            {
                var p = current.PieceGen;
                if (p != null)
                {
                    if (MedianneDriver.auto(confAlbumSort, p))
                        App.gen.Albums.invalidateAll(false);
                    if (autoChange != null)
                        autoChange(current, EventArgs.Empty);
                }
            }
        }

        public static void reset(ItrackProvider provider, TrackListViewModel track, bool autoPlay)
        {
            if (provider != null)
            {
                Instance.provider = provider;
                if (provider.PlayList != null)
                    Instance.currentPl = provider.PlayList;
                Instance.provider = provider;
                Instance.tracks = provider.PresentationTracks;

            }
            Instance._positionstate = positionstate.free;






            Instance.CurrentTrack = track;
            if (autoPlay)
                Instance.play(true, true);
            //Instance.makeResume();
            App.go();
        }


        public PlayListViewModel PlayList
        {
            get
            {
                return currentPl;
            }
        }
        ICollectionView tracks = null;
        public void set(ItrackProvider provider)
        {
            try
            {
                if (provider == null)
                {
                    log.log("provider null");
                    this.provider = null;
                    this.currentPl = null;
                    return;
                }
                else if (this.provider == null)
                {
                    log.log("init provider " + provider);
                    this.provider = provider;
                    this.currentPl = provider.PlayList;
                    this.tracks = provider.PresentationTracks;
                }

                else
                {


                    if (provider.PlayList == currentPl || state == playerstate.stop)
                    {
                        if (isHidden)
                        {
                            log.log("retour au réel");
                            this.provider = provider;
                            this.currentPl = provider.PlayList;
                            this.tracks = provider.PresentationTracks;
                            var currentPlaying = TrackListViewModel.CurrentPlaying;
                            tracks.MoveCurrentTo(currentPlaying);
                            provider.Focus(currentPlaying);
                        }
                        else
                        {
                            log.log("détection standart");
                            this.provider = provider;
                            this.currentPl = provider.PlayList;
                            this.tracks = provider.PresentationTracks;
                        }
                    }

                    else
                    {
                        if (isHidden)
                        {
                            log.log("toujours virtuel");
                        }
                        else
                        {


                            log.log("passage en virtuel");
                            this.provider = new HiddenPlayList(currentPl, tracks);
                            this._real = provider;
                            // this.currentPl = provider.PlayList;
                            //this.tracks = provider.PresentationTracks; 
                        }
                    }
                }

                _positionstate = positionstate.free;
                if (currentPl == null)
                {
                    CurrentTrack = null;
                    stop();
                    return;
                }

            }
            finally
            {
                OnPropertyChanged("State");
                OnPropertyChanged("SrcPlayPause");
                //makeResume();
            }
        }
        //  private class filterTask
        //  {
        //      public filterTask()
        //      {
        //      }
        //      public string filter;
        //      //public string waitingFilter; 
        //      //private bool cancel; 
        //      //private Thread th;
        //      public Predicate<object> Filter;
        //      //public ICollectionView coll;
        //      //private bool busy;

        //      public void go()
        //      {

        //          if (!string.IsNullOrEmpty(filter))
        //              filter = filter.Trim().ToLower().removeAccent();

        //          var tab = filter.Split(' ');
        //          // var coll = CollectionViewSource.GetDefaultView(dg.ItemsSource); 
        //          lock (this)
        //              busy = true;
        //          coll.Filter = item =>
        //          {
        //              TrackListViewModel vitem = item as TrackListViewModel;
        //              if (vitem == null) return false;

        //              //if (Regex.IsMatch(filter, @"[0-5]+\.?[0-5]?") || Regex.IsMatch(filter, @"\.[0-5]?"))
        //              //    return vitem.Classement.StartsWith(filter);
        //              bool ok = true;
        //              var name = vitem.Name.Trim().ToLower().removeAccent();
        //              var artist = vitem.Artist.Trim().ToLower().removeAccent();
        //              var album = vitem.Album.Trim().ToLower().removeAccent();
        //              var classement = vitem.Classement;
        //              foreach (string str in tab)
        //              {
        //                  if (!ok)
        //                      return false;
        //                  if (string.IsNullOrEmpty(str))
        //                      continue;
        //                  var str_ = str.Trim();
        //                  if (str_ == string.Empty)
        //                      continue;

        //                  ok = name.Contains(str_)
        //                      || artist.Contains(str_)
        //                      || album.Contains(str_)
        //                      || classement.StartsWith(str_);

        //              }

        //              return ok;

        //          };

        //          lock (this)
        //              busy = true;

        //      }
        //      private void getItems()
        //      {
        //          try
        //          {
        //              if (!string.IsNullOrEmpty(filter))
        //                  filter = filter.Trim().ToLower().removeAccent();
        //              if (cancel)
        //                  return;
        //              var tab = filter.Split(' ');
        //              if (cancel)
        //                  return;
        //              Filter = item =>
        //              {
        //                  TrackListViewModel vitem = item as TrackListViewModel;
        //                  if (vitem == null) return false;

        //                  //if (Regex.IsMatch(filter, @"[0-5]+\.?[0-5]?") || Regex.IsMatch(filter, @"\.[0-5]?"))
        //                  //    return vitem.Classement.StartsWith(filter);
        //                  bool ok = true;
        //                  var name = vitem.Name.Trim().ToLower().removeAccent();
        //                  var artist = vitem.Artist.Trim().ToLower().removeAccent();
        //                  var album = vitem.Album.Trim().ToLower().removeAccent();
        //                  var classement = vitem.Classement;
        //                  foreach (string str in tab)
        //                  {
        //                      if (!ok)
        //                          return false;
        //                      if (string.IsNullOrEmpty(str))
        //                          continue;
        //                      var str_ = str.Trim();
        //                      if (str_ == string.Empty)
        //                          continue;

        //                      ok = name.Contains(str_)
        //                          || artist.Contains(str_)
        //                          || album.Contains(str_)
        //                          || classement.StartsWith(str_);

        //                  }

        //                  return ok;

        //              };
        //          }
        //          catch (Exception ex)
        //          {
        //              App.log.log(ex.ToString()); 
        //          }
        //      }
        //  }
        ////  private static filterTask filtertask = new filterTask(); 
        private static IDisposable work;
        private static FilterTask filterTask = null;

        private static bool cancel;
        public static void doFilter0(ICollectionView coll, string filter)
        {

            ILogger log = App.log;
            log.log("filter=>{0}", filter);
            lock (_lock)
            {
                if (work == null)
                {
                    log.log("filter=>{0} verrou libre", filter);
                    work = coll.DeferRefresh();
                }
                else
                {
                    log.log("filter=>{0} verrou pris, abandon tâche en cours", filter);
                    cancel = true;
                }
            }

            var _cancel = cancel;
            if (_cancel)
                log.log("filter=>{0} verrou pris, attente fin tâche en cours", filter);
            while (cancel)
                Thread.Sleep(30);

            if (_cancel)
                log.log("filter=>{0} verrou pris, fin d'attente fin tâche en cours", filter);

            if (!string.IsNullOrEmpty(filter))
                filter = filter.Trim().ToLower().removeAccent();

            var tab = filter.Split(' ');
            // var coll = CollectionViewSource.GetDefaultView(dg.ItemsSource); 


            _cancel = cancel;
            if (!_cancel)
            {
                lock (_lock)
                    _cancel = cancel;
            }

            if (!_cancel)
            {
                log.log("filter=>{0} lancement filtre", filter);
                coll.Filter = item =>
                {
                    if (cancel)
                        return false;
                    TrackListViewModel vitem = item as TrackListViewModel;
                    if (vitem == null) return false;



                    //if (Regex.IsMatch(filter, @"[0-5]+\.?[0-5]?") || Regex.IsMatch(filter, @"\.[0-5]?"))
                    //    return vitem.Classement.StartsWith(filter);
                    bool ok = true;
                    var name = vitem.Name.Trim().ToLower().removeAccent();
                    var artist = vitem.Artist.Trim().ToLower().removeAccent();
                    var album = vitem.Album.Trim().ToLower().removeAccent();
                    List<string> paths = null;

                    var classement = vitem.Classement;
                    foreach (string str in tab)
                    {
                        if (!ok)
                            return false;
                        if (string.IsNullOrEmpty(str))
                            continue;
                        var str_ = str.Trim();
                        if (str_ == string.Empty)
                            continue;

                        ok = name.Contains(str_)
                            || artist.Contains(str_)
                            || album.Contains(str_)
                            || classement.StartsWith(str_);

                        if (!ok)
                        {
                            if (paths == null)
                            {
                                paths = new List<string>();
                                foreach (var f in vitem.Piece.Files)
                                {
                                    paths.Add(f.File.ToLower().removeAccent());
                                }
                            }

                            foreach (string path in paths)
                            {
                                if (path.Contains(str))
                                    return true;
                            }
                        }
                    }

                    return ok;

                };

                if (cancel)
                    log.log("filter=>{0} la tâche a été interrompue", filter);
            }
            else
            {
                log.log("filter=>{0} finalement pas de lancement", filter);
            }
            lock (_lock)
            {
                if (!cancel)
                {
                    if (work != null)
                    {
                        log.log("filter=>{0} application du filtre", filter);
                        work.Dispose();
                    }
                    else
                    {
                        log.log("filter=>{0} ben pourquoa le work était null ????", filter);
                    }
                    work = null;

                }
            }

            lock (_lock)
                cancel = false;

            log.log("filter=>{0} fin", filter);
        }




        private class FilterTask
        {
            public static ConfFilter conf = new ConfFilter();
            private ICollectionView coll;
            public readonly string filter0;
            public readonly bool filterNext;

            private string filter;
            private bool _cancel;
            private bool end;
            private Thread th;
            SimpleChrono log;
            public string step;
            private HashSet<int> l = new HashSet<int>();
            public FilterTask(string filter, bool filterNext, ICollectionView coll, SimpleChrono log)
            {
                this.filter0 = filter;
                this.filter = filter;
                this.filterNext = filterNext;

                this.coll = coll;
                this.log = log;
                step = "ini";
                th = new Thread(calc);
                th.Start();
            }

            public void cancel()
            {
                lock (_lock)
                    _cancel = true;
            }

            public bool End { get { return end; } }
            public bool Cancel { get { return _cancel; } }
            private bool toClear;

            private void calc()
            {
                step = "calc";
                try
                {
                    if (string.IsNullOrEmpty(filter) && !filterNext)
                    {
                        toClear = true;
                        apply();
                        return;
                    }
                    toClear = false;

                    filter = filter.Trim().ToLower().removeAccent();
                    //if (string.IsNullOrWhiteSpace(filter) && !filterNext && conf.includeVirtual && conf.includeVirtualArtist)
                    //{
                    //    clear(); 
                    //    return;
                    //}

                    var tab = filter.Split(' ');

                    int nb = 0;
                    int nbOk = 0;

                    foreach (TrackListViewModel vitem in coll.SourceCollection)
                    {
                        if (_cancel)
                            return;

                        if (filterNext && !vitem.PieceGen.IsNext)
                            continue;
                        if (conf.onlyMaster && vitem.Piece.Parent != null)
                            continue;
                        if (!filterNext)
                        {
                            if (vitem.PieceGen.Virtual && !conf.includeVirtual)
                                continue;
                            if (vitem.PieceGen.VirtualMode == pdb.gen.albums.virtualMode.artist && !conf.includeVirtualArtist)
                                continue;
                        }



                        bool ok = true;

                        if (conf.onlyId)
                        {
                            ok = filter == vitem.PieceId.ToString();
                        }
                        else
                        {

                            var name = vitem.Name.Trim().ToLower().removeAccent();
                            var artist = vitem.Artist.Trim().ToLower().removeAccent();
                            var album = vitem.Album.Trim().ToLower().removeAccent();
                            var masterAlbum = vitem.MasterAlbum.Trim().ToLower().removeAccent();
                            var classement = vitem.Classement;
                            List<string> paths = null;
                            foreach (string str in tab)
                            {
                                if (ok)
                                {
                                    if (string.IsNullOrEmpty(str))
                                        continue;
                                    var str_ = str.Trim();
                                    if (str_ == string.Empty)
                                        continue;

                                    ok = name.Contains(str_)
                                        || artist.Contains(str_)
                                        || album.Contains(str_)
                                        || masterAlbum.Contains(str_)
                                        || classement.StartsWith(str_)
                                        || (conf.includeId && str == vitem.PieceId.ToString())
                                        ;

                                    if (!ok)
                                    {
                                        if (paths == null)
                                        {
                                            paths = new List<string>();
                                            foreach (var f in vitem.Piece.Files)
                                            {
                                                paths.Add(f.File.ToLower().removeAccent());
                                            }
                                        }

                                        foreach (string path in paths)
                                        {
                                            if (path.Contains(str))
                                            {
                                                ok = true;
                                                break;
                                            }
                                        }
                                    }

                                }
                                else
                                    break;

                            }
                        }


                        nb++;
                        if (ok)
                        {
                            if (conf.family)
                            {
                                foreach (Piece p in vitem.PieceGen.Master)
                                {
                                    if (!filterNext)
                                    {
                                        if (p.Virtual && !conf.includeVirtual)
                                            continue;
                                        if (p.VirtualMode == pdb.gen.albums.virtualMode.artist && !conf.includeVirtualArtist)
                                            continue;
                                    }
                                    l.Add(p.PieceId);
                                }
                            }
                            else
                                l.Add(vitem.PieceId);

                            nbOk++;
                        }
                    }

                    log.log(string.Format("{0}/{1}", nbOk, nb));
                    // log.log(string.Format("calc:{0} item{1} {2} sélectionné{3}", nb, (nb > 1 ? "s" : ""), nbOk, (nbOk > 1 ? "s" : "")));   

                    lock (_lock)
                    {
                        if (_cancel)
                            return;
                    }


                    apply();


                }
                finally
                {
                    if (_cancel)
                    {
                        lock (_lock)
                            end = true;
                        log.log("tache terminée par cancel");
                    }
                }





            }

            private void applyImpl()
            {
                step = "apply";

                bool __cancel = _cancel;

                if (!__cancel)
                {
                    lock (_lock)
                        __cancel = _cancel;
                }

                if (__cancel)
                    return;
                step = "applyAppDispatcher";
                try
                {
                    if (toClear)
                    {
                        log.log("clear filter");
                        coll.Filter = null;
                        log.log("fin clear filter");
                        return;
                    }

                    if (work == null)
                    {
                        log.log("creation du tempo");
                        work = coll.DeferRefresh();
                    }
                    else
                    {
                        log.log("tempo déjà créé ");

                    }


                    coll.Filter = item =>
                    {
                        if (_cancel)
                            return false;

                        var t = item as TrackListViewModel;
                        if (t == null)
                            return false;
                        if (!l.Contains(t.PieceId))
                            return false;
                        return true;
                    };




                    if (!__cancel)
                    {
                        log.log("application");
                        work.Dispose();
                        work = null;
                        log.log("fin application");
                    }
                    else
                    {
                        log.log("abandon application");
                    }
                }
                finally
                {
                    lock (_lock)
                        end = true;
                    log.log("tache terminée par application");
                    // PlayerViewModel.Instance.makeResume();
                    //  PlayerViewModel.Instance.focusHelp();
                }
            }


            public void apply()
            {
                var client = new SimpleClient("FilterTask::apply()");
                App.Dispatch(() => { client.Start(); applyImpl(); client.End(); }, client);
            }

            public override string ToString()
            {
                return string.Format("en cours:{0} step:{1} end:{2} cancel:{3}", filter0, step, End, Cancel);
            }

        }


        public static void doFilter(ICollectionView coll, string filter)
        {
            SimpleChrono log = new SimpleChrono(string.Format("\tfilter=>{0}\t", filter), App.log);

            log.log("");
            lock (_lock)
            {
                bool _cancelCurrent = false;
                bool _same = false;

                if (filterTask != null)
                {
                    log.log(filterTask.ToString());
                }

                _cancelCurrent = filterTask != null && !filterTask.End;
                _same = _cancelCurrent && filterTask.filter0.Equals(filter) && filterTask.filterNext == Instance.FilterNext;
                if (_same)
                {
                    log.log("identique");
                    return;
                }
                else if (_cancelCurrent)
                {
                    log.log("abandon tâche en cours");
                    filterTask.cancel();
                }

                else
                {
                    log.log("verrou libre");
                }

                filterTask = new FilterTask(filter, Instance.filterOnlyNext, coll, log);

            }





        }



        //public void set(ItrackProvider provider)
        //{
        //    try
        //    {
        //        if (provider == null)
        //        {
        //            this.provider = null;
        //            this.currentPl = null;
        //            return;
        //        }
        //        else if (this.provider == null)
        //        {
        //            this.provider = provider;
        //            this.currentPl = provider.PlayList;
        //            this.tracks = provider.PresentationTracks;
        //        }

        //        else
        //        {
        //            if (provider.PlayList == currentPl || state == playerstate.stop)
        //            {
        //                this.provider = provider;
        //                this.currentPl = provider.PlayList;
        //                this.tracks = provider.PresentationTracks;
        //            }

        //            else
        //            {
        //                if (_real == null || _real.PlayList != provider.PlayList)
        //                {
        //                    this.provider = new HiddenPlayList(currentPl, tracks);
        //                    this._real = provider;
        //                }
        //                else
        //                {
        //                    this.provider = _real;
        //                }
        //            }
        //        }

        //        _positionstate = positionstate.free;
        //        if (currentPl == null)
        //        {
        //            CurrentTrack = null;
        //            stop();
        //            return;
        //        }

        //    }
        //    finally
        //    {
        //        OnPropertyChanged("State");
        //        OnPropertyChanged("SrcPlayPause");
        //    }
        //}
        //string _lastFilter = "";
        //public void doFilter()
        //{
        //    if (this.navAuto)
        //        doFilter(_lastFilter);
        //}

        public void doFilter(String filter)
        {
            //  this._lastFilter = filter;
            var provider = DisplayProvider;

            if (provider == null)
                return;
            provider.doFilter(filter);

        }

        private ItrackProvider DisplayProvider
        {
            get
            {
                if (provider == null)
                    return null;
                if (isHidden && _real != null)
                {
                    return _real;
                }
                return provider;
            }
        }

        private string resume;

        public void makeResume(IClient client)
        {
            if (client == null)
                client = new SimpleClient("PlayerViewModel::makeresume");
            App.Dispatch(() =>
                {
                    client.Start();
                    string newResume = resume;
                    try
                    {

                        IEnumerable items = null;
                        var provider = DisplayProvider;
                        if (provider == null)
                            return;
                        var tracks = provider.PresentationTracks;
                        int nbOrg = -1;
                        items = tracks;
                        if (items == null)
                            return;

                        var selected = provider.SelectedTracks;
                        if (selected.Count > 1)
                        {
                            items = selected;
                            nbOrg = 0;
                            foreach (TrackListViewModel t in tracks)
                                nbOrg++;
                        }
                        int nb = 0, nbSelected = 0, nbPresent = 0;
                        TimeSpan duration = new TimeSpan(), durationSelected = new TimeSpan(), durationPresent = new TimeSpan();
                        HashSet<int> h = new HashSet<int>();

                        foreach (TrackListViewModel track in items)
                        {
                            if (!h.Add(track.PieceGen.MasterId))
                                continue;
                            nb++;
                            duration += track.Duration;
                            if (track.Enabled)
                            {
                                nbSelected++;
                                durationSelected += track.Duration;
                            }
                            if (true == track.Exists)
                            {
                                nbPresent++;
                                durationPresent += track.Duration;
                            }
                        }

                        ITextWriter sb = new pdb.util.StringBuilder();
                        sb.Append(nb);
                        sb.Append(" ");
                        sb.Append("elt");
                        if (nb > 1)
                            sb.Append("s");
                        if (nbOrg >= 0)
                        {
                            sb.Append(" sur ");
                            sb.Append(nbOrg);
                            sb.Append(",");
                        }
                        sb.Append(" ");
                        humanDuration(sb, duration);
                        sb.Append(" ( ");
                        sb.Append(nbSelected);
                        sb.Append(" ");
                        sb.Append("elt");
                        if (nbSelected > 1)
                            sb.Append("s");
                        sb.Append(" ");
                        humanDuration(sb, durationSelected);

                        sb.Append(" )");

                        if (nbPresent > 0)
                        {
                            sb.Append(" presents: ");
                            sb.Append(nbPresent);
                            sb.Append(" ");
                            sb.Append("elt");
                            if (nb > 1)
                                sb.Append("s");
                            sb.Append(" ");
                            humanDuration(sb, durationPresent);
                        }
                        sb.Append("\t");

                        var currentTrack = TrackListViewModel.HumanSelected;
                        if (currentTrack != null)
                        {
                            humanSize(sb, currentTrack.Size);
                            sb.Append(" ");
                            sb.Append(currentTrack.Piece.Files.PathReduc);
                        }

                        newResume = sb.ToString();

                    }
                    catch (Exception e0)
                    {
                        App.log.log(e0.ToString());
                    }
                    finally
                    {

                        if (newResume != resume)
                        {
                            client.log("end before event");
                            resume = newResume;
                            if (resumeChange != null)
                            {
                                try
                                {
                                    resumeChange(this, EventArgs.Empty);
                                }
                                catch (Exception ex)
                                {
                                    App.log.log(ex.ToString());
                                }
                            }
                        }
                        client.End();

                    }


                }, client);
        }

        public string Resume
        {
            get
            {
                //if (resume == null)
                //    makeResume();
                return resume;
            }
        }

        private void humanSize(ITextWriter sb, long size)
        {
            sb.Append(size.HumanReadableSize(-1));
        }

        private void humanDuration(ITextWriter sb, TimeSpan duration)
        {
            TimeSpan courant = duration;
            TimeSpan reste = new TimeSpan();
            TimeSpan ts = new TimeSpan();
            double days = duration.TotalDays;
            int idays = (int)days;

            double hours = duration.TotalHours;
            int ihours = (int)hours;


            if (days >= 1)
            {
                ts = new TimeSpan(idays, 0, 0, 0);
                reste = courant.Subtract(ts);
                sb.Append(idays);
                sb.Append("j");
                //if (idays > 1)
                //    sb.Append("s");

                hours = reste.TotalHours;
                ihours = (int)hours;

                if (ihours == 0)
                    return;
                sb.Append(" ");
                sb.Append(ihours);
                sb.Append("h");
                //if (ihours > 1)
                //    sb.Append("s");
                return;
            }

            double mins = duration.TotalMinutes;
            int imins = (int)mins;

            if (hours > 1)
            {
                ts = new TimeSpan(ihours, 0, 0);
                reste = courant.Subtract(ts);
                sb.Append(ihours);
                sb.Append("h");
                //if (ihours > 1)
                //    sb.Append("s");

                mins = reste.TotalMinutes;
                imins = (int)mins;

                if (imins == 0)
                    return;
                sb.Append(" ");
                sb.Append(imins);
                sb.Append("m");
                //if (imins > 1)
                //    sb.Append("s");
                return;

            }

            ts = new TimeSpan(0, imins, 0);
            reste = courant.Subtract(ts);
            sb.Append(imins);
            sb.Append("m");
            //if (imins > 1)
            //    sb.Append("s");

            double secs = reste.TotalSeconds;
            int isec = (int)secs;


            if (isec == 0)
                return;
            sb.Append(" ");
            sb.Append(isec);
            sb.Append("s");
            //if (imins > 1)
            //    sb.Append("s");
            return;



        }

        # region infos

        private bool transitionState = false;
        public bool TransitionState { set { transitionState = value; OnPropertyChanged("SrcPlayPause"); } }

        public String SrcPlayPause
        {
            get
            {
                if (isHidden)
                    return @"images\Toolbar-MP3-Stop-icon.png";
                if (state != playerstate.play)
                    return @"images\Toolbar-MP3-Play-icon.png";
                return @"images\Toolbar-MP3-Pause-icon.png";
            }
        }


        //private int indexList = -1;
        //public int IndexList
        //{
        //    get { return indexList; }
        //    set
        //    {
        //        if (value != indexList)
        //        {
        //            indexList = value;
        //            this.OnPropertyChanged("IndexList");
        //        }
        //    }
        //}

        private double position = 0;
        public double Position
        {
            get
            {

                return position;
            }
            set
            {
                if (value != position)
                {
                    position = value;
                    Player.Position = value;
                    this.OnPropertyChanged("Position");
                }
            }
        }

        private String currentName;
        public String CurrentName
        {
            get { return currentName; }
            set
            {
                if (value != currentName)
                {
                    currentName = value;
                    this.OnPropertyChanged("CurrentName");
                }
            }
        }

        private double volume = 0.5;
        public double Volume
        {
            get { return volume; }
            set
            {
                if (value != volume)
                {
                    volume = value;
                    Player.Volume = value;
                    OnPropertyChanged("Volume");
                }
            }
        }


        private String currentAuthorAlbum;
        public String CurrentAuthorAlbum
        {
            get { return currentAuthorAlbum; }
            set
            {
                if (value != currentAuthorAlbum)
                {
                    currentAuthorAlbum = value;
                    this.OnPropertyChanged("CurrentAuthorAlbum");
                }
            }
        }

        private TimeSpan sinceBeginReadTrack;
        public TimeSpan ElapsedTime
        {
            get { return sinceBeginReadTrack; }
            set
            {
                if (value != sinceBeginReadTrack)
                {
                    sinceBeginReadTrack = value;
                    this.OnPropertyChanged("ElapsedTime");
                }
            }
        }

        private TimeSpan remainingTime;
        public TimeSpan RemainingTime
        {
            get { return remainingTime; }
            set
            {
                if (value != remainingTime)
                {
                    remainingTime = value;
                    this.OnPropertyChanged("RemainingTime");
                }
            }
        }

        private TimeSpan length;
        public TimeSpan Length
        {
            get { return length; }
            set
            {
                if (value != length && value > TimeSpan.FromMilliseconds(100))
                {
                    length = value;
                    this.OnPropertyChanged("Length");
                }
            }
        }
        #endregion
    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\PlayListViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Windows.Threading;
using pdb.db.obj;
using pdb.gen;
using pdb.gen.conf;
using pdb.obj;
using pdb.util;
using pdb.gen.albums;
using System.Linq;


namespace pdb.player.ViewModel
{
    public class PlayListViewModel : BibViewModelTreelBase, INotifyCollectionChanged, IEnumerable<PlayListViewModel>
    {
        protected Logger log;
        private object _lock = new object();
        private PlayList pl;
        private List<BibViewModelBase> _childs = new List<BibViewModelBase>();
        protected List<PlayListViewModel> _playlists = new List<PlayListViewModel>();
        //  private List<PlayListViewModel> __playlists = new List<PlayListViewModel>(); 
        private List<TrackListViewModel> _tracks = new List<TrackListViewModel>();

        //private static List<IRedraw> gui = new List<IRedraw>();
        //internal static void addDrow(IRedraw _gui) { gui.Add(_gui); }
        private static bool _log;
        public static bool Log { set { _log = value; } }
#if EXPORT
        #region export
        private List<TrackListViewModel> exportTracks = new List<TrackListViewModel>();
        public List<TrackListViewModel> ExportTracks { get { return exportTracks; } set { exportTracks = value; } }
        #endregion
#endif
        private bool _main = true;
        public void setSecondary() { _main = false; }


        private static void redraw()
        {
            // foreach (IRedraw _gui in gui)  _gui.redraw();
        }

        #region optim recherche
        //private static BgDictString<PlayListViewModel> dictPl = new BgDictString<PlayListViewModel>();
        //private static BgDictString<TrackListViewModel> dictT = new BgDictString<TrackListViewModel>();
        //protected static void recordPl(PlayListViewModel pl)
        //{
        //    dictPl.Add(pl.pl.getPath(), pl);
        //}

        //protected static string getKey(PlayListViewModel pl, int id)
        //{
        //    return pl.pl.getPath() + "|" + id;
        //}

        private HashSet<int> hs = new HashSet<int>();

        protected void recordTrack(TrackListViewModel t)
        {
            hs.Add(t.PieceId);
        }

        public bool contains(int id)
        {
            return hs.Contains(id);
        }

        //public static bool containsTrack(TrackListViewModel t, PlayListViewModel pl)
        //{
        //    return dictT.ContainsKey(getKey(pl, t.PieceId));
        //}

        protected void removeTrack(TrackListViewModel t)
        {
            hs.Remove(t.PieceId); // dictT.Remove(getKey(pl, t.PieceId));
        }

        //public static TrackListViewModel findTrack(PlayListViewModel pl, int id)
        //{
        //    var key = getKey(pl, id);
        //    if (dictT.ContainsKey(key))
        //        return dictT[key];
        //    return null;
        //}

        //public TrackListViewModel FindTrack(int id)
        //{
        //    return findTrack(this, id);
        //}

        public static void resetExport(exportState state)
        {
            misc.log("resetExport {0}", state);
            try
            {
                foreach (var t in TrackListViewModel.Dict.Values)
                    t.ExportStatus = state;
            }
            catch (Exception ex)
            {
                misc.log(ex.ToString());
            }
        }

        public static void setExport(Piece p, exportState state)
        {
            if (_selectedPl != null)
            {

                try
                {
                    var t = TrackListViewModel.getOrCreate(p); // findTrack(_selectedPl, id);
                    if (t != null)
                    {
                        t.ExportStatus = state;
                    }

                    //foreach (TrackListViewModel t in _selectedPl._tracks)
                    //{
                    //    if (t.PieceId == id)
                    //        t.refresh();
                    //}
                }
                //foreach (TrackListViewModel t in dictT.Values)
                //{
                //    if (t.PieceId == id)
                //        t.ExportStatus = state;
                //}

                catch (Exception ex)
                {
                    misc.log(ex.ToString());
                }
            }


        }

        //protected bool contains( int id)
        //{
        //    //return hs.Contains(id); 
        //    //var key = getKey(pl, id);
        //    //if (dictT.ContainsKey(key))
        //    //    return true;
        //    //return false;
        //}


        #endregion


        static PlayListViewModel()
        {
            //  App.refresh += new EventHandler(App_refresh);
        }

        static void App_refresh(object sender, EventArgs e)
        {
            //var pl = _selectedPl;
            //if (pl != null)
            //    pl.refresh(); 
        }

        public bool isSubList(string name)
        {
            return pl.isSubList(name);
        }

        public bool isSubList(PlayListViewModel pl)
        {
            return this.pl.isSubList(pl.PlayList);
        }

        public void init()
        {
            _childs.Clear();
            _playlists.Clear();
            _tracks.Clear();

            foreach (PlayList sublist in pl.PlayLists)
            {
                var _pl = new PlayListViewModel(sublist, this);
                _childs.Add(_pl);
                _playlists.Add(_pl);
                //  recordPl(_pl);
            }
            foreach (Piece track in pl.Items)
            {
                if (track.Virtual && !PlayerViewModel.Instance.WithVirtualAlbum)
                    continue;
                TrackListViewModel _t = null;
                if (_main)
                    _t = TrackListViewModel.getOrCreate(track); // new TrackListViewModel(track, this);
                else
                    _t = TrackListViewModel.getOrCreateA(track);
                _childs.Add(_t);
                _tracks.Add(_t);
                recordTrack(_t);
            }



            allTracks = new AllTracksViewModel(this, false, false);
        }


        public void Synch()
        {
            var hsnew = new HashSet<int>();
            foreach (Piece track in pl.Items)
            {
                hsnew.Add(track.PieceId);
                if (!hs.Contains(track.PieceId))
                {
                    log.log("Sync {0} ajout {1}", this, track);
                    TrackListViewModel _t = null;
                    if (_main)
                        _t = TrackListViewModel.getOrCreate(track); // new TrackListViewModel(track, this);
                    else
                        _t = TrackListViewModel.getOrCreateA(track);
                    _childs.Add(_t);
                    _tracks.Add(_t);
                }
            }

            foreach (int oldId in hs)
            {
                if (!hsnew.Contains(oldId))
                {
                    TrackListViewModel _t = null;
                    if (_main)
                        _t = TrackListViewModel.get(oldId); // new TrackListViewModel(track, this);
                    else
                        _t = TrackListViewModel.getA(oldId);
                    string desc = oldId.ToString();
                    if (_t != null)
                        desc = _t.ToString();
                    log.log("Sync {0} suppression {1}", this, desc);
                    if (_t != null)
                    {
                        _childs.Remove(_t);
                        _tracks.Remove(_t);
                    }
                }
            }

            hs = hsnew;
        }


        public PlayListViewModel get(string name)
        {
            return get(name, false);
        }

        public PlayListViewModel get(string name, bool create)
        {
            foreach (var pl in _playlists)
                if (pl.Name == name)
                    return pl;
            if (!create)
                return null;
            var _pl = new PlayList(name, this.pl);
            var _new = new PlayListViewModel(_pl, this);
            _playlists.Add(_new);
            _childs.Add(_new);
            // recordPl(_new);
            //_new.PropertyChanged += _pl_PropertyChanged;
            //_new.CollectionChanged += _pl_CollectionChanged; 
            OnCollectionChange(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, _new));

            //  redraw(); 
            return _new;
        }


        private PlayListViewModel _getFromPath(string[] tab, int index)
        {
            for (; index < tab.GetLength(0); index++)
            {
                string dir = tab[index];
                if (string.IsNullOrEmpty(dir))
                    continue;
                if (dir.Equals(Name))
                    continue;
                var sub = get(dir, false);
                if (sub == null)
                    return null;
                return sub._getFromPath(tab, index + 1);
            }

            return this;

        }

        public PlayListViewModel getFromPath(string path)
        {
            var tab = path.Split(PlayListComposite.SEP);
            return _getFromPath(tab, 0);
        }

        public List<TrackListViewModel> Tracks { get { return _tracks; } }
        private AllTracksViewModel allTracks;
        public AllTracksViewModel AlltracksVm { get { return allTracks; } }

        //private AllTracksViewModel alltracksVmd;
        //public AllTracksViewModel AlltracksVmd
        //{
        //    get
        //    {
        //        if (alltracksVmd == null)
        //            alltracksVmd = new AllTracksViewModel(this, true, false);
        //        return alltracksVmd;

        //    }
        //}

        //private AllTracksViewModel alltracksFather;
        //public AllTracksViewModel AllTrackFather
        //{
        //    get
        //    {
        //        if (alltracksFather == null)
        //            alltracksFather = new AllTracksViewModel(this,null, true);
        //        return alltracksFather;
        //    }
        //}


        //private AllTracksViewModel alltracksFatherDisabled;
        //public AllTracksViewModel AllTrackFatherDisabled
        //{
        //    get
        //    {
        //        if (alltracksFatherDisabled == null)
        //            alltracksFatherDisabled = new AllTracksViewModel(this, true, true);
        //        return alltracksFatherDisabled;
        //    }
        //}

        public PlayListViewModel(PlayList pl)
            : this(pl, null)
        {
        }

        private PlayListViewModel(PlayList pl, PlayListViewModel parent)
            : base(pl, parent)
        {
            this.pl = pl;
            log = Logger.getLogger(pl.getPath());
            init();

        }
        public PlayList PlayList { get { return pl; } }

        public string Name
        {
            get
            {
                return pl.Name;
            }
            set
            {
                if (value != Name)
                {
                    pl.Name = value;
                    OnPropertyChanged("Name");
                }
            }
        }

        #region selected

        /// <summary>
        /// element sélectionné. Répercuté jusqu'à la racine de l'arbre
        /// </summary>
        private static PlayListViewModel _selectedPl;
        public static PlayListViewModel SelectedPlayList
        {
            get
            {
                return _selectedPl;
            }
            private set
            {
                if (_selectedPl == value)
                    return;
                var _oldpl = _selectedPl;
                _selectedPl = value;
                if (_selectedPl != null)
                {
                    _selectedPl.IsSelected = true;
                    _selectedPl.IsExpanded = true;
                }
                OnSelectedPlayListChange(_oldpl);
            }
        }

        public static void initSelected(string strPl)
        {
            if (!string.IsNullOrEmpty(strPl))
            {
                var selected = App.bib.Root.getFromPath(strPl);

                if (selected != null)
                    PlayListViewModel.SelectedPlayList = selected;

            }
        }

        public override bool IsSelected
        {
            get
            {
                return base.IsSelected;
            }
            set
            {
                base.IsSelected = value;

                if (_isSelected)
                {
                    SelectedPlayList = this;
                }

            }
        }

        #endregion

        public static event EventHandler selectedPlaylistChange;
        private static void OnSelectedPlayListChange(PlayListViewModel oldPl)
        {
            if (selectedPlaylistChange != null)
                selectedPlaylistChange(oldPl, EventArgs.Empty);
        }


        #region INotifyCollectionChanged Members

        public event NotifyCollectionChangedEventHandler CollectionChanged;

        protected void OnCollectionChange(NotifyCollectionChangedEventArgs e)
        {
            var client = new SimpleClient("PlayListViewModel::OnCollectionChange", log);
            // Be nice - use BlockReentrancy like MSDN said
            lock (_lock)
            {
                client.log("_lock");
                var eventHandler = CollectionChanged;
                if (eventHandler != null)
                {
                    Delegate[] delegates = eventHandler.GetInvocationList();
                    // Walk thru invocation list

                    foreach (NotifyCollectionChangedEventHandler handler in delegates)
                    {

                        App.Dispatch(() => { handler(this, e); client.log("handler"); }, client);
                        //try
                        //{
                        //    var dispatcherObject = handler.Target as DispatcherObject;
                        //    // If the subscriber is a DispatcherObject and different thread
                        //    if (dispatcherObject != null && dispatcherObject.CheckAccess() == false)
                        //    // Invoke handler in the target dispatcher's thread
                        //    {
                        //        var ope =
                        //        dispatcherObject.Dispatcher.BeginInvoke(App.DISPATCHER_PRIORITY,
                        //                           handler, this, e);
                        //        ope.Completed += ope_Completed;
                        //    }
                        //    else // Execute handler as is
                        //        handler(this, e);
                        //}
                        //catch (Exception ex)
                        //{
                        //    App.log.log(ex.ToString());
                        //}
                    }
                }
            }
            client.End();

            //var dispatcher = Dispatcher.CurrentDispatcher;
            //if (dispatcher.CheckAccess())
            //{
            //    if (this.CollectionChanged == null)
            //    {
            //        int toto = 0;
            //    }
            //    else
            //        this.CollectionChanged(this, e);               
            //}
            //else
            //    dispatcher.Invoke(new Action<NotifyCollectionChangedEventArgs>(OnCollectionChange), e); 

        }

        void ope_Completed(object sender, EventArgs e)
        {
            App.log.log(string.Format("PlayListViewModel::OnCollectionChange {0} CollectionChanged completé", sender));
        }

        #endregion

        public PlayListViewModel getOrCreatePlayList(string name)
        {

            var found = _playlists.Find(pl => pl.Name == name);
            if (found == null)
            {
                found = AddPlayList(name);
            }

            return found;
        }

        public PlayListViewModel AddPlayList(string name)
        {
            var subModel = new PlayList(name, pl);
            var sub = new PlayListViewModel(subModel, this);
            _childs.Add(sub);
            _playlists.Add(sub);
            //recordPl(sub);
            //   __playlists.Add(sub);
            //sub.PropertyChanged += _pl_PropertyChanged;
            //sub.CollectionChanged += _pl_CollectionChanged; 
            OnCollectionChange(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, sub));
            // PLayLists.Add(sub); 
            // redraw(); 
            return sub;
        }

        public TrackListViewModel AddTrack(IFile file, bool signal)
        {
            // var piece = App.Db.getPiece(location);
            return AddTrack(file as Piece, signal);

        }

        private TrackListViewModel Get(IFile file)
        {
            var t = TrackListViewModel.get(file.PieceId);
            if (t == null)
                t = AddTrack(file as Piece, false);
            return t;
        }

        private TrackListViewModel Get(Piece file)
        {
            var t = TrackListViewModel.get(file.PieceId);
            if (t == null)
                t = AddTrack(file, false);
            return t;
        }

        public TrackListViewModel AddTrack(Piece piece, bool signal)
        {
            if (_log) log.log("{0} AddTrack {1}", pl.getPath(), piece.ToString());
            if (hs.Contains(piece.PieceId))
            {
                App.Instance.InfoIHm(string.Format("le morceau {0} est déjà présent dans la liste {1}", piece, this), "Ajout dans la playlist");
                return null;
            }
            //var tl = new TrackList(piece);
            pl.add(piece);
            //var p = piece.Track;
            //CPiece cPiece = null;
            //if (p is CPiece)
            //    cPiece = p as CPiece;

            //else if (p is TrackListViewModel)
            //{
            //    var pp = ((TrackListViewModel)p).Piece;
            //    cPiece = pp as CPiece;
            //}


            //if (cPiece != null)
            //    pl.addPiece(cPiece);
            var vm = TrackListViewModel.getOrCreate(piece); // new TrackListViewModel(tl, this);
            _childs.Add(vm);
            _tracks.Add(vm);
            recordTrack(vm);
            //  vm.PropertyChanged += _pl_PropertyChanged;
            if (signal)
            {
                //OnCollectionChange(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, vm));
                AlltracksVm.refresh();
                //if (alltracksVmd != null)
                //    alltracksVmd.refresh();
                redraw();
            }

            return vm;
        }

        public void RemoveTrack(TrackListViewModel tl, bool signal)
        {
            if (_log) log.log("{0} RemoveTrack {1}", pl.getPath(), tl.Piece);
            _childs.Remove(tl);
            _tracks.Remove(tl);
            removeTrack(tl);


            tl.remove();
            //TODO faire la suppression de l'item de liste org

            if (signal)
            {
                // OnCollectionChange(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove, tl));
                AlltracksVm.refresh();
                //if (alltracksVmd != null)
                //    alltracksVmd.refresh();
                redraw();
            }
        }

        private void insert(TrackListViewModel k, List<IFile> newElements)
        {
            int indexInsert = k.Index - 1;
            if (indexInsert < 0)
                indexInsert = 0;
            if (indexInsert > newElements.Count)
                indexInsert = newElements.Count;
            newElements.Insert(indexInsert, k);
        }

        private void insert2(TrackListViewModel k, List<Piece> newElements)
        {
            int indexInsert = k.Index2 - 1;
            if (indexInsert < 0)
                indexInsert = 0;
            if (indexInsert > newElements.Count)
                indexInsert = newElements.Count;
            newElements.Insert(indexInsert, k.PieceGen);
        }
        //  private bool filterNext; 
        public void mergeList(ICollection<IFile> newElements_, IAbortTask writer)
        {
            lock (Consolid.Lock)
            {
                lock (Albums.Lock)
                {
                    var tt = TrackListViewModel.HumanSelected;
                    if (tt != null)
                    {
                        tt.refresh();
                        //var g = tt.Grouping; 
                        // tt.Grouping = tt.PieceGen.RankAlbumReverse.ToString();
                    }

                    bool isMe = PlayListViewModel.SelectedPlayList == null || PlayListViewModel.SelectedPlayList == this;
                    bool isAlbum = this.isSubList("album");
                    bool isGen = this.isSubList("gen");


                    var confalbum = App.gen.SortAlbumMode;
                    int stackBefore = 4;
                    if (confalbum != null && confalbum.stackBefore > 0)
                        stackBefore = confalbum.stackBefore;

                    // bool checkStack = (PlayListViewModel.SelectedPlayList == null || PlayListViewModel.SelectedPlayList == this) && isGen && !isAlbum && confalbum.stackEnabled;

                    int _indexAlbumRead = -1;
                    int _indexTrackRead = -1;
                    Album _currentAlbum = null;
                    TrackListViewModel current = TrackListViewModel.CurrentPlaying;
                    Album currentAlbum = null;
                    if (current != null)
                        currentAlbum = current.album;
                    var conf = CConf.ConfGen;
                    List<TrackListViewModel> toDelete = new List<TrackListViewModel>();
                    List<TrackListViewModel> toKeep = new List<TrackListViewModel>();

                    var newElements = new HashList<IFile>(newElements_);


                    BgDict<int, bool?> newElt = new BgDict<int, bool?>();
                    foreach (IFile elt in newElements_)
                    {
                        newElt[elt.PieceId] = false;
                    }

                    int indexAlbumOrg = -1;
                    int indexTrackOrg = -1;

                    int indexAlbumOrg2 = -1;
                    int indexTrackOrg2 = -1;
                    var tracks = _tracks;
                    //if (isMe)
                    //{
                    tracks = new List<TrackListViewModel>(_tracks);
                    tracks.Sort((x, y) => x.Index.CompareTo(y.Index));
                    // }

                    int count0 = _tracks.Count;
                    //  var limitList = CConf.ConfGen.LimitList;

                    foreach (TrackListViewModel tl in tracks)
                    {
                        if (tl.album != _currentAlbum)
                        {
                            _currentAlbum = tl.album;
                            _indexAlbumRead++;
                            _indexTrackRead = 0;
                        }
                        else
                            _indexTrackRead++;
                        var found = newElt[tl.PieceId] != null;
                        bool keep = false;
                        //if (isMe)
                        //{
                        if (isAlbum && currentAlbum == tl.album) // Equals(tl.Album))
                        {
                            keep = true;
                        }
                        else if (current != null && current.PieceId == tl.PieceId)
                        {
                            keep = true;
                            indexAlbumOrg = _indexAlbumRead;
                            indexTrackOrg = _indexTrackRead;
                        }
                        //}

                        newElt[tl.PieceId] = keep;


                        //if (current != null && !keep && tl.Location == current.Location)
                        //{
                        //    App.log.log("bizarre");
                        //}
                        if (!found)
                        {
                            if (keep)
                                toKeep.Add(tl);
                            else
                                toDelete.Add(tl);
                        }
                    }

                    //if (checkStack)
                    //{
                    _indexAlbumRead = -1;
                    _indexTrackRead = -1;
                    tracks.Sort((x, y) => x.Index2.CompareTo(y.Index2));
                    // }

                    foreach (TrackListViewModel tl in tracks)
                    {
                        if (tl.album != _currentAlbum)
                        {
                            _currentAlbum = tl.album;
                            _indexAlbumRead++;
                            _indexTrackRead = 0;
                        }
                        else
                            _indexTrackRead++;
                        var found = newElt[tl.PieceId] != null;


                        if (isAlbum && currentAlbum == tl.album) // Equals(tl.Album))
                        {

                        }
                        else if (current != null && current.PieceId == tl.PieceId)
                        {

                            indexAlbumOrg2 = _indexAlbumRead;
                            indexTrackOrg2 = _indexTrackRead;
                        }

                    }
                    //  }



                    //Addition
                    List<IFile> toAdd = new List<IFile>();
                    //if (limitList <= 0 || !_log)
                    //{
                    foreach (IFile elt in newElements)
                    {
                        if (writer.Aborted)
                            return;

                        bool found = hs.Contains(elt.PieceId); // contains(this, elt.PieceId);


                        if (!found)
                            toAdd.Add(elt);

                    }
                    //  log.log("mergeList::fin determination toAdd");

                    if (toAdd.Count > 0 && _log)
                        log.log("{0} {1} elt to add", this, toAdd.Count);

                    if (tracks.Count > 0 && toAdd.Count > 100) //&& filterNext == PlayerViewModel.Instance.FilterNext)
                    {
                        log.log("!!!!!!!!!!!!!!!{0} {1} elt to add c'est trop!", this, toAdd.Count);
                        try { toAdd.RemoveRange(100, toAdd.Count - 100); }
                        catch { toAdd.Clear(); }

                        //return;
                        //var l = new List<IFile>(100);
                        //for (int i = 0; i < 100; i++)
                        //    l.Add(toAdd[i]);
                        //toAdd = l;
                    }

                    if (tracks.Count > 0 && toDelete.Count > 0 && _log)
                        log.log("{0} {1} elt to delete", this, toDelete.Count);

                    if (toDelete.Count > 100) //&& filterNext == PlayerViewModel.Instance.FilterNext)
                    {
                        log.log("!!!!!!!!!!!!!!!{0} {1} elt toDelete c'est trop!", this, toDelete.Count);

                        try { toDelete.RemoveRange(100, toDelete.Count - 100); }
                        catch { toDelete.Clear(); }

                        // toDelete.Clear();
                        //var l = new List<TrackListViewModel>(100);
                        //for (int i = 0; i < 100; i++)
                        //    l.Add(toDelete[i]);
                        //toDelete = l;
                    }


                    int count = toAdd.Count;
                    for (int i = 0; i < count; i++)
                    {
                        if (writer.Aborted) return;

                        AddTrack(toAdd[i], false);
                    }

                    foreach (TrackListViewModel vm in toDelete)
                    {
                        if (writer.Aborted) return;
                        RemoveTrack(vm, false);
                    }
                    //  }


                    var newElements3 = newElements;

                    if (isGen)
                    {
                        HashSet<int> moved = new HashSet<int>();
                        HashSet<int> empeached = new HashSet<int>();
                        HashSet<int> unavailable = new HashSet<int>();
                        newElements3 = new HashList<IFile>();
                        // chercher le premier album non quarantaine
                        decimal min = int.MaxValue;
                        for (int i = 0; i < newElements.Count; i++)
                        {
                            var t = newElements[i] as Piece;
                            if (t.StackValue == 0 && t.PieceAlbum != null)
                            {
                                min = t.PieceAlbum.ClassementValueLight;
                                break;
                            }
                        }


                        int ifirst = 0;
                        bool b = false;
                        Album courant = null;
                        for (; ifirst < newElements.Count; ifirst++)
                        {
                            var t = newElements[ifirst] as Piece;
                            if (t.PieceAlbum == courant)
                                continue;
                            courant = t.PieceAlbum;

                            if (courant.Absent)
                            {
                                unavailable.Add(t.PieceAlbum.Next.MasterId);
                            }
                            else
                            {
                                if (courant.StackValue > 0 && courant.ClassementValueLightSt >= min) //  checkStack && courant.ClassementValueLightSt >= min)
                                {
                                    if (!b)
                                    {
                                        courant.Empeached1 = true;
                                        b = true;
                                    }

                                    moved.Add(t.PieceAlbum.Next.MasterId);
                                    empeached.Add(t.PieceAlbum.Next.MasterId);

                                    courant.Moved = true;
                                    courant.Empeached = true;


                                }
                                else break;
                            }


                        }

                        if (ifirst < newElements.Count) // && checkStack)
                        {
                            //  int i = 0;

                            //HashSet<Album> aux = new HashSet<Album>();
                            //foreach (Album album in empeached)
                            //{
                            //    aux.Add(album); 
                            //}
                            //for (; i < newElements.Count; i++)
                            //{
                            //    var t = newElements[i] as Piece;
                            //    var a = t.PieceAlbum;
                            //    if (a == null)
                            //        continue;
                            //    if (aux.Add(a))
                            //    {
                            //        a.empeachedDecrement(); 
                            //    }
                            //}
                            HashSet<Album> albs = new HashSet<Album>();
                            //Album alb = null;
                            //Album alb2 = null;
                            //Album alb3 = null;
                            //Album alb4 = null;

                            courant = null;
                            int i = ifirst;
                            while (true)
                            {
                                if (i >= newElements.Count)
                                    break;
                                var t = newElements[i] as Piece;
                                if (t.StackValue > 0 && t.ClassementValueLightSt >= min)
                                {
                                    moved.Add(t.PieceAlbum.Next.MasterId);
                                    t.Moved = true;
                                    if (t.isEmpeached())
                                    {
                                        empeached.Add(t.PieceAlbum.Next.MasterId);
                                    }

                                }
                                else if (t.AlbumAbsent)
                                { }// moved.Add(t.Album); 
                                else
                                {
                                    var _alb = t.PieceAlbum;
                                    if (courant != _alb)
                                    {
                                        courant = _alb;

                                        if (!albs.Contains(courant))
                                        {
                                            if (albs.Count < stackBefore)
                                            {
                                                albs.Add(courant);
                                            }
                                            else
                                                break;
                                        }




                                        //if (alb == null)
                                        //    alb = courant;
                                        //else if (alb2 == null)
                                        //    alb2 = courant;
                                        //else if (alb3 == null)
                                        //    alb3 = courant;
                                        //else if (alb4 == null)
                                        //    alb4 = courant;
                                        //else
                                        //    break;
                                    }

                                    newElements3.Add(t);
                                }
                                i++;
                            }

                            for (i = 0; i < newElements.Count; i++)
                            {
                                var t = newElements[i] as Piece;
                                var alb_ = t.PieceAlbum;
                                if (alb_ == null)
                                    continue;

                                if (!albs.Contains(alb_))
                                    newElements3.Add(t);
                                //if (alb_ != alb && alb_ != alb2 && alb_ != alb3 && alb_ != alb4)
                                //    newElements3.Add(t);
                            }
                        }
                        else
                            newElements3 = newElements;

                        allTracks.setNbAlbum(unavailable.Count, empeached.Count, moved.Count);



                    }
                    else
                    {
                        allTracks.setNbAlbum(-1, -1, -1);
                    }




                    var newElements2 = new List<IFile>(newElements3);
                    List<Piece> stackSorted = null;
                    //if (checkStack)
                    //{
                    stackSorted = new List<Piece>();
                    foreach (IFile iFile in newElements2)
                    {
                        //var t = Get(iFile); // TrackListViewModel.get(iFile.PieceId);// findTrack(this, iFile.PieceId);
                        //if (t != null)
                        //{
                        stackSorted.Add(iFile as Piece);
                        // }
                    }

                    stackSorted.Sort(new PieceStackCmp());

                    //}
                    foreach (IFile iFile in newElements3)
                    {
                        var keep = newElt[iFile.PieceId];
                        var t = Get(iFile); // TrackListViewModel.get(iFile.PieceId);// findTrack(this, iFile.PieceId);
                        if (t != null)
                        {
                            if (true == keep)
                            {
                                int index0 = t.Index - 1;
                                int index1 = newElements2.IndexOf(iFile);
                                if (index1 > index0)
                                {
                                    newElements2.Remove(iFile);
                                    insert(t, newElements2);
                                }

                                //if (checkStack)
                                //{
                                int index20 = t.Index2 - 1;
                                int index21 = stackSorted.IndexOf(t.PieceGen);
                                if (index21 > index20)
                                {
                                    stackSorted.Remove(t.PieceGen);
                                    insert2(t, stackSorted);
                                }
                                // }
                            }

                        }
                    }

                    foreach (TrackListViewModel k in toKeep)
                    {
                        insert(k, newElements2);
                    }

                    //if (checkStack)
                    //{
                    foreach (TrackListViewModel k in toKeep)
                    {
                        insert2(k, stackSorted);
                    }
                    // }

                    if (indexAlbumOrg >= 0)
                    {
                        _indexAlbumRead = -1;
                        _currentAlbum = null;
                        int newIndex = 0;

                        bool dontTouch = false;

                        for (int i = 0; i < newElements2.Count; i++)
                        {
                            var ifile = newElements2[i] as Piece;
                            if (ifile == null)
                            {
                                dontTouch = true;
                                break;
                            }
                            if (ifile.PieceAlbum != _currentAlbum)
                            {
                                _indexAlbumRead++;
                                _currentAlbum = ifile.PieceAlbum;
                            }
                            if (_currentAlbum == currentAlbum)
                            {
                                dontTouch = true;
                                break;
                            }

                            if (_indexAlbumRead == indexAlbumOrg)
                            {
                                newIndex = i;
                                break;
                            }
                        }


                        if (!dontTouch)
                        {
                            var currentFile = newElements2.Find(p => p.PieceId == current.PieceId);
                            if (currentFile != null)
                            {

                                newElements2.Remove(currentFile);
                                newElements2.Insert(newIndex, currentFile);
                            }
                        }
                    }



                    if (indexAlbumOrg2 >= 0)
                    {
                        _indexAlbumRead = -1;
                        _currentAlbum = null;
                        int newIndex = 0;

                        bool dontTouch = false;

                        for (int i = 0; i < stackSorted.Count; i++)
                        {
                            var ifile = stackSorted[i];
                            if (ifile == null)
                            {
                                dontTouch = true;
                                break;
                            }
                            if (ifile.PieceAlbum != _currentAlbum)
                            {
                                _indexAlbumRead++;
                                _currentAlbum = ifile.PieceAlbum;
                            }
                            if (_currentAlbum == currentAlbum)
                            {
                                dontTouch = true;
                                break;
                            }

                            if (_indexAlbumRead == indexAlbumOrg2)
                            {
                                newIndex = i;
                                break;
                            }
                        }


                        if (!dontTouch)
                        {
                            var currentFile = stackSorted.Find(p => p.PieceId == current.PieceId);
                            if (currentFile != null)
                            {
                                stackSorted.Remove(currentFile);
                                stackSorted.Insert(newIndex, currentFile);
                            }
                        }

                    }




                    int index = 1;
                    var rankMax = 0;
                    for (int i = 0; i < newElements3.Count; i++)
                    {
                        var ifile = newElements2[i];

                        var t = Get(ifile); // TrackListViewModel.get(ifile.PieceId); // findTrack(this, ifile.PieceId);
                        if (t == null)
                        {
                            App.log.log("file ID {0} non trouvé dans {1} {2}", ifile.PieceId, this, ifile.Location);

                        }
                        else
                        {
                            if (isMe)
                            {
                                var rank = t.RankAlbum;
                                if (rank > rankMax)
                                    rankMax = rank;


                                //var keep = newElt[ifile.PieceId];
                                //if (true != keep)
                                t.Index = index;

                                // t.Grouping = t.PieceGen.RankAlbumReverse.ToString(); 
                                if (i == 0)
                                {
                                    t.refresh();
                                    // var g = t.Grouping; 
                                }
                            }
                        }
                        index++;
                    }

                    if (isMe)
                        Albums.RankZero = rankMax + 1;

                    //if (checkStack)
                    //{
                    index = 1;
                    for (int i = 0; i < stackSorted.Count; i++)
                    {
                        var t = Get(stackSorted[i]); // TrackListViewModel.get(stackSorted[i].PieceId); // findTrack(this, stackSorted[i].PieceId);
                        if (t == null)
                            continue;

                        //var keep = newElt[ifile.PieceId];
                        //if (true != keep)
                        t.Index2 = index;
                        // t.Grouping = t.PieceGen.RankAlbumReverse.ToString(); 
                        if (i == 0)
                        {
                            t.refresh();
                            // var g = t.Grouping; 
                        }

                        index++;
                    }
                    // }

                    if (current != null && current.Index > 1)
                    {
                        App.log.log("le courant a l'index {0} {1}", current.Index, current);

                        int index1 = -1;
                        for (int i = 0; i < newElements.Count; i++)
                        {
                            if (newElements[i].PieceId == current.PieceId) { index1 = i; break; }
                        }

                        int index2 = -1;
                        for (int i = 0; i < newElements2.Count; i++)
                        {
                            if (newElements2[i].PieceId == current.PieceId) { index2 = i; break; }
                        }

                        int index3 = -1;
                        for (int i = 0; i < newElements3.Count; i++)
                        {
                            if (newElements3[i].PieceId == current.PieceId) { index3 = i; break; }
                        }
                        App.log.log("indexes {0} {1} {2}", index1, index2, index3);

                    }

                    //if (limitList > 0)
                    //{
                    //    toAdd.Clear();
                    //    toDelete.Clear();
                    //    bool onlyNext = App.gen.FilterNext;
                    //    var list = new List<TrackListViewModel>();
                    //    foreach (IFile p in newElements3)
                    //    {
                    //        var t = Get(p); // TrackListViewModel.get(p.PieceId);
                    //        if (onlyNext && !t.PieceGen.IsNext)
                    //            continue;
                    //        list.Add(t);
                    //    }
                    //    list.Sort((x, y) => x.Index.CompareTo(y.Index));
                    //    if (list.Count > limitList)
                    //    {
                    //        list = list.GetRange(0, limitList);
                    //    }

                    //    var hs = new HashSet<int>();
                    //    foreach (TrackListViewModel t in _tracks)
                    //    {
                    //        hs.Add(t.PieceId);
                    //    }

                    //    var hsNew = new HashSet<int>();
                    //    foreach (TrackListViewModel t in list)
                    //    {
                    //        hsNew.Add(t.PieceId);
                    //        if (!hs.Contains(t.PieceId))
                    //        {
                    //            toAdd.Add(t);
                    //        }
                    //    }

                    //    foreach (TrackListViewModel t in _tracks)
                    //    {
                    //        if (!hsNew.Contains(t.PieceId))
                    //        {
                    //            toDelete.Add(t);
                    //        }
                    //    }


                    //    foreach (TrackListViewModel vm in toAdd)
                    //    {
                    //        if (writer.Aborted) return;

                    //        AddTrack(vm, false);
                    //    }

                    //    foreach (TrackListViewModel vm in toDelete)
                    //    {
                    //        if (writer.Aborted) return;
                    //        RemoveTrack(vm, false);
                    //    }
                    //}
                }

                //if (toAdd.Count > 0 || toDelete.Count > 0)
                //{
                AlltracksVm.refresh();
                //if (alltracksVmd != null)
                //    alltracksVmd.refresh();
                //if (alltracksFather != null)
                //    alltracksFather.refresh();
                //if (alltracksFatherDisabled != null)
                //    alltracksFatherDisabled.refresh();

                //}
                //filterNext = PlayerViewModel.Instance.FilterNext; 
            }
        }

        //private class StackCmp : IComparer<TrackListViewModel>
        //{
        //    public int Compare(TrackListViewModel x, TrackListViewModel y)
        //    {
        //        int cmp = x.ClassementValueLightSt.CompareTo(y.ClassementValueLightSt);
        //        //if (x.StackValue > 0 && y.StackValue > 0)
        //        //    cmp = 
        //        //else
        //        //    cmp = x.Index.CompareTo(y.Index);
        //        if (cmp != 0)
        //            return cmp;
        //        return x.Index.CompareTo(y.Index);
        //    }
        //}

        public IEnumerator<PlayListViewModel> GetEnumerator()
        {
            return _playlists.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _playlists.GetEnumerator();
        }

        private SortDescriptionCollection sort;
        public SortDescriptionCollection Sort { get { return sort; } set { sort = value; } }

#if EXPORT
        public string getEmpreinte()
        {
            var sb = new StringBuilder();
            sb.Append(exportTracks.Count);
            sb.Append(" éléments:");
            long hash = 0;
            foreach (TrackListViewModel t in exportTracks)
            {
                hash += t.PieceId.GetHashCode();
            }
            sb.Append(hash);

            return sb.ToString();

        }
#endif
    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\TrackListViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Windows;
using pdb.obj;
using pdb.util;
using pdb.gen;
using pdb.db.obj;
using pdb.gen.albums;
using pdb.gen.medianne;

namespace pdb.player.ViewModel
{

    public class TrackListViewModel : BibViewModelBase, ITrackInfoItunes
    {


        private static Logger log = Logger.getLogger("Track");

        #region répercut
        //  private static BgDict<int, List<TrackListViewModel>> dictT = new BgDict<int, List<TrackListViewModel>>();
        #endregion

        private CPiece piece;
        private Piece track;

        // private TrackList track;
        //  private PieceViewModel piece;
        private static TrackListViewModel currentPlaying;
        private static TrackListViewModel currentSelected;
        //  public TrackList Track { get { return track; } }
        //   public CPiece Piece { get { return piece.Piece; } }
        // public Piece PieceGen { get { return track.Piece; } }

        public CPiece Piece { get { return piece; } }
        public Piece PieceGen { get { return track; } }
        public Piece Master { get { return track.Master; } }
        public bool Played { get { return piece.Played; } }

        public void remove()
        {
            //var list = dictT[PieceId];
            //if (list == null)
            //    return;
            //list.Remove(this);
        }

        public void refresh()
        {
            // piece.eraseCommentGrouping();
            OnPropertyChanged("ExportStatus");
            OnPropertyChanged("TV");
            //OnPropertyChanged("Comment");
            //OnPropertyChanged("Grouping");
            OnPropertyChanged("MedianneStatus");
            OnPropertyChanged("ClassementVirtuel");
            OnPropertyChanged("MedianneStatus");
            OnPropertyChanged("");
        }

        public override bool IsSelected
        {
            get
            {
                return base.IsSelected;
            }
            set
            {
                if (value != base.IsSelected)
                {
                    base.IsSelected = value;
                    if (value)
                        CurrentSelected = this;
                    OnPropertyChanged("TV");
                }
            }
        }

        private int index;
        public int Index
        {
            get { return index; }
            set
            {
                if (value != index)
                {
                    index = value;
                    OnPropertyChanged("Index");
                }
            }
        }

        private int index2;
        public int Index2
        {
            get { return index2; }
            set
            {
                if (value != index2)
                {
                    index2 = value;
                    OnPropertyChanged("Index2");
                }
            }
        }

        public int StackValue { get { return PieceGen.StackValue; } }
        public int StackIndex { get { return PieceGen.StackIndex; } }

        public bool Empeached { get { return PieceGen.isEmpeached(); } set { PieceGen.Empeached = value; } }
        public int EmpeachedNb { get { return PieceGen.EmpeachedNb; } }

        public static event EventHandler CurrentSelectedChanged;
        public static TrackListViewModel CurrentSelected
        {
            get
            {
                return currentSelected;
            }
            set
            {
                if (value != currentSelected)
                {
                    currentSelected = value;
                    if (CurrentSelectedChanged != null)
                        CurrentSelectedChanged("Track", EventArgs.Empty);
                }
            }
        }

        public static event EventHandler<ClientEventArgs> CurrentHumanSelectedChanged;
        private static TrackListViewModel humanSelected;
        private static int humanSelectedId;
        public static TrackListViewModel HumanSelected
        {
            get { return humanSelected; }
            //set
            //{
            //    if (value != humanSelected)
            //    {
            //        humanSelected = value;
            //        if (CurrentHumanSelectedChanged != null)
            //            CurrentHumanSelectedChanged("Human", EventArgs.Empty);
            //    }
            //}
        }

        private static bool setHumanSelectedUsed;
        private static volatile object _lock = new object();
        static ClientEventArgs _currentEvent;
        public static void setHumanSelected(PlayListViewModel pl, TrackListViewModel track)
        {
            lock (_lock)
            {
                if (setHumanSelectedUsed)
                    return;
            }

            try
            {
                lock (_lock)
                    setHumanSelectedUsed = true;
                //if (humanSelected != null)
                //{
                //    humanSelected.refresh();
                //   // var b = humanSelected.Grouping; 
                //}
                if (track != humanSelected)
                {
                    humanSelected = track;


                    //  humanSelected.refresh();
                    // var b = humanSelected.Grouping; 
                    int id = 0;
                    if (track != null) id = track.PieceId;
                    if (id != humanSelectedId)
                    {
                        App.Indispo = false;
                        humanSelectedId = id;
                        if (CurrentHumanSelectedChanged != null)
                        {
                            if (_currentEvent != null)
                                _currentEvent.client.cancel();
                            var client = new SimpleClient(string.Format("HumanSelected {0}", id), log);
                            _currentEvent = new ClientEventArgs(client);
                            CurrentHumanSelectedChanged(pl, _currentEvent);
                        }
                    }
                }
            }
            finally
            {
                lock (_lock)
                    setHumanSelectedUsed = false;
                if (_currentEvent != null)
                    _currentEvent.client.log("fin HumanSelected");
            }
        }

        public bool Enabled
        {
            get
            {
                return piece.Enabled;
            }
            set
            {
                piece.Enabled = value;
                //if (value != track.Enabled)
                //{
                //    track.Piece.Enabled = value;
                //    OnPropertyChanged("Enabled");
                //}
            }
        }
        //  private exportState exportState;
        //public int ExportState
        //{
        //    get
        //    {
        //        return (int)exportState;
        //    }
        //}

        public static EventHandler ExportStatusChange;
        private static void OnExportStatusChange(TrackListViewModel tv)
        {
            if (ExportStatusChange != null)
                ExportStatusChange(tv, EventArgs.Empty);
        }

        public static event EventHandler ClassementChange;
        private static void OnClassementChange(TrackListViewModel tv)
        {
            if (ClassementChange != null)
                ClassementChange(tv, EventArgs.Empty);
        }

        public TrackListViewModel TV { get { return this; } }

        public exportState ExportStatus
        {
            get
            {
                return MasterPiece.ExportStatus; // exportState;
            }
            set
            {
                if (MasterPiece.ExportStatus != value)
                {
                    MasterPiece.ExportStatus = value;
                    OnPropertyChanged("ExportStatus");
                    OnPropertyChanged("TV");
                    OnPropertyChanged("Background");
                    OnExportStatusChange(this);
                    //refresh();


                }
            }
        }

        public int IndexExport
        {
            get { return PieceGen.IndexExport; }
        }

        public selectedCoeff SelectedMotif
        {
            get
            {
                if (PieceGen == null)
                    return selectedCoeff.none;
                return PieceGen.SelectedMotif;
            }
        }



        private TrackListViewModel(Piece piece)
            : base(piece)
        {
            this.track = piece;
            this.piece = track.Track as CPiece;
        }
        # region registre
        #region main
        /// <summary>
        /// Registre des tracks présentés dans la grille principale
        /// </summary>
        private static BgDict<int, TrackListViewModel> dict = new BgDict<int, TrackListViewModel>();
        /// <summary>
        /// Récupère ou crée un track dans la grille principale
        /// </summary>
        /// <param name="p"></param>
        /// <returns></returns>
        public static TrackListViewModel getOrCreate(Piece p)
        {
            var t = dict[p.PieceId];
            if (t == null)
            {
                t = new TrackListViewModel(p);
                dict.Add(p.PieceId, t);
            }
            return t;
        }

        public static TrackListViewModel get(int id)
        {
            return dict[id];
        }
        public static IDictionary<int, TrackListViewModel> Dict { get { return dict; } }
        #endregion
        #region album
        /// <summary>
        /// Registre des tracks présentés dans la grille album
        /// </summary>
        private static BgDict<int, TrackListViewModel> dictA = new BgDict<int, TrackListViewModel>();
        /// <summary>
        /// Récupère ou crée un track dans la grille album
        /// </summary>
        /// <param name="p"></param>
        /// <returns></returns>
        public static TrackListViewModel getOrCreateA(Piece p)
        {
            var t = dictA[p.PieceId];
            if (t == null)
            {
                t = new TrackListViewModel(p);
                dictA.Add(p.PieceId, t);
            }
            return t;
        }

        public static TrackListViewModel getA(int id)
        {
            return dictA[id];
        }
        public static IDictionary<int, TrackListViewModel> DictA { get { return dictA; } }
        #endregion
        # endregion
        //public TrackListViewModel(TrackList track, PlayListViewModel playlist)
        //    : base(track, playlist)
        //{
        //    //this.track = track;
        //    //this.piece = PieceViewModel.getPiece(track); // new PieceViewModel(track); // track.Piece.Track as CPiece; 
        //    //piece.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(piece_PropertyChanged);
        //    //int id = track.PieceId;
        //    //if (!dictT.ContainsKey(id))
        //    //{
        //    //    var list = new List<TrackListViewModel>();
        //    //    dictT.Add(id, list);
        //    //}

        //    //dictT[id].Add(this);

        //}

        void piece_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            OnPropertyChanged(e.PropertyName);
        }

        public String StrPlaying
        {
            get
            {
                if (playing) return "<))";
                return "";
            }
        }
        public string MedianneStatus
        {
            get
            {
                var p = PieceGen;
                if (p.Medianne)
                    return ">>";
                if (p.MedianneLight)
                    return ">";
                if (p.Border)
                    return "-";
                if (p.BorderMin)
                    return "-";
                if (p.BorderEffect)
                    return "--";

                return "";
            }
        }

        private bool playing;
        public bool Playing
        {
            get { return playing; }
            set
            {
                if (value != playing)
                {
                    playing = value;
                    if (playing)
                    {
                        CurrentPlaying = this;
                    }
                    OnPropertyChanged("Playing");
                    OnPropertyChanged("StrPlaying");
                }
            }
        }

        public static TrackListViewModel CurrentPlaying
        {
            get
            {
                return currentPlaying;
            }
            set
            {
                if (value != currentPlaying)
                {
                    if (currentPlaying != null)
                        currentPlaying.Playing = false;
                    currentPlaying = value;
                }
            }
        }

        public int Rating
        {
            get
            {
                return piece.Rating;
            }
            set
            {
                piece.Rating = value;
                //if (value != track.Rating)
                //{
                //    track.Rating = value;
                //    onPropertyChanged("Rating");
                //}
            }
        }

        //  private pdb.db.obj.CPiece CPiece { get { return track.Piece.Track as pdb.db.obj.CPiece; } }

        public string ClassementCompact
        {
            get { return PieceGen.ClassementCompact; }
        }

        //public static readonly DependencyProperty ClassementProperty =
        //DependencyProperty.Register("Classement", typeof(String),
        // typeof(PieceViewModel), new UIPropertyMetadata(null));
        //  Classement ITrackNative.Classement { get { return PieceGen.Classement; } }
        public String Classement
        {
            get
            {
                return PieceGen.Classement.ToString();
            }
            set
            {

                // piece.StrClassement = value;
                //if (value != piece.Piece.StrClassement)
                //{

                lock (Albums.LockSort)
                {
                    piece.StrClassement = value;
                    track.invalidateCache(true);
                    App.gen.ClassementChange();

                    //piece.Classement = value;
                    // PieceGen.invalidateCache();
                    var albums = App.gen.Albums;
                    albums.signalClassChange(track);
                    //  albums.invalidateAll(false); 
                    if (DetailClassementViewModel.Instance.Auto)
                        App.gen.setUrgence();
                    try
                    {

                        PlayerViewModel.makeauto(this);
                        App.bib.setClassement(this, value);



                        // piece.Piece.StrClassement = value;

                    }
                    catch
                    {
                    }

                    OnClassementChange(this);
                    OnPropertyChanged("Classement");

                    App.go(this);
                    // onPropertyChanged("Classement");


                    // }

                }
            }
        }

        public int Year
        {
            get
            {
                return piece.Year;
            }
            set
            {
                if (value != Year)
                {
                    piece.Year = value;
                    App.invalidateAlbums();
                }
                //if (value != piece.Year)
                //{
                //    track.Year = value;
                //    onPropertyChanged("Year");
                //}
            }
        }

        public DateTime Added { get { return piece.Added; } }

        public DateTime FirstAcces
        {
            get
            {
                return track.FirstAcces;
            }
        }



        public DateTime AlbumAdded
        {
            get
            {
                return track.AlbumAdded;
            }
        }

        public int RankAlbum { get { return PieceGen.RankAlbum; } }
        public int RankAlbumZero { get { return PieceGen.RankAlbumZero; } }
        public int RankAlbumReverse { get { return PieceGen.RankAlbumReverse; } }
        //  public int RankAllAlbum { get { return PieceGen.RankAllAlbum; } }
        public int RankAlbumSt { get { return PieceGen.RankAlbumSt; } }
        public int RankAlbumZeroSt { get { return PieceGen.RankAlbumZeroSt; } }


        public int Rank { get { return PieceGen.Rank.Quality; } }
        //public static readonly DependencyProperty CommentProperty =
        //DependencyProperty.Register("Comment", typeof(string),
        //typeof(PieceViewModel), new UIPropertyMetadata(null)); 
        //public string Comment
        //{
        //    get
        //    {
        //        if (PieceGen.Virtual)
        //            return "";
        //        return piece.Comment;
        //    }
        //    set
        //    {
        //        if (PieceGen.Virtual)
        //            return;
        //        //piece.Comment = value; 
        //        if (value != piece.Comment)
        //        {
        //            //  track.Comment = value;
        //            piece.Comment = value;
        //            OnPropertyChanged("Comment");

        //        }
        //    }
        //}

        //public string Grouping
        //{
        //    get { return track.Piece.Grouping; }
        //    set
        //    {
        //        //  piece.Grouping = value;
        //        if (value != track.Piece.Grouping)
        //        {
        //            track.Piece.setGrouping(value, true);
        //            // track.setGrouping(value, true);
        //            OnPropertyChanged("Grouping");
        //        }
        //    }
        //}




        public bool isPodcast
        {
            get { return piece.isPodcast; }
        }


        public TimeSpan Duration
        {
            get { return piece.Duration; }
            set
            {
                piece.Duration = value;
                //if (!Exists)
                //    return; 
                //if (value != Duration)
                //{
                //    var deltaMs = Math.Abs(value.TotalMilliseconds - Duration.TotalMilliseconds);
                //    if (deltaMs >= 1)
                //    {
                //        track.Duration = value;
                //        if (deltaMs >= 1000)
                //            onPropertyChanged("Duration");
                //    }
                //}
            }
        }

        public string File
        {
            get { return piece.Files.PathReduc; }
        }

        public string Location
        {
            get { return piece.Location; }
        }

        public string Artist
        {
            get
            {
                return piece.Artist;
            }
            set
            {
                if (value != Artist)
                {
                    piece.Artist = value;
                    App.invalidateAlbums();
                }
                //if (value != track.Artist)
                //{
                //    track.Artist = value;
                //    onPropertyChanged("Artist");
                //}
            }
        }

        public string Album
        {
            get
            {
                if (track.Virtual)
                {
                    switch (track.VirtualMode)
                    {
                        case virtualMode.none:
                        break;
                        case virtualMode.artist:
                        return string.Format("[{0}]", track.Album);
                        case virtualMode.path:
                        break;
                        case virtualMode.year:
                        if (track.Album.Length == 3)
                            return string.Format("[[{0}0']]", track.Album);
                        else
                            return string.Format("[[{0}]]", track.Album);
                        case virtualMode.extended:
                        return string.Format("¤{0}", track.Album);
                        case virtualMode.added:
                        return string.Format("<{0}>", track.Album);
                        case virtualMode.word:
                        return string.Format("'{0}'", track.Album);
                        case virtualMode.list:
                        return string.Format("/{0}", track.Album);
                        default:
                        break;
                    }
                    return track.Album;
                }
                return piece.Album;
            }
            set
            {
                if (!track.Virtual)
                {
                    if (value != Album)
                    {
                        piece.Album = value;
                        App.invalidateAlbums();
                    }
                }
                //if (value != track.Album)
                //{
                //    track.Album = value;
                //    onPropertyChanged("Album");
                //}
            }
        }

        public string MasterAlbum
        {
            get
            {
                //    if (track.Virtual)
                //        return " " + PieceGen.Master.Album;
                return PieceGen.Master.Album;
            }
            set
            {
                if (value == null)
                    return;
                value = value.Trim();
                if (value != PieceGen.Master.Album)
                {
                    PieceGen.Master.Album = value;
                    OnPropertyChanged("MasterAlbum");
                }
            }
        }

        public Album album { get { return PieceGen.PieceAlbum; } }

        public string Name
        {
            get
            {
                return piece.Name;
            }
            set
            {
                piece.Name = value;
                //if (value != track.Name)
                //{
                //    track.Piece.Name = value;
                //    onPropertyChanged("Name");
                //}
            }
        }

        public int TrackNumber
        {
            get
            {
                return track.TrackNumber;
            }
            set
            {
                if (!track.Virtual)
                    piece.TrackNumber = value;
                //if (value != track.TrackNumber)
                //{
                //    track.TrackNumber = value;
                //    onPropertyChanged("TrackNumber");
                //}
            }
        }


        public void setClassement(string className, int rating)
        {
            piece.setClassement(className, rating);
            PieceGen.invalidateCache(true);

        }



        public DateTime PlayedDate
        {
            get { return piece.PlayedDate; }
        }

        //public string ArtWork
        //{
        //    get
        //    {
        //        return piece.ArtWork;
        //    }
        //    set
        //    {
        //        piece.ArtWork = value;
        //    }
        //}

        //public void setGrouping(string value, bool prior)
        //{
        //    track.Piece.setGrouping(value, prior);
        //    piece.Grouping = value; // TODO je fait quoi de ça ???
        //    // onPropertyChanged("Grouping");
        //}

        public string ClassementVirtuel { get { return PieceGen.ClassementVirtuel; } }

        public decimal CoeffVirtuel { get { return PieceGen.CoeffVirtuel - 1; } }

        public string ClassementVirtuel2 { get { return PieceGen.ClassementVirtuel2; } }

        public decimal CoeffVirtuel2 { get { return PieceGen.CoeffVirtuel2 - 1; } }

        public decimal Rendement
        {
            get
            {
                if (album == null)
                    return 0;
                return album.Rendement - 1;
            }
        }

        public bool FirstClass
        {
            get
            {
                return true;
            }
            set
            {

            }
        }



        public List<DateTime> Dates
        {
            get { return new List<DateTime>(piece.Dates); }
        }


        public string ClassEvol
        {
            get { return track.ClassEvol; }
        }

        public long Size { get { return Piece.Size; } }

        public bool? Exists { get { return Piece.Exists; } }
        public bool ExistsNow { get { return Piece.ExistsNow; } }

        //public void onPropertyChanged(string propertyName)
        //{
        //    var list = dictT[PieceId];
        //    if (list == null)
        //    {
        //        OnPropertyChanged(propertyName);
        //    }
        //    else
        //    {
        //        foreach (TrackListViewModel t in dictT[PieceId])
        //            t.OnPropertyChanged(propertyName);
        //    }
        //}




        public int PieceId
        {
            get { return track.PieceId; }
        }
        public int MasterId { get { return PieceGen.MasterId; } }


        public int PieceParentId
        {
            get { return track.PieceParentId; }
            set { track.PieceParentId = value; }
        }

        public void setParent(TrackListViewModel parent)
        {
            track.invalidateCache(false);
            parent.PieceGen.invalidateCache(false);

            track.albumMustRefresh();
            parent.track.albumMustRefresh();

            piece.Parent = parent.Piece.Master;
            track.setParent(parent.track);

            track.albumMustRefresh();
            parent.track.albumMustRefresh();

            track.invalidateCache(false);
            parent.PieceGen.invalidateCache(false);
        }

        public void fusion(TrackListViewModel toDelete)
        {

            PieceGen.invalidateCache(false);
            toDelete.PieceGen.invalidateCache(false);

            App.Db.List.fusion(piece, toDelete.Piece);
            PieceGen.invalidateCache(false);
            toDelete.PieceGen.invalidateCache(false);

        }





        #region key
        private TrackIdentity key;
        public TrackIdentity Key
        {
            get
            {
                if (key == null)
                    keyGener();
                return key;
            }
        }
        private void keyGener()
        {
            key = new TrackIdentity(this);
        }

        #endregion


        public List<string> RelativesPath
        {
            get { return track.RelativesPath; }
        }

        public DateTime? UpdateClassement { get { return PieceGen.UpdateClassement; } }
        public DateTime? AlbumUpdateClassement { get { return PieceGen.AlbumUpdateClassement; } }
        public DateTime? MasterAlbumUpdateClassement { get { return PieceGen.MasterAlbumUpdateClassement; } }



        public DateTime? LastRead { get { return PieceGen.LastRead; } }
        public DateTime? AlbumLastRead { get { return PieceGen.AlbumLastRead; } }

        public int NbClass { get { return PieceGen.NbClass; } }

        public List<DateTime> DatesClassementBrut
        {
            get
            {
                return track.DatesClassementBrut;
            }
        }


        public string getLocation()
        {
            return piece.getLocation();
        }

        public string EquivLight
        {
            get
            {
                if (album == null)
                    return "";
                return album.EquivLight;
            }
        }

        public string EquivLight0
        {
            get
            {
                if (album == null)
                    return "";
                return album.EquivLight0;
            }
        }

        public string EquivLightSt
        {
            get
            {

                if (album == null)
                    return "";
                return album.EquivLightSt;
            }
        }

        public decimal ClassementValueLightSt
        {
            get
            {
                if (album == null)
                    return 0;
                return album.ClassementValueLightSt;
            }
        }

        public decimal ClassementValueLight
        {
            get
            {
                if (album == null)
                    return 0;
                return album.ClassementValueLight;
            }
        }

        public int AlbumCount
        {
            get
            {
                if (album == null)
                    return 0;
                return album.Count;
            }
        }

        public bool Virtual { get { return PieceGen.Virtual; } }

        public int DeltaRank { get { return PieceGen.DeltaRank; } }


        public void setClassement(string classement)
        {
            Classement = classement;
        }


        public string strClassement
        {
            get { return Classement; }
        }

        public string MaxClassement
        {
            get { return track.MaxClassement.ToString(); }
        }

        public string DeepClassement
        {
            get { return track.DeepClassement.ToString(); }
        }




        public bool Keep { get { return PieceGen.Keep; } }

        public bool NoCompact { get { return !PieceGen.UseCompact; } }

        public int MainTrackNumber { get { return PieceGen.MasterTrackNumber; } }

        public int NbRecentsInAlbum { get { return PieceGen.NbRecentsInAlbum; } }
        public int NbDoneInAlbum { get { return PieceGen.NbDoneInAlbum; } }
        public string PlusPetitEnabled { get { return PieceGen.PlusPetitEnabled; } }

        public decimal KeepCoeff { get { return PieceGen.KeepCoeff; } }

        public IMasterPiece MasterPiece
        {
            get
            {
                return piece.MasterPiece;
            }
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\AlbumCtl.xaml.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Threading;
using pdb.player.ViewModel;
using pdb.gen.albums;
using pdb.gen;
using System.Collections;
using pdb.util;

namespace pdb.player.Vue
{
    /// <summary>
    /// Interaction logic for AlbumCtl.xaml
    /// </summary>
    public partial class AlbumCtl : UserControl, ItrackProvider
    {
        public static AlbumCtl Instance;
        private DetailAlbumViewModel model;
        private Logger log;
        //    private DataGridRow currentSelected;
        public AlbumCtl()
        {
            InitializeComponent();
            Loaded += new RoutedEventHandler(AlbumCtl_Loaded);
            App.refresh += new EventHandler<ClientEventArgs>(App_refresh);
            App.refreshAlbum += new EventHandler<ClientEventArgs>(App_refreshAlbum);
            Instance = this;
            dg.Sorting += dg_Sorting;
            log = Logger.getLogger("AlbumCtl");
        }

        void App_refreshAlbum(object sender, ClientEventArgs e)
        {
            init(e.client);
        }

        void dg_Sorting(object sender, DataGridSortingEventArgs e)
        {

            DataGridColumn column = e.Column;
            if ("Classement".Equals(column.Header))
            {
                if (dg.ItemsSource == null)
                    return;
                // prevent the built-in sort from sorting


                ListSortDirection direction = (column.SortDirection != ListSortDirection.Descending) ? ListSortDirection.Ascending : ListSortDirection.Descending;

                //set the sort order on the column
                // 

                //use a ListCollectionView to do the sort.
                ListCollectionView lcv = (ListCollectionView)CollectionViewSource.GetDefaultView(dg.ItemsSource);
                if (lcv == null)
                    return;


                e.Handled = true;
                //this is my custom sorter it just derives from IComparer and has a few properties
                //you could just apply the comparer but i needed to do a few extra bits and pieces
                var comparer = new PieceSimpleClassementComparer(direction == ListSortDirection.Ascending);

                //apply the sort
                lcv.CustomSort = comparer;
                column.SortDirection = direction;
            }


        }

        public class PieceSimpleClassementComparer : IComparer
        {
            private int sens;
            public PieceSimpleClassementComparer(bool ascending)
            {
                this.sens = ascending ? 1 : -1;
            }
            private static PieceTrackNumberComparer tn = new PieceTrackNumberComparer();
            public int Compare(object xx, object yy)
            {
                var x = xx as TrackListViewModel;
                var y = yy as TrackListViewModel;
                int cmp = x.PieceGen.Classement.CompareTo(y.PieceGen.Classement);
                if (cmp != 0) return sens * cmp;

                return tn.Compare(x.PieceGen, y.PieceGen);
                //  return -x.RapportClassement.CompareTo(y.RapportClassement);
            }
        }




        void App_refresh(object sender, ClientEventArgs e)
        {
            init(e.client);
        }

        void AlbumCtl_Loaded(object sender, RoutedEventArgs e)
        {
            this.model = new DetailAlbumViewModel();
            model.PropertyChanged += new PropertyChangedEventHandler(model_PropertyChanged);
            init(null);
            TrackListViewModel.CurrentHumanSelectedChanged += new EventHandler<ClientEventArgs>(TrackListViewModel_CurrentHumanSelectedChanged);

        }

        void model_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (string.IsNullOrEmpty(e.PropertyName))
            {
                init(null);
            }
        }


        void TrackListViewModel_CurrentHumanSelectedChanged(object sender, ClientEventArgs e)
        {
            if (e.client.Cancel)
                return;
            init(e.client);
        }

        private void init(IClient client)
        {
            if (client == null)
                client = new SimpleClient("AlbumCtl::init()");
            if (client.Cancel)
                return; 
            App.Dispatch(() =>
                {
                    client.Start();
                    App.log.log("albumCtl.init");
                    //SortDescriptionCollection sort = null;
                    //ICollectionView view = null;
                    ////   currentSelected = dg.SelectedItem as TrackListViewModel;

                    //view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
                    //if (view != null)
                    //    sort = view.SortDescriptions;

                    //List<SortDescription> _sort = null;
                    //if (sort != null)
                    //    _sort = new List<SortDescription>(sort);
                    ////base.DataContext = null;
                    //client.log("recup sort"); 
                    //
                    //dgalbums.ItemsSource = null;
                    base.DataContext = model;
                    client.log("init DataContext");
                    var alb = model.Album;
                    dg.ItemsSource = null;
                    dg.ItemsSource = alb;

                    //dgalbums.SelectedItem = TrackListViewModel.HumanSelected; 

                    client.log("init dg.ItemsSource");

                    //
                    dgalbums.ItemsSource = null;
                    dgalbums.Items.Clear();
                    dgalbums.ItemsSource = model.Albums;
                    client.log("init dgalbums.ItemsSource=fin");

                    //dg.ApplySort(_sort);
                    //   client.log("init dgalbums.ItemsSource");

                    checkItems(true);

                    // Focus(model.SelectedTrackInAlbumView);
                }, client);

        }


        private void checkItems(bool reset)
        {
            ////  var l = new List<TrackListViewModel>();

            //ICollectionView view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
            //if (view == null)
            //    return;

            //var selectedTracks = new List<TrackListViewModel>(dg.SelectedItems.Count);
            //foreach (TrackListViewModel t in dg.SelectedItems)
            //    selectedTracks.Add(t);
            //var tracks = dg.Items;


            ////    IDisposable w = view.DeferRefresh();
            //try
            //{


            //    if (reset)
            //    {
            //        TrackListViewModel selected = null;
            //        if (TrackListViewModel.HumanSelected != null)
            //        {
            //            selected = TrackListViewModel.HumanSelected;  // PlayListViewModel.findTrack(App.bib.Musique, TrackListViewModel.HumanSelected.MasterId);
            //        }

            //        //foreach (TrackListViewModel track in view)
            //        //{
            //        //    if (track.MasterId == selected.MasterId)
            //        //        track.IsSelected = true;
            //        //    else
            //        //        track.IsSelected = false;
            //        //}
            //        // dg.SelectedItems.Clear();
            //        //  w.Dispose(); w = null;


            //        if (selected != null)
            //        {
            //            // l.Add(selected);
            //            if (!dg.SelectedItems.Contains(selected))
            //                dg.SelectedItems.Add(selected);
            //        }
            //        //foreach (TrackListViewModel track in selectedTracks)
            //        //{
            //        //    if (track.MasterId != selected.MasterId)
            //        //    {
            //        //        dg.SelectedItems.Remove(track);
            //        //        track.IsSelected = false;
            //        //        //track.refresh();
            //        //    }
            //        //}
            //    }
            //    else
            //    {
            //        //var currentPl = PlayListViewModel.SelectedPlayList;
            //        //foreach (TrackListViewModel track in selectedTracks)
            //        //{
            //        //    //  l.Add(track);
            //        //    track.IsSelected = true;

            //        //    //if (currentPl != null)
            //        //    //{
            //        //    //    TrackListViewModel trackMain =  PlayListViewModel.findTrack(currentPl, track.PieceId);
            //        //    //    if (trackMain != null)
            //        //    //        trackMain.IsSelected = true;
            //        //    //}
            //        //    //track.refresh();
            //        //}


            //    }
            //    //lock (this)
            //    //   this.selectedTracks = l;
            //}
            //finally
            //{
            //    //if (w != null)
            //    //    w.Dispose();
            //}

        }

        //private void checkItems()
        //{
        //    var l = new List<TrackListViewModel>();

        //    ICollectionView view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
        //      IDisposable w = view.DeferRefresh();
        //      try
        //      {
        //          var currentPl = PlayListViewModel.SelectedPlayList; 
        //          foreach (TrackListViewModel track in dg.SelectedItems)
        //          {
        //              l.Add(track);
        //              track.IsSelected = true;
        //              if (currentPl != null)
        //              {
        //                  TrackListViewModel trackMain = PlayListViewModel.findTrack(currentPl, track.PieceId);
        //                  if (trackMain != null)
        //                      trackMain.IsSelected = true;
        //              }
        //              //track.refresh();
        //          }
        //      }

        //      finally
        //      {
        //          if (w != null)
        //              w.Dispose();
        //      }

        //}



        private void dgAlbum_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var t = dg.SelectedItem as TrackListViewModel;
            if (t == null)
                return;
            ItrackProvider provider = this;
            //var pl = PlayListViewModel.SelectedPlayList;
            //if (pl != null)
            //{
            //    //var f = PlayListViewModel.findTrack(pl, t.PieceId);
            //    //if (f != null)
            //    //{
            //    //    t = f;
            //        provider = null; // OUAILLE?
            //    //}
            //}

            //TrackListViewModel t = null;
            //e.
            //var r = sender as DataGridRow;
            //if (r != null) { }
            ////  t = r.Item as TrackListViewModel;
            //else
            //{
            //    var c = sender as DataGridCell;
            //    r = c.
            //}
            //t = r.Item as TrackListViewModel;
            PlayerViewModel.reset(provider, t);
        }

        private void dg_MouseClick(object sender, MouseButtonEventArgs e)
        {
            //var currentSelected = sender as DataGridRow;
            //var t = currentSelected.Item as TrackListViewModel;
            //currentSelected.IsSelected = true;

            ////  currentSelected.MoveFocus(new TraversalRequest(FocusNavigationDirection.Next));  
            //TrackListViewModel.setHumanSelected(App.bib.Musique, t);

            checkItems(false);
           // PlayerViewModel.Instance.makeResume();
        }

        public System.ComponentModel.ICollectionView PresentationTracks
        {
            get { return CollectionViewSource.GetDefaultView(dg.ItemsSource); }
        }


        public PlayListViewModel PlayList
        {
            get { return model.PlayListViewModel; }
        }

        public void Focus(TrackListViewModel t)
        {
            scrolItem = t;
            scrol();
        }

        public void focusHelp()
        {
            var t = TrackListViewModel.HumanSelected;
            if (t == null)
                t = TrackListViewModel.CurrentPlaying;
            if (t == null) return;
            Focus(t);
        }



        private TrackListViewModel scrolItem;
        void scrol()
        {
            log.log("scroll item->{0}", scrolItem);
            var client = new SimpleClient("AlbumCtl::scrol()");
            App.Instance.dispatch(() =>
            {
                //if (dg.Items.Count == 0)
                //{
                //    log.log("scroll sans items");
                //    return;
                //}

                if (scrolItem == null)
                {
                    log.log("scrollItem null");
                    return;
                }

                try
                {
                    dg.ScrollIntoView(scrolItem);
                }
                catch (Exception ex)
                {
                    log.Error("erreur scroll " + ex.Message);
                }
            }, client);


        }

        public void doFilter(string filter)
        {

        }


        public List<TrackListViewModel> SelectedTracks
        {
            get
            {
                var list = new List<TrackListViewModel>();
                foreach (TrackListViewModel track in PresentationTracks)
                    list.Add(track);
                return list;
            }
        }

        private void cbx_mode_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            albumMode mode = (albumMode)cbx_mode.SelectedIndex;
            model.Mode = mode;
            init(null);
        }




    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\BibCtl.xaml.cs">
    <content><![CDATA[using System;
using System.Windows;
using System.Windows.Controls;
using pdb.player.ViewModel;
using pdb.util;
using pdb.player.Vue.Util;
using pdb.player.ViewModel.Colors;

namespace pdb.player.Vue
{
    public partial class BibCtl : UserControl, IRedraw, IGradiant
    {
        private BibViewModel bib;
        private Logger log;

        public BibCtl()
        {
            try
            {
                log = Logger.getLogger("BibCtl");
                InitializeComponent();
                Loaded += Bib_Loaded;
              //  App.refresh += new EventHandler<ClientEventArgs>(App_refresh);
                GradiantBuilder.Instance.Add(this);
            }
            catch (Exception ex)
            {
                misc.log(ex.ToString()); 
            }
        }

        //void App_refresh(object sender, EventArgs e)
        //{
        //    //if (!App.PHASE2.Equals(sender))
        //    //    return;
        //    //log.log("BibCtl::App_refresh");
        //    //if (Dispatcher.CheckAccess())
        //    //    AppRefresh();
        //    //else
        //    //    Dispatcher.BeginInvoke(new Action(AppRefresh), App.DISPATCHER_PRIORITY);
        //}

        //void AppRefresh()
        //{
        //    return;
        //    log.log("BibCtl::AppRefresh");
        //    try
        //    {
        //        tv_bib.Items.Refresh();
        //    }
        //    catch (Exception ex)
        //    {
        //        log.log(ex.ToString());
        //    }
        //}

        internal BibViewModel BibRoot
        {
            set
            {
                bib = value;
                base.DataContext = bib;
                if (tv_bib != null)
                    tv_bib.ItemsSource = bib.Root;
            }
        }

        void Bib_Loaded(object sender, RoutedEventArgs e)
        {
            if (bib == null)
                bib = App.bib;
          //  PlayListViewModel.addDrow(this);
            base.DataContext = bib;
            if (bib != null)
                tv_bib.ItemsSource = bib.Root;
        }




        public void redraw()
        {
            //if (Dispatcher.CheckAccess())
            //    AppRefresh();
            //else
            //    Dispatcher.BeginInvoke(new Action(AppRefresh), App.DISPATCHER_PRIORITY);
        }

        ViewModel.Colors.Gradient IGradiant.Conf
        {
            get
            {
                try
                {
                    if (Couleurs.Instance.bib == null)
                        return null;
                    return Couleurs.Instance.bib.gradient;
                }
                catch
                {
                    return null; 
                }
            }
        }

        bool IGradiant.sensGradient
        {
            get { return true; }
        }

        void IBackGround.setBackground(System.Windows.Media.Brush brush)
        {
            tv_bib.Background = brush;
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\ClassementCtl.xaml.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using pdb.player.ViewModel;
using pdb.gen.stat;
using pdb.player.Vue.Adorn;
using System.ComponentModel;
using pdb.gen;
using System.Text.RegularExpressions;
using System.Windows.Threading;
using pdb.player.Vue.Util;
using pdb.player.ViewModel.Colors;
using pdb.util;
using System.Threading;

namespace pdb.player.Vue
{
    public class TB : UIElement
    {
        private Border border;
        private TextBlock tb;
        public TB()
        {
            border = new Border();
            border.BorderThickness = new Thickness(0.3);
            border.BorderBrush = Brushes.Gray;

            tb = new TextBlock();
            tb.TextAlignment = TextAlignment.Center;
            border.Child = tb;
            tb.FontSize = 10;
            tb.HorizontalAlignment = HorizontalAlignment.Stretch;
            tb.Visibility = System.Windows.Visibility.Visible;
        }

        public Brush Background { set { tb.Background = value; } }
        public string Content { set { tb.Text = value; } }

        protected override bool IsEnabledCore
        {
            get
            {
                return true;
            }
        }




    }


    /// <summary>
    /// Interaction logic for ClassementCtl.xaml
    /// </summary>
    public partial class ClassementCtl : UserControl, IGradiant, IClassementObserver
    {



        private DetailClassementViewModel model;
        private StatCtl[,] tbs = new StatCtl[DynamicStat.ROWS + 1, DynamicStatLigne.COLS];
        private Border[,] borders = new Border[DynamicStat.ROWS + 1, DynamicStatLigne.COLS];
        private ILogger log;
        public ClassementCtl()
        {

            InitializeComponent();
            GradiantBuilder.Instance.Add(this);
            TbClass.PreviewTextInput += new TextCompositionEventHandler(TbClass_PreviewTextInput);

            for (int i = -DynamicStatLigne.SEMI_COLS; i <= DynamicStatLigne.SEMI_COLS; i++)
            {
                var col = new ColumnDefinition();
                col.Width = new GridLength(1, GridUnitType.Star);
                tab.ColumnDefinitions.Add(col);
            }

            for (int j = 0; j <= DynamicStat.ROWS; j++)
            {
                var row = new RowDefinition();
                row.Height = new GridLength(1, GridUnitType.Star);
                tab.RowDefinitions.Add(row);
            }

            for (int c = 0; c < DynamicStatLigne.COLS; c++)
            {
                var border = new Border();
                border.BorderThickness = new Thickness(0.3);
                border.BorderBrush = Brushes.Gray;
                border.Background = Brushes.LightGray;
                border.VerticalAlignment = System.Windows.VerticalAlignment.Center;
                border.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
                border.ClipToBounds = true;
                var tb = new TextBlock();
                tb.VerticalAlignment = System.Windows.VerticalAlignment.Stretch;
                tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
                tb.Background = Brushes.LightGray;
                tb.Text = (c - DynamicStatLigne.SEMI_COLS).ToString();
                tb.TextAlignment = TextAlignment.Center;
                border.Child = tb;
                tab.Children.Add(border);
                Grid.SetRow(border, 0);
                Grid.SetColumn(border, c);
            }


            for (int r = 1; r <= DynamicStat.ROWS; r++)
            {
                for (int c = 0; c < DynamicStatLigne.COLS; c++)
                {
                    var tb = new StatCtl();
                    //var border = new Border();
                    //border.BorderThickness = new Thickness(0.3);
                    //border.BorderBrush = Brushes.Gray;

                    //border.VerticalAlignment = System.Windows.VerticalAlignment.Stretch;
                    ////var tb = new TextBlock();
                    ////tb.TextAlignment = TextAlignment.Center;

                    //////tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
                    ////tb.VerticalAlignment = System.Windows.VerticalAlignment.Center;
                    ////tb.FontSize = 10;


                    //border.Child = tb;
                    //    border.ClipToBounds = true;
                    tbs[r, c] = tb;
                    // borders[r, c] = border;


                    // AdornedControl ac = new AdornedControl(); 

                    // tb.BorderThickness = new Thickness(0.2) ;
                    // tb.BorderBrush = Brushes.Gray;
                    // tb.FontSize = 10;


                    tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
                    tb.Margin = new Thickness(0);
                    tb.Padding = new Thickness(0);

                    //tab.Children.Add(border);

                    //Grid.SetRow(border, r);
                    //Grid.SetColumn(border, c);

                    tab.Children.Add(tb);
                    Grid.SetRow(tb, r);
                    Grid.SetColumn(tb, c);

                    //if (r == 0)
                    //{
                    //    tb.Background = Brushes.LightGray;
                    //    tb.Text = (c - DynamicStatLigne.SEMI_COLS).ToString();
                    //}


                    if (c == DynamicStatLigne.SEMI_COLS || r == 3)
                        tb.FontWeight = FontWeights.Bold;
                }
            }




            this.Loaded += new RoutedEventHandler(ClassementCtl_Loaded);
        }
        Regex regex = new Regex(@"[0-5.\ ]+");
        void TbClass_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            var text = e.Text;
            if (!string.IsNullOrEmpty(text))
            {
                //regex that matches disallowed text
                if (!regex.IsMatch(text))
                    e.Handled = true;
            }

        }

        void ClassementCtl_Loaded(object sender, RoutedEventArgs e)
        {
            this.classProvider = new Provider(dg);
            // this.albumProvider = new Provider(dgAlbum); 
            this.model = new DetailClassementViewModel(this);
            App.DetailClassementViewModel = model;
            //  model.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(model_PropertyChanged);
            TrackListViewModel.CurrentSelectedChanged += new EventHandler(TrackListViewModel_CurrentSelectedChanged);
            model.setClassment("", null);
            btRecord.IsDefault = true;
            init(NUllClient.NULL);
            log = Logger.getLogger("ClassementCtl");
        }

        void TrackListViewModel_CurrentSelectedChanged(object sender, EventArgs e)
        {
            // init(); 
        }

        void model_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            init(NUllClient.NULL);
        }

        private class CPieceComparerByQualityAndLength2 : IComparer<TrackListViewModel>
        {
            private static IComparer<Piece> qual = new CPieceComparerByQualityAndLength();
            int IComparer<TrackListViewModel>.Compare(TrackListViewModel x, TrackListViewModel y)
            {
                return -qual.Compare(x.PieceGen, y.PieceGen);
                // return -x.PieceGen.Rank.Twice.CompareTo(y.PieceGen.Rank.Twice);
            }
        }

        private void init(IClient client)
        {


            if (client.Cancel)
                return;
            App.Dispatch(() =>
                {
                    client.Start();
                    //SortDescriptionCollection sort = null;
                    //ICollectionView view = null;

                    int caretIndex = TbClass.CaretIndex;
                    TbClass.IsReadOnly = true;

                    //view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
                    //if (view != null)
                    //    sort = view.SortDescriptions;

                    //List<SortDescription> _sort = null;
                    //if (sort != null)
                    //    _sort = new List<SortDescription>(sort);


                    if (client.Cancel)
                        return;
                    base.DataContext = null;
                    try
                    {
                        model.reset();
                        client.log("ClassementCtl::init: model.reset() ");
                        dg.ItemsSource = null;
                        if (client.Cancel)
                            return;
                        var tracks = model.getTracks(client);

                        if (tracks == null)
                            return;
                        if (client.Cancel)
                            return;
                        tracks.Sort(new CPieceComparerByQualityAndLength2());
                        dg.ItemsSource = tracks;
                        client.log("ClassementCtl::init: dg.ItemsSource ");
                        //foreach (TrackListViewModel t in tracks)
                        //    t.refresh(); 

                        //ICollectionView source = CollectionViewSource.GetDefaultView(dg.ItemsSource);
                        //if (source != null)
                        //{
                        //    if (source.SortDescriptions != null)
                        //        source.SortDescriptions.Clear();
                        //    source.SortDescriptions.Add(new SortDescription("Classement", ListSortDirection.Descending));
                        //}
                        //  tracks.init();
                        //dgAlbum.ItemsSource = null;
                        //object sel; 
                        //if (dgAlbum.Items.Count > 0)
                        //{
                        //    sel = dgAlbum.SelectedItem; 
                        //}
                        //dgAlbum.ItemsSource = model.Album;
                        //dgStat.ItemsSource = null;

                        //var stats = model.Stats;
                        //dgStat.DataContext = null; 
                        //dgStat.DataContext = stats.DefaultView;
                        //dgStat.ItemsSource = stats.DefaultView; 
                        if (client.Cancel)
                            return;
                        var stats = model.getStats(client);
                        if (stats == null)
                            return;

                        client.log("ClassementCtl::init: model.getStat ");

                        //for (int c = -DynamicStatLigne.SEMI_COLS; c <= DynamicStatLigne.SEMI_COLS; c++)
                        //{
                        //    var tb = tbs[0, c + DynamicStatLigne.SEMI_COLS];
                        //    tb.Background = Brushes.LightGray;
                        //    tb.Text = (c - DynamicStatLigne.SEMI_COLS).ToString();
                        //    tb.InvalidateVisual();
                        //}
                        if (client.Cancel)
                            return;
                        for (int r = 1; r <= DynamicStat.ROWS; r++)
                        {

                            var list = new List<int>(from c in stats[r - 1] select c);
                            list.Sort();
                            int count = list.Count;
                            int max = list[count - 1];
                            int max2 = list[count - 2];
                            double f = max2 * 1.5;
                            f = System.Math.Round(f);
                            if (f > 2 && f < max)
                                max = (int)f;
                            //for (int c = -DynamicStatLigne.SEMI_COLS; c <= DynamicStatLigne.SEMI_COLS; c++)
                            //{
                            //    int nb = stats[r - 1][c];
                            //    if (nb > max)
                            //        max = nb;
                            //}
                            for (int c = -DynamicStatLigne.SEMI_COLS; c <= DynamicStatLigne.SEMI_COLS; c++)
                            {
                                try
                                {
                                    //  var row = stats.Rows[r-1][c.ToString()]; 
                                    int nb = stats[r - 1][c];
                                    var tb = tbs[r, c + DynamicStatLigne.SEMI_COLS];
                                    if (nb > 0)
                                        tb.Text = nb.ToString();
                                    else
                                        tb.Text = "";
                                    tb.setValue(nb, max);
                                    tb.InvalidateVisual();
                                    //var b = borders[r, c + DynamicStatLigne.SEMI_COLS];
                                    //var layer = AdornerLayer.GetAdornerLayer(b);
                                    //try { layer.Remove((layer.GetAdorners(b))[0]); }
                                    //catch { }
                                    //layer.Add(new BarAdorner(b, nb, max));


                                }
                                catch (Exception ex)
                                {
                                    App.log.log(ex.ToString());
                                }


                                // tbs[r, c + DynamicStatLigne.SEMI_COLS].Text = stats.Rows[r - 1][c.ToString()].ToString(); 
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        App.log.log(ex.ToString());
                    }
                    finally
                    {
                        if (!client.Cancel)
                        {
                            base.DataContext = model;
                            // view = CollectionViewSource.GetDefaultView(dg.ItemsSource);

                            //   dg.ApplySort(_sort);
                            TbClass.CaretIndex = caretIndex;
                            TbClass.IsReadOnly = false;

                            client.log("ClassementCtl::init: end ");
                        }
                    }
                }, client);
        }

        private void btRecord_Click(object sender, RoutedEventArgs e)
        {
            model.record();

        }

        private ItrackProvider classProvider;
        private ItrackProvider albumProvider;

        private void dgMouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var r = sender as DataGridRow;
            var t = r.Item as TrackListViewModel;
            PlayerViewModel.reset(classProvider, t);
        }

        //private void dgAlbum_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        //{
        //    var r = sender as DataGridRow;
        //    var t = r.Item as TrackListViewModel;
        //    PlayerViewModel.reset(albumProvider, t);
        //}

        private class Provider : ItrackProvider
        {
            private DataGrid dt;
            public Provider(DataGrid dt)
            {
                this.dt = dt;
            }

            public System.ComponentModel.ICollectionView PresentationTracks
            {
                get { return CollectionViewSource.GetDefaultView(dt.ItemsSource); }
            }

            public PlayListViewModel PlayList
            {
                get { return null; }
            }

            public void Focus(TrackListViewModel t)
            {

            }


            public void doFilter(string filter)
            {

            }

            public List<TrackListViewModel> SelectedTracks
            {
                get
                {
                    var list = new List<TrackListViewModel>();
                    foreach (TrackListViewModel track in PresentationTracks)
                        list.Add(track);
                    return list;
                }
            }
        }

        //public System.ComponentModel.ICollectionView PresentationTracks
        //{
        //    get { return CollectionViewSource.GetDefaultView(dgAlbum.ItemsSource); }
        //}

        public PlayListViewModel PlayList
        {
            get { return null; }
        }

        public void Focus(int index)
        {

        }

        ViewModel.Colors.Gradient IGradiant.Conf
        {
            get { return Couleurs.Instance.classement.gradient; }
        }

        bool IGradiant.sensGradient
        {
            get { return true; }
        }

        void IBackGround.setBackground(Brush brush)
        {
            dg.Background = brush;
        }

        void IClassementObserver.signalClassementChange(IClient client)
        {
            init(client);
        }

        private void TbClass_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            log.log("TbClass_PreviewKeyDown");
            App.Indispo = true;
        }

        private void TbClass_MouseEnter(object sender, MouseEventArgs e)
        {
            log.log("TbClass_MouseEnter");
            App.Indispo = true;
        }

        private void TbClass_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            log.log("TbClass_PreviewMouseDown");
            App.Indispo = true;
        }

        private void TbClass_MouseLeave(object sender, MouseEventArgs e)
        {
            log.log("TbClass_MouseLeave");
            App.Indispo = false;
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\Vue\DataGridPlayList.xaml.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using pdb.gen.Tuning;
using pdb.player.ViewModel;
using pdb.player.ViewModel.Commande.PlayList;
using pdb.util;
using pdb.player.Vue.Util;
using System.Windows.Threading;
using System.Windows.Media;
using Math = System.Math;
using System.Linq;
using System.Linq.Expressions;
using System.Collections;

namespace pdb.player.Vue
{



    public partial class DataGridPlayList : UserControl, ItrackProvider,  IExportTracks
    {
        private static int nb;
        private int ID;
        private Logger log;
        public static event EventHandler refreshOk;
        // private BgColorFormatConverter colorConvert = new BgColorFormatConverter();

        //  private BgDict<int, DataGridRow> dict = new BgDict<int, DataGridRow>(); 
        // private TrackListViewModel currentTrack;
        private AllTracksViewModel model;

        public DataGridPlayList()
        {
            ID = nb;
            log = Logger.getLogger("DataGridPlayList_" + ID);
            nb++;
            InitializeComponent();
            this.Loaded += DataGridPlayList_Loaded;
            App.refresh += new EventHandler<ClientEventArgs>(App_refresh);
            //PlayListCommande.Provider = this;
        }

        void DataGridPlayList_Loaded(object sender, RoutedEventArgs e)
        {
            log = Logger.getLogger("DataGridPlayList_" + dg.Uid);
            init(null);
            PlayListViewModel.selectedPlaylistChange += PlayListViewModel_selectedPlaylistChange;
           // PlayListViewModel.addDrow(this);
            dg.PreviewKeyUp += new KeyEventHandler(dg_preview);
            TrackListViewModel.CurrentHumanSelectedChanged += new EventHandler<ClientEventArgs>(TrackListViewModel_CurrentHumanSelectedChanged);

            PlayerViewModel.Instance.checkNavIni();
#if EXPORT
            ExportCmd.Ihm = this;
#endif

            Cctl.MouseDoubleClick += new MouseButtonEventHandler(Cctl_MouseDoubleClick);

        }

        void Cctl_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (model == null)
                return;
            var cmd = model.Explorer;
            if (cmd.CanExecute(e))
                cmd.Execute(e);
        }

        void TrackListViewModel_CurrentHumanSelectedChanged(object sender, ClientEventArgs e)
        {
            var client = e.client; 
            if (client.Cancel)
                return; 
            //if (currentTrack != null)
            //    currentTrack.refresh();
            ICollectionView view = CollectionViewSource.GetDefaultView(dg.ItemsSource);

            var hs = TrackListViewModel.HumanSelected;
            if (hs == null)
                return;
            var pl = PlayListViewModel.SelectedPlayList;
            bool reset = pl != sender;

            //TrackListViewModel t = null;
            try
            {
                checkItems(true);

                //t = PlayListViewModel.findTrack(pl, hs.PieceId);
                //if (t == null)
                //    return;
                //t.IsSelected = true;

            }
            finally
            {
                //  currentTrack = t;
                //if (currentTrack != null)
                //    currentTrack.refresh();
                //TrackListViewModel.setHumanSelected(PlayList, TrackListViewModel.CurrentSelected); 

            }


            PlayerViewModel.Instance.makeResume(client);
        }

        Key key;
        void dg_preview(object sender, KeyEventArgs e)
        {
            // e.Handled = false; 
            key = e.Key;
            bool nav = false;

            switch (key)
            {
                case Key.Up:
                case Key.Down:
                case Key.PageDown:
                case Key.PageUp: nav = true; break;
                //case Key.LeftCtrl: case Key.RightCtrl : // TODO ajouter un élément
            }



            if (!nav)
                return;
            TrackListViewModel.setHumanSelected(PlayList, TrackListViewModel.CurrentSelected); //    .HumanSelected = TrackListViewModel.CurrentSelected;
        }


        void App_refresh(object sender, ClientEventArgs e)
        {
            log.log("dg::App_refresh");
            redraw(e.client);
        }




        void PlayListViewModel_selectedPlaylistChange(object sender, EventArgs e)
        {
            if (ID == 0)
            {
                init(sender as PlayListViewModel);
            }
        }

        private void init(PlayListViewModel old)
        {
            var client = new SimpleClient("DataGridPlayList::init())", log);
            App.Dispatch(() =>
            {
                client.Start();
                log.log("dg::init");

                SortDescriptionCollection sort = null;
                ICollectionView view = null;
                if (old != null)
                {
                    view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
                    if (view != null)
                        sort = view.SortDescriptions;
                    if (sort != null)
                        old.Sort = sort;
                    client.log("check old");
                }


                var pl = PlayListViewModel.SelectedPlayList;
                var currentPlaying = TrackListViewModel.CurrentPlaying;
                if (pl == null)
                    return;
                base.DataContext = null;
                client.log("base.DataContext = null");

                var source = dg.ItemsSource;

                dg.ItemsSource = null;
                this.model = pl.AlltracksVm;
                this.model.Provider = this;
                client.log("this.model.Provider = this");

                view = CollectionViewSource.GetDefaultView(model);
                client.log("view = CollectionViewSource.GetDefaultView(model);");
                using (var w = view.DeferRefresh())
                {
                    // items.refresh();

                    base.DataContext = model;
                    client.log("base.DataContext = model;");
                    // int i = 0;
                    if (pl.isSubList("gen"))
                    {
                    }
                    else
                    {
                        //foreach (TrackListViewModel track in items)
                        //{
                        //    i++;
                        //    track.Index = i;
                        //}
                    }
                    sort = pl.Sort;
                    List<SortDescription> _sort = null;
                    if (sort != null)
                        _sort = new List<SortDescription>(sort);
                    dg.ItemsSource = model;
                    client.log("dg.ItemsSource = model;");
                    TrackListViewModel.CurrentPlaying = currentPlaying;

                    dg.ApplySort(_sort, w);
                    client.log("dg.ApplySort(_sort, w);");
                }
                PlayerViewModel.Instance.set(this);
                client.log("PlayerViewModel.Instance.set(this);");

                //if (_sort != null && _sort.Count > 0)
                //{
                //    view.SortDescriptions.Clear();
                //    foreach (var _s in _sort)
                //    {
                //        view.SortDescriptions.Add(_s);
                //        foreach (DataGridColumn _c in dg.Columns)
                //        {
                //            if (_s.PropertyName == _c.SortMemberPath)
                //            {
                //                _c.SortDirection = _s.Direction;
                //                break;
                //            }
                //        }
                //        break;

                //    }
                //}

                //foreach (TrackListViewModel tv in items)
                //    tv.PropertyChanged += new PropertyChangedEventHandler(tv_PropertyChanged);

                //if (currentTrack != null)
                //    currentTrack.refresh();
#if EXPORT
                putExportTracks(pl, CollectionViewSource.GetDefaultView(dg.ItemsSource));
                client.log("putExportTracks(pl, CollectionViewSource.GetDefaultView(dg.ItemsSource));");
#endif
                // this.scrol();
                OnRefresh();
                client.log("OnRefresh");
            }, client);


        }
        private void OnRefresh()
        {
            if (refreshOk != null)
                refreshOk(this, EventArgs.Empty);
        }

        private void dg_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                var r = sender as DataGridRow;
                var t = r.Item as TrackListViewModel;
                PlayerViewModel.reset(this, t);
            }
            catch
            {
            }
        }

        private void checkItems(bool reset)
        {
            var l = new List<TrackListViewModel>();


            ICollectionView view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
            var selectedTracks = new List<TrackListViewModel>(dg.SelectedItems.Count);
            foreach (TrackListViewModel t in dg.SelectedItems)
                selectedTracks.Add(t);
            var tracks = dg.Items;



            //    IDisposable w = view.DeferRefresh();
            try
            {


                if (reset)
                {
                    TrackListViewModel selected = null;
                    if (TrackListViewModel.HumanSelected != null)
                    {
                        selected = TrackListViewModel.HumanSelected; // PlayListViewModel.findTrack(PlayList, TrackListViewModel.HumanSelected.PieceId);
                    }

                    foreach (TrackListViewModel track in view)
                    {
                        if (track == selected)
                            track.IsSelected = true;
                        else
                            track.IsSelected = false;

                        //track.refresh();
                    }
                    // dg.SelectedItems.Clear();
                    //  w.Dispose(); w = null;


                    if (selected != null)
                    {
                        l.Add(selected);
                        if (!dg.SelectedItems.Contains(selected))
                            dg.SelectedItems.Add(selected);
                    }
                    foreach (TrackListViewModel track in selectedTracks)
                    {
                        if (track != selected)
                        {
                            dg.SelectedItems.Remove(track);
                            track.IsSelected = false;
                            //track.refresh();
                        }
                    }
                }
                else
                {
                    foreach (TrackListViewModel track in selectedTracks)
                    {
                        l.Add(track);
                        track.IsSelected = true;

                        //TrackListViewModel trackMusique = PlayListViewModel.findTrack(App.bib.Musique, track.PieceId);
                        //if (trackMusique != null)
                        //    trackMusique.IsSelected = true;
                        //track.refresh();
                    }
                }
                //lock (this)
                //   this.selectedTracks = l;
            }
            finally
            {
                //if (w != null)
                //    w.Dispose();
            }

        }

        private void dg_MouseClick(object sender, MouseButtonEventArgs e)
        {
            //  e.Handled = true; 
            //var r = sender as DataGridRow;
            //var t = r.Item as TrackListViewModel;
            //TrackListViewModel.setHumanSelected(PlayList, t); //   .HumanSelected = t;
            //startPoint = e.GetPosition(null);

            checkItems(false);

           // PlayerViewModel.Instance.makeResume();
        }



        // private List<TrackListViewModel> selectedTracks = new List<TrackListViewModel>();

        private List<TrackListViewModel> SelectedTracks
        {
            get
            {
                lock (this)
                {
                    var l = new List<TrackListViewModel>();

                    foreach (TrackListViewModel t in dg.ItemsSource)
                    // foreach (TrackListViewModel t in dg.ItemsSource.Cast<TrackListViewModel>())
                    {
                        if (t.IsSelected)
                            l.Add(t);
                    }
                    return l;
                }
            }
        }
        ICollectionView ItrackProvider.PresentationTracks
        {
            get { return CollectionViewSource.GetDefaultView(dg.ItemsSource); }
        }
        void ItrackProvider.Focus(TrackListViewModel t)
        {

            // dg.SelectedIndex = index;
            //var indexbas = Math.Min(index + 100, dg.Items.Count - 1);
            //scrol(indexbas);
            this.scrolItem = t;
            scrol();
        }

        List<TrackListViewModel> ISelectedTracks.SelectedTracks
        {
            get
            {
                return SelectedTracks;
            }
        }
        private TrackListViewModel scrolItem;
        void scrol()
        {
            log.log("scroll item->{0}", scrolItem);
            var client = new SimpleClient("DataGriPlayList::scrol()");
            App.Dispatch(() =>
            {
                client.Start();
                if (dg.Items.Count == 0)
                {
                    log.log("scroll sans items");
                    return;
                }

                if (scrolItem == null)
                {
                    log.log("scrollItem null");
                }


                try
                {
                    dg.ScrollIntoView(scrolItem);
                }
                catch (Exception ex)
                {
                    log.Error("erreur scroll " + ex.Message);
                }
                client.End();
            }, client);
        }
        public PlayListViewModel PlayList
        {
            get { return PlayListViewModel.SelectedPlayList; }
        }
        public void doFilter(string filter)
        {
            PlayerViewModel.doFilter((this as ItrackProvider).PresentationTracks, filter);
        }
        private bool IsUserVisible(FrameworkElement element, FrameworkElement container)
        {
            if (!element.IsVisible)
                return false;
            Rect bounds = element.TransformToAncestor(container).TransformBounds(new Rect(0.0, 0.0, element.ActualWidth, element.ActualHeight));
            Rect rect = new Rect(0.0, 0.0, container.ActualWidth, container.ActualHeight);
            return rect.Contains(bounds.TopLeft) || rect.Contains(bounds.BottomRight);
        }

        private static T FindVisualParent<T>(UIElement element) where T : UIElement
        {
            var parent = element;
            while (parent != null)
            {
                var correctlyTyped = parent as T;
                if (correctlyTyped != null)
                {
                    return correctlyTyped;
                }

                parent = VisualTreeHelper.GetParent(parent) as UIElement;
            }
            return null;
        }

        public void redraw(IClient client)
        {
            if (client == null)
                client = new SimpleClient("DataGRiPlayList::redraw");
            if (client.Cancel)
                return; 
            App.Dispatch(() =>
            {
                client.Start();
                try
                {
                    // PlayerViewModel.Instance.doFilter(); 
                    var pl = PlayListViewModel.SelectedPlayList;

                    bool isgen = false;
                    if (pl != null && pl.isSubList("gen"))
                        isgen = true;

                    var items = dg.ItemsSource as AllTracksViewModel;

                    if (items == null)
                    {
                        dg.Items.Refresh();
                        client.log(" dg.Items.Refresh();");
                    }
                    else
                    {
                        ICollectionView view = CollectionViewSource.GetDefaultView(dg.ItemsSource);
                        client.log("ICollectionView view = CollectionViewSource.GetDefaultView(dg.ItemsSource);");
                        using (var w = view.DeferRefresh())
                        {
                            SortDescriptionCollection sort = view.SortDescriptions;

                            List<SortDescription> _sort = null;
                            if (sort != null)
                                _sort = new List<SortDescription>(sort);

                            int i = 0;
                            foreach (TrackListViewModel track in items)
                            {
                                i++;
                                if (!isgen)
                                    track.Index = i;
                                //  track.refresh();
                            }

                            dg.ApplySort(_sort, w);
                            client.log("dg.ApplySort(_sort, w);");
                            //if (_sort != null && _sort.Count > 0 && view.SortDescriptions.Count > 0)
                            //{
                            //    view.SortDescriptions.Clear();
                            //    foreach (var _s in _sort)
                            //    {
                            //        view.SortDescriptions.Add(_s);
                            //    }
                            //}
                            //items.refresh();
                            //client.log("items.refresh();");
                        }
#if EXPORT
                        putExportTracks(pl, view);
                         client.log(" putExportTracks(pl, view);");
#endif

                    }
                    client.End();
                    return;


                    //try
                    //{
                    //    isgen = false;

                    //    if (isgen)
                    //    {
                    //        log.log("dg::redraw::init");
                    //        init(pl);
                    //    }
                    //    else
                    //    {
                    //        log.log("dg::redraw::Refresh");
                    //        dg.Items.Refresh();
                    //    }
                    //}
                    //catch
                    //{
                    //    try
                    //    {
                    //        init(pl);
                    //    }
                    //    catch
                    //    {
                    //    }
                    //}
                }
                finally
                {
                    OnRefresh();
                }
            }, client);

        }

        private void MenuItem_Click(object sender, RoutedEventArgs e)
        {
            var items = dg.SelectedItems;
            MessageBox.Show(items.Count.ToString());
        }

        public string folderDialog()
        {
            return App.Instance.folderDialog();
        }


        public System.ComponentModel.ICollectionView PresentationTracks
        {
            get
            {
                return ((ItrackProvider)this).PresentationTracks;
            }
        }






        public bool ModeAlbum
        {
            get { return MessageBox.Show("par albums complets", "export", MessageBoxButton.YesNo) == MessageBoxResult.Yes; }
        }

        public bool Continue
        {
            get { return MessageBox.Show("continuer le marché ?", "export", MessageBoxButton.YesNo) == MessageBoxResult.Yes; }
        }




        public void InfoIHm(string message, string caption)
        {
            App.Instance.InfoIHm(message, caption);
        }

        public bool Confirm(string question, string caption)
        {
            return App.Instance.Confirm(question, caption);
        }

        public bool? TriChoix(string question, string caption)
        {
            return App.Instance.TriChoix(question, caption);
        }

        public Export getConfExport(string question)
        {
            return App.Instance.getConfExport(question);
        }

        public Import getConfImport(string question)
        {
            return App.Instance.getConfImport(question);
        }

        public int getNb(string question)
        {
            return App.Instance.getNb(question);
        }

        public bool changeName(string title, IName data)
        {
            return App.Instance.changeName(title, data);
        }

        public PlayListViewModel selectPlayList(string title)
        {
            return App.Instance.selectPlayList(title);
        }



        //  private List<TrackListViewModel> list = new List<TrackListViewModel>(); 
        public List<TrackListViewModel> ListTrack
        {
            get { return null; }
        }
#if EXPORT
        private void putExportTracks(PlayListViewModel pl, ICollectionView view)
        {
            var list = new List<TrackListViewModel>();
            foreach (TrackListViewModel track in view)
                list.Add(track);
            pl.ExportTracks = list;
            //visibleItems = new List<TrackListViewModel>();

            //foreach (var item in view)
            //{
            //    var row = dg.ItemContainerGenerator.ContainerFromItem(item) as DataGridRow;
            //    if (row != null)
            //    {
            //        visibleItems.Add(item as TrackListViewModel); 
            //    }
            //}


        }
#endif
        //private List<TrackListViewModel> visibleItems = new List<TrackListViewModel>();
        //public List<TrackListViewModel> VisibleItems { get { return new List<TrackListViewModel>(visibleItems); } }

        Point startPoint;
        private void dg_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            startPoint = e.GetPosition(null);
        }

        private void dg_PreviewMouseMove(object sender, MouseEventArgs e)
        {
            var mousePos = e.GetPosition(null);
            var diff = startPoint - mousePos;

            if (Math.Abs(diff.X) > SystemParameters.MinimumHorizontalDragDistance
                || Math.Abs(diff.Y) > SystemParameters.MinimumVerticalDragDistance)
            {
                var treeView = sender as DataGrid;
                var treeViewItem = //(e.OriginalSource as DependencyObject).
                    Util.Util<DataGridRow>.FindAnchestor((DependencyObject)e.OriginalSource);
                //   FindAnchestor<TreeViewItem>((DependencyObject)e.OriginalSource);

                if (treeView == null || treeViewItem == null)
                    return;

                var folderViewModel = treeView.SelectedItem as TrackListViewModel;
                if (folderViewModel == null)
                    return;

                var dragData = new DataObject(folderViewModel);
                DragDrop.DoDragDrop(treeViewItem, dragData, DragDropEffects.Copy);
            }
        }
    }
}]]></content>
  </file>
  <file path="\pdb.util\Chrono.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Threading;

namespace pdb.util
{
    public class Chrono
    {
        private DateTime begin;
        private DateTime _end;
        private List<ChronoPhase> list = new List<ChronoPhase>();
        private Thread th;
        private DateTime current;
        private string clientName;
        public void reset(string clientName)
        {
            th = Thread.CurrentThread;
            list.Clear();
            this.clientName = clientName;
            begin = DateTime.Now;
            current = begin;
            _end = begin;
        }

        public void reset()
        {
            th = Thread.CurrentThread;
            list.Clear();
            //this.clientName = clientName;
            begin = DateTime.Now;
            current = begin;
            _end = begin;
        }

        public void bip(string clientName, string phase)
        {
            if (!clientName.isNullorEmpty() && clientName != this.clientName)
                return;

            bip(phase);
        }

        public void bip(string phase, bool displayNow)
        {
            if (!displayNow && Thread.CurrentThread != th)
                return;

            var now = DateTime.Now;
            var dt = now - current;
            current = now;
            var cp = new ChronoPhase(phase, dt);
            if (displayNow)
                misc.log(cp);
            list.Add(cp);
        }

        public void bip(string phase)
        {
            bip(phase, false);
        }

        public void end()
        {
            _end = DateTime.Now;
        }

        public TimeSpan Total { get { return _end - begin; } }

        public string display(double seuil, string strFormat)
        {
            var sb = new StringBuilder();
            foreach (ChronoPhase ph in list)
            {
                if (ph.duration.TotalMilliseconds < seuil)
                    continue;
                ph.display(sb, strFormat);
                sb.Append(" ");

            }
            return sb.ToString();
        }

        public override string ToString()
        {
            return display(-1, "{0,2};{0,-3:#}");
        }



    }

    class ChronoPhase
    {
        public readonly string phase;
        public readonly TimeSpan duration;
        public ChronoPhase(string phase, TimeSpan duration)
        {
            this.phase = phase;
            this.duration = duration;
        }

        public override string ToString()
        {
            var sb = new StringBuilder();
            display(sb);
            return sb.ToString();
        }

        public void display(ITextWriter sb, string strFormat)
        {
            sb.Append(string.Format(strFormat, phase, duration.TotalMilliseconds));
        }

        public void display(ITextWriter sb)
        {
            sb.Append(string.Format("{0,2}", phase));
            sb.Append(":");
            sb.Append(string.Format("{0,-3:#}", duration.TotalMilliseconds));
        }
    }



    public class SimpleChrono
    {
        private DateTime begin;
        private DateTime courant;
        private string prefix;
        private ILogger _log;

        public SimpleChrono(DateTime begin, string prefix, ILogger log)
        {
            this.begin = begin;
            this.courant = begin;
            this.prefix = prefix;
            this._log = log;
        }

        public SimpleChrono(string prefix, ILogger log)
            : this(DateTime.Now, prefix, log)
        {
        }

        public SimpleChrono(string prefix) : this(prefix, null)
        {

        }

        public ILogger Log { set { _log = value; } get { return _log; } }

        public void start()
        {
            if (courant == begin)
            {
                begin = DateTime.Now;
                courant = begin;
            }
        }

        public void log(string content)
        {
            var now = DateTime.Now;
            var tsPhase = now - courant;
            courant = now;
            var tsTot = now - begin;

            var partial = tsPhase.TotalSeconds.ToString("#.#").Trim();
            while (partial.Length < 3)
                partial += " ";



            var total = tsTot.TotalSeconds.ToString("#.#").Trim();
            while (total.Length < 3)
                total += " ";

            if (_log == null)
            {
            }
            else
                _log.log("{0}{1}\t{2}\t{3}", prefix, partial, total, content);

        }

    }
}
]]></content>
  </file>
  <file path="\PieceDb.Consolid\Consolid.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using pdb.gen.albums;
using pdb.gen.conf;
using pdb.gen.stat;
using pdb.obj;
using pdb.ordo;
using pdb.util;
using System.Threading;
using pdb.gen.Virtuel;
using pdb.gen.Tuning;

namespace pdb.gen
{
    /// <summary>
    /// G�re l'application propri�taire
    /// </summary>
    /// <remarks></remarks>ranking
    /// 
    public class Consolid
    {
        private static Logger logger = Logger.getLogger("gen", true);
        private CListPiece m_list;
        private List<Piece> m_listTrackClassed = new List<Piece>();
        /// <summary>
        /// Liste des données consolidées morceaux maitres
        /// </summary>
        private List<Piece> listPiece = new List<Piece>();
        private List<Piece> allClassed = new List<Piece>();
        private List<Piece> allClassedInAlbumEnabled = new List<Piece>();
        private List<Piece> all = new List<Piece>();
        /// <summary>
        /// Liste des morceux avec les enfants 
        /// </summary>
        private List<Piece> listPieceInAlbum = new List<Piece>();
        /// <summary>
        /// Liste des morceux avec les enfants - sans les virtuels 
        /// </summary>
        private List<Piece> listPieceInAlbumReal = new List<Piece>();
        private Albums albums; // = new Albums(CConf.ConfGen.AlbumSortStrict);
        private BgDict<int, Piece> htIds = new BgDict<int, Piece>();

        private static volatile object _lock = new object();
        private bool _consolidEnCours;
        private bool goCompact = true;
        private bool classementChange;
        private bool _firstConsolid = true;
        private bool _albumBuild = false;
        public bool AlbumsBuild { get { return _albumBuild; } }


        #region navigation
        private static IComponentFactor creator = new TrackListCreator();
        private PlayList root = new PlayList("root", null);
        public PlayList Root { get { return root; } }
        private PlayList musique;
        private PlayList classement;
        private PlayList listes;
        private PlayList genres;
        #endregion

        public DateTime Now { set { CalcDate.refreshDate(value); } }

        private int step;
        public int Step { set { step = value; } }

        public Consolid()
        {
            Piece.Gen = this;
            musique = new PlayList("musique", root);
            classement = new PlayList("classement", root);
            listes = new PlayList("listes", root);
            genres = new PlayList("genres", listes);
            albums = new Albums(this);
        }
        /// <summary>
        /// Lance le compactage à la prochaine génération
        /// </summary>
        public void GoCompact() { goCompact = true; }
        public void ClassementChange() { classementChange = true; }
        public bool ClassementChanged { get { return classementChange; } }

        private void buildClassTree(IPlayList pl)
        {
            pl.DeleteChilds();
            var l = new List<Piece>(allClassed);
            l.Reverse();
            foreach (Piece piece in l)
            {

                var _class = piece.ClassNameAndRating(false);
                char[] tab = _class.ToCharArray();
                int count = tab.GetLength(0);
                buildClassTree(pl, piece, tab, count, -1);
            }
        }

        //public void buildClassTree()
        //{
        //    buildClassTree(classement);
        //}


        private void buildClassTree(IPlayList parent, Piece piece, char[] strClass, int count, int index)
        {
            if (index == count - 2)
            {
                parent.addObj(piece);
                return;
            }

            var _index = index + 1;
            var pl = parent.getOrCreate(strClass[_index].ToString());
            buildClassTree(pl, piece, strClass, count, _index);

        }

        private bool filterOnlyNext = false;
        public bool FilterNext
        {
            get { return filterOnlyNext; }
            set
            {
                if (value != filterOnlyNext)
                {
                    filterOnlyNext = value;
                }
            }
        }

        private void waitForConsolid()
        {
            bool cango = false;
            try
            {
                do
                {
                    lock (_lock)
                        cango = !_consolidEnCours;
                    if (cango)
                        return;
                    Thread.Sleep(1000);
                } while (!cango);
            }
            finally
            {
                _consolidEnCours = true;
            }
        }

        public Albums Albums { get { return albums; } }
        public void invalidateAlbums()
        {

            albums.invalidateAll(true);
            // pour l'instant ne fonctionne pas 
            return;
            _albumBuild = false;
        }

        public bool AlbumBuild { get { return _albumBuild; } }

        private void buildVirtualFromList(PlayList pl, List<Piece> list)
        {
            string path = pl.getPath(listes, genres);
            foreach (IItem item in pl.Items)
            {
                var piece = htIds[item.ID];
                var v = piece.createVirtualAlbum(path, virtualMode.list, null);
                if (v != null)
                {
                    list.Add(v);
                }
            }

            foreach (PlayList sub in pl.PlayLists)
            {
                buildVirtualFromList(sub, list);
            }
        }

        public void ConsolidInit(IEnumerable<ITrackInfoItunes> dbList)
        {
            if (_albumBuild)
                return;
            allClassed.Clear();
            allClassedInAlbumEnabled.Clear();
            m_listTrackClassed.Clear();

            listPiece.Clear();
            listPieceInAlbum.Clear();
            listPieceInAlbumReal.Clear();
            all.Clear();

            // albums = new Albums(this);
            // VirtualPiece.init();

            //htIds.Clear();

            //  htIds = new BgDict<int, Piece>();
            foreach (ITrackInfoItunes track in dbList)
            {

                if (!track.isPodcast)
                {
                    Piece piece = null;
                    int pieceId = track.PieceId;
                    if (htIds.ContainsKey(pieceId))
                    {
                        piece = htIds[pieceId];
                        piece.initRank();
                    }
                    else
                    {
                        piece = new Piece(track);
                        htIds.Add(pieceId, piece);
                    }

                    all.Add(piece);

                }
            }
            // link
            foreach (Piece piece in all)
            {
                int parentId = piece.PieceParentId;
                if (parentId > 0)
                {
                    piece.setParent(htIds[parentId]);
                }
            }

            // liste FORT + albums


            albums.checkBuild();
            logger.log("build albums");
            foreach (Piece piece in all)
            {

                if (piece.Parent == null)
                {
                    // piece.removeVirtualChilds(); 
                    listPiece.Add(piece);
                    foreach (Piece p in piece)
                    {
                        if (p.Virtual)
                            continue;
                        if (albums.check(p))
                        {
                            listPieceInAlbum.Add(p);
                            listPieceInAlbumReal.Add(p);
                        }
                    }
                }
            }

            var confGen = CConf.ConfGen;
            var min = confGen.AlbumMin;

            bool loadVirt = _albumVirtual;
            if (loadVirt)
            {
                var fileAlbum = Albums.getSortedAlbumFile();
                if (!File.Exists(fileAlbum))
                {
                    loadVirt = false;
                }
                else
                {
                    int nbload = 0;
                    logger.log("load albums virtuels");
                    try
                    {
                        nbload = albums.load(htIds);
                    }
                    catch (Exception ex)
                    {
                        logger.Error("Impossible de charger le fichier {0} {1}", fileAlbum, ex);
                        loadVirt = false;
                        nbload = -1;
                    }

                    if (nbload == 0)
                    {
                        logger.Error("le fichier {0} est vide", fileAlbum);
                        loadVirt = false;
                    }
                }
            }

            if (_albumVirtual && !loadVirt)
            {
                logger.log("build albums virtuels");


                var listCandidat = new List<Piece>();
                var dictTmp = new BgDictString<Album>();
                foreach (Piece piece in all)
                {
                    if (piece.Parent == null)
                    {
                        piece.buildVirtualAlbums(listCandidat);
                    }
                }

                if (CConf.ConfGen.ListVirtual)
                {
                    buildVirtualFromList(listes, listCandidat);
                }

                foreach (Piece p in listCandidat)
                    albums.checkVirtual(p, dictTmp);




                min = confGen.PathVirtualMin;
                if (min > 1)
                {
                    // Suppression des albums virtuel par répertoire avec trop peu de morceaux
                    foreach (var key in new List<string>(dictTmp.Keys))
                    {
                        var a = dictTmp[key];
                        if (a.VirtualMode == virtualMode.path || a.VirtualMode == virtualMode.extended)
                        {
                            if (a.Count < min)
                            {
                                a.ClearAndMenage();
                                dictTmp.Remove(key);
                            }
                        }
                    }
                }

                if (confGen.ArtistVirtual)
                {
                    min = confGen.ArtistVirtualMin;
                    if (min > 1)
                    {
                        // Suppression des albums artiste avec trop peu de morceaux
                        foreach (var key in new List<string>(dictTmp.Keys))
                        {
                            var a = dictTmp[key];
                            if (a.VirtualByArtist)
                            {
                                if (a.Count < min)
                                {
                                    a.ClearAndMenage();
                                    dictTmp.Remove(key);
                                }

                            }
                        }
                    }
                }


                if (confGen.WordVirtual)
                {
                    min = confGen.WordVirtualMin;
                    if (min > 1)
                    {
                        // Suppression des albums artiste avec trop peu de morceaux
                        foreach (var key in new List<string>(dictTmp.Keys))
                        {
                            var a = dictTmp[key];
                            if (a.VirtualMode == virtualMode.word)
                            {
                                if (a.Count < min)
                                {
                                    a.ClearAndMenage();
                                    dictTmp.Remove(key);
                                }

                            }
                        }
                    }
                }




                var listAlbums = new List<Album>(dictTmp.Values);

                listAlbums.Sort(new VirtualAlbumComparer());
                albums.checkVirtuals(listAlbums, listPieceInAlbum);

                foreach (Piece piece in all)
                {
                    piece.menageChilds();
                }

            }

            albums.buildDone();

            // Suppression des albums avec trop peu de morceaux
            min = confGen.AlbumMin;
            if (min > 1)
            {
                // Suppression des albums standards avec trop peu de morceaux
                var dict = albums.Dict;
                foreach (var key in new List<string>(dict.Keys))
                {
                    var a = dict[key];
                    if (!a.Virtual)
                    {
                        if (a.Count < min)
                        {
                            a.ClearAndMenage();
                            dict.Remove(key);
                        }
                    }
                }
            }
            if (!loadVirt)
                albums.sortVirtual();
            _albumBuild = true;

        }


        public void MakeConsolid(IEnumerable<ITrackInfoItunes> dbList, bool makeSort, bool classementChange, IClient client)
        {
            try
            {
                waitForConsolid();
                logger.log("consolid");
                DateTime now = DateTime.Now;
                DateTime debut = now;
                calcRank = !urgence; // && (allClassed.Count == 0 || classementChange); 
                if (calcRank)
                {
                    allClassed.Clear();
                    allClassedInAlbumEnabled.Clear();
                    m_listTrackClassed.Clear();

                    ConsolidInit(dbList);
                    //if (CConf.ConfGen.LimitAlbums > 0)
                    //    _albumBuild = false;
                    now = DateTime.Now;

                    StackAlbum.Instance.init(all);

                    misc.log("StackAlbum.Instance.init(all); {0} ms", (DateTime.Now - now).TotalMilliseconds.ToString("0")); now = DateTime.Now;

                    foreach (Piece piece in listPieceInAlbum)
                    {
                        if (piece.Classement.isClassed())
                        {
                            allClassed.Add(piece);
                            //if (piece.PieceAlbum != null && piece.PieceAlbum.AtLeastOneEnabled)
                            //    allClassedInAlbumEnabled.Add(piece);
                        }
                    }

                    foreach (Piece piece in listPieceInAlbumReal)
                    {
                        if (piece.Classement.isClassed())
                        {
                            if (piece.PieceAlbum != null && piece.PieceAlbum.AtLeastOneEnabled)
                                allClassedInAlbumEnabled.Add(piece);
                        }
                    }

                    misc.log("m_listTrackClassed: {0} elt", m_listTrackClassed.Count);
                    misc.log("listPieceInAlbum: {0} elt", listPieceInAlbum.Count);
                    misc.log("allClassed: {0} elt", allClassed.Count);
                    misc.log("allClassedInAlbumEnabled: {0} elt", allClassedInAlbumEnabled.Count);
                    // (DateTime.Now - now).TotalMilliseconds.ToString("0")); now = DateTime.Now;
                    misc.log("listPieceInAlbumReal; {0} elt {1} ms", listPieceInAlbumReal.Count, (DateTime.Now - now).TotalMilliseconds.ToString("0")); now = DateTime.Now;



                    misc.log("makeConsolid:init; {0} ms", (DateTime.Now - debut).TotalMilliseconds.ToString("0")); now = DateTime.Now;
                    client.log("ranking");
                }
                Ranking(makeSort, classementChange, client);
                misc.log("makeConsolid:fin; {0} ms", (DateTime.Now - debut).TotalMilliseconds.ToString("0")); now = DateTime.Now;
            }
            finally
            {
                lock (_lock)
                {
                    _firstConsolid = false;
                    _consolidEnCours = false;
                    urgence = false;
                    this.classementChange = false;
                }
            }

        }

        public void buildMusique()
        {
            misc.log("buildMusique");
            //if (CConf.ConfGen.LimitList > 0)
            //    return;
            var d = new HashSet<int>();
            foreach (Piece piece in all)
            {
                if (d.Add(piece.PieceId))
                    musique.add(piece); // addObj(piece);
            }


            foreach (Piece piece in listPieceInAlbumReal)
            {
                if (d.Add(piece.PieceId))
                    musique.add(piece);
            }


#if GEN_ALBUM

            var _albums = musique.getOrCreate("albums");
            foreach (Album album in albums.List)
            {
                CPlayList _alb = _albums.getOrCreate(album.Name);
                var tracks = album.TrackByNumber;

                foreach (Piece piece in tracks)
                {
                    _alb.addObj(piece);
                }
            }
#endif
            misc.log("fin buildMusique");
        }

        //private void buildMusique(PlayList musique)
        //{
        //    var d = new HashSet<int>();
        //    foreach (Piece piece in all)
        //    {
        //        if (d.Add(piece.PieceId))
        //            musique.add(piece); // addObj(piece);
        //    }


        //    foreach (Piece piece in listPieceInAlbum)
        //    {
        //        if (d.Add(piece.PieceId))
        //            musique.add(piece);
        //    }
        //}

        public void buildMusiqueAgain()
        {
            musique.DeleteBase();
            buildMusique();
        }


        public void buildLists(PlayList listes)
        {
            buildList(this.listes, listes);
        }

        private void buildList(PlayList mine, PlayList ext)
        {
            foreach (PlayList subExt in ext.PlayLists)
            {
                var sub = new PlayList(subExt.Name, mine);
                sub.ID = subExt.ID;
                // mine.add(sub);
                buildList(sub, subExt);
            }

            foreach (IItem t in ext.Items)
            {
                var piece = htIds[t.ID];
                mine.add(piece);
            }


            //foreach (PlComponent c in ext)
            //{
            //    if (c is CPlayList)
            //    {
            //        var subExt = c as CPlayList;
            //        var sub = new CPlayList(subExt.Name, mine);
            //        sub.ID = subExt.ID;
            //        // mine.add(sub);
            //        buildList(sub, subExt);
            //    }
            //    else
            //    {
            //        var t = c as IFile;
            //        var piece = htIds[t.PieceId];
            //        mine.add(new TrackList(piece));
            //    }
            //}
        }


        private bool urgence;
        private bool calcRank;
        public void setUrgence()
        {
            urgence = true;
        }
        public bool Urgence { get { return urgence; } set { urgence = value; } }
        internal Album getAlbum(Piece track)
        {
            return albums.getAlbum(track);
        }

        public HashList<Piece> getTracksAlbum(Piece track)
        {
            var album = getAlbum(track);
            if (album == null)
                return new HashList<Piece>();
            return album.Tracks;
        }

        public List<Piece> getTracksAlbumReverse(Piece track)
        {
            var album = getAlbum(track);
            if (album == null)
                return null;
            return album.TrackSortedByExportPriority.List;
        }

        public List<Piece> getTracksAlbumByNumber(Piece track)
        {
            var album = getAlbum(track);
            if (album == null)
                return null;
            return album.TrackByNumber;
        }

        //public void buildAlbum(ITrackMetaData track, List<ITrackMetaData> container)
        //{
        //    var album = getAlbum(track);
        //    if (album == null)
        //        return;
        //    foreach (var p in album.Tracks)
        //    {
        //        container.Add(p);
        //    }
        //}

        public List<Piece> sortByClass()
        {
            try
            {
                waitForConsolid();
                var list = new List<Piece>(listPiece);
                list.Sort(new CPieceComparerByQualityAndLength());
                return list;
            }
            finally
            {
                _consolidEnCours = false;
            }
        }

        public List<Piece> sortByAlbum()
        {
            try
            {
                waitForConsolid();

                var list = new List<Piece>();
                var d = new HashSet<int>();
                foreach (Piece piece in all)
                {
                    if (d.Add(piece.PieceId))
                        list.Add(piece);
                }


                foreach (Piece piece in listPieceInAlbum)
                {
                    if (d.Add(piece.PieceId))
                        list.Add(piece);
                }


                list.Sort(new AllPieceComparer());
                return list;
            }
            finally
            {
                _consolidEnCours = false;
            }
        }

        private void Ranking(bool makeSort, bool classementChange, IClient client)
        {
            classementChange = classementChange && !urgence;
            albums.buildStack(makeSort);
            if (calcRank)
            {
                QRanking();
                //  LRanking();
                QLRanking();
                client.log("QLRanking");
            }
            DateTime now = DateTime.Now;
            if (Piece.Compact)
            {
                if (goCompact || (classementChange && CConf.ConfGen.AlbumSort.compactAny))
                {
                    lock (Albums.LockSort)
                    {
                        client.log("Albums.LockSort");
                        goCompact = false;
                        // classementChange = false;
                        //var l = new List<Piece>(this.listPiece);
                        //l.Sort(new CPieceComparerByQualityAndLength2());
                        new Condenseur(listPieceInAlbum).gener2();
                        client.log("new Condenseur(listPieceInAlbum).gener2();");
                    }
                }
                misc.log("Piece.Compact; {0} ms", (DateTime.Now - now).TotalMilliseconds.ToString("0")); now = DateTime.Now;
            }


            // var list = new List<Piece>(listPiece);
            //logger.log("setTuningDateValues");


            //foreach (Piece piece in list)
            //{
            //    piece.Rank.TimeRest = -1;
            //}
            //foreach (Piece piece in list)
            //{
            //    piece.FirstClass = false;
            //    CRank rank = piece.Rank;
            //    var sortValue = CTuning.Calc(rank, CConf.Sort);
            //    rank.SortValue = sortValue;

            //    ListSelection.setTuningDateValues(piece);
            //}

            //   logger.log("PieceRestComparer->RankRest ");
            //list.Sort(new PieceRestComparer());

            //for (int i = 0; i < list.Count; i++)
            //{
            //    list[i].Rank.RankRest = i + 1;
            //}

            //logger.log("list.Sort(new PieceDeltaComparer());");
            //list.Sort(new PieceDeltaComparer());
            //list.Reverse();

            //for (int i = 0; i < list.Count; i++)
            //{
            //    list[i].Rank.RankDelta = i + 1;
            //}

            //logger.log("PieceSortComparer->Sort ");
            //list.Sort(new PieceSortComparer());
            //list.Reverse();

            //for (int i = 0; i < list.Count; i++)
            //{
            //    list[i].Rank.Sort = i + 1;
            //}

            albums.makeSort(_firstConsolid, client, logger);
            //if (calcRank)
            //{
            //    logger.log("AlbumsSort ");
            //    var all = new List<Piece>(listPieceInAlbum);
            //    // if (makeSort)


            //    logger.log("AllPieceComparer->RankAllAlbum ");
            //    all.Sort(new AllPieceComparer());
            //    for (int i = 0; i < all.Count; i++)
            //    {
            //        all[i].RankAllAlbum = i + 1;
            //    }

            //    client.log("AllPieceComparer"); 
            //}

            // CTuning.Total = listPieceInAlbum.Count;

        }

        BackGroundTaskMgr bg = BackGroundTaskMgr.getMgrlarge("copy");
        bool endCopy = false;
        public void CopyFiles(string defaultDir, IEnumerable<ITrackInfoItunes> trace)
        {
            if (trace == null)
                return;
            string destDir = CConf.CopyTo;
            if (string.IsNullOrEmpty(destDir))
                return;
            bool copyModeFile = CConf.CopyModeFile;

            if (copyModeFile)
            {

                var list = new List<Piece>();
                foreach (ITrackInfoItunes track in trace)
                {

                    list.Add(new Piece(track));
                }


                var l_pieceComparer = new CPieceComparerByQualityAndLength();
                list.Sort(l_pieceComparer);


                //compactage de la liste en tenant compte des mieux not�s
                var remote = new CListPiece(list);

                var l = new List<Piece>(m_listTrackClassed);
                l.Sort(new CPieceComparerByQualityLengthAndEnable());

                using (StreamWriter sr = new StreamWriter(@"..\listCopy.txt", false))
                {
                    bool endCopie = false;
                    int count = m_listTrackClassed.Count;
                    foreach (Piece l_piece in l)
                    {
                        if (endCopie)
                            return;

                        if (!remote.Contains(l_piece) && File.Exists(l_piece.Location))
                        {
                            try
                            {
                                StringBuilder sb = new StringBuilder();

                                sb.Append(l_piece.Classement.ToString());
                                //sb.Append(":");
                                //sb.Append(l_piece.Rating / 20);
                                sb.Append(" ");
                                sb.Append(l_piece.Location);
                                if (!l_piece.Enabled)
                                {
                                    sb.Append(" disabled");
                                }
                                sb.Append("==>");
                                sb.Append(destDir);
                                string txt = sb.ToString();
                                sr.WriteLine(txt);
                                sr.Flush();
                                logger.log("copy " + txt);

                                copy(l_piece, defaultDir, destDir);
                            }
                            catch (Exception ex)
                            {
                                logger.log(ex.ToString());
                                sr.WriteLine(ex.ToString());
                                endCopie = true;
                                // endCopie = true;

                            }
                        }

                    }
                }
            }

            else
            {
                BgDictString<DirectoryInfo> directoriesCopied = new BgDictString<DirectoryInfo>();

                Dictionary<string, int> items = new Dictionary<string, int>();


                DirectoryInfo dest = new DirectoryInfo(destDir);
                DirectoryInfo from = new DirectoryInfo(defaultDir);
                List<DirectoryInfo> dirs = new List<DirectoryInfo>();
                StringBuilder sb = new StringBuilder();
                try
                {

                    recordSoon(directoriesCopied, from, dest, dest);
                    deleteSoon(dest);

                    for (int i = 0; i < m_listTrackClassed.Count; i++)
                    {

                        var l_piece = m_listTrackClassed[i];
                        logger.log(">> check {0} {1} {2} ", (i + 1), l_piece.Location, l_piece.ClassNameAndRating(false));
                        FileInfo file = new FileInfo(l_piece.Location);
                        DirectoryInfo dir = file.Directory;
                        string path = dir.FullName;
                        if (!directoriesCopied.ContainsKey(path))
                        {
                            if (!items.ContainsKey(path))
                            {
                                items.Add(path, 1);
                            }
                            else
                                items[path]++;

                            bool go = false;
                            int passes = items[path];
                            int nbfiles = 0;
                            foreach (FileInfo f in dir.GetFiles())
                            {
                                if (f.IsMusic())
                                    nbfiles++;
                            }




                            if (nbfiles > 0)
                            {
                                double rapport = (double)passes / (double)nbfiles;
                                logger.log(" {0} passe(s) / {1} fichiers ({2})", passes, nbfiles, rapport);
                                if (rapport > 0.5)
                                    go = true;
                                //if (nbfiles <= 3) go = true;
                                //if (passes == 3 && nbfiles <= 5) go = true;
                                //if (passes >= 5) go = true;


                                if (go)
                                {
                                    logger.log(">> copy {0} {1} ", (i + 1), l_piece.Location);
                                    dirs.Add(dir);
                                    sb.AppendLine(dir.FullName);
                                    directoriesCopied.Add(dir.FullName, null);
                                }
                            }

                        }
                    }
                    logger.log(sb.ToString());
                    File.WriteAllText(@"..\classementAlbums.txt", sb.ToString());

                    foreach (DirectoryInfo dir in dirs)
                    {

                        copy(from, dir, dest);
                    }
                }
                catch
                {
                    logger.log("fin de copie");
                }
            }


        }

        private void copy(Piece piece, string musicFrom, string dirDest)
        {
            string pathDest = piece.Location.Replace(musicFrom, dirDest);
            string[] elts = pathDest.Split(Path.DirectorySeparatorChar);

            StringBuilder sbPath = new StringBuilder();
            sbPath.Append(elts[0]); sbPath.Append(Path.DirectorySeparatorChar);
            DirectoryInfo current = new DirectoryInfo(sbPath.ToString());
            for (int i = 1; i < elts.GetLength(0) - 1; i++)
            {
                string elt = elts[i];
                sbPath.Append(elt); sbPath.Append(Path.DirectorySeparatorChar);
                DirectoryInfo aux = new DirectoryInfo(sbPath.ToString());

                if (!aux.Exists)
                    aux.Create();
                current = aux;
            }
            if (!File.Exists(pathDest))
                File.Copy(piece.Location, pathDest, true);
        }

        private class BgtaskCopy : BgTaskBase
        {
            private FileInfo file;
            private string dest;
            private Consolid master;
            public BgtaskCopy(Consolid master, FileInfo file, string dest)
                : base(dest)
            {
                success = true;
                this.master = master;
                this.file = file;
                this.dest = dest;
            }

            public override void exec()
            {
                try
                {
                    if (master.endCopy)
                        return;
                    file.CopyTo(dest);
                }
                catch (Exception e)
                {
                    logger.log(e.ToString());
                    master.endCopy = true;

                }
            }
        }


        private void recordSoon(BgDictString<DirectoryInfo> dict, DirectoryInfo from, DirectoryInfo baseDirectory, DirectoryInfo dir)
        {
            string path = dir.FullName.Replace(baseDirectory.FullName, from.FullName);
            if (!string.IsNullOrEmpty(path))
                dict.Add(path, dir);

            foreach (DirectoryInfo sub in dir.GetDirectories())
                recordSoon(dict, from, baseDirectory, sub);
        }

        private void deleteSoon(DirectoryInfo dir)
        {
            try
            {
                foreach (DirectoryInfo sub in dir.GetDirectories())
                    deleteSoon(sub);
                dir.Delete();
            }
            catch (Exception e)
            {
                logger.log(dir.FullName + " " + e.ToString());
            }
        }

        private void copy(DirectoryInfo from, DirectoryInfo dir, DirectoryInfo dest)
        {
            try
            {
                if (endCopy)
                    return;
                logger.log("copy {0} ", dir.FullName);
                string path = dir.FullName.Replace(from.FullName, "");
                string[] elts = path.Split(Path.DirectorySeparatorChar);

                DirectoryInfo current = dest;
                bool toBeCreated = false;
                foreach (string elt in elts)
                {
                    DirectoryInfo sub = new DirectoryInfo(current.FullName + Path.DirectorySeparatorChar + elt);
                    if (!sub.Exists)
                    {
                        toBeCreated = true;
                        sub.Create();
                    }
                    current = sub;
                }

                if (!toBeCreated)
                {
                    bool _continue = true;
                    var aux = current;
                    while (_continue)
                    {
                        try
                        {

                            current.Delete();
                            current = current.Parent;
                            _continue = true;

                        }
                        catch
                        {
                            _continue = false;
                        }
                    }
                    return;
                }

                foreach (FileInfo file in dir.GetFiles())
                {
                    if (endCopy)
                        return;
                    string fileDest = current.FullName + Path.DirectorySeparatorChar + file.Name;
                    logger.log("copy " + fileDest);
                    file.CopyTo(fileDest);
                }
            }
            catch (Exception e)
            {
                logger.log(dir.FullName + " " + e.Message);
                throw;
            }
        }

        private static List<Piece> m_listQL;
        public static List<Piece> QLClassed
        {
            get
            {
                return m_listQL;
            }
        }
        /// <summary>
        /// calcul du classement en fonction des listes 
        /// </summary>
        /// <remarks></remarks>
        private void QRanking()
        {
            logger.log("Qranking");
            DateTime now = DateTime.Now;
            DateTime debut = now;



            var l_pieceComparer = new PieceDeepClassementComparer();

            foreach (Piece piece in listPiece)
            {
                piece.Rank.init();
            }

            misc.log("piece.Rank.init(); {0} ms", (DateTime.Now - now).TotalMilliseconds.ToString("0")); now = DateTime.Now;


            //on ordonne les morceaux top-down => sont privilégiés les plus en vue
            listPiece.Sort(l_pieceComparer);

            misc.log("listPiece.Sort(l_pieceComparer); {0} ms", (DateTime.Now - now).TotalMilliseconds.ToString("0")); now = DateTime.Now;

            //compactage de la liste en tenant compte des mieux notés
            m_list = new CListPiece(listPiece);


            misc.log(" m_list = new CListPiece(listPiece); {0} ms", (DateTime.Now - now).TotalMilliseconds.ToString("0")); now = DateTime.Now;
            logger.log("Qranking:legacyList Compact:" + m_list.Count);

            foreach (Piece l_piece in m_list)
            {
                if (l_piece.Classement.isClassed())
                {
                    m_listTrackClassed.Add(l_piece);
                }
            }

            logger.log("Qranking:track classed : {0} {1} ms", m_listTrackClassed.Count, (DateTime.Now - now).TotalMilliseconds.ToString("0")); ; now = DateTime.Now;
            int l_nbPiece = 0;

            int l_iLast = 0;
            int l_count = m_listTrackClassed.Count;
            for (int i = 0; i <= l_count - 2; i++)
            {
                l_nbPiece += 1;
                Piece l_One = m_listTrackClassed[i];
                Piece l_Two = m_listTrackClassed[i + 1];


                int l_iCmp = l_pieceComparer.Compare(l_One, l_Two);
                if (l_iCmp == 0)
                {
                }
                else
                {
                    int rank = getRank(l_iLast, l_nbPiece);

                    for (int ii = l_iLast; ii <= i; ii++)
                    {
                        m_listTrackClassed[ii].QRank = rank;
                    }

                    l_iLast = l_nbPiece;
                }
            }

            for (int ii = l_iLast; ii <= l_count - 1; ii++)
            {
                int rank = getRank(l_iLast, l_nbPiece);
                m_listTrackClassed[ii].QRank = rank > 0 ? rank : 1;
            }

            CTuning.Total = m_listTrackClassed.Count;

            foreach (Piece piece in listPiece)
            {
                if (piece.QRank <= 0)
                    piece.QRank = CTuning.Total;
            }
            logger.log("fin : {0} {1} ms", m_listTrackClassed.Count, (DateTime.Now - now).TotalMilliseconds.ToString("0")); ; now = DateTime.Now;
            // Console.WriteLine("Qranking:total class�s : " + m_listTrackClassed.Count);

            logger.log("total QRanking {0} ms", (DateTime.Now - debut).TotalMilliseconds.ToString("0"));

        }

        private int getRank(int l_iLast, int l_nbPiece)
        {
            double qRank = l_iLast + 1 + l_nbPiece;
            switch (CConf.RankingType)
            {
                case rankingType.middle: qRank = 0.5 * qRank; break;
                case rankingType.up: qRank = l_iLast + 1; break;
                case rankingType.bottom: qRank = l_nbPiece; break;
                default:
                break;
            }
            return Convert.ToInt32(qRank);
        }
        ///// <summary>
        ///// Tri des morceaux en fonction de leur longueur
        ///// </summary>
        ///// <remarks></remarks>
        //private void LRanking()
        //{
        //    logger.log("LRanking");
        //    DateTime now = DateTime.Now;
        //    DateTime debut = now;

        //    List<Piece> l_aux = new List<Piece>(listPiece);
        //    l_aux.Sort(new CPieceComparerByLenght());
        //    for (int l_iIndex = 0; l_iIndex <= l_aux.Count - 1; l_iIndex++)
        //    {
        //        Piece l_piece = l_aux[l_iIndex];
        //        l_piece.LRank = l_iIndex + 1;
        //    }

        //    logger.log("total LRanking {0} ms", (DateTime.Now - debut).TotalMilliseconds.ToString("0"));
        //}

        //public void compact()
        //{
        //    if (Piece.Compact)
        //    {
        //        if (goCompact || CConf.ConfGen.AlbumSort.compactAny)
        //        {
        //            goCompact = false;
        //            var l = new List<Piece>(this.listPiece);
        //            l.Sort(new CPieceComparerByQualityAndLength2());
        //            new Condenseur(m_listQL).gener2();
        //        }
        //    }
        //}
        /// <summary>
        /// Tri des morceaux en fonction de leur qualité +longueur en cas d'égalité
        /// </summary>
        /// <remarks></remarks>
        private void QLRanking()
        {
            logger.log("QLRanking");
            DateTime now = DateTime.Now;
            DateTime debut = now;

            m_listQL = new List<Piece>(m_listTrackClassed);
            foreach (Piece p in m_listQL)
                p.invalidateCache(false);
            m_listQL.Sort(new CPieceComparerByQualityAndLength());
            //List<Piece> l_aux = new List<Piece>(listPiece);
            //l_aux.Sort(new CPieceComparerByQualityAndLength());
            //int count = l_aux.Count;
            //for (int l_iIndex = 0; l_iIndex <= l_aux.Count - 1; l_iIndex++)
            //{
            //    Piece l_piece = l_aux[l_iIndex];
            //    l_piece.QLRank = l_iIndex + 1;
            //}

            //l_aux.Sort(new CPieceComparerByQualityAndLengthInv());

            //for (int l_iIndex = 0; l_iIndex <= l_aux.Count - 1; l_iIndex++)
            //{
            //    Piece l_piece = l_aux[l_iIndex];
            //    l_piece.Rank.TwiceInv = l_iIndex + 1;
            //}


            //if (CConf.Condensation)
            //{
            //    var l = new List<Piece>(this.listPiece);
            //    l.Sort(new CPieceComparerByQualityAndLength2());
            //    new Condenseur(m_listQL).gener2();

            //}


            logger.log("total QLRanking {0} ms", (DateTime.Now - debut).TotalMilliseconds.ToString("0"));

        }


        private static volatile object _lockStat = new object();
        //   private static volatile object _lockStat2 = new object();
        private static bool buildingStat;
        const string BUILDING_STATE = @"..\building.txt";
        const string LOADING_EXCEL = @"..\busyExcel.txt";

        private void _buildStat(Action rappel)
        {
            lock (_lockStat)
            {
                if (buildingStat)
                {
                    misc.log("stats building by _lockStat 1");
                    return;
                }


                try
                {
                    if (File.Exists(LOADING_EXCEL))
                    {
                        string content = File.ReadAllText(LOADING_EXCEL);
                        misc.log(content);
                        if (content.Contains("BUSY"))
                        {
                            return;
                        }
                    }
                }
                catch (Exception ex)
                {
                    misc.logError("Impossible de lire le fichier lock excel", ex);
                    return;
                }

                buildingStat = true;
            }



            try
            {
                //bool ok = Monitor.TryEnter(_lockStat2, 60 * 1000);
                //if (!ok)
                //{
                //    misc.log("Pas pu entrer pour générer les stats !!!!!!");
                //    return;
                //}


                File.WriteAllText(BUILDING_STATE, "BUILDING");
                bool generDistrib = step % 10 == 0;
                var list = new List<Piece>(m_listQL);
                list.Sort(new ClassementValueDecimal0Comparer());

                if (_albumSortMode.createCourant)
                {
                    var unselected = list.FindAll(t => !t.Enabled);
                    new StatBuilder(unselected).gener3("courant3.txt", (step % 10 == 0));
                    var stat = new StatBuilder(unselected) { Loupe = 1 };
                    stat.gener4("courant4.txt");
                    stat = new StatBuilder(unselected) { Loupe = 2 };
                    stat.gener4("courant4.txt");
                    //stat = new StatBuilder(unselected) { Loupe = 3 };
                    //stat.gener4("courant4.txt");
                }

                if (_albumSortMode.createInter)
                {
                    var unselected = list.FindAll(t => !t.Enabled || t.ClassementProvisoireRecent); //  ( CalcDate.getLastModif(t.DatesClassement) > _albumSortMode.lastModif && t.ClassementProvisoire));
                    new StatBuilder(unselected).gener3("stats3.txt", (step % 10 == 0));
                    var stat = new StatBuilder(unselected) { Loupe = 1 };
                    stat.gener4("stats4.txt");
                    stat = new StatBuilder(unselected) { Loupe = 2 };
                    stat.gener4("stats4.txt");
                    //stat = new StatBuilder(unselected) { Loupe = 3 };
                    //stat.gener4("courant4.txt");
                }

                if (_albumSortMode.createAll)
                {
                    new StatBuilder(list).gener3("all.txt", generDistrib);


                    //  new StatBuilder(m_listQL).gener3(generDistrib);
                    var stat = new StatBuilder(list) { Loupe = 1 };
                    stat.gener4("all.txt");
                    stat = new StatBuilder(list) { Loupe = 2 };
                    stat.gener4("all.txt");
                    //stat = new StatBuilder(m_listQL) { Loupe = 3 };
                    //stat.gener4("stats4.txt");
                }


            }
            catch (Exception ex)
            {
                logger.log(ex.ToString());
            }
            finally
            {
                lock (_lockStat)
                {
                    buildingStat = false;
                    File.WriteAllText(BUILDING_STATE, "FREE");
                }
                if (rappel != null)
                    rappel();
            }
        }

        public void builStats(Action rappel)
        {
            lock (_lockStat)
            {
                if (buildingStat)
                {
                    misc.log("stats building by _lockStat 0");
                    return;
                }

            }
            //  _buildStat(rappel); 
            new Thread(() => _buildStat(rappel)).Start();

        }


        public DynamicStat generStat(IClient client, string className, bool onlyDisabled)
        {
            var list = m_listQL;
            if (onlyDisabled)
                list = m_listQL.FindAll(t => !t.Enabled);
            else
                list = m_listQL.FindAll(t => !t.Enabled || t.ClassementProvisoireRecent);
            return new DynamicStatBuilder(client, list).gener(className);
        }

        public List<Piece> getTracks(IClient client, string className, bool onlyDisabled)
        {
            var list = m_listQL;
            if (onlyDisabled)
                list = m_listQL.FindAll(t => !t.Enabled);
            else
                list = m_listQL.FindAll(t => !t.Enabled || t.ClassementProvisoireRecent);
            return new DynamicStatBuilder(client, list).getPieces(className);
        }



        //public void timeRanking()
        //{
        //    logger.log("timeRanking");
        //    foreach (var piece in allClassed)
        //        piece.Rank.TimeRest = -1;
        //    foreach (var piece in allClassed)
        //        ListSelection.setTuningDateValues(piece);


        //}

        ///// <summary>
        ///// redirection des index metier de la table m�tier vers la table locale
        ///// Copie des valeurs pertinentes(classlist)
        ///// </summary>
        ///// <remarks></remarks>
        //public void eraseGrouping()
        //{
        //    thCommentGo = false;
        //    thGroupingGo = false;
        //    logger.log("eraseGrouping");
        //    foreach (Piece piece in listPieceInAlbum)
        //    {
        //        piece.setGrouping("", false);
        //        piece.Comment = "";
        //    }
        //}
        //public void writeGrouping()
        //{
        //    logger.log("writeGrouping");
        //    var list = new List<Piece>(listPieceInAlbum);
        //    // list.Sort(new CPieceComparerByQualityAndLength());
        //    list.Sort(new AllPieceComparer2());

        //    var writeGrouping = CConf.ConfGen.WriteGrouping;
        //    foreach (Piece piece in list)
        //    {
        //        try
        //        {
        //            piece.writeGrouping(writeGrouping);
        //        }
        //        catch (Exception ex)
        //        {
        //            logger.log("writeGrouping::" + ex.ToString());
        //        }

        //    }
        //}


        //private bool thGroupingGo;
        //private bool thCommentGo;

        //public bool GroupinGO
        //{
        //    set
        //    {
        //        thGroupingGo = value;
        //        if (value)
        //        {
        //        }
        //    }
        //}
        //public bool CommentGo
        //{
        //    set
        //    {
        //        thCommentGo = value;
        //        if (value)
        //        {
        //        }
        //    }
        //}



        //private void writeGroupingAsync()
        //{
        //    var writeGrouping = CConf.ConfGen.WriteGrouping;
        //    foreach (Piece piece in listPieceInAlbum)
        //    {
        //        try
        //        {
        //            if (!thGroupingGo)
        //                return;
        //            piece.writeGrouping(writeGrouping);
        //        }
        //        catch (Exception ex)
        //        {
        //            misc.log("writeGrouping::" + ex.ToString());
        //        }

        //    }
        //}

        //private void writeCommentAsync()
        //{
        //    var writeComment = CConf.ConfGen.WriteComment;
        //    foreach (Piece piece in listPiece)
        //    {
        //        try
        //        {
        //            if (!thCommentGo)
        //                return;
        //            piece.writeComment(writeComment);
        //        }
        //        catch (Exception ex)
        //        {
        //            misc.log("writeComment::" + ex.ToString());
        //        }
        //    }
        //}

        //public void writeGrouping(Piece piece)
        //{
        //    var writeGrouping = CConf.ConfGen.WriteGrouping;
        //    piece.writeGrouping(writeGrouping);

        //}
        // private bool _sortByAlbum = true;
        //   public bool SortByAlbum { get { return _albumSortMode.Enabled; } }

        private ConfAlbumSort _albumSortMode;
        public ConfAlbumSort SortAlbumMode { set { _albumSortMode = value; } get { return _albumSortMode; } }

        private bool _albumVirtual = CConf.ConfGen.AlbumVirtual;
        public bool AlbumVirtual { get { return _albumVirtual; } set { _albumVirtual = value; } }

        //public void writeComment()
        //{
        //    logger.log("writeComment");
        //    var list = new List<Piece>(listPiece);
        //    list.Sort(new CPieceComparerByQualityAndLength());

        //    var writeComment = CConf.ConfGen.WriteComment;
        //    foreach (Piece piece in list)
        //    {
        //        try
        //        {
        //            piece.writeComment(writeComment);
        //        }
        //        catch (Exception ex)
        //        {
        //            logger.log("writeComment::" + ex.ToString());
        //        }
        //    }




        //}

        //public void writeComment(Piece piece)
        //{
        //    var writeComment = CConf.ConfGen.WriteComment;
        //    try
        //    {
        //        piece.writeComment(writeComment);
        //    }
        //    catch (Exception ex)
        //    {
        //        logger.log("writeComment::" + ex.ToString());
        //    }
        //}



        #region "rot"
        private CLegacyListWriter m_listWriter;
        private CLegacyListWriter m_listWriterAlb;
        private CLegacyListWriter listWriterAll;
        // Private m_rotTotalDuration As Integer = 0

        // private int m_rotPeriod = 0;
        public static object Lock { get { return _lock; } }

        private CLegacyListWriter ListWriter(List<Piece> l_list, params IListWriter[] writers)
        {

            if (m_listWriter == null)
            {
                m_listWriter = new CLegacyListWriter(this, l_list);
                foreach (IListWriter writer in writers)
                    m_listWriter.addWriter(writer);
            }
            return m_listWriter;

        }

        private CLegacyListWriter ListWriterAlbums(List<Piece> l_listAlb, params IListWriter[] writers)
        {
            if (m_listWriterAlb == null)
            {
                m_listWriterAlb = new CLegacyListWriter(this, l_listAlb);
                foreach (IListWriter writer in writers)
                    m_listWriterAlb.addWriter(writer);
            }
            return m_listWriterAlb;
        }

        public void createRot(string a_baseName, IClient client, params IListWriter[] writers)
        {
            lock (_lock)
            {
                client.log("_lock");
                var conf = CConf.ConfGen;

                logger.log("Clegacy:createRot {0}", a_baseName);
                List<Piece> l_list = new List<Piece>(m_listTrackClassed);
                List<Piece> l_listAlb = new List<Piece>(allClassedInAlbumEnabled);
                m_listWriter = null;
                m_listWriterAlb = null;
                listWriterAll = null;
                // var l_all = new List<Piece>(listPieceInAlbum);
                //  List<Piece> source = null;
                ////  if (SortByAlbum)
                //      source = allClassedInAlbumEnabled;
                //  else
                //      source = m_listTrackClassed;
                //  foreach (Piece l_piece in source)
                //  {
                //      //if (l_piece.belongsTo(a_baseName))
                //      //{
                //      l_list.Add(l_piece);
                //      // }
                //  }





                listWriterAll = new CLegacyListWriter(this, null);






                //      m_listWriter.reset();
                //m_listWriter = new CLegacyListWriter(this, l_list);
                //foreach (IListWriter writer in writers)
                //    m_listWriter.addWriter(writer);
                //    logger.log("fin creation des writers 0");
                if (conf.Modes.Count > 0 && conf.Listes.Count > 0)
                {
                    ListWriter(l_list, writers);
                    foreach (var mode in conf.Modes) //  Enum.GetValues(typeof(datesMode)))
                    {
                        foreach (Piece piece in l_listAlb)
                        {
                            piece.Rank.TimeRest = -1;
                        }

                        foreach (Piece piece in l_listAlb)
                        {
                            ListSelection.setTuningDateValues(piece, mode.item);
                        }
                        foreach (var duration in conf.Listes)
                        {
                            m_listWriter.writeGen(mode, duration, "g", false, false);
                            if (conf.GenE)
                                m_listWriter.writeGen(mode, duration, "e", true, false);
                        }
                    }
                }

                if (conf.GenCheck)
                    ListWriter(l_list, writers).writeCheckClassement(0);

                for (int precision = conf.PrecisionMin.item; precision <= conf.PrecisionMax.item && precision > 0; precision++)
                {
                    ListWriter(l_list, writers).writePrecisionClassement("g", precision, false, conf.PrecisionMin.extend);
                    if (conf.GenE)
                        m_listWriter.writePrecisionClassement("e", precision, true, conf.PrecisionMin.extend);
                }
                //m_listWriterAlb = new CLegacyListWriter(this, l_listAlb);

                //foreach (IListWriter writer in writers)
                //    m_listWriterAlb.addWriter(writer);

                //  logger.log("fin creation des writers alb");
                if (conf.Modes.Count > 0 && conf.Listes.Count > 0)
                {
                    ListWriterAlbums(l_listAlb, writers);
                    foreach (var mode in conf.Modes) //  Enum.GetValues(typeof(datesMode)))
                    {

                        foreach (Piece piece in l_listAlb)
                        {
                            piece.Rank.TimeRest = -1;
                        }

                        foreach (Piece piece in l_listAlb)
                        {
                            ListSelection.setTuningDateValues(piece, mode.item);
                        }
                        foreach (var duration in conf.Listes)
                        {
                            m_listWriterAlb.writeGen(albums, mode, duration, "g", false);
                        }
                    }
                }

                foreach (IListWriter writer in writers)
                    listWriterAll.addWriter(writer);
                listWriterAll.writeGen(albums, null, null, "all", false);
                //  misc.log("Clegacy:fin createRot {0}", a_baseName);
                client.log("createRot");
                return;

                //writeRot(1);

                //m_listWriter.writeCheckClassement(1);

                //m_listWriter.reset();
                //writeRotMin(-1);
                //writeRotMin(10);
                //writeRotMin(1);
            }
        }
        //private void writeRotMin(int a_nbHour)
        //{
        //    logger.log("----------------------");
        //    m_listWriter.writeRotMin(a_nbHour);
        //}
        //private void writeRot(int a_base)
        //{
        //    m_listWriter.writeRot(a_base);

        //}
        #endregion
    }
}



]]></content>
  </file>
  <file path="\PieceDb.Consolid\albums\Album.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using pdb.gen.conf;
using pdb.gen.medianne;
using pdb.gen.Tuning;
using pdb.obj;
using pdb.util;
using System.IO;

namespace pdb.gen.albums
{
    public enum virtualMode
    {
        none = 0,
        artist = 1,
        path = 2,
        year = 3,
        extended = 4,
        added = 5,
        list = 6,
        word = 7
    }

    public enum sortDone : byte
    {
        none,
        phaseUn,
        phaseDeux
    }

    public class Album : IEnumerable<Piece>
    {
        const int NB_DEC = 3;
        const decimal EPSILON = 0.001m * 0.001m * 0.001m * 0.001m * 0.001m * 0.001m;
        const int A_REFAIRE_CAUSE_COMPACT = -10;
        private static Logger logger = Logger.getLogger("album");
        private string name;
        private string key;
        private static decimal medianne = 0.5m;
        private static decimal medianneRest = 0.5m;
        // public static decimal Medianne { get { return medianne; } set { medianne = value; } }
        private decimal classementValue;
        private decimal classementValueLight;
        private decimal classementValueLightSt = -1;
#if GEN2
        private decimal classementValueLightZero = -1;
        private decimal classementValueLightZeroSt = -1;
#endif
        private sortDone sortStatus;

        private int nbRecent;
        private int nbDone;
        public int Recents { get { return nbRecent; } }
        public int NbDone { get { return nbDone; } }
        //public void invalidate(bool silent = false) { sortDone = false; if (!silent) misc.log("invalidate {0}", this); }

        public decimal getSt(decimal classementValueLight)
        {
            var ret = classementValueLight;
            if (confAlbumSort != null && confAlbumSort.stackEnabled && confAlbumSort.stackSize > 1 && stackValue < confAlbumSort.stackSize && stackValue > 0)
            {
                if (next == null || !confAlbumSort.stackOnlyNew || next.LastClassementRecent)
                {
                    //      1       10      50      99
                    //      0.99    0.9     0.5     0.01
                    //1.    0.01    0.1     0.5     0.99
                    //2.    0.02    0.19    0.75    0.9999
                    //10    0.095   0.65    0.999   0.99999999999
                    //0.5   0.005   0.05    0.29    0.9
                    var delta = 1 - ((decimal)stackValue / (decimal)stackSize);
                    // 1 - 10/100=> 0.9-> 0.81 ==> 1/0.19
                    if (delta != 1)
                        delta = pdb.util.Math.Pow(delta, stackPower);
                    delta = 1 - delta;

                    if (delta < 0.001m)
                        delta = 0.001m;

                    ret = classementValueLight / delta;
                }
            }


            return ret; ;
        }
        /// <summary>
        /// classementValue redressé par la quarantaine
        /// </summary>     
        public decimal ClassementValueLightSt
        {
            get
            {
                if (classementValueLightSt >= 0)
                    return classementValueLightSt;
                return getSt(classementValueLight);

                if (confAlbumSort != null && confAlbumSort.stackEnabled && confAlbumSort.stackSize > 1 && stackValue < confAlbumSort.stackSize && stackValue > 0)
                {
                    //      1       10      50      99
                    //      0.99    0.9     0.5     0.01
                    //1.    0.01    0.1     0.5     0.99
                    //2.    0.02    0.19    0.75    0.9999
                    //10    0.095   0.65    0.999   0.99999999999
                    //0.5   0.005   0.05    0.29    0.9
                    var delta = 1 - ((decimal)stackValue / (decimal)stackSize);
                    // 1 - 10/100=> 0.9-> 0.81 ==> 1/0.19
                    if (delta != 1)
                        delta = pdb.util.Math.Pow(delta, stackPower);
                    delta = 1 - delta;

                    if (delta < 0.001m)
                        delta = 0.001m;

                    classementValueLightSt = classementValueLight / delta;
                }
                else
                    classementValueLightSt = classementValueLight;

                return classementValueLightSt;
            }
        }

        public decimal ClassementValueLightZeroSt
        {
            get
            {
#if GEN2
                if (classementValueLightZeroSt < 0)
                    classementValueLightZeroSt = getSt(classementValueLightZero);
                return classementValueLightZeroSt;
#else
                return ClassementValueLightSt;
#endif
            }
        }
        //  private decimal classMoy; public decimal ClassementMoy { get { return classMoy; } }
        public decimal ClassementValue { get { return classementValue; } }
        public decimal ClassementValueLight { get { return classementValueLight; } }
        public decimal ClassementValueLightZero
        {
            get
            {
#if GEN2
                return classementValueLightZero;
#else
                return ClassementValueLight;
#endif
            }
        }
        public decimal Rendement
        {
            get
            {
#if GEN2
                if (classementValueLight == 0) return 1; return classementValueLightZero / classementValueLight;
#else
                return 1;
#endif
            }
        }
        private decimal durationValue = 0;
        public decimal DurationValue { get { return durationValue; } }
        private static ConfGen conf = CConf.ConfGen;
        private virtualMode mode;
        public virtualMode VirtualMode { get { return mode; } }
        //  private bool _virtual;
        public bool Virtual { get { return mode > virtualMode.none; } }
        public void setVirtual(virtualMode mode) { this.mode = mode; }
        private bool _virtualByArtist;
        public bool VirtualByArtist { get { return this.mode == virtualMode.artist; } }
        private Piece pluspetitEnabled;
        public Piece PlusPetitEnabled { get { return pluspetitEnabled; } }
        private int stackValue;
        private DateTime majDate;
        public DateTime MajDate { get { return majDate; } }

        public int StackValue
        {
            get
            {

                return stackValue;
            }
            set
            {
                if (value > 0 && this.Name == "\\")
                {
                }
                else
                    stackValue = value;
            }
        }
        public int StackIndex { get; set; }
        //  private int rankCorrig; public int Rank2 { get { return rankCorrig; } set { rankCorrig = value; } }
        private Piece next;


        public Piece Next
        {
            get { return next; }
            set
            {
                next = value;
            }
        }




        private HashSet<Piece> list = new HashSet<Piece>();
        private HashSet<Piece> masters = new HashSet<Piece>();

        #region cache
        HashList<Piece> trackSortedByExportPriority;
        private HashList<Piece> _tracksSortByClassement;
        #endregion

        private static int _sID = 0;
        private int _dID;

        public string Key
        {
            // set { key = value; }
            get
            {
                if (key == null)
                    key = getKey(name, mode);
                return key;
            }
        }

        public Album(string name, virtualMode mode)
        {
            this.name = name;
            this.mode = mode;
            quality = CRank.MAX;
        }

        public Album(string name, string key)
        {
            _sID++;
            _dID = _sID;
            this.name = name;
            this.key = key;

            quality = CRank.MAX;
        }
        private int quality;
        public int Quality
        {
            get { return quality; }
            set { quality = value; }
        }

        public int RankAlbumReverse
        {
            get
            {
                return Albums.RankZero - quality; // 1 + gen.Albums.Count - rank; //   AlbumZero = Count - i; 
            }
        }

        private decimal timeRest = decimal.MaxValue;
        public decimal TimeRest { get { return timeRest; } set { timeRest = System.Math.Round(value, NB_DEC); } }
        public string Name { get { return name; } }

        public override string ToString()
        {
            return string.Format("{0} {1} {2} elts", name, mode, Count);
        }

        // private string equiv = "";
        public string Equiv { get { return Piece.getClassementEquiv(classementValue); } }

        //  private string equivLight = "";
        public string EquivLight { get { return Piece.getClassementEquiv(classementValueLight); ; } }
        public string EquivLightSt { get { return Piece.getClassementEquiv(ClassementValueLightSt); ; } }

        //private string equivLight0 = "";
        public string EquivLight0
        {
            get
            {
#if GEN2
                return Piece.getClassementEquiv(classementValueLightZero);
#else
                return EquivLight;
#endif
            }
        }

        //// private string moyenne = "";
        //public string Moyenne { get { return Piece.getClassementEquiv(classMoy); } }

        public bool Moved { get; set; }
        /// <summary>
        /// Empeché par la quarantaine
        /// </summary>
        public bool Empeached
        {
            get
            {
                return nbEmpeached > 0;
            }
            set
            {
                if (value)
                    nbEmpeached = stackPeremption;
                else
                    nbEmpeached = 0;
            }
        }

        public void empeachedDecrement() { nbEmpeached--; }

        public int EmpeachedNb { get { return nbEmpeached; } }

        private int nbEmpeached;
        /// <summary>
        /// Premier empêché
        /// </summary>
        public bool Empeached1 { get; set; }
        private static int stackSize = 20;
        private static int stackPeremption = 10;
        private static decimal stackPower = 2.0m;
        private static ConfAlbumSort confAlbumSort;
        public static ConfAlbumSort ConfAlbumSort
        {
            set
            {
                confAlbumSort = value;
                if (confAlbumSort != null)
                {
                    stackSize = confAlbumSort.stackSize;
                    stackPeremption = confAlbumSort.stackPeremption;
                    stackPower = confAlbumSort.stackPower;
                }
            }
        }

        public bool AlmostFree { get { return StackIndex == stackSize; } }
        public bool AlmostFree1 { get { return StackIndex == stackSize - 1; } }

        //private Piece equiv;



        public bool add(Piece piece)
        {
            if (build)
                throw new ApplicationException("déjà buildé");
            piece.PieceAlbum = this;


            // misc.log("{0} ajout {1}", name, piece); 
            //if (list.Contains(piece))
            //{
            //    int yoyo = 0;
            //}
            if (!masters.Add(piece.Master))
            {
                //var status = "";
                //if (_virtual)
                //    status = "v";
                //if (_virtualByArtist)
                //    status = "va";
                //logger.log("{0}\t{1}:doublon id=\"{2}\" parent=\"{3}\" Nom={4} {5}", status, name, piece.PieceId, piece.MasterId, piece.Name, piece);
                return false;
            }
            if (piece.Enabled)
                atLeastOneEnabled = true;
            list.Add(piece);

            return true;
        }

        private bool build;

        public void checkBuild()
        {
            if (!build)
            {
                Clear();
                quality = CRank.MAX;
            }
        }

        public void Clear()
        {
            //misc.log("album.Clear {0}",name);
            //foreach (Piece p in this)
            //{
            //    if (p.Virtual)
            //        p.Parent = null; 
            //}
            list.Clear();
            masters.Clear();
        }

        public void ClearAndMenage()
        {
            if (mode == virtualMode.word && name == "029")
            {
            }
            if (mode != virtualMode.none)
            {
                foreach (Piece p in list)
                    p.setParent(null);
            }
            Clear();
        }

        public void ConsolidChilds()
        {
            foreach (Piece p in list)
                p.consolidChild();
        }

        public bool buildDone()
        {
            build = true;
            return list.Count > 0;
        }


        public HashList<Piece> Tracks
        {
            get
            {
                if (_tracksSortByClassement == null)
                {
                    var l = new List<Piece>(list);
                    l.Sort(new PieceVirtualClassementComparer());
                    _tracksSortByClassement = new HashList<Piece>(l);
                }
                return _tracksSortByClassement;
            }
        }

        public int Count { get { return list.Count; } }

        //public int IndexClass(Piece p)
        //{
        //    return Tracks.IndexOf(p);
        //}

        //public List<Piece> TracksReverse
        //{
        //    get
        //    {
        //        var l = new List<Piece>(list);
        //        l.Sort(new PieceClassementComparerInv());
        //        return l;
        //    }
        //}

        private class PieceExportComparer : IComparer<Piece>
        {
            private HashList<Piece> source;
            private Piece next;
            private int inext = -1;
            private int ifirstZero = -1;
            private bool sortlasts;
            private bool sortFirsts;
            private Album album;
            public PieceExportComparer(Album album, HashList<Piece> source, Piece next)
            {
                this.album = album;
                this.source = source;
                this.next = next;
                if (next != null)
                    inext = source.IndexOf(next);
                sortlasts = CConf.Export.sortLasts;
                sortFirsts = CConf.Export.sortFirsts;
                int count = source.Count;
                for (int i = 0; i < count; i++)
                {
                    var p = source[i];
                    if (p.Enabled && !p.ClassmentPositive())
                    {
                        ifirstZero = i;
                        break;
                    }
                }

            }
            public int Compare(Piece x, Piece y)
            {
                //    t = 1.CompareTo(2) -> -1              
                //  t = true.CompareTo(false) ->1
                if (x == y)
                    return 0;
                if (x == next)
                    return -1;
                if (y == next)
                    return 1;
                int ix = source.IndexOf(x);
                int iy = source.IndexOf(y);
                if (ix == iy)
                    return 0;

                if (next != null)
                {
                    int cmp = 0;


                    cmp = (x.Enabled.CompareTo(y.Enabled));
                    if (cmp != 0)
                    {
                        if (sortFirsts)
                        {
                            //true puis false;
                            return -cmp;
                        }
                        if (sortlasts)
                        {
                            if (!x.Enabled && x.VirtualClassement < album.ClassementValueLight)
                                return 1;
                            if (!y.Enabled && y.VirtualClassement < album.ClassementValueLight)
                                return -1;
                        }
                    }

                    //if (dx * dy < 0)
                    //{
                    //    if (sortlasts)
                    //    {
                    //        if (dx > 0 && !x.Enabled)
                    //            return 1;
                    //        if (dy > 0 && !y.Enabled)
                    //            return -1;
                    //    }
                    //    if (sortFirsts)
                    //    {
                    //        if (dx < 0 && !x.Enabled)
                    //            return 1;
                    //        if (dy < 0 && !y.Enabled)
                    //            return -1;
                    //    }
                    //}

                    int dx = ix - inext;
                    int dy = iy - inext;
                    dx *= dx;
                    dy *= dy;

                    if (ifirstZero >= 0)
                    {
                        dx += ((ix - ifirstZero) * (ix - ifirstZero));
                        dy += ((iy - ifirstZero) * (iy - ifirstZero));
                    }

                    cmp = dx.CompareTo(dy);
                    if (cmp != 0)
                        return cmp;
                    //ici même distance
                    cmp = x.Enabled.CompareTo(y.Enabled);
                    if (cmp != 0) return -cmp;

                    cmp = ix.CompareTo(iy);
                    return cmp;
                }

                return source.IndexOf(x).CompareTo(source.IndexOf(y));
            }
        }
        public HashList<Piece> TrackSortedByExportPriority
        {
            get
            {
                if (trackSortedByExportPriority == null)
                {

                    var source = new HashList<Piece>(Tracks);
                    if (next == null)
                        trackSortedByExportPriority = source;
                    else
                    {
                        var cmp = new PieceExportComparer(this, source, next);
                        var l = source.List;
                        l.Sort(cmp);

                        trackSortedByExportPriority = new HashList<Piece>(l);


                    }



                    //var source = Tracks;
                    //if (next == null)
                    //    trackSortedByExportPriority = new HashList<Piece>(source);
                    //else
                    //{
                    //    trackSortedByExportPriority = new HashList<Piece>();
                    //    int indexNext = source.IndexOf(next);
                    //    trackSortedByExportPriority.Add(next);

                    //    int count = source.Count;
                    //    int offset = 0;
                    //    while (true)
                    //    {
                    //        offset++;
                    //        bool _continue = false;
                    //        // on prend le précédent et le suivant
                    //        var index = indexNext - offset;

                    //        if (index >= 0 && index < count)
                    //        {
                    //            trackSortedByExportPriority.Add(source[index]); _continue = true;
                    //        }
                    //        index = indexNext + offset;
                    //        if (index >= 0 && index < count)
                    //        {
                    //            trackSortedByExportPriority.Add(source[index]); _continue = true;
                    //        }

                    //        if (!_continue)
                    //            break;
                    //  }

                    //}
                }
                return trackSortedByExportPriority;
            }

        }



        public int IndexExport(Piece p)
        {
            return TrackSortedByExportPriority.IndexOf(p);
        }
        public List<Piece> TrackByNumber
        {
            get
            {
                var l = new List<Piece>(list);
                l.Sort(new PieceTrackNumberComparer());
                return l;
            }
        }
        /// <summary>
        /// Au moins un track est classé
        /// </summary>
        private bool classed;
        /// <summary>
        /// Au moins un track est classé
        /// </summary>
        public bool Classed { get { return classed; } }

        /// <summary>
        /// Le track Selectionné est malheureusement absent
        /// </summary>
        public bool Absent
        {
            get
            {
                if (next == null)
                    return true;
                var exists = FileRegister.Exist(next.Location);
                return false == exists;
            }
        }

        //public int nbInAlbum(exportState state)
        //{
        //    return list.Count(p => p.ExportStatus == state); 
        //}

        public int NbExportPresents { get { return list.Count(p => p.ExportStatus == exportState.present || p.ExportStatus == exportState.copy); } }

        private bool? atLeastOneEnabled;
        public bool AtLeastOneEnabled
        {
            get
            {
                if (atLeastOneEnabled == null)
                {
                    atLeastOneEnabled = false;
                    foreach (Piece p in list)
                    {
                        if (p.Enabled)
                        {
                            atLeastOneEnabled = true;
                            break;
                        }
                    }
                }

                return atLeastOneEnabled.Value;
            }
        }

        /// <summary>
        /// Facon dont est séléectionné le Next
        /// </summary>
        private selectedCoeff selectedCoeff;
        public selectedCoeff SelectedCoeff { get { return selectedCoeff; } }

        /// <summary>
        /// Empecher la dégradation du selectedCoeff
        /// </summary>
        private bool selectedSure;
        public bool DontTouchSelectedCoeff { get { return false; } }// selectedSure; } }
        public void InvalidateMain()
        {
            if (selectedCoeff > selectedCoeff.noCoeff)
                selectedCoeff = selectedCoeff.noCoeff;
        }


        //  private bool sortDone;
        //  DecimalIndex _med0 = null;
        DecimalPiece med = null;


        private decimal makeSort(List<IPieceAlbum> list, ConfMedianne mode, bool real)
        {
            decimal classementValueLight = 0m;
            try
            {
                #region calcul virtuel



                DecimalPiece med = null;
#if GEN2
                DecimalPiece med1 = null;
                DecimalPiece med2 = null;
#endif



                bool? resultGlobalMin = null;
                var _albumMedianne = new AlbumMedianne(list, mode);
                // bool combineNow = mode.combine && mode.simple;
#if GEN2
                if (real)
                    _albumMedianne.buildVirtual(mode.combine, mode.simple);
                else
                {
#else
                list.Sort(new PieceClassementComparer(false));
#endif
#if GEN2
            }
#endif
#if GEN2

                if (!real || (mode.combine && mode.simple || (!mode.Min.Use)))
                {
                    if (real && mode.combine && mode.simple)
                        med = _albumMedianne.getMedianneLight(mode.Main, pieceExtendedMode.combine);
                    else
                        med = _albumMedianne.getMedianneLight(mode.Main, pieceExtendedMode.main);

                    med1 = med; med2 = med;

                }

                else
                {


                    med2 = _albumMedianne.getMedianneLight(mode.Min, pieceExtendedMode.min);  //AlbumMedianne.getMedianneLight(list, mode, mode.Min, false, false);
                    med1 = _albumMedianne.getMedianneLight(mode.Main, pieceExtendedMode.main);

                    //comparaison des médiannes
                    if (med2.d < med1.d && med2.d > 0)
                    {
                        resultGlobalMin = true;
                        med = med2;
                    }
                    else
                    {
                        resultGlobalMin = false;
                        med = med1;
                    }

                    if (mode.combine && !mode.simple)
                    {
                        med = _albumMedianne.getMedianneLight(mode.Main, pieceExtendedMode.combine);
                    }


                }

                
                if (mode.combine && mode.simple)
                {

                    var median = med.index;

                    if (median != null)
                    {
                        resultGlobalMin = median.getSimpleCause();
                    }

                }
#else
                med = _albumMedianne.getMedianneLight(mode.Main, pieceExtendedMode.main);
                var median = med.index;

                if (median != null)
                {
                    resultGlobalMin = median.getSimpleCause();
                }
#endif















                #endregion


                var modeMin = mode.cmpMin;
                ////comparaison du premier non null
                //bool? resultByFirstMin = null;
                //// comparaison du premier null
                //bool? resultZeroMin = null;

                //// résultat : min ou main
                //bool? selectedMotifMin = null;

                AutoCause cause = null;

                if (modeMin == modeMin.orphelin)
                {
                    throw new NotImplementedException();
                    //PieceExtended min = null;
                    //decimal _min = int.MaxValue;
                    //foreach (PieceExtended p in list)
                    //{
                    //    var v = p.RapportClassement;

                    //    if (p.Enabled) // && FileRegister.Exist(p.Location))
                    //    {
                    //        if (v < _min)
                    //        {
                    //            _min = v;
                    //            min = p;
                    //        }
                    //    }
                    //}

                    //if (min != null)
                    //{
                    //    Next = min.Piece;
                    //    _min = min.VirtualClassement2;
                    //    if (_min > classementValueLight)
                    //        classementValueLight = _min;
                    //}
                }
                else if (modeMin == modeMin.toujours)
                {

                    if (mode.Main.oldAsZero)
                        list.Sort(new PieceClassementComparer(true, pieceExtendedMode.main));

                    cause = checkCause(list, mode, real, resultGlobalMin, med.d);
                    #region deporte
                    //    PieceExtended nextZero1 = null;
                    //    PieceExtended nextZero2 = null;

                    //    PieceExtended min1 = null;
                    //    PieceExtended min2 = null;
                    //    PieceExtended min = null;
                    //    decimal _min1 = int.MaxValue;
                    //    decimal _min2 = int.MaxValue;
                    //    decimal _minzero1 = int.MaxValue;
                    //    decimal _minzero2 = int.MaxValue;
                    //    bool realZero = false;
                    //    PieceExtended Next = null;
                    //    foreach (PieceExtended p in list)
                    //    {
                    //        var v1 = p.VirtualClassement;
                    //        var v2 = p.VirtualClassement2;

                    //        if (p.Enabled) // && FileRegister.Exist(p.Location))
                    //        {
                    //            if (v1 == 0 || (mode.Main.oldAsZero && !p.LastClassementRecent))
                    //            {
                    //                if (v1 < _minzero1)
                    //                {
                    //                    _minzero1 = v1;
                    //                    nextZero1 = p;
                    //                    if (v1 == 0)
                    //                        realZero = true;
                    //                }
                    //            }

                    //            if (v2 == 0 || (mode.Main.oldAsZero && !p.LastClassementRecent))
                    //            {
                    //                if (v2 < _minzero2)
                    //                {
                    //                    _minzero2 = v2;
                    //                    nextZero2 = p;
                    //                    if (v2 == 0)
                    //                        realZero = true;
                    //                }

                    //            }



                    //            if (v1 > 0 && v1 < _min1)
                    //            {
                    //                _min1 = v1;
                    //                min1 = p;
                    //            }

                    //            if (v2 > 0 && v2 < _min2)
                    //            {
                    //                _min2 = v2;
                    //                min2 = p;
                    //            }
                    //        }
                    //    }
                    //    decimal _min = 0;
                    //    if (_min1 <= _min2)
                    //    {
                    //        if (_min1 < _min2)
                    //            resultByFirstMin = false;
                    //        min = min1;
                    //        _min = _min1;
                    //    }
                    //    else
                    //    {
                    //        resultByFirstMin = true;
                    //        min = min2;
                    //        _min = _min2;
                    //    }

                    //    PieceExtended nextZero = null;
                    //    decimal _minzero = int.MaxValue;
                    //    if (_minzero1 <= _minzero2)
                    //    {
                    //        nextZero = nextZero1; _minzero = _minzero1; if (_minzero1 < _minzero2) resultZeroMin = false;
                    //    }
                    //    else
                    //    {
                    //        nextZero = nextZero2; _minzero = _minzero2; resultZeroMin = true;
                    //    }

                    //    if (nextZero != null)
                    //    {

                    //        if (realZero)
                    //        {
                    //            // le min trouvé est éventuellement tres élevé (pas prise en compte des éléments non encore notés
                    //            // j'applique le seuil que s'il est inférieur à la médiane
                    //            if (_min < classementValueLight)
                    //            {
                    //                if (min != null)
                    //                {
                    //                    classementValueLight = _min;
                    //                    if (real)
                    //                    {
                    //                        Next = min;
                    //                        selectedMotifMin = resultByFirstMin;
                    //                        //if (!resultMin && Next.CoeffVirtuel > 1 + EPSILON)
                    //                        //    selectedCoeff = selectedCoeff.main;
                    //                        //if (resultMin && Next.CoeffVirtuel2 > 1 + EPSILON)
                    //                        //    selectedCoeff = selectedCoeff.min;
                    //                        //if (_min < _min1 - EPSILON)
                    //                        //    selectedCoeff = selectedCoeff.min; // selectedByCoeff2 = true;
                    //                    }
                    //                }
                    //            }
                    //            else
                    //            {
                    //                if (real)
                    //                {

                    //                    if (_med0.d > med.d + EPSILON) // if (p.CoeffVirtuel > 1)
                    //                        selectedMotifMin = resultGlobalMin;
                    //                    // selectedCoeff = selectedCoeff.main; // selectedByCoeff = true; 
                    //                    Next = nextZero;

                    //                }
                    //            }
                    //        }
                    //        else
                    //        {
                    //            if (_min < classementValueLight)
                    //            {
                    //                if (min != null)
                    //                {
                    //                    classementValueLight = _min;
                    //                    if (real)
                    //                    {
                    //                        Next = min;
                    //                        selectedMotifMin = resultByFirstMin;
                    //                        //if (!resultMin && Next.CoeffVirtuel > 1 + EPSILON)
                    //                        //    selectedCoeff = selectedCoeff.main;
                    //                        //if (resultMin && Next.CoeffVirtuel2 > 1 + EPSILON)
                    //                        //    selectedCoeff = selectedCoeff.min;
                    //                        //if (_min < _min1 - EPSILON)
                    //                        //    selectedCoeff = selectedCoeff.min; // selectedByCoeff2 = true;
                    //                    }
                    //                }

                    //            }
                    //            else if (_minzero < classementValueLight)
                    //            {
                    //                if (real)
                    //                {
                    //                    Next = nextZero;
                    //                    classementValueLight = _minzero;
                    //                    selectedMotifMin = resultZeroMin;

                    //                    //if (!resultMin && Next.CoeffVirtuel > 1 + EPSILON)
                    //                    //    selectedCoeff = selectedCoeff.main;
                    //                    //if (resultMin && Next.CoeffVirtuel2 > 1 + EPSILON)
                    //                    //    selectedCoeff = selectedCoeff.min;
                    //                    //if (_min < _min1 - EPSILON)
                    //                    //    selectedCoeff = selectedCoeff.min; // selectedByCoeff2 = true;
                    //                }
                    //            }

                    //            else
                    //            {
                    //                classementValueLight = _min;
                    //                if (real)
                    //                {
                    //                    Next = min;
                    //                    selectedMotifMin = resultGlobalMin;

                    //                    //    //  var p = list[med.index];
                    //                    //    if (!resultMin && Next.CoeffVirtuel > 1 + EPSILON)
                    //                    //        selectedCoeff = selectedCoeff.main;
                    //                    //    if (resultMin && Next.CoeffVirtuel2 > 1 + EPSILON)
                    //                    //        selectedCoeff = selectedCoeff.min;
                    //                    //    if (_med0.d > med.d + EPSILON) // if (p.CoeffVirtuel > 1)
                    //                    //        selectedCoeff = selectedCoeff.main; // selectedByCoeff = true; 
                    //                }

                    //            }
                    //        }
                    //    }
                    //    else
                    //    {
                    //        // tous notés => on prend le plus faible
                    //        if (real)
                    //            Next = min;
                    //        if (min != null)
                    //        {
                    //            classementValueLight = _min;
                    //            selectedMotifMin = resultByFirstMin;
                    //        }

                    //    }

                    //}

                    #endregion
                }

                var cnext = cause.Next;
                if (cnext != null)
                {
                    if (cnext.UseCompact && !cnext.Empty)
                    {
                        if (cnext.Piece.ClassementRecentCompact)
                        {
                            cnext.UseCompact = false;
                            return A_REFAIRE_CAUSE_COMPACT;
                        }
                    }
                }
                classementValueLight = med.d;
                var selectedMotifMin = cause.selectedMotifMin;
                classementValueLight = cause.classementValueLight;

                if (real)
                {

                    //if (mode.combine && !mode.simple)
                    //{
                    //    _albumMedianne.buildVirtual(true);
                    //    med = _albumMedianne.getMedianneLight(mode.Main, PieceExtended.mode.combine); // AlbumMedianne.getMedianneLight(list, mode, mode.Main, true, true);
                    //    cause = checkCause(list, mode, real, resultGlobalMin, med.d);
                    //}
                    //else
                    //{
                    //    if (true == cause.selectedMotifMin)
                    //        med = med2;
                    //    else
                    //        med = med1;
                    //}




                    this.Next = cause.Next == null ? null : cause.Next.Piece;
                    classementValueLight = cause.classementValueLight;
                    selectedSure = cause.motifSure;

#if GEN2
                    foreach (var p in list)
                        p.finalyse();

#endif


                    if (cause.motifUp)
                    {
                        if (cause.selectedMotifMin.HasValue)
                        {
                            if (true == cause.selectedMotifMin)
                                selectedCoeff = selectedCoeff.min;
                            else
                                selectedCoeff = selectedCoeff.main;
                        }
                        else if (selectedMotifMin.HasValue)
                        {
                            if (true == selectedMotifMin)
                                selectedCoeff = selectedCoeff.min;
                            else
                                selectedCoeff = selectedCoeff.main;
                        }
                        else
                        {
                            if (true == resultGlobalMin)
                                selectedCoeff = selectedCoeff.min;
                            else
                                selectedCoeff = selectedCoeff.main;
                        }


                    }

                    try
                    {
                        if (med.index != null)
                            pluspetitEnabled = med.index.Piece;
                        if (med.index != null) med.index.Piece.MedianneLight = true;
                        if (med.indexBorder != null) med.indexBorder.Piece.Border = true;
                        if (med.indexBorderEffect != null) med.indexBorderEffect.Piece.BorderEffect = true;
                        if (med.indexBorderMin != null) med.indexBorderMin.Piece.BorderMin = true;

                    }
                    catch { }
                }



            }
            catch (Exception ex)
            {
                misc.log("impossible de faire le makeSort de l'album " + name + " " + ex.ToString());
            }

            return classementValueLight;


        }

        private class AutoCause
        {

            //comparaison du premier non null
            public bool? resultByFirstMin = null;
            // comparaison du premier null
            public bool? resultZeroMin = null;

            // résultat : min ou main
            public bool? selectedMotifMin = null;
            public IPieceAlbum Next = null;
            public bool motifUp;
            /// <summary>
            /// interdiction de dégradation en noCoeff
            /// </summary>
            public bool motifSure;
            public decimal classementValueLight;
        }

        private AutoCause checkCause(List<IPieceAlbum> list, ConfMedianne mode, bool real, bool? resultGlobalMin, decimal d)
        {
            var classementValueLight = d;
            bool forceKeep = mode.forceKeep; 


            // PieceExtended median = null;
            AutoCause cause = new AutoCause();
            //if (med.index > 0 && med.index < list.Count)
            //{
            //    median = list[med.index];
            //    if (mode.simple && resultGlobalMin == null)
            //    {
            //        resultGlobalMin = median.getSimpleCause();
            //    }
            //}
            var modeMin = mode.cmpMin;



            IPieceAlbum nextZero1 = null;
#if GEN2
            IPieceAlbum nextZero2 = null;
             IPieceAlbum min2 = null;
                Classement _min2 = null;
              Classement _minzero2 = null;
#endif

            IPieceAlbum min1 = null;

            IPieceAlbum min = null;
            Classement _min1 = null;

            Classement _minzero1 = null;

            bool realZero = false;
            IPieceAlbum Next = null;

            IPieceAlbum firstInAlbumEmpty = null;
            foreach (IPieceAlbum p in list)
            {
                if (forceKeep && p.Piece.Keep)
                {
                    firstInAlbumEmpty = p;
                    //min= firstInAlbumEmpty; 
                    //break;
                }
                var v1 = p.Classement;
#if GEN2
                var v2 = p.Classement2;
#endif

                if (p.Enabled) // && FileRegister.Exist(p.Location))
                {
                    if (v1.isZero() || (mode.Main.oldAsZero && !p.LastClassementRecent))
                    {
                        if (v1 < _minzero1)
                        {
                            _minzero1 = v1;
                            nextZero1 = p;
                            if (v1.isZero())
                                realZero = true;
                        }
                    }
#if GEN2

                    if (v2.isZero() || (mode.Main.oldAsZero && !p.LastClassementRecent))
                    {
                        if (v2 < _minzero2)
                        {
                            _minzero2 = v2;
                            nextZero2 = p;
                            if (v2.isZero())
                                realZero = true;
                        }

                    }

#endif

                    if (v1.isPositive() && v1 < _min1)
                    {
                        _min1 = v1;
                        min1 = p;
                    }
#if GEN2
                    if (v2.isPositive() && v2 < _min2)
                    {
                        _min2 = v2;
                        min2 = p;
                    }
#endif

                    if (p.Empty)
                        break;
                }
            }
            Classement _min = null;
#if GEN2
            if (_min1 <= _min2)
            {
                if (_min1 < _min2)
                    cause.resultByFirstMin = false;
                min = min1;
                _min = _min1;

            }
            else
            {
                cause.resultByFirstMin = true;
                min = min2;
                _min = _min2;
            }
#else
            min = min1;
            _min = _min1;
#endif

            IPieceAlbum nextZero = null;
            Classement _minzero = null;
#if GEN2
            if (_minzero1 <= _minzero2)
            {
                nextZero = nextZero1; _minzero = _minzero1; if (_minzero1 < _minzero2) cause.resultZeroMin = false;
            }
            else
            {
                nextZero = nextZero2; _minzero = _minzero2; cause.resultZeroMin = true;
            }
#else
            nextZero = nextZero1; _minzero = _minzero1;
#endif

            //if (firstInAlbumEmpty != null)
            //{
            //    Next = firstInAlbumEmpty;
            //    cause.selectedMotifMin = cause.resultByFirstMin;
            //    cause.motifUp = Next.getCauseUp(cause.selectedMotifMin);
            //}
            //else
            //{

            if (nextZero != null)
            {
                decimal _minValue = _min == null ? int.MaxValue : _min.RapportClassement;
                decimal _minZeroValue = _minzero == null ? int.MaxValue : _minzero.RapportClassement;
                if (realZero)
                {
                    // le min trouvé est éventuellement tres élevé (pas prise en compte des éléments non encore notés
                    // j'applique le seuil que s'il est inférieur à la médiane

                    if (_minValue < classementValueLight)
                    {
                        if (min != null)
                        {
                            classementValueLight = _minValue;
                            if (real)
                            {
                                Next = min;
                                cause.selectedMotifMin = cause.resultByFirstMin;
                                cause.motifUp = Next.getCauseUp(cause.selectedMotifMin);

                                //if (mode.simple)
                                //{
                                //    cause.selectedMotifMin = !min.EffectMain;
                                //}
                                //if (!resultMin && Next.CoeffVirtuel > 1 + EPSILON)
                                //    selectedCoeff = selectedCoeff.main;
                                //if (resultMin && Next.CoeffVirtuel2 > 1 + EPSILON)
                                //    selectedCoeff = selectedCoeff.min;
                                //if (_min < _min1 - EPSILON)
                                //    selectedCoeff = selectedCoeff.min; // selectedByCoeff2 = true;
                            }
                        }
                    }
                    else
                    {
                        if (real)
                        {
                            //if (_med0 == null)
                            //    _med0 = AlbumMedianne.getMedianneLight(new List<PieceExtended>(list), mode0, mode0.Main, true, false);
                            if (this.ClassementValueLightZero > classementValueLight + EPSILON || (classementValueLight > 0 && this.ClassementValueLightZero / classementValueLight > 1 + EPSILON)) // if (p.CoeffVirtuel > 1)
                            {
                                cause.selectedMotifMin = resultGlobalMin;
                                cause.motifUp = true;
                                cause.motifSure = true;

                                //if (mode.simple)
                                //{
                                //    cause.selectedMotifMin = !median.EffectMain;
                                //}
                            }
                            // selectedCoeff = selectedCoeff.main; // selectedByCoeff = true; 
                            Next = nextZero;

                        }
                    }
                }
                else
                {
                    if (_minValue < classementValueLight)
                    {
                        if (min != null)
                        {
                            classementValueLight = _minValue;
                            if (real)
                            {
                                Next = min;
                                cause.selectedMotifMin = cause.resultByFirstMin;
                                cause.motifUp = Next.getCauseUp(cause.selectedMotifMin);
                                //if (!resultMin && Next.CoeffVirtuel > 1 + EPSILON)
                                //    selectedCoeff = selectedCoeff.main;
                                //if (resultMin && Next.CoeffVirtuel2 > 1 + EPSILON)
                                //    selectedCoeff = selectedCoeff.min;
                                //if (_min < _min1 - EPSILON)
                                //    selectedCoeff = selectedCoeff.min; // selectedByCoeff2 = true;

                                //if (mode.simple)
                                //{
                                //    cause.selectedMotifMin = !min.EffectMain;
                                //}
                            }
                        }

                    }
                    else if (_minZeroValue < classementValueLight)
                    {
                        classementValueLight = _minZeroValue;
                        if (real)
                        {
                            Next = nextZero;

                            cause.selectedMotifMin = cause.resultZeroMin;
                            cause.motifUp = Next.getCauseUp(cause.selectedMotifMin);

                            //if (!resultMin && Next.CoeffVirtuel > 1 + EPSILON)
                            //    selectedCoeff = selectedCoeff.main;
                            //if (resultMin && Next.CoeffVirtuel2 > 1 + EPSILON)
                            //    selectedCoeff = selectedCoeff.min;
                            //if (_min < _min1 - EPSILON)
                            //    selectedCoeff = selectedCoeff.min; // selectedByCoeff2 = true;

                            //if (mode.simple)
                            //{
                            //    if (nextZero != null)
                            //        cause.selectedMotifMin = !nextZero.EffectMain;
                            //}
                        }
                    }

                    else
                    {

                        classementValueLight = _min == null ? int.MaxValue : _min.RapportClassement;
                        if (real)
                        {
                            Next = min;
                            cause.selectedMotifMin = resultGlobalMin;

                            cause.selectedMotifMin = Next.getSimpleCause();
                            cause.motifUp = Next.getCauseUp(cause.selectedMotifMin);
                            //    //  var p = list[med.index];
                            //    if (!resultMin && Next.CoeffVirtuel > 1 + EPSILON)
                            //        selectedCoeff = selectedCoeff.main;
                            //    if (resultMin && Next.CoeffVirtuel2 > 1 + EPSILON)
                            //        selectedCoeff = selectedCoeff.min;
                            //    if (_med0.d > med.d + EPSILON) // if (p.CoeffVirtuel > 1)
                            //        selectedCoeff = selectedCoeff.main; // selectedByCoeff = true; 

                            //if (mode.simple)
                            //{
                            //    cause.selectedMotifMin = !min.EffectMain;
                            //}
                        }

                    }
                }
            }
            else
            {
                // tous notés => on prend le plus faible
                if (real)
                    Next = min;
                if (min != null)
                {
                    classementValueLight = _min.RapportClassement;
                    cause.selectedMotifMin = cause.resultByFirstMin;
                    if (Next != null)
                    {
                        cause.motifUp = Next.getCauseUp(cause.selectedMotifMin);
                        //if (mode.simple)
                        //{
                        //    cause.selectedMotifMin = !Next.EffectMain;
                        //}
                    }
                }

            }
            //}

            if (Next == nextZero && firstInAlbumEmpty != null)
            {
                Next = firstInAlbumEmpty;
                cause.selectedMotifMin = cause.resultByFirstMin;
                cause.motifUp = Next.getCauseUp(cause.selectedMotifMin);
            }

            cause.Next = Next;
            cause.classementValueLight = classementValueLight;
            if (real && min != null)
                this.pluspetitEnabled = min.Piece;
            return cause;



        }


        private bool makesort(List<Piece> list, List<IPieceAlbum> listE, ConfMedianne mode, ConfMedianne mode0, int nbrepeat)
        {
            int count = list.Count;

            if (sortStatus == sortDone.none)   //(!sort0Done)
            {
                // list.Sort(new CPieceComparerByQualityAndLength());
                var listSortedValues = new List<decimal>();
                //classed = false;
                //for (int i = 0; i < count; i++)
                //{
                //    listSortedValues.Add(list[i].Rank.SortValue);
                //    if (!classed && list[i].isClassListNumeric) // && FileRegister.Exist(list[i].Location))
                //        classed = true;
                //}
                ////misc.log("make sort Duration {0}", name); 
                //m_rank.SortValue = CalcMedianne.getMedianne(listSortedValues, medianne).d;

                //  listSortedValues = new List<decimal>();
                list.Sort(new PieceDurationValueComparer());
                for (int i = 0; i < count; i++)
                {
                    if (!classed && list[i].isClassListNumeric) // && FileRegister.Exist(list[i].Location))
                        classed = true;
                    listSortedValues.Add(list[i].Duration.TotalMilliseconds());
                }
                durationValue = CalcMedianne.getMedianne(listSortedValues, medianne).d;
                //}
                //   decimal moy = 0m;
                decimal offset = Album.conf.AlbumMoyOffset;
#if GEN2
                for (int i = 0; i < count; i++)
                {
                    var p = list[i];
                    var rapportClassement = p.RapportClassement(true);

                    p.setClassementVirtuel(rapportClassement);


                    moy += rapportClassement;
                    if (offset > 0m && rapportClassement > 0.0m)
                        moy += offset;
                }

                if (count > 0)
                    moy /= count;
                classMoy = moy;
#endif

                listE.Sort(new PieceClassementComparer(false));
                this.med = AlbumMedianne.getMedianne(listE, true, medianne);


                //   _med0 = AlbumMedianne.getMedianneLight(new List<PieceExtended>(listE), mode0, mode0.Main, true, false);


                classementValue = this.med.d;
                if (classementValue > 0m)
                {
                    if (med.index != null)
                        med.index.Piece.Medianne = true;
                    //if (this.med.index > 0 && this.med.index < list.Count)
                    //    list[this.med.index].Medianne = true;
                }
                if (sortStatus < sortDone.phaseUn)
                    sortStatus = sortDone.phaseUn;
                //   sort0Done = true;

            }


            if (sortStatus >= sortDone.phaseDeux)
                return false;

            trackSortedByExportPriority = null;
            _tracksSortByClassement = null;
            classementValueLightSt = -1;
            selectedCoeff = selectedCoeff.noCoeff;
            selectedSure = false;

#if GEN2
            classementValueLightZeroSt = -1;
           
            classementValueLightZero = makeSort(listE, mode0, false);
            if (classementValueLightZero == A_REFAIRE_CAUSE_COMPACT)
            {
                sortStatus = sortDone.none; return makesort(list, listE, mode, mode0, nbrepeat);
            }
#endif
            classementValueLight = makeSort(listE, mode, true);
            if (classementValueLight == A_REFAIRE_CAUSE_COMPACT)
            {
                sortStatus = sortDone.none; return makesort(list, listE, mode, mode0, nbrepeat);
            }

            //   classementValueLightZero = A_REFAIRE_CAUSE_COMPACT;


            //   while (classementValueLightZero == A_REFAIRE_CAUSE_COMPACT)
            //   {
            //       classementValueLightZero = makeSort(listE, mode0, false);
            //   }

            ////   var _classementValueLight = makeSort(listE, mode, true);

            //   while (classementValueLight == A_REFAIRE_CAUSE_COMPACT)
            //   {
            //       classementValueLight = makeSort(listE, mode, true);
            //   }
#if GEN2
            var coeff1 = mode.Main.coeffVirt;
            var coeff2 = mode.Min.CoeffOld;
            var rendementmax = 1m;

            if (mode.combine)
                rendementmax = coeff1 * coeff2;
            else
                rendementmax = pdb.util.Math.Max(coeff1, coeff2);
            if (Rendement > 6 * rendementmax + 1e-6m)
            {
                nbrepeat++;
                sortStatus = sortDone.none;
                if (nbrepeat >= 3)
                {
                    // classementValueLight = classementValueLightZero;
                    return true;
                }
                return makesort(list, listE, mode, mode0, nbrepeat);

            }
#endif
            return true;
        }



        public bool makeSort(ConfMedianne mode, ConfMedianne mode0, ILogger logger, double dureeMinToLog) //IList<double> reference, IList<Piece> pieces)
        {

            if (sortStatus >= sortDone.phaseDeux)
                return false;
            DateTime nowa = DateTime.Now;
            var ts = (nowa - majDate);
            try
            {

                var list = this.list.ToList<Piece>();
                int count = list.Count;
                if (count == 0)
                    return false;

                var listE = new List<IPieceAlbum>(count);

                //if (CConf.ResetOneCl)
                //{

                //    // CPieceClassement.DateMin = DateTime.MinValue;
                //    decimal zer0d = 0;
                //    Piece oldKeep = null;


                //    foreach (Piece t in list)
                //    {
                //        if (t.Keep)
                //        {
                //            t.Keep = false;
                //            oldKeep = t;
                //            break;
                //        }
                //    }


                //    decimal pluspetitNonNull = int.MaxValue;
                //    Piece min = null;
                //    foreach (Piece t in list)
                //    {
                //        var cl = t.DeepClassement; // p.Classement.DbValue;
                //        decimal clValue = Piece.classementHash.getCache(cl).ClassementValueDecimal; // t.ClassementValueDecimal(false);
                //        if (clValue > zer0d)
                //        {

                //            if (t.LastClassementRecent || !t.Enabled)
                //            {
                //                min = null;
                //                break;
                //            }
                //            if (clValue < pluspetitNonNull)
                //            {
                //                pluspetitNonNull = clValue;
                //                min = t;
                //            }
                //        }

                //    }

                //    if (min != null)
                //    {
                //        min.Keep = true;
                //        var r = min.RapportClassement(true);
                //        if (r <= 0)
                //        {
                //        }
                //    }



                //    if (oldKeep != null && !oldKeep.Keep)
                //    {
                //        oldKeep.resetMedianneCompact();
                //        oldKeep.invalidateCache(true);
                //    }
                //}


                atLeastOneEnabled = false;
                int _nbr = 0;
                int _nbdone = 0;


                for (int i = 0; i < count; i++)
                {
                    var p = list[i];


                    if (sortStatus < sortDone.phaseDeux) //  (!sortDone)
                        p.resetMedianneCompact();
                    if (p.Enabled)
                    {
                        atLeastOneEnabled = true;

                    }
                    if (!p.Enabled && p.ClassmentPositive())
                        _nbdone++;
                    if (p.LastClassementRecent)
                        _nbr++;
#if GEN2
                    var pp = new PieceExtended(p);
#else
                    var pp = p;
#endif
                    listE.Add(pp);
                }

                nbRecent = _nbr;
                nbDone = _nbdone;


                bool ret = makesort(list, listE, mode, mode0, 0);

                sortStatus = sortDone.phaseDeux;

                majDate = DateTime.Now;
                var duree = (majDate - nowa);
                if (duree.TotalMilliseconds > dureeMinToLog)
                    logger.log(string.Format("make Sort {0}| {1} {2}", ts.toString(), duree.toString(), this));

                return ret;
            }
            catch (Exception ex)
            {
                misc.log("impossible de faire le makeSort de l'album " + name + " " + ex.ToString());
            }

            return false;
        }



        public void mustRefresh()
        {
            build = false;
            sortStatus = sortDone.none;

            selectionDone = false;
            atLeastOneEnabled = null;
            _tracksSortByClassement = null;
            // misc.log("invalidation {0}", this); 
            albumAdded = DateTime.MaxValue;
        }

        public void refreshLight()
        {
            if (sortStatus == sortDone.phaseDeux)
                sortStatus = sortDone.phaseUn;
            atLeastOneEnabled = null;
            _tracksSortByClassement = null;
        }



        //public decimal getTrackSortValue(int index, List<Piece> list)
        //{
        //    if (index < 0 || index >= list.Count)
        //        return 0;
        //    return list[index].RapportClassement(true);
        //}

        //decimal firstTrackSortValue = -1;
        //public decimal getFirstTrackSortValue()
        //{
        //    if (firstTrackSortValue == -1)
        //    {
        //        int count = list.Count;
        //        if (count == 0)
        //            return -1;
        //        var _list = new List<Piece>(list);
        //        _list.Sort(new PieceSortComparer());
        //        firstTrackSortValue = _list[count - 1].Rank.SortValue;
        //    }
        //    return firstTrackSortValue;
        //}
        private bool selectionDone;
        public void makeSelection()
        {
            Moved = false;

            if (selectionDone)
                return;
            var list = this.list.ToList<Piece>();
            list.Sort(new PieceRestComparer());
            var listSortedValues = new List<decimal>();
            for (int i = 0; i < list.Count; i++)
                listSortedValues.Add(list[i].Rank.TimeRest);
            timeRest = CalcMedianne.getMedianne(listSortedValues, medianneRest).d;
            selectionDone = true;
        }

        public List<Piece> RawList
        {
            get
            {
                return new List<Piece>(list);
            }
        }

        public List<Piece> Sort()
        {
            var _list = new List<Piece>(list);
            _list.Sort(new PieceInAlbumComparer());
            return _list;
        }

        public TimeSpan Duration
        {
            get
            {
                TimeSpan d = new TimeSpan();
                foreach (Piece piece in list)
                    d += piece.Duration;
                return d;
            }
        }


        #region Rank
        //private CRank m_rank = new CRank();

        //public CRank Rank { get { return m_rank; } }



        private int rankStack = -1;
        public int RankSt { get { return rankStack; } set { rankStack = value; } }

        private int rankZero = -1;
        public int RankZero { get { return rankZero; } set { rankZero = value; } }

        private int rankZeroSt = -1;
        public int RankZeroSt { get { return rankZeroSt; } set { rankZeroSt = value; } }

        private void initRank()
        {
            quality = CRank.MAX;
            // rankStack = -1;
        }

        //public int QRank
        //{
        //    get { return m_rank.Quality; }
        //    set { m_rank.Quality = value; }
        //}

        //public int LRank
        //{
        //    get { return m_rank.Lenght; }
        //    set { m_rank.Lenght = value; }
        //}

        //public int QLRank
        //{
        //    get { return m_rank.Twice; }
        //    set { m_rank.Twice = value; }
        //}


        #endregion

        #region tri



        #endregion

        [Flags]
        private enum unsortMode : byte
        {
            album = 1,
            artist = 2

        }
        const char SEP = '\\';
        const int MAX_PATH_LEVEL = 10;

        public void addPath(Piece pp, HashSet<string> paths, int pathlevel)
        {
            foreach (string path in pp.RelativesPath)
            {
                bool go = VirtualByArtist;
                if (!VirtualByArtist)
                {
                    var _name = Name.Remove(0);
                    if (string.IsNullOrEmpty(_name) || path.StartsWith(_name))
                        go = true;
                }

                if (go)
                {
                    var tab = path.Split(SEP);
                    int ilevel = 0;
                    var sb = new StringBuilder();
                    foreach (string d in tab)
                    {
                        if (string.IsNullOrEmpty(d))
                            continue;
                        if (sb.Length > 0)
                            sb.Append(SEP);
                        sb.Append(d);
                        if (ilevel >= pathlevel)
                        {
                            var p = sb.ToString();
                            paths.Add(p);
                        }
                        ilevel++;
                    }
                    // paths.Add(path);
                }
            }
        }

        public bool containsPath(Piece pp, HashSet<string> paths, int pathlevel)
        {
            foreach (string path in pp.RelativesPath)
            {
                bool go = VirtualByArtist;
                if (!VirtualByArtist)
                {
                    var _name = Name.Remove(0);
                    if (string.IsNullOrEmpty(_name) || path.StartsWith(_name))
                        go = true;
                }

                if (go)
                {
                    if (paths.Contains(path))
                        return true; //paths.Add(path);
                    var tab = path.Split(SEP);
                    int ilevel = 0;
                    var sb = new StringBuilder();
                    foreach (string d in tab)
                    {
                        if (string.IsNullOrEmpty(d))
                            continue;
                        if (sb.Length > 0)
                            sb.Append(SEP);
                        sb.Append(d);
                        if (ilevel >= pathlevel)
                        {
                            var p = sb.ToString();
                            if (paths.Contains(p))
                                return true;
                        }
                        ilevel++;
                    }

                }
            }
            return false;
        }
        public void sortVirtual()
        {
            if (this.VirtualMode == virtualMode.none)
                return;
            var list = this.list.ToList<Piece>();
            int count = list.Count;
            if (count == 0)
                return;
            list.Sort((x, y) =>
            {
                var cmp = x.MasterTrackNumberForTri.CompareTo(y.MasterTrackNumberForTri);
                if (cmp != 0)
                    return cmp;
                return x.Location.CompareTo(y.Location);
            });
            var dictArtist = new Dictionary<string, List<Piece>>();
            var dictAlbum = new Dictionary<int, string>();
            var dictDir = new Dictionary<string, List<Piece>>();
            DirSort.reset();
            foreach (Piece p in list)
            {

                DirSort.record(p);
            }

            DirSort.go();


            foreach (Piece p in list)
            {
                if (p.TrackNumber == 0)
                {
                    p.TrackNumber = list.Count + p.MasterTrackNumber;
                }
            }

            list.Sort((x, y) => x.TrackNumber.CompareTo(y.TrackNumber));
            //foreach (Piece p in list)
            //{
            //    if (p.MasterTrackNumber > 0)
            //        continue;
            //    try
            //    {
            //        var file = new System.IO.FileInfo(p.Location);
            //        var key = file.DirectoryName;

            //        if (!dictDir.ContainsKey(key))
            //            dictDir.Add(key, new List<Piece>());
            //        dictDir[key].Add(p);
            //    }
            //    catch
            //    {
            //    }
            //}

            //foreach (List<Piece> l in dictDir.Values)
            //{
            //    l.Sort((x, y) => x.Location.CompareTo(y.Location));
            //    for (int i = 0; i < l.Count; i++)
            //    {
            //        l[i].TrackNumber = i + 1;
            //    }
            //}

            //list.Sort(new PieceInVirtualAlbumComparer());
            //int nb = 0;

            //foreach (var piece in list)
            //{
            //    nb++;
            //    piece.TrackNumber = nb;
            //}

            //var list2 = new List<Piece>(list);
            //list2.Sort(new VirtualPieceComparer());

            var hs = new HashSet<int>();
            var unsorted = new List<Piece>();
            Piece pp = list[0];
            hs.Add(pp.PieceId); unsorted.Add(pp);
            //string currentArtist = pp.Artist;
            //string currentAlbum = pp.Master.Album;


            int indexC = 0;
            //  bool singleAlbum = false;
            string currentArtist = Album.getKey(pp.Artist, virtualMode.artist);
            unsortMode mode = unsortMode.album | unsortMode.artist;
            if (VirtualByArtist)
                mode = unsortMode.album;

            HashSet<string> artists = new HashSet<string>();
            HashSet<string> albums = new HashSet<string>();
            artists.Add(currentArtist);
            albums.Add(pp.Master.PieceAlbum.Key);
            //  HashSet<string> paths = new HashSet<string>();
            //int pathlevel = 0;
            //  bool found = false;
            int nbc = 0;
            while (unsorted.Count < count)
            {
                nbc++;
                //int indexAlbum = -1;
                //int indexArtist = -1;


                // addPath(pp, paths, pathlevel);

                artists.Clear();
                albums.Clear();
                //    paths.Clear();
                artists.Add(currentArtist);
                albums.Add(pp.Master.PieceAlbum.Key);


                for (int i = 0; i < count; i++)
                {

                    var p = list[i];
                    if (hs.Contains(p.PieceId))
                        continue;

                    if (mode == 0)
                    {
                        hs.Add(p.PieceId);
                        unsorted.Add(p);
                        pp = p;
                        // indexAlbum = -1;
                        indexC = i;
                        continue;
                    }
                    if (mode.HasFlag(unsortMode.artist))
                    {
                        var artist = p.Artist;
                        if (p.Artist != pp.Artist)
                        {
                            var cartist = Album.getKey(p.Artist, virtualMode.artist);
                            if (currentArtist != cartist)
                            {
                                if (!artists.Contains(cartist))
                                {
                                    if (mode.HasFlag(unsortMode.album))
                                    {
                                        if (albums.Contains(p.Master.PieceAlbum.Key))
                                        {
                                            //if (albums.Count <= 1)
                                            //    indexArtist = i;
                                            continue;
                                        }
                                    }

                                    //if (pathlevel <= MAX_PATH_LEVEL)
                                    //{
                                    //    if (containsPath(p, paths, pathlevel))
                                    //        continue;
                                    //}

                                    hs.Add(p.PieceId);
                                    unsorted.Add(p);
                                    pp = p;
                                    //indexAlbum = -1;
                                    //indexArtist = -1;

                                    albums.Add(pp.Master.PieceAlbum.Key);
                                    artists.Add(cartist);
                                    //  addPath(pp, paths, pathlevel); 
                                    indexC = i;
                                    currentArtist = cartist;
                                    //   found = true;
                                    continue;

                                }
                            }
                        }
                    }
                    else if (mode.HasFlag(unsortMode.album))
                    {
                        var album = p.Master.PieceAlbum.Key;
                        if (!albums.Contains(album))
                        {
                            //if (pathlevel <= MAX_PATH_LEVEL)
                            //{
                            //    if (containsPath(p, paths, pathlevel))
                            //        continue;
                            //}
                            hs.Add(p.PieceId);
                            unsorted.Add(p);
                            pp = p;
                            indexC = i;
                            //indexAlbum = -1;
                            albums.Add(album);
                            var cartist = Album.getKey(p.Artist, virtualMode.artist);
                            artists.Add(cartist);
                            currentArtist = cartist;
                            //   found = true;
                            //  addPath(pp, paths, pathlevel); 
                        }
                    }
                }


                //if (indexAlbum >= 0)
                //{
                //    // pas trouvé d'autre artiste, on se rabat sur l'album
                //    var p = list2[indexAlbum];
                //    hs.Add(p.PieceId);
                //    unsorted.Add(p);
                //    pp = p;
                //    indexC = indexAlbum;
                //    indexAlbum = -1;
                //    albums.Add(pp.Master.PieceAlbum.Key);
                //    var cartist = Album.getKey(p.Artist, true);
                //    artists.Add(cartist);
                //    currentArtist = cartist;
                //}
                //else if (indexArtist >= 0)
                //{
                //    // on a trouvé un autre artiste sur le même album. pas si mal
                //    var p = list2[indexArtist];
                //    hs.Add(p.PieceId);
                //    unsorted.Add(p);
                //    pp = p;
                //    indexC = indexArtist;
                //    indexAlbum = -1;
                //    albums.Add(pp.Master.PieceAlbum.Key);
                //    var cartist = Album.getKey(p.Artist, true);
                //    artists.Add(cartist);
                //    currentArtist = cartist;
                //}
                //else
                //{
                //    // rien trouvé de spécial
                //    if (indexC == 0 && !singleAlbum)
                //    {
                //        singleAlbum = true;
                //    }
                //    indexC = 0;

                //}

                if (indexC == 0)
                {

                    //if (found)
                    //{
                    //    found = false;
                    //}
                    //else
                    //{
                    //{
                    //    if (paths.Count == 0)
                    //    {
                    //        pathlevel = MAX_PATH_LEVEL; 
                    //    }
                    //    if (pathlevel < MAX_PATH_LEVEL)
                    //    {
                    //        pathlevel++;
                    //    }
                    //    else
                    //    {
                    if (mode.HasFlag(unsortMode.artist))
                    {
                        if (mode.HasFlag(unsortMode.album))
                            // on cherche les artistes différents ( éventuellement même album ) 
                            mode &= ~unsortMode.album;
                        else
                        {
                            // on abandonne la recherche artiste et on réactive la recherche album
                            mode &= ~unsortMode.artist;
                            mode |= unsortMode.album;
                        }
                    }
                    else if (mode.HasFlag(unsortMode.album))
                        // on est en mode single album; 
                        mode &= ~unsortMode.album;

                    //pathlevel = 0;
                    //  }
                }
                //}
                // }
                indexC = 0;

            }

            for (int i = 0; i < unsorted.Count; i++)
            {
                unsorted[i].TrackNumber = i + 1;
            }



            //foreach (Piece p in list)
            //{
            //    if (p == null)
            //        continue;
            //    var artist = p.Artist;
            //    FileInfo file = null;
            //    try
            //    {
            //        file = new System.IO.FileInfo(p.Location);
            //    }
            //    catch
            //    {
            //        continue;
            //    }
            //    var dirAlbum = file.Directory;
            //    var dirArtist = dirAlbum.Parent;
            //    if (string.IsNullOrEmpty(artist))
            //        artist = dirArtist.FullName;
            //    if (string.IsNullOrEmpty(artist))
            //        artist = "-";
            //    if (!dictArtist.ContainsKey(artist))
            //        dictArtist.Add(artist, new List<Piece>());
            //    dictArtist[artist].Add(p);

            //    var _album = p.Master.Album;
            //    if (string.IsNullOrEmpty(_album))
            //        _album = dirAlbum.FullName;
            //    dictAlbum.Add(p.PieceId, _album);

            //    //if (!dictAlbum.ContainsKey(_album))
            //    //    dictAlbum.Add(_album, new List<Piece>());
            //    //dictAlbum[_album].Add(p);


            //}

            //foreach (List<Piece> l in dictArtist.Values)
            //{
            //    //
            //    for (int i = 0; i < l.Count; i++)
            //    {
            //        l[i].TrackNumber = i + 1;
            //    }
            //}

            //var listUnSortArtist = new List<Piece>(list);
            //listUnSortArtist.Sort((x, y) => x.TrackNumber.CompareTo(y.TrackNumber));

            //var listUnSortAlbum = new List<Piece>();

            //List<Piece> aux = new List<Piece>();
            //int current = 0;

            //foreach (Piece p in listUnSortArtist)
            //{
            //    var tn = p.TrackNumber;
            //    if (tn == current)
            //    {
            //        //aux.Add(p);
            //    }
            //    else
            //    {
            //        current = tn;
            //        aux.Sort((x, y) =>
            //        {
            //            if (x.PieceId == y.PieceId)
            //                return 0;
            //            string xa = x.Master.Album;
            //            string ya = y.Master.Album;
            //            if (dictAlbum.ContainsKey(x.PieceId))
            //                xa = dictAlbum[x.PieceId];
            //            else
            //            { }
            //            if (dictAlbum.ContainsKey(y.PieceId))
            //                ya = dictAlbum[y.PieceId];
            //            else
            //            { }
            //            var cmp = xa.CompareTo(ya);
            //            return cmp;
            //        });

            //        listUnSortAlbum.AddRange(aux);
            //        aux.Clear();

            //    }
            //    aux.Add(p);
            //}

            //aux.Sort((x, y) =>
            //{
            //    if (x.PieceId == y.PieceId)
            //        return 0;
            //    string xa = x.Master.Album;
            //    string ya = y.Master.Album;
            //    if (dictAlbum.ContainsKey(x.PieceId))
            //        xa = dictAlbum[x.PieceId];
            //    else
            //    { }
            //    if (dictAlbum.ContainsKey(y.PieceId))
            //        ya = dictAlbum[y.PieceId];
            //    else
            //    { }
            //    var cmp = xa.CompareTo(ya);
            //    return cmp;
            //});

            //listUnSortAlbum.AddRange(aux);
            //aux.Clear();



            //for (int i = 0; i < listUnSortAlbum.Count; i++)
            //{
            //    listUnSortAlbum[i].TrackNumber = i + 1;
            //}

            //aux.Clear();
            //current = 0;
            //var listUnsortTrack = new List<Piece>();

            //foreach (Piece p in listUnSortAlbum)
            //{
            //    var tn = p.TrackNumber;
            //    if (tn == current)
            //    {

            //    }
            //    else
            //    {
            //        current = tn;
            //        aux.Sort((x, y) =>
            //        {
            //            if (x.PieceId == y.PieceId)
            //                return 0;
            //            var xt = x.MasterTrackNumber;
            //            var yt = y.MasterTrackNumber;
            //            int cmp = 0;
            //            if (xt <= 0 || yt <= 0)
            //            {
            //                try
            //                {
            //                    cmp = x.Location.CompareTo(y.Location);
            //                }
            //                catch
            //                {
            //                }
            //            }
            //            cmp = xt.CompareTo(yt);
            //            return cmp;
            //        });

            //        listUnsortTrack.AddRange(aux);
            //        aux.Clear();
            //    }
            //    aux.Add(p);
            //}

            //aux.Sort((x, y) =>
            //{
            //    if (x.PieceId == y.PieceId)
            //        return 0;
            //    var xt = x.MasterTrackNumber;
            //    var yt = y.MasterTrackNumber;
            //    int cmp = 0;
            //    if (xt <= 0 || yt <= 0)
            //    {
            //        try
            //        {
            //            cmp = x.Location.CompareTo(y.Location);
            //        }
            //        catch
            //        {
            //        }
            //    }
            //    cmp = xt.CompareTo(yt);
            //    return cmp;
            //});

            //listUnsortTrack.AddRange(aux);
            //aux.Clear();



            //for (int i = 0; i < listUnsortTrack.Count; i++)
            //{
            //    listUnsortTrack[i].TrackNumber = i + 1;
            //}




            //foreach (Piece p in list)
            //{
            //    if (p.MasterTrackNumber > 0)
            //        continue;
            //    try
            //    {
            //        var file = new System.IO.FileInfo(p.Location);
            //        var key = file.DirectoryName;

            //        if (!dictDir.ContainsKey(key))
            //            dictDir.Add(key, new List<Piece>());
            //        dictDir[key].Add(p);
            //    }
            //    catch
            //    {
            //    }
            //}

            //foreach (List<Piece> l in dictDir.Values)
            //{
            //    l.Sort((x, y) => x.Location.CompareTo(y.Location));
            //    for (int i = 0; i < l.Count; i++)
            //    {
            //        l[i].TrackNumber = i + 1;
            //    }
            //}

            //list.Sort(new PieceInVirtualAlbumComparer());
            //int nb = 0;
            //foreach (var piece in list)
            //{
            //    nb++;
            //    piece.TrackNumber = nb;
            //}
        }

        public bool isSameOf(Album o)
        {
            if (o == this)
                return false;
            if (list.Count != o.list.Count)
                return false;

            foreach (Piece p in masters)
            {
                if (!o.masters.Contains(p))
                    return false;
            }
            return true;

        }

        public override bool Equals(object obj)
        {
            var o = obj as Album;
            if (o == null)
                return false;
            return Key.Equals(o.Key) && mode == o.mode;
        }
        public override int GetHashCode()
        {
            return Key.GetHashCode();
        }

        public DateTime? UpdateClassement
        {
            get
            {
                DateTime? dt = null;
                foreach (Piece p in new List<Piece>(list))
                {

                    var _dt = p.UpdateClassement; // CalcDate.getLastModif(p.DatesClassement);
                    if (_dt != null && (dt == null || _dt > dt))
                        dt = _dt;
                }
                return dt;
            }
        }

        public DateTime? LastRead
        {
            get
            {
                DateTime? dt = null;
                foreach (Piece p in list)
                {
                    var _dt = p.LastRead; // CalcDate.getLastModif(p.DatesClassement);
                    if (_dt != null && (dt == null || _dt > dt))
                        dt = _dt;
                }
                return dt;
            }
        }

        public IEnumerator<Piece> GetEnumerator()
        {
            return list.GetEnumerator();
        }
        private DateTime albumAdded = DateTime.MaxValue;
        public DateTime AlbumAdded
        {
            get
            {
                if (albumAdded < DateTime.MaxValue)
                    return albumAdded;
                DateTime min = DateTime.MaxValue;
                foreach (Piece p in list)
                {
                    var dt = p.Added;
                    if (dt > DateTime.MinValue)
                    {
                        if (dt < min)
                            min = dt;
                    }
                    else
                    {
                        dt = p.FirstAcces;
                        if (dt < min && dt > DateTime.MinValue)
                            min = dt;
                    }

                }
                albumAdded = min;
                return albumAdded;
            }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return list.GetEnumerator();
        }

        public static string getKey(string _album, virtualMode mode)
        {
            string __album = "-";
            if (!string.IsNullOrEmpty(_album))
            {
                __album = _album.Trim().ToLower();

                if (mode == virtualMode.word)
                {
                    __album = string.Format("¤¤[{0}]", __album);
                    return __album;
                }
                if (mode == virtualMode.list)
                {
                    __album = string.Format("/{0}", __album);
                    return __album;
                }

                if (__album.StartsWith("the "))
                    __album = Regex.Replace(__album, @"the\ ", "");
                if (__album.StartsWith("les "))
                    __album = Regex.Replace(__album, @"les\ ", "");
                if (__album.Contains(" et "))
                    __album = __album.Replace(" et ", " ");
                if (__album.Contains(" and "))
                    __album = __album.Replace(" and ", " & ");
                __album = __album.removeAccent();
                __album = Regex.Replace(__album, @"\ +", " ");
                if (mode == virtualMode.artist)
                {
                    __album = string.Format("$[{0}]", __album);
                }
                else if (mode == virtualMode.year)
                {
                    if (_album.Length == 3)
                        __album = string.Format("£[{0}0']", __album);
                    else
                        __album = string.Format("£[{0}]", __album);
                }
                else if (mode == virtualMode.extended)
                {
                    __album = string.Format("¤[{0}]", __album);
                }
                else if (mode == virtualMode.added)
                {
                    __album = string.Format("<{0}>", __album);
                }

            }
            return __album;

        }



    }
}
]]></content>
  </file>
  <file path="\PieceDb.Consolid\albums\Albums.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using pdb.gen.medianne;
using pdb.gen.Tuning;
using pdb.util;
using pdb.gen.conf;
using System.Xml;
using System.Text;
using System.IO;
using System.Threading;

namespace pdb.gen.albums
{
    public class Albums // : IAlbumInit
    {
        private const string FILE_ALBUMS = "_albums.xml";
        public Albums(Consolid consolid)
        {
            this.consolid = consolid;
            new Thread(loop) { Priority = ThreadPriority.Lowest, Name = "scan albums" }.Start();
        }

        Logger logScan = Logger.getLogger("scan albums", true);

        /// <summary>
        /// référence constante des albums
        /// </summary>
        //   private BgDictString<Album> dict0 = new BgDictString<Album>();
        /// <summary>
        /// Albums réels ou virtuels
        /// </summary>
        private BgDictString<Album> dict = new BgDictString<Album>();
        public BgDictString<Album> Dict { get { return dict; } }
        private Consolid consolid;
        private StackAlbum stack = StackAlbum.Instance;
        private static volatile object _lock = new object();
        private static volatile object _lockSort = new object();
        public static object Lock { get { return _lock; } }
        public static object LockSort { get { return _lockSort; } }
        private volatile object _lockSort2 = new object();
        private Album currentSorted;



        public void checkBuild()
        {
            lock (_lock)
            {
                misc.log("albums.checkBuild();");
                //foreach (Album album in dict0.Values)
                //{
                //    album.checkBuild();
                //}
                dict.Clear();
            }
        }

        private string getKey(string _album, virtualMode mode)
        {
            return Album.getKey(_album, mode);
        }

        public void buildDone()
        {
            lock (_lock)
            {
                var confGen = CConf.ConfGen;
                var min1 = confGen.AlbumMin;
                var min2 = confGen.PathVirtualMin;
                var min3 = confGen.ArtistVirtualMin;
                foreach (Album album in new List<Album>(dict.Values))
                {
                    int count = album.Count;
                    bool toKeep = album.buildDone();
                    if (toKeep)
                    {

                        if (album.Virtual)
                        {
                            if (album.VirtualByArtist)
                            {
                                if (min3 > 1 && count < min3)
                                    toKeep = false;
                            }
                            else if (min2 > 1 && count < min2)
                                toKeep = false;
                        }
                        else if (min1 > 1 && count < min1)
                            toKeep = false;



                        if (!toKeep)
                        {
                            //album.Clear(); 
                            // misc.log("mise au rencard de {0} {1}", album.Name, (count > 0 ? "" : count.ToString() + " éléments"));
                            album.ClearAndMenage();
                            dict.Remove(album.Key);
                        }

                    }

                }


            }
        }



        private bool check_(Piece piece, string albumOrg, virtualMode mode, IDictionary<string, Album> dict)
        {
            string key = getKey(albumOrg, mode);


            var album = dict[key];
            if (album == null)
            {
                //album = dict0[key];
                //if (album == null)
                //{
                //  misc.log("creation album {0}", __album);
                album = new Album(albumOrg, key);
                album.setVirtual(mode);
                dict.Add(key, album);
                // dict0.Add(key, album);

            }

            //  }

            return album.add(piece);
        }

        private bool check_(Piece piece, IDictionary<string, Album> dict)
        {
            return check_(piece, piece.Album, piece.VirtualMode, dict);
        }

        public int Count { get { return dict.Count; } }
        public static int RankZero { get; set; }



        const char SEP = ';';
        const char SEP_TRACK = ',';


        public string getSortedAlbumFile()
        {
            var sb = new pdb.util.StringBuilder();
            sb.Append(TuningBase.DIR_CONF);
            var gen = CConf.ConfGen;
            if (gen.PathVirtual)
                sb.Append("Path");
            if (gen.PathVirtualE)
                sb.Append("PathE");
            if (gen.ArtistVirtual)
                sb.Append("Artist");

            if (gen.YearVirtual)
                sb.Append("Year");
            if (gen.AddedVirtual)
                sb.Append("Added");
            if (gen.AddedVirtualSimu)
                sb.Append("AddedSimu");
            if (gen.WordVirtual)
                sb.Append("Word");
            if (gen.ListVirtual)
                sb.Append("List");
            if (gen.VirtualRoot)
                sb.Append("Root");
            sb.Append(FILE_ALBUMS); 
            return sb.ToString(); 
        }

        public void sortVirtual()
        {
            if (!CConf.ConfGen.AlbumVirtual)
                return;
            misc.log("sortVirtual");
            foreach (Album album in dict.Values)
            {
                if (album.Virtual)
                    album.sortVirtual();
            }


            var listAlbums = new List<Album>(dict.Values);
            listAlbums.Sort(new VirtualAlbumComparerForWrite());

            var settings = new XmlWriterSettings();
            settings.Indent = true;
            settings.Encoding = Encoding.UTF8;

            //using (StreamWriter sw = new StreamWriter(FILE_ALBUMS + ".tmp"))
            //{
            //    foreach (Album album in listAlbums)
            //    {
            //        if (!album.Virtual)
            //            continue;

            //        sw.Write(album.VirtualMode);
            //        sw.Write(SEP);

            //        sw.Write(album.Name);
            //        sw.Write(SEP);

            //        var list = album.RawList;
            //        list.Sort((x, y) => x.TrackNumber.CompareTo(y.TrackNumber));
            //        bool begin = false;
            //        foreach (Piece p in list)
            //        {
            //            if (begin)
            //                sw.Write(SEP_TRACK);
            //            else
            //                begin = true;
            //            sw.Write(p.MasterId);
            //        }
            //        sw.WriteLine();

            //    }

            //}
            var fileAlbum = getSortedAlbumFile(); 
            using (XmlWriter writer = XmlWriter.Create(fileAlbum + ".tmp", settings))
            {
                writer.WriteStartElement("albums");
                foreach (Album album in listAlbums)
                {
                    if (!album.Virtual)
                        continue;
                    writer.WriteStartElement("a");
                    writer.WriteAttributeString("mode", album.VirtualMode.ToString());
                    writer.WriteAttributeString("name", album.Name);
                    writer.WriteAttributeString("nb", album.Count.ToString());
                    var list = album.RawList;
                    list.Sort((x, y) => x.TrackNumber.CompareTo(y.TrackNumber));
                    bool begin = false;
                    var sb = new System.Text.StringBuilder();
                    foreach (Piece p in list)
                    {
                        if (begin)
                            sb.Append(SEP_TRACK);
                        else
                            begin = true;
                        sb.Append(p.MasterId);
                    }

                    writer.WriteString(sb.ToString());

                    //foreach (Piece p in list)
                    //{
                    //    writer.WriteElementString("t", p.MasterId.ToString());
                    //}
                    writer.WriteEndElement();
                }


                writer.WriteEndDocument();
                writer.Flush();
            }

            System.IO.File.Copy(fileAlbum + ".tmp", fileAlbum, true);

        }

        public int load(IDictionary<int, Piece> dict)
        {

            //using (StreamReader sr = new StreamReader(FILE_ALBUMS))
            //{

            //    var line = sr.ReadLine();
            //    var tabs = line.Split(SEP);
            //    int count = tabs.GetLength(0); 

            //    var name = tabs[1];
            //    var mode = (virtualMode)Enum.Parse(typeof(virtualMode), tabs[0], true);
            //    Album current = new Album(name, mode);
            //    this.dict.Add(current.Key, current);
            //    int tn = 0;
            //    var tracks = tabs[2].Split(SEP_TRACK);
            //    foreach (string sid in tracks)
            //    {
            //        tn++;
            //        var id = Convert.ToInt32(sid);
            //        Piece track = dict[id];
            //        VirtualAlbumPiece virt = VirtualAlbumPiece.getVirtual(track.Track, track, current.Name, current.VirtualMode);
            //        virt.TrackNumber = tn;
            //        current.add(virt);
            //    }


            //}
            int nbLoad = 0;
            var fileAlbum = getSortedAlbumFile(); 
            using (XmlReader reader = XmlReader.Create(fileAlbum))
            {
                Album current = null;

                while (reader.Read())
                {
                    if (reader.NodeType == XmlNodeType.Element)
                    {

                        if (reader.Name == "a")
                        {
                            var name = reader.GetAttribute("name");
                            var mode = (virtualMode)Enum.Parse(typeof(virtualMode), reader.GetAttribute("mode"), true);
                            current = new Album(name, mode);
                            int tn = 0;
                            this.dict.Add(current.Key, current);


                            var line = reader.ReadElementString();
                            foreach (string sid in line.Split(SEP_TRACK))
                            {
                                tn++;
                                var id = Convert.ToInt32(sid);
                                Piece track = dict[id];
                                var virt = new VirtualAlbumPieceLight(track.Track, track);
                                // VirtualAlbumPiece virt = VirtualAlbumPiece.getVirtual(track.Track, track, current.Name, current.VirtualMode);
                                virt.TrackNumber = tn;
                                current.add(virt);
                            }

                            nbLoad++;

                        }



                        //else if (reader.Name == "t")
                        //{
                        //    tn++;
                        //    var id = reader.ReadElementContentAsInt();
                        //    Piece track = dict[id];
                        //    VirtualAlbumPiece virt = VirtualAlbumPiece.getVirtual(track.Track, track, current.Name, current.VirtualMode);
                        //    virt.TrackNumber = tn;
                        //    current.add(virt);

                        //}

                    }
                }

            }
            return nbLoad;
        }

        //public void consolidChilds()
        //{
        //    misc.log("consolidChilds");
        //    foreach (Album album in dict.Values)
        //    {
        //        album.ConsolidChilds();
        //    }
        //}

        public bool check(Piece piece)
        {
            return check_(piece, dict);
        }

        //public void check(Piece piece)
        //{
        //    check_(piece, dict);
        //    foreach (Piece child in piece.Childs)
        //        check_(child, dict);
        //}

        public void checkVirtual(Piece piece, IDictionary<string, Album> dict)
        {
            if (piece.Virtual)
            {
                if (!check_(piece, dict))
                {
                }
                // piece.setParent(null);
            }

        }

        public Album getAlbum(Piece piece)
        {
            return piece.PieceAlbum;
            //string __album = "-";
            //var _album = piece.Album;
            //if (!string.IsNullOrEmpty(_album))
            //{
            //    __album = _album.Trim();
            //    return dict[__album];
            //}
            //return null;
        }

        public void buildStack(bool incrementStack)
        {
            // prise en compte de la stack
            var now = DateTime.Now;
            misc.log("stack.build();");
            var confSort = consolid.SortAlbumMode;
            int stackSize = confSort.stackSize;
            stack.Capacity = stackSize;
            Album.ConfAlbumSort = confSort;
            stack.Enabled = confSort.stackEnabled;
            stack.build(incrementStack);
            misc.log("buildStack; {0} ms", (DateTime.Now - now).TotalMilliseconds.ToString("0")); now = DateTime.Now;
        }

        // private Dictionary<string, Album> invalidated;
        public IDictionary<string, Album> GetAndInvalidateAlbums(Piece piece)
        {
            var invalidated = new Dictionary<string, Album>();
            foreach (Piece p in piece.Master)
            {
                var album = p.PieceAlbum;
                if (album == null)
                    continue;

                album.refreshLight();
                invalidated.Add(album.Key, album);
            }
            return invalidated;
        }

        /// <summary>
        /// On fait en premier le makesort de l'album qui a changé
        /// </summary>
        /// <param name="album"></param>
        public int makeSort(Piece piece, ILogger logger)
        {
            if (piece == null)
                return 0;
            int nb = 0;
            //var album = piece.PieceAlbum;
            //if (album == null)
            //    return;
            ConfMedianne confMedianne = null;
            var confSort = consolid.SortAlbumMode;
            foreach (var cmp in confSort.ComposantsUtiles)
            {
                if (cmp.type == medianneMode.light || confMedianne == null)
                    confMedianne = cmp;
            }

            var conf0 = new ConfMedianne(confMedianne, true);
            //var main = confMedianne.Main;
            //var coeffVirt = main.coeffVirt;
            //var safe = main.safe;
            //var coeffOld = main.CoeffOld;
            foreach (Piece p in piece.Master)
            {
                var album = p.PieceAlbum;
                if (album == null)
                    continue;
                goParallel = false;
                while (currentSorted == album)
                    Thread.Sleep(30);
                lock (album)
                {
                    album.refreshLight();
                    album.makeSort(confMedianne, conf0, logger, 0); //listRef, reference);                
                    nb++;
                    //  album.mustRefresh();
                    // pour futures mises au point avec la MAJ des classements( resetOneCl et Compact )
                    album.refreshLight();
                }
            }

            return nb;

        }

        /// <summary>
        /// On fait en premier le makesort de l'album qui a changé
        /// </summary>
        /// <param name="album"></param>
        public int makeSort(IEnumerable<Album> _albums, ILogger logger)
        {
            int nb = 0;
            ConfMedianne confMedianne = null;
            var confSort = consolid.SortAlbumMode;
            foreach (var cmp in confSort.ComposantsUtiles)
            {
                if (cmp.type == medianneMode.light || confMedianne == null)
                    confMedianne = cmp;
            }

            var conf0 = new ConfMedianne(confMedianne, true);
            //var main = confMedianne.Main;
            //var coeffVirt = main.coeffVirt;
            //var safe = main.safe;
            //var coeffOld = main.CoeffOld;
            foreach (Album album in _albums)
            {
                if (album == null)
                    continue;

                goParallel = false;
                while (currentSorted == album)
                    Thread.Sleep(30);
                lock (album)
                {
                    album.refreshLight();

                    album.makeSort(confMedianne, conf0, logger, 0); //listRef, reference); 
                }

                nb++;
                //  album.mustRefresh();
                // pour futures mises au point avec la MAJ des classements( resetOneCl et Compact )
                // album.refreshLight();
            }

            foreach (Album album in _albums)
            {
                if (album == null)
                    continue;
                album.refreshLight();
            }

            return nb;

        }

        // private int nbSort=1;
        //private bool urgence;
        //public void setUrgence() { urgence = true; }
        //public bool Urgence { get { return urgence; } } 
        public void makeSort(bool sortAll, IClient client, ILogger logger)
        {
            lock (_lockSort)
            {
                misc.log("albums.make sort");

                ///check to find first light
                ConfMedianne confMedianne = null;
                var confSort = consolid.SortAlbumMode;
                foreach (var cmp in confSort.ComposantsUtiles)
                {
                    if (cmp.type == medianneMode.light || confMedianne == null)
                        confMedianne = cmp;
                }

                var conf0 = new ConfMedianne(confMedianne, true);
                var main = confMedianne.Main;
                var min = confMedianne.Min;
                var mainCoeffVirt = main.coeffVirt;
                var mainCoeffOld = main.CoeffOld;

                var minCoeffVirt = min.coeffVirt;
                var minCoeffOld = min.CoeffOld;




                if (confSort.reset)
                {
                    main.coeffVirt = 1;
                    main.CoeffOld = 1;
                    min.coeffVirt = 1;
                    min.CoeffOld = 1;
                }

                List<Album> list = new List<Album>(dict.Values);
                List<Album> listw = list;
                HashSet<Album> hs = null;
                DateTime now = DateTime.Now;
                DateTime debut = now;

                bool partial = false;
#if GEN2
                partial = !sortAll && confSort.optimSize > 0 && consolid.Urgence;
#endif

                int step = 0;
                Album last = null;
                // int coeffSort = 1;

                while (true)
                {
                    step++;

                    if (partial)
                    {
                        //nbSort++;
                        //coeffSort = 1; 

                        //int _nbSort = nbSort;
                        //while (_nbSort >=2 && _nbSort % 2 == 0)
                        //{
                        //    coeffSort *= 2;
                        //    _nbSort /= 2; 
                        //}
                        hs = new HashSet<Album>();
                        list.Sort(new AlbumClassComparer2());
                        list.Reverse();
                        listw = new List<Album>();
                        decimal equivLightMax = 0;
                        decimal equivLightZeroMax = 0;
                        int nb = 0;
                        int max = step * confSort.optimSize; // *coeffSort;

                        foreach (Album a in list)
                        {
                            if (a.AtLeastOneEnabled)
                            {
                                nb++;
                                listw.Add(a);
                                hs.Add(a);

                                var _classementValueLight = a.ClassementValueLight;
                                if (_classementValueLight > equivLightMax)
                                {
                                    equivLightMax = _classementValueLight;
                                    last = a;
                                }

                                var _classementValueLightZero = a.ClassementValueLightZero;

                                if (_classementValueLightZero > equivLightZeroMax)
                                {
                                    equivLightZeroMax = _classementValueLightZero;
                                    last = a;
                                }

                                if (nb >= max)
                                    break;
                            }
                        }


                        var equivZeroVerif = equivLightZeroMax * pdb.util.Math.Pow(main.coeffVirt, main.safe) * pdb.util.Math.Pow(min.coeffVirt, min.safe) * main.CoeffOld * min.CoeffOld;
                        var dxMin = min.dcoeff;
                        var dxMain = pdb.util.Math.Pow(main.dcoeff, main.safe);
                        var equivVerif = equivLightMax * (dxMain * dxMin);

                        foreach (Album a in list)
                        {
                            if (a.AtLeastOneEnabled)
                            {
                                var _classementValueLight = a.ClassementValueLight;


                                if (_classementValueLight < equivVerif && _classementValueLight < equivZeroVerif)
                                {
                                    if (hs.Add(a))
                                    {
                                        listw.Add(a);
                                        if (_classementValueLight > equivLightMax)
                                        {
                                            equivLightMax = _classementValueLight;
                                            last = a;
                                        }

                                    }
                                }

                            }
                        }

                    }
                    if (!consolid.Urgence)
                    {
                        int nbSorted = 0;
                        //if (invalidated != null && invalidated.Count > 0)
                        //{
                        //    listw = new List<Album>(invalidated.Values);
                        //    invalidated = null;
                        //}
                        listw.Sort((x, y) => x.Count.CompareTo(y.Count));
                        foreach (Album album in listw)
                        {
                            if (client.Cancel)
                                return;

                            goParallel = false;
                            while (currentSorted == album)
                                Thread.Sleep(30);

                            if (album.makeSort(confMedianne, conf0, logger, 100)) //listRef, reference); 
                                nbSorted++;

                        }

                        string infoAlbum = "";
                        if (last != null)
                        {
                            infoAlbum = string.Format("last={0} {1} {2} {3}", last.Tracks[0].RankAlbumReverse, last.EquivLight0, last.EquivLight, last);
                        }
                        //   misc.log(string.Format("makeSort : nbSort={0} coeffSort={1} step={2}  {3} albums {4} ms {5}", nbSort, coeffSort, step, listw.Count, (DateTime.Now - now).TotalMilliseconds, infoAlbum));
                        misc.log(string.Format("makeSort : step={0}  {1}/{2} albums {3} ms {4}", step, nbSorted, listw.Count, (DateTime.Now - now).TotalMilliseconds, infoAlbum));
                        client.log(string.Format("album.makeSort {0} elt", nbSorted));
                    }
                    now = DateTime.Now;
                    //if (confSort.reset)
                    //{
                    main.coeffVirt = mainCoeffVirt;
                    main.CoeffOld = mainCoeffOld;
                    min.coeffVirt = minCoeffVirt;
                    min.CoeffOld = minCoeffOld;

                    // }


                    list.Sort(new AlbumClassComparer(consolid.SortAlbumMode, false, null));
                    misc.log("list.Sort(new AlbumClassComparer {0} ms", (DateTime.Now - now).TotalMilliseconds.ToString("0")); now = DateTime.Now;


                    list.Reverse();
                    misc.log("list.Reverse(); {0} ms", (DateTime.Now - now).TotalMilliseconds.ToString("0")); now = DateTime.Now;

                    client.log("AlbumClassComparer");

                    for (int i = 0; i < list.Count; i++)
                    {
                        var album = list[i];
                        if (album.AtLeastOneEnabled)
                            RankZero = i + 2;
                        album.Quality = i + 1;
                    }
                    client.log("album.Quality");
                    misc.log("album.Quality {0} ms", (DateTime.Now - now).TotalMilliseconds.ToString("0")); now = DateTime.Now;

                    if (!partial)
                        break;


                    list.Reverse();

                    int nbCheck = 0;
                    bool? check = null;
                    foreach (Album a in list)
                    {
                        if (!a.AtLeastOneEnabled)
                            continue;
                        if (hs.Contains(a))
                        {
                            nbCheck++;
                            if (nbCheck >= confSort.optimCheck) // * coeffSort)
                            {
                                check = true;
                                break;
                            }
                        }
                        else
                        {
                            check = false;
                            break;
                        }


                    }

                    if (check == null || check.Value)
                        break;

                }


                misc.log(string.Format("makeSort albums total : {0} ms", (DateTime.Now - debut).TotalMilliseconds));

                List<Album> listSt = null;
                List<Album> list0 = null;
                List<Album> listSt0 = null;


                if (confSort.sortSt || confSort.correcMainRank || confSort.correcMainCoeff || confSort.correcMainZero)
                {
                    listSt = new List<Album>(list);

                    listSt.Sort(new AlbumClassComparer(consolid.SortAlbumMode, true, null));
                    listSt.Reverse();
                    for (int i = 0; i < list.Count; i++)
                    {
                        listSt[i].RankSt = i + 1;
                    }
                    misc.log(string.Format("sort St : {0} ms", (DateTime.Now - now).TotalMilliseconds));
                }

                if (confSort.sort0)
                {
                    now = DateTime.Now;
                    list0 = new List<Album>(list);

                    list0.Sort(new AlbumClassComparer(consolid.SortAlbumMode, false, conf0));
                    list0.Reverse();
                    for (int i = 0; i < list0.Count; i++)
                    {
                        list0[i].RankZero = i + 1;
                    }
                    misc.log(string.Format("sort 0 : {0} ms", (DateTime.Now - now).TotalMilliseconds));
                }

                if (confSort.sortSt0 || confSort.correcMainRank)
                {
                    now = DateTime.Now;
                    listSt0 = new List<Album>(list);

                    listSt0.Sort(new AlbumClassComparer(consolid.SortAlbumMode, true, conf0));
                    listSt0.Reverse();
                    for (int i = 0; i < listSt0.Count; i++)
                    {
                        listSt0[i].RankZeroSt = i + 1;
                    }
                    misc.log(string.Format("sort St0 : {0} ms", (DateTime.Now - now).TotalMilliseconds));
                }

                client.log("tri pour faire joli");
#if GEN2
                if (confSort.correcMainRank)
                {
                    now = DateTime.Now;
                    var hsBefore = new HashSet<int>();
                    for (int i = list.Count - 1; i >= 0; i--)
                    {
                        Album un = listSt[i];
                        var unNext = un.Next;
                        if (unNext == null)
                            continue;
                        hsBefore.Add(unNext.MasterId);
                        if (un.DontTouchSelectedCoeff)
                            continue;
                        if (!confSort.dontTouchMain && un.SelectedCoeff > selectedCoeff.noCoeff || un.SelectedCoeff == selectedCoeff.min)
                        {
                            bool correc = true;
                            int nbTry = 0;
                            int nbMaxTry = confSort.correcMainZeroOptim;
                            if (nbMaxTry <= 0)
                                nbMaxTry = int.MaxValue;
                            var hsTestes = new HashSet<int>();
                            bool unClassementRecent = unNext.LastClassementRecent;
                            for (int j = i - 1; j >= 0; j--)
                            {
                                var o = listSt[j];
                                var onext = o.Next;
                                if (onext == null)
                                    continue;
                                if (onext.MasterId == unNext.MasterId)
                                    continue;
                                if (o.StackValue > 0)
                                    continue;
                                if (!hsTestes.Add(onext.MasterId))
                                    continue;
                                if (hsBefore.Contains(onext.MasterId))
                                    continue;

                                if (o.RankZero > un.RankZero)
                                {
                                    correc = false;
                                    break;
                                }


                                if (nbMaxTry == int.MaxValue)
                                    continue;



                                if (o.ClassementValueLightSt > un.ClassementValueLightZeroSt)
                                {
                                    nbTry++;
                                    if (nbTry > nbMaxTry)
                                        break;
                                }
                            }



                            if (true == correc)
                                un.InvalidateMain();
                            else
                            {
                            }

                        }



                    }



                    //now = DateTime.Now;
                    //for (int i = listSt.Count - 1; i >= 0; i--)
                    //{
                    //    Album un = listSt[i];
                    //    Album zero = listSt0[i];
                    //    if (un.DontTouchSelectedCoeff)
                    //        continue;
                    //    if (un == zero)
                    //        un.InvalidateMain();
                    //}
                    misc.log(string.Format("correcMainRank : {0} ms", (DateTime.Now - now).TotalMilliseconds));
                }

                if (confSort.correcMainCoeff)
                {
                    now = DateTime.Now;
                    for (int i = list.Count - 1; i >= 0; i--)
                    {
                        Album un = listSt[i];
                        if (un.DontTouchSelectedCoeff)
                            continue;
                        if (!confSort.dontTouchMain && un.SelectedCoeff > selectedCoeff.noCoeff || un.SelectedCoeff == selectedCoeff.min)
                        {
                            var next = un.Next;
                            if (next == null)
                                continue;
                            var coeff = next.CoeffVirtuel;
                            if (coeff == 1m)
                                continue;
                            var redresse = un.ClassementValueLightSt * coeff;
                            bool correc = false;
                            for (int j = i - 1; j >= 0; j--)
                            {
                                var o = listSt[j];
                                var onext = o.Next;
                                if (onext == null)
                                    continue;
                                if (onext.MasterId == next.MasterId)
                                    continue;
                                var cmp = o.ClassementValueLightSt;
                                if (cmp > redresse)
                                {
                                    correc = true;
                                    break;
                                }

                                if (cmp < redresse && o.SelectedCoeff == selectedCoeff.noCoeff)
                                {
                                    correc = false;
                                    break;
                                }

                                var coeff2 = onext.CoeffVirtuel;

                                var redresse2 = coeff2 * cmp;
                                if (redresse2 < redresse)
                                {
                                    correc = false;
                                    break;
                                }
                            }

                            if (correc)
                                un.InvalidateMain();

                        }
                    }
                    misc.log(string.Format("correcMainCoeff : {0} ms", (DateTime.Now - now).TotalMilliseconds));

                }
                if (confSort.correcMainZero)
                {
                    now = DateTime.Now;
                    var hsBefore = new HashSet<int>();
                    for (int i = list.Count - 1; i >= 0; i--)
                    {
                        Album un = listSt[i];
                        var unNext = un.Next;
                        if (unNext == null)
                            continue;
                        hsBefore.Add(unNext.MasterId);
                        if (un.DontTouchSelectedCoeff)
                            continue;
                        if (!confSort.dontTouchMain && un.SelectedCoeff > selectedCoeff.noCoeff || un.SelectedCoeff == selectedCoeff.min)
                        {




                            bool correc = true;
                            int nbTry = 0;
                            int nbMaxTry = confSort.correcMainZeroOptim;
                            if (nbMaxTry <= 0)
                                nbMaxTry = int.MaxValue;
                            var hsTestes = new HashSet<int>();
                            bool unClassementRecent = unNext.LastClassementRecent;
                            for (int j = i - 1; j >= 0; j--)
                            {
                                var o = listSt[j];
                                if (o.Name == "Ill Communication")
                                {
                                }
                                var onext = o.Next;
                                if (onext == null)
                                    continue;
                                if (onext.MasterId == unNext.MasterId)
                                    continue;
                                if (o.StackValue > 0)
                                    continue;
                                if (!hsTestes.Add(onext.MasterId))
                                    continue;
                                if (hsBefore.Contains(onext.MasterId))
                                    continue;


                                if (o.ClassementValueLightZeroSt < un.ClassementValueLightZeroSt)
                                {
                                    if (o.RankZero > un.RankZero)
                                    {
                                        correc = false;
                                        break;
                                    }
                                }

                                if (!unClassementRecent)
                                {
                                    if (o.ClassementValueLightZeroSt == un.ClassementValueLightZeroSt)
                                    {
                                        if (confSort.correcMainZeroCheckEquality)
                                        {
                                            if (onext.LastClassementRecent)
                                            {
                                                if (o.RankZero > un.RankZero)
                                                {
                                                    correc = false;
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                }


                                if (nbMaxTry == int.MaxValue)
                                    continue;



                                if (o.ClassementValueLightSt > un.ClassementValueLightZeroSt)
                                {
                                    nbTry++;
                                    if (nbTry > nbMaxTry)
                                        break;
                                }


                                //if (o.ClassementValueLightSt > un.ClassementValueLightZeroSt)
                                //    break;
                                // }



                                //if (o.RankSt <= un.RankSt)
                                //{
                                //    if (o.RankZeroSt > un.RankZeroSt)
                                //    {
                                //        correc = false;
                                //        break;
                                //    }

                                //    if (o.ClassementValueLightSt > un.ClassementValueLightZeroSt)
                                //        break;
                                //}

                            }



                            if (true == correc)
                                un.InvalidateMain();
                            else
                            {
                            }

                        }



                    }


                    misc.log(string.Format("correcMainZero : {0} ms", (DateTime.Now - now).TotalMilliseconds));
                }

#endif


                //var listStack = stack.Albums;
                //foreach (Album s in listStack)
                //{
                //    string key = getKey(s.Name);
                //    var alb = dict[key];
                //    stack.merge(s, alb);
                //}
                //list.Sort(new AlbumClassComparerStack());
                //for (int i = 0; i < list.Count; i++)
                //{
                //    list[i].Rank2 = i + 1; 
                //}
                var limit = CConf.ConfGen.LimitAlbums;
                if (limit > 0)
                {
                    var l = new List<Album>();
                    list.Sort(new AlbumClassComparer2());
                    for (int i = 0; i < list.Count; i++)
                    {
                        var album = list[i];
                        if (i < limit)
                        {
                            l.Add(album);
                            album.ConsolidChilds();
                            album.sortVirtual();
                        }
                        else
                        {
                            album.ClearAndMenage();
                            dict.Remove(album.Key);
                        }
                    }
                    list = l;

                }

                misc.log(string.Format("makeSort total : {0} ms", (DateTime.Now - debut).TotalMilliseconds));
            }
        }

        public List<Album> makeSelection()
        {
            misc.log("albums.makeSelection");
            var now = DateTime.Now;
            var list = new List<Album>(dict.Values);

            //var confGen = CConf.ConfGen;
            //var min1 = confGen.AlbumMin;
            //var min2 = confGen.PathVirtualMin;
            //var min3 = confGen.AristVirtualMin;
            //foreach (Album album in dict.Values)
            //{
            //    int count = album.Count;
            //    bool toKeep = true;


            //    if (album.Virtual)
            //    {
            //        if (album.VirtualByArtist)
            //        {
            //            if (min3 > 1 && count < min3)
            //                toKeep = false;
            //        }
            //        else if (min2 > 1 && count < min2)
            //            toKeep = false;
            //    }
            //    else if (min1 > 1 && count < min1)
            //        toKeep = false;



            //    if (!toKeep)
            //    {
            //        misc.log("mise au rencard de {0} {1}", album.Name, (count > 0 ? "" : count.ToString() + " éléments"));
            //    }
            //    else
            //        list.Add(album);

            //}

            foreach (Album album in list)
            {
                album.makeSelection();
            }
            //list.Sort(new AlbumRestComparer());
            //for (int i = 0; i < list.Count; i++)
            //{
            //    list[i].Rank.RankRest = i + 1;
            //}

            misc.log(string.Format("make selection : {0} ms", (DateTime.Now - now).TotalMilliseconds));
            return list;
        }

        //public void changeAlbum(Piece p, string newA)
        //{
        //    var currentAlb = dict[getKey(p.Album, false)];
        //    if (currentAlb != null)
        //        currentAlb.mustRefresh();
        //    check_(p, newA, false, this.dict);
        //    var newAlb = dict[getKey(newA, false)];
        //    if (newAlb != null)
        //        newAlb.mustRefresh();
        //    p.albumMustRefresh();

        //    //  invalidate(p); 
        //}

        //public void changeArtist(Piece p, string newA)
        //{
        //    var currentAlb = dict[getKey(p.Artist, true)];
        //    if (currentAlb != null)
        //        currentAlb.mustRefresh();

        //    check_(p, newA, true, this.dict);
        //    var newAlb = dict[getKey(newA, true)];
        //    if (newAlb != null)
        //        newAlb.mustRefresh();
        //    p.albumMustRefresh();
        //}

        public void checkVirtuals(IEnumerable<Album> candidats, List<Piece> list)
        {
            foreach (Album candidat in candidats)
            {
                //if (candidat.VirtualMode == virtualMode.added)
                //{
                //    if (candidat.Name=="09/1012")
                //    {

                //    }
                //    if (candidat.Name =="22/09/2012")
                //    {

                //    }
                //}
                bool found = false;

                foreach (Piece p in candidat)
                {
                    var master = p.Master.PieceAlbum;
                    if (master.isSameOf(candidat))
                    {
                        found = true;
                        break;
                    }
                }
                if (!found)
                {
                    foreach (Album album in dict.Values)
                    {
                        if (album.isSameOf(candidat))
                        {
                            found = true;
                            break;
                        }
                    }
                }

                if (found)
                {
                    // on ne le prend pas (car identique à un existant)
                    // on n'oublie pas de supprimer les fils
                    candidat.ClearAndMenage();
                }
                else
                {
                    // on le prend.
                    string key = getKey(candidat.Name, candidat.VirtualMode);
                    //if (!dict0.ContainsKey(key))
                    //    dict0.Add(key, candidat);
                    dict.Add(key, candidat);
                    foreach (Piece p in candidat)
                    {
                        //   p.consolidChild();
                        list.Add(p);
                    }
                }
            }
        }


        public List<Album> RawList
        {
            get
            {
                return new List<Album>(dict.Values);
            }
        }

        public List<Album> List
        {
            get
            {
                var list = new List<Album>();
                foreach (Album album in dict.Values)
                    list.Add(album);
                list.Sort(new AlbumNameComparer());
                return list;
            }
        }
        //public List<Album> ListByUpdate
        //{
        //    get
        //    {
        //        var list = new List<Album>();
        //        foreach (Album album in dict.Values)
        //            list.Add(album);
        //        list.Sort(new AlbumLastModifClassementComparer());

        //        return list;
        //    }
        //}

        public void signalClassChange(Piece track)
        {
            track.albumMustRefresh();
            //var album = getAlbum(track);
            //if (album == null)
            //    return;
            //album.mustRefresh();

            //var master = track.Piece.Master;
            //master.PieceAlbum.mustRefresh();
            //foreach (Piece child in master)
            //    child.PieceAlbum.mustRefresh();
            stack.Add(track);

        }


        private bool goParallel;
        public void parallelSort()
        {
            goParallel = true;
        }
        public void endParallelSort()
        {
            goParallel = false;
        }
        private void loop()
        {
            while (true)
            {

                currentSorted = null;
                Thread.Sleep(3000);
                if (!goParallel)
                    continue;
                var list = new List<Album>(dict.Values);
                if (!goParallel)
                {
                    logScan.log("arret list = new List<Album>(dict.Values) ");
                    continue;
                }
                list.Sort((x, y) => (x.MajDate.CompareTo(y.MajDate)));
                if (!goParallel)
                {
                    logScan.log("arret list.Sort((x, y) => (x.MajDate.CompareTo(y.MajDate)));");
                    continue;
                }
                ConfMedianne confMedianne = null;
                var confSort = consolid.SortAlbumMode;
                foreach (var cmp in confSort.ComposantsUtiles)
                {
                    if (cmp.type == medianneMode.light || confMedianne == null)
                        confMedianne = cmp;
                }
                var conf0 = new ConfMedianne(confMedianne, true);
                if (!goParallel)
                {
                    logScan.log("arret confMedianne;");
                    continue;
                }


                foreach (Album album in list)
                {
                    if (!goParallel)
                    {
                        logScan.log("arret avant album " + album);
                        break;
                    }

                    lock (album)
                    {
                        if (!goParallel)
                        {
                            logScan.log("arret sur lock album " + album);
                            break;
                        }
                        currentSorted = album;
                        album.mustRefresh();
                        album.makeSort(confMedianne, conf0, logScan, 100);
                    }
                }
                if (goParallel)
                {
                    logScan.log("fin sans interruption");
                    goParallel = false;
                }
            }
        }

        #region invalider


        public void invalidateAll(bool total)
        {
            foreach (var a in dict.Values)
            {
                if (total)
                    a.mustRefresh();
                else
                    a.refreshLight();
            }
        }
        //public void invalidate(Piece piece)
        //{
        //    foreach (var p in piece.Master)
        //    {
        //        var key = getKey(p.Album, p.VirtualByArtist);
        //        var a = dict[key];
        //        if (a == null)
        //        {
        //        }
        //        else
        //            a.invalidate();
        //        //if (p.Virtual)
        //        //    continue; 
        //        ////1. check standard
        //        //var key = getKey(p.Album, false);
        //        //var a = dict[key];
        //        //if (a == null)
        //        //{
        //        //}
        //        //else
        //        //    a.invalidate(); 
        //        ////2. check artiste
        //        //key = getKey(p.Artist, true);
        //        //a = dict[key];
        //        //if (a == null)
        //        //{
        //        //}
        //        //else
        //        //    a.invalidate(); 

        //        ////3. check paths
        //        //foreach (string path in p.getIntermediaryPath())
        //        //{
        //        //    key = getKey(path, false);
        //        //    a = dict[key];
        //        //    if (a == null)
        //        //    {
        //        //    }
        //        //    else
        //        //        a.invalidate(); 
        //        //}
        //    }
        //}
        #endregion





    }
}
]]></content>
  </file>
</db>
