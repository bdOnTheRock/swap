<db path="C:\Bernard\db1\PieceDb3Ref">
  <file path="\pdb.podcast\Auto\AutoBuilder.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;
using pdb.podcast.Delta;
using pdb.podcast.Tuning;
using pdb.podcast.Report;
namespace pdb.podcast.Auto
{

    enum builderstate
    {
        none,
        enCours,
        stable
    }
    class AutoBuilder : IComparable<AutoBuilder>, IBorderTransmit
    {
        const char SEP = '\t';
        const string DAT = @"..\Data\";
        string file = "";
        private bool mustUpdate; public static bool MustUpdate = false;
        private double total = -1;
        private double delta;
        private double lastd;
        private double d;
        private double org;
        private double newv;
        private bool canGo;
        //private int lastGoodDelta;
        //private double lastGoodLevel;
        private int lastTotal;
        private int atomicMode;
        private int sameConfiguration;
        private double cmin;
        private double cmax;
        private double dmin;
        private double dmax;
        public const double EPSILON = 1e-10;
        //private bool dminAlready;
        //private bool dmaxAlready;
        private string _empreinte = "";
        private double delta0 = 0;
        private Memory mem0;
        private Memory mem1;
        private Memory minMem;
        private Memory maxMem;
        private StringBuilder sb = new StringBuilder();
        // private static DateTime lastModif;
        private pdb.podcast.Tuning.Auto conf;
        private static List<AutoBuilder> list = new List<AutoBuilder>();
        private static int index;
        private IBuilderSource source; public IBuilderSource Source { get { return source; } }

        private LimitItemBase client;
        private static XmlElement xmlRoot;
        private static XmlDocument doc;
        private static bool started = false;
        private string name = "";
        private builderstate state;
        private int naturalOrder = 1;
        private List<AutoBuilderItem> items = new List<AutoBuilderItem>();
        private AutoBuilderItem choose;

     

        private AutoBuilder(pdb.podcast.Tuning.Auto conf)
        {
            this.conf = conf;
            this.name = conf.name;
            mem0 = new Memory(DAT + "v." + conf.name + ".db.txt");
            mem1 = new Memory(DAT + "r." + conf.name + ".db.txt");
            this.file = DAT + "auto." + conf.name + ".log";
            foreach (pdb.podcast.Tuning.Auto sub in conf.items)
            {
                var item = new AutoBuilderItem(sub);
                items.Add(item);
            }
        }
        private void setConf(pdb.podcast.Tuning.Auto value)
        {

            conf = value;
            for (int i = 0; i < items.Count && i < conf.items.Count; i++)
            {
                items[i].setConf(conf.items[i]);
            }

        }

        private void setSource(IBuilderSource source)
        {
            this.source = source;
            source.addBorderObs(this);
        }
        private static AutoBuilder main;
        public static void build(XmlNode xAuto, IBuilderSource source)
        {
            if (xAuto is XmlElement)
            {
                var conf = new pdb.podcast.Tuning.Auto(null, null, xAuto as XmlElement);
                var name = conf.name;
                AutoBuilder builder = list.Find(a => a.name == name);
                if (builder == null)
                {
                    builder = new AutoBuilder(conf);
                    list.Add(builder);
                    builder.naturalOrder = list.Count;
                    index = list.Count - 1;
                    if (main == null)
                        main = builder;
                }
                builder.setConf(conf);
                builder.setSource(source);

            }
        }
        public static void setClient(LimitItemBase client, XmlNode node)
        {
            var att = node.Attributes["auto"];
            if (att == null)
                return ;
            var name = att.Value;
            AutoBuilder builder = list.Find(a => a.name == name);
            if (builder == null)
                return;
            builder.client = client; 

        }
        private void makeDelta(Memory mem, string mode, string file)
        {
            if (!File.Exists(file))
                File.WriteAllText(file, "quand\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tstate\tAdd\tiAdd\ttSupp\tiSup\t\r\n");
            mem.load();
            var listSe = source.getSelectedTracks();
            if (mem.Loaded)
            {
                var auxDixt = new pdb.util.BgDictString<TrackInfoItunes>(); // BgDictString<string, TrackInfoItunes>();
                foreach (TrackInfoItunes s in listSe)
                {
                    var key = s.Location;
                    auxDixt[key] = s;
                    if (!mem.dict.ContainsKey(key))
                    {
                        var desc = new TrackItemdesc(s.ToString(), s.GetProvider());
                        string line = desc.ToString();
                        mem.ajouts.Add(desc);
                        sb.AppendLine(string.Format("{0} delta {1} ajouté {2}", name, mode, line));
                    }
                }
                foreach (string key in mem.dict.Keys)
                {
                    if (!auxDixt.ContainsKey(key))
                    {
                        var line = mem.dict[key];
                        mem.suppressions.Add(line);
                        sb.AppendLine(string.Format("{0} delta {1} supprimé {2}", name, mode, line));
                    }
                }
                if (mem.ajouts.Count > 0 || mem.suppressions.Count > 0)
                {
                    int imax = Math.Max(mem.ajouts.Count, mem.suppressions.Count);
                    using (TextWriter tw = new StreamWriter(file, true, Encoding.UTF8))
                    {
                        //if (!exist)
                        //    tw.WriteLine("quand\tdiff\tcorr\torg\tnew\tAdd\tiAdd\ttSupp\tiSup");
                        tw.Write(DateTime.Now); tw.Write(SEP);
                        tw.Write((delta).ToString("0.###")); tw.Write(SEP);
                        tw.Write(d.ToString("0.###")); tw.Write(SEP);
                        tw.Write(org.ToString("0.###")); tw.Write(SEP);
                        tw.Write(newv.ToString("0.###")); tw.Write(SEP);
                        tw.Write(cmin.ToString("0.###")); tw.Write(SEP);
                        tw.Write(cmax.ToString("0.###")); tw.Write(SEP);
                        tw.Write(dmin.ToString("0.###")); tw.Write(SEP);
                        tw.Write(dmax.ToString("0.###")); tw.Write(SEP);
                        tw.Write(atomicMode); tw.Write(SEP);
                        tw.Write(state); tw.Write(SEP);
                        for (int i = 0; i < imax; i++)
                        {
                            if (i > 0)
                            {
                                tw.WriteLine();
                                for (int j = 0; j < 11; j++)
                                    tw.Write(SEP);
                            }
                            if (i < mem.ajouts.Count)
                                tw.Write(mem.ajouts[i].track);
                            tw.Write(SEP);
                            if (i < mem.ajouts.Count)
                                tw.Write(mem.ajouts[i].item);
                            tw.Write(SEP);
                            if (i < mem.suppressions.Count)
                                tw.Write(mem.suppressions[i].track);
                            tw.Write(SEP);
                            if (i < mem.suppressions.Count)
                                tw.Write(mem.suppressions[i].item);
                            tw.Write(SEP);
                        }
                        tw.WriteLine();
                    }
                }
            }
            mem.save(listSe);
        }
        private void reset()
        {
            atomicMode = -1;
            cmin = 0;
            cmax = int.MaxValue;
            dmin = int.MaxValue;
            dmax = -dmin;
            //dminAlready = false;
            //dmaxAlready = false;
            minMem = null;
            maxMem = null;
            sameConfiguration = 0;
            _empreinte = "";
            delta0 = 0;
            state = builderstate.none;
        }
        private static void decrementIndex()
        {
            index--;
            if (index < 0)
                index = list.Count - 1;
        }
        //  private bool _modifFile; 

        public static bool Stable
        {
            get
            {

                foreach (AutoBuilder builder in list)
                    if (builder.state != builderstate.stable)
                        return false;
                return true;
            }
        }

        public static void init()
        {
            if (list.Count == 0)
                return;
            list.Sort();
            FileInfo f = Conf.Instance.ConfFile;
            doc = new XmlDocument();
            doc.PreserveWhitespace = true;
            doc.Load(f.FullName);
            xmlRoot = doc.DocumentElement.SelectSingleNode("./dir") as XmlElement;

            bool _modifFIle = false;
            foreach (AutoBuilder builder in list)
            {
                builder.setValueOrg();
                if (builder.ToSave())
                    _modifFIle = true;
            }

            if (_modifFIle)
            {
                f.CopyTo(f.FullName + ".sov", true);
                doc.Save(f.FullName);
            }
        }

        private bool ToSave()
        {
            foreach (AutoBuilderItem item in items)
            {
                if (item.ToSave)
                    return true;
            }
            return false;
        }

        public void setValueOrg()
        {

            xml = null;
            lookup(xmlRoot);
            if (xml == null)
                return;
            foreach (AutoBuilderItem item in items)
                item.setOrg(xml);
        }
        public static bool Check(Feeds feeds)
        {
            if (list.Count == 0)
                return true;
            list.Sort();
            FileInfo f = Conf.Instance.ConfFile;

            bool _cango = true;
            MustUpdate = false;
            bool _modifFile = false;
            if (Conf.AutoSequence)
            {
                int i = -1;
                for (i = list.Count - 1; i >= 0; i--)
                {
                    var builder = list[i];
                    main = builder;
                    var cango = builder.check2();
                    if (!cango)
                        _cango = false;
                    if (builder.mustUpdate)
                        MustUpdate = true;
                    if (builder.newv != builder.org || builder.ToSave())
                    {
                        _modifFile = true;
                    }
                    if (!cango || MustUpdate || _modifFile)
                        break;
                }
                if (i > 0)
                    _cango = false;
            }
            else
            {
                AutoBuilder builder = null;
                if (!started)
                {
                    started = true;
                    foreach (AutoBuilder b in list)
                        b.total = b.source.getTotalSize();
                }
                // application de la précédente modif
                builder = list[index];
                if (builder.state > builderstate.none)
                {
                    builder.makeEmpreinteNonSequence();
                    decrementIndex();
                }
                int i = -1;
                for (i = list.Count - 1; i >= 0; i--)
                {
                    builder = list[i];
                    bool cango = false;
                    bool _cont = false;
                    while (true)
                    {
                        if (i == index || _cont)
                        {
                            cango = builder.check();
                            index = i;
                            main = builder;
                            _cont = false;
                            break;
                        }
                        else
                            cango = builder.checkWithoutModify();
                        if (builder.state == builderstate.none)
                            _cont = true;
                        else
                            break;
                    }
                    if (!cango)
                        _cango = false;
                    if (builder.mustUpdate)
                        MustUpdate = true;
                    if (i == index)
                    {
                        if (builder.newv != builder.org)
                        {
                            _modifFile = true;
                        }
                        else
                        {
                            //index--;
                            //if (index < 0)
                            //    index = list.Count - 1;
                        }
                    }
                    if (_modifFile)
                        break;
                }
            }
            if (_modifFile)
            {
                f.CopyTo(f.FullName + ".sov", true);
                doc.Save(f.FullName);
            }

            foreach (AutoBuilder builder in list)
            {
                if (builder.state == builderstate.none)
                    _cango = false;
            }
            return _cango;
        }


        private void log(string txt)
        {
            Program.log.log(string.Format("{0}", txt));
        }
        private void log(string txt, params object[] args)
        {
            string _txt = string.Format(txt, args);
            log(_txt);
        }
        private void makeEmpreinteNonSequence()
        {
            var newEmpreinte = source.getEmpreinte();
            if (state == builderstate.stable)
            {
                if (newEmpreinte != _empreinte)
                    reset();
            }
            _empreinte = newEmpreinte;
            total = source.getTotalSize();
        }
        private bool checkWithoutModify()
        {
            mustUpdate = false;
            canGo = false;
            var newEmpreinte = source.getEmpreinte();
            try
            {
                if (state == builderstate.stable)
                {
                    if (newEmpreinte != _empreinte)
                        reset();
                    else
                    {
                        mustUpdate = false;
                        canGo = true;
                        org = newv;
                        return true;
                    }
                }
                else
                {
                    if (newEmpreinte != _empreinte)
                        reset();
                }
                if (Conf.AutoSequence || total < 0)
                    total = source.getTotalSize();
                double target = conf.target;
                delta = target - total;
                if (delta >= 0)
                {
                    if (delta < conf.write)
                        canGo = true;
                    if (delta < conf.delta)
                    {
                        state = builderstate.stable;
                        _empreinte = newEmpreinte;
                        return true;
                    }
                    mustUpdate = true;
                }
                else if (delta < 0)
                {
                    mustUpdate = true;
                    canGo = false;
                }
            }
            finally
            {
                if (state == builderstate.stable)
                {
                    mustUpdate = false;
                    _empreinte = newEmpreinte;
                    canGo = true;
                }
            }
            return canGo;
        }
        private bool check()
        {
            sb = new StringBuilder();
            sb.AppendLine();
            makeDelta(mem0, "virtuel", DAT + "vhisto." + conf.name + ".txt");
            mustUpdate = false;
            canGo = false;
            var newEmpreinte = source.getEmpreinte();
            if (state == builderstate.none)
                reset();
            else if (state == builderstate.stable)
            {
                if (newEmpreinte != _empreinte)
                    reset();
                else
                {
                    mustUpdate = false;
                    canGo = true;
                    org = newv;
                    return true;
                }
            }
            if (Conf.AutoSequence || total < 0)
                total = source.getTotalSize();
            double target = conf.target;
            delta = target - total;
            log("delta {0}", delta);
            if (state == builderstate.none)
                delta0 = delta;
            state = builderstate.enCours;
            lastd = d;
            d = 0;
            xml = null;
            lookup(xmlRoot);
            if (xml == null)
                return true;
            string attTarget = conf.type.ToString();
            var att = xml.Attributes[attTarget];
            if (att == null)
                return true;
            org = Convert.ToDouble(att.Value);
            newv = org;
            try
            {
                if (delta * delta0 < 0)
                {
                    if (atomicMode < 0)
                    {
                        atomicMode = 0;
                        //if (minMem == null)
                        //    minMem = new Memory(mem0);
                        //if (maxMem == null)
                        //    maxMem = new Memory(mem0);
                        //if (minMem.suppressions.Count == 0)
                        //    minMem.suppressions = new List<TrackItemdesc>(maxMem.ajouts);
                        //if (maxMem.ajouts.Count == 0)
                        //    maxMem.ajouts = new List<TrackItemdesc>(minMem.suppressions);
                    }
                }
                bool cancelSameConf = false;
                bool cancelNb = false;
                if (atomicMode >= 0)
                {
                    atomicMode++;
                    if (Math.Abs(dmin - delta) < EPSILON)
                        sameConfiguration++;
                    else if (Math.Abs(dmax - delta) < EPSILON)
                        sameConfiguration++;
                    else
                        sameConfiguration = 0;
                    if (sameConfiguration > conf.idem)
                        cancelSameConf = true;
                    if (atomicMode > conf.cloop)
                        cancelNb = true;
                }
                if (delta >= 0)
                {
                    if (mem0.suppressions.Count > 0)
                        minMem = new Memory(mem0);
                    if (delta < conf.write)
                        canGo = true;
                    //  lastGoodLevel = org;
                    //if (maxMem != null && minMem != null)
                    //{
                    if (atomicMode > 0)
                    {
                        if (cancelSameConf) //|| (mem0.suppressions.Count == 1 && mem0.ajouts.Count ==0))
                        {
                            log("abandon recherche cartésienne cause idem");
                            state = builderstate.stable;
                            return true;
                        }
                        else if (cancelNb)
                        {
                            log("abandon recherche cartésienne cause cloop");
                            state = builderstate.stable;
                            return true;
                        }
                        //if (Math.Abs(dmin - delta) < 0.01)
                        //    dminAlready = true;
                        //else
                        //    dminAlready = false;
                        if (maxMem != null && minMem != null)
                        {
                            if (minMem.suppressions.Count == maxMem.ajouts.Count)
                            {
                                bool identique = true;
                                for (int i = 0; i < minMem.suppressions.Count; i++)
                                {
                                    if (!minMem.suppressions[i].Equals(maxMem.ajouts[i]))
                                    {
                                        identique = false;
                                        break;
                                    }
                                }
                                if (identique)
                                {
                                    if (minMem.suppressions.Count == 1 || atomicMode > conf.verif)
                                    {
                                        mustUpdate = false;
                                        log("abandon recherche cartésienne cause cycle");
                                        state = builderstate.stable;
                                        _empreinte = newEmpreinte;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                    cmin = org;
                    dmin = delta;
                    // lastGoodDelta = (int)delta;
                    lastTotal = (int)total;
                    if (delta < conf.delta)
                    {
                        state = builderstate.stable;
                        _empreinte = newEmpreinte;
                        return true;
                    }
                    mustUpdate = true;
                    d = 0;
                    if (atomicMode > 0)
                    {
                        //if (atomicMode > conf.cloop)
                        //{
                        //    mustUpdate = false;
                        //    log("abandon recherche cartésienne cause cloop");
                        //    state = builderstate.stable;
                        //    _empreinte = newEmpreinte;
                        //    return true;
                        //}
                        //if (dminAlready && dmaxAlready)
                        //{
                        //    mustUpdate = false;
                        //    Program.log.log("abandon recherche cartésienne cause cycle");
                        //    return true;
                        //}
                        d = 0.5 * (cmax - cmin);
                    }
                    else
                    {
                        double _d = int.MaxValue;
                        if (cmax >= 0 && cmin >= 0)
                            _d = cmax - cmin;
                        double aux = int.MaxValue;
                        // double aux2 = int.MaxValue;
                        foreach (Level level in conf.levels)
                        {
                            aux = (delta - level.d) * level.inf;
                            if (aux > d)
                                d = aux;
                        }
                        if (conf.coeff > 0)
                        {

                            if (org > conf.max)
                                d = conf.max - org;
                            else
                            {
                                d *= conf.coeff * (conf.max - org) / (conf.max - conf.min);
                            }
                            //else
                            //{
                            //    var de = Math.Abs(delta);
                            //    aux2 = de / (target + de) * (conf.max - org) * conf.coeff;
                            //}
                        }

                        //if (d == 0 || aux2 < d)
                        //    d = aux2;

                        if (d > _d)
                            d = _d;
                    }
                }
                else if (delta < 0)
                {
                    if (mem0.ajouts.Count > 0)
                        maxMem = new Memory(mem0);
                    mustUpdate = true;
                    canGo = false;
                    //if (maxMem != null && minMem != null)
                    //{
                    //    if (atomicMode < 0)
                    //        atomicMode = 0;
                    //    atomicMode++;
                    //}
                    cmax = org;
                    dmax = delta;
                    d = 0;
                    if (atomicMode > 0)
                    {
                        bool identique = false;
                        if (minMem != null && maxMem != null
                            && maxMem.ajouts.Count == minMem.suppressions.Count)
                        {
                            identique = true;
                            for (int i = 0; i < minMem.suppressions.Count; i++)
                            {
                                if (!minMem.suppressions[i].Equals(maxMem.ajouts[i]))
                                {
                                    identique = false;
                                    break;
                                }
                            }
                        }
                        if (cancelSameConf)// || (mem0.ajouts.Count == 1 && mem0.suppressions.Count == 0))
                        {
                            log("retour derniere bonne valeur cause idem");
                            d = cmin - cmax;
                        }
                        else if (cancelNb)
                        {
                            log("abandon recherche cartésienne cause cloop");
                            d = cmin - cmax;
                        }
                        else if (identique && (minMem.suppressions.Count == 1 || atomicMode > conf.verif))
                        {
                            log("retour derniere bonne valeur cause cycle");
                            d = cmin - cmax;
                        }
                        //else if (atomicMode > conf.cloop)
                        //{                      
                        //    log("abandon recherche cartésienne cause cloop");
                        //    d = cmin - cmax;
                        //}
                        else
                            d = 0.5 * (cmin - cmax);
                    }
                    else
                    {

                        double _d = -int.MaxValue;
                        if (cmax >= 0 && cmin >= 0)
                            _d = cmin - cmax;
                        double aux = -int.MaxValue;
                        // double aux2 = -int.MaxValue;
                        foreach (Level level in conf.levels)
                        {
                            aux = (delta - conf.delta + level.d) * level.sup;
                            if (aux < d)
                                d = aux;
                        }
                        if (conf.coeff > 0)
                        {
                            if (org < conf.min)
                                d = (conf.min - org);
                            else
                            {
                                d *= conf.coeff * (org - conf.min) / (conf.max - conf.min);
                            }
                            //else
                            //{
                            //    var de = Math.Abs(delta);
                            //    aux2 = de / (target+de) * (conf.min - org) * conf.coeff;
                            //}
                        }

                        //if (d == 0 || aux2 > d)
                        //    d = aux2;

                        if (d < _d)
                            d = _d;
                    }
                    //d = (delta - conf.delta) * conf.sup;
                    //if (org <= lastGoodLevel)
                    //{
                    //    lastGoodLevel = -1;
                    //    lastGoodDelta = -1;
                    //    lastTotal = -1;
                    //}
                }
                if (Math.Abs(d) < 0.00000001)
                {
                    mustUpdate = false;
                    // unCart();
                    state = builderstate.stable;
                    _empreinte = newEmpreinte;
                    return true;
                }
                //if (dejaVu)
                //    Program.log.log("déjà vu lastGoodLevel:{0} lastGoodDelta:{1}", lastGoodLevel, lastGoodDelta);
                log("correction {0}", d);
                newv = org + d;
                if (newv <= 0)
                    newv = 0;
                if (conf.coeff > 0)
                {
                    if (newv > conf.max)
                        newv = conf.max;
                    else if (newv < conf.min)
                        newv = conf.min;
                }
                newv = Math.Round(newv, 8);
                log(" valeur {0} --> {1}", org, newv);
                att.Value = newv.ToString();
            }
            finally
            {
                if (state == builderstate.stable)
                {
                    mustUpdate = false;
                    _empreinte = newEmpreinte;
                    canGo = true;
                }
                string strDate = "";
                var attD = xml.Attributes["date"];
                if (attD != null)
                    strDate = attD.Value;
                bool exist = File.Exists(file);
                using (TextWriter tw = new StreamWriter(file, true, Encoding.UTF8))
                {
                    // "quand\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tAdd\tiAdd\ttSupp\tiSup\tstate\t\r\n");
                    if (!exist)
                        tw.WriteLine("quand\ttarget\tdelta\tinf\tsup\ttotal\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tstate");
                    tw.Write(DateTime.Now); tw.Write(SEP);
                    tw.Write(target.ToString("0.###")); tw.Write(SEP);
                    tw.Write(conf.delta.ToString("0.###")); tw.Write(SEP);
                    if (conf.levels.Count > 0) tw.Write(conf.levels[0].inf.ToString("0.###")); else tw.Write(""); tw.Write(SEP);
                    if (conf.levels.Count > 0) tw.Write(conf.levels[0].sup.ToString("0.###")); else tw.Write(""); tw.Write(SEP);
                    tw.Write(total.ToString("0.###")); tw.Write(SEP);
                    tw.Write((-delta).ToString("0.###")); tw.Write(SEP);
                    tw.Write(d.ToString("0.###")); tw.Write(SEP);
                    tw.Write(org.ToString("0.###")); tw.Write(SEP);
                    tw.Write(newv.ToString("0.###")); tw.Write(SEP);
                    tw.Write(cmin.ToString("0.###")); tw.Write(SEP);
                    tw.Write(cmax.ToString("0.###")); tw.Write(SEP);
                    tw.Write(dmin.ToString("0.###")); tw.Write(SEP);
                    tw.Write(dmax.ToString("0.###")); tw.Write(SEP);
                    tw.Write(atomicMode); tw.Write(SEP);
                    tw.Write(state); tw.Write(SEP);
                    tw.WriteLine();
                }
                if (canGo)
                    // makeDelta(mem1, "reel", @"..\rhisto.txt");
                    makeDelta(mem1, "reel", DAT + "rhisto." + conf.name + ".txt");
            }
            return canGo;
        }

        private bool check2()
        {
            // _modifFile = false; 
            sb = new StringBuilder();
            sb.AppendLine();
            makeDelta(mem0, "virtuel", DAT + "vhisto." + conf.name + ".txt");
            if (mem0.ajouts.Count > 0 || mem0.suppressions.Count > 0)
            {
                if (choose != null)
                    choose.makePertinent();
            }
            mustUpdate = false;
            canGo = false;
            var newEmpreinte = source.getEmpreinte();
            choose = null;
            try
            {
                if (state == builderstate.none)
                    reset();
                else if (state == builderstate.stable)
                {
                    if (newEmpreinte != _empreinte)
                        reset();
                    else
                    {
                        mustUpdate = false;
                        canGo = true;
                        org = newv;
                        return true;
                    }
                }

                total = source.getTotalSize();
                double target = conf.target;
                delta = target - total;
                log("delta {0}", delta);
                if (state == builderstate.none)
                    delta0 = delta;
                state = builderstate.enCours;
                lastd = d;
                d = 0;

                bool up = delta > 0;
                if (up && delta < conf.delta)
                {
                    state = builderstate.stable;
                    _empreinte = newEmpreinte;
                    return true;
                }
                mustUpdate = true;
                double dt = double.MaxValue;
                choose = null;
                foreach (AutoBuilderItem item in items)
                {
                    item.setTension(up);
                }
                foreach (AutoBuilderItem item in items)
                {
                    double aux = double.MaxValue;

                    if (conf.selectFix)
                        aux = item.Tension;
                    else
                        aux = item.Dt;
                    if (conf.selectAbs)
                        aux = Math.Abs(aux); 

                    TrackBorderItem tb = up ? item.Rejected : item.Selected;
                    if (tb == null || tb.Virtual)
                    {
                        if (Conf.BorderGranSlam)
                        {
                            choose = null;
                            break;
                        }
                        if (!Conf.BorderIdem)
                            continue;
                    }

                    if (aux < dt)
                    {
                        dt = aux;
                        newv = item.NewV;
                        choose = item;

                    }
                }
                if (choose == null)
                {
                    dt = double.MaxValue;
                    foreach (AutoBuilderItem item in items)
                    {
                        double aux = double.MaxValue;
                        //if (conf.selectFix)
                        aux = item.Tension;
                        //else
                        //    aux = item.Dt;
                        if (aux < dt)
                        {
                            dt = aux;
                            newv = item.NewV;
                            choose = item;
                        }
                    }
                }
                else
                    log("REEL!!!!");

                org = choose.Org;



                if (up)
                {
                    if (delta < conf.write)
                        canGo = true;
                    var nextTrack = choose.Rejected.candidat;
                    var size = Stat.getSizeinMo(nextTrack);
                    if (delta < size)
                    {
                        state = builderstate.stable;
                        return true;
                    }

                }
                else
                {
                }
                choose.save();
                Program.log.log("===> " + choose.ToString());
            }
            finally
            {
                if (state == builderstate.stable)
                {
                    mustUpdate = false;
                    _empreinte = newEmpreinte;
                    canGo = true;
                }

                using (TextWriter tw = new StreamWriter(file, true, Encoding.UTF8))
                {
                    bool exist = File.Exists(file);
                    // "quand\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tAdd\tiAdd\ttSupp\tiSup\tstate\t\r\n");
                    if (!exist)
                        tw.WriteLine("quand\ttarget\tdelta\tinf\tsup\ttotal\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tstate");
                    tw.Write(DateTime.Now); tw.Write(SEP);
                    tw.Write(conf.target.ToString("0.###")); tw.Write(SEP);
                    tw.Write(conf.delta.ToString("0.###")); tw.Write(SEP);
                    if (conf.levels.Count > 0) tw.Write(conf.levels[0].inf.ToString("0.###")); else tw.Write(""); tw.Write(SEP);
                    if (conf.levels.Count > 0) tw.Write(conf.levels[0].sup.ToString("0.###")); else tw.Write(""); tw.Write(SEP);
                    tw.Write(total.ToString("0.###")); tw.Write(SEP);
                    tw.Write((-delta).ToString("0.###")); tw.Write(SEP);
                    tw.Write(d.ToString("0.###")); tw.Write(SEP);
                    tw.Write(org.ToString("0.###")); tw.Write(SEP);
                    tw.Write(newv.ToString("0.###")); tw.Write(SEP);
                    tw.Write(cmin.ToString("0.###")); tw.Write(SEP);
                    tw.Write(cmax.ToString("0.###")); tw.Write(SEP);
                    tw.Write(dmin.ToString("0.###")); tw.Write(SEP);
                    tw.Write(dmax.ToString("0.###")); tw.Write(SEP);
                    tw.Write(atomicMode); tw.Write(SEP);
                    tw.Write(state); tw.Write(SEP);
                    tw.WriteLine();
                }
                if (canGo)
                    // makeDelta(mem1, "reel", @"..\rhisto.txt");
                    makeDelta(mem1, "reel", DAT + "rhisto." + conf.name + ".txt");
            }
            return canGo;
        }

        public static void Log()
        {
            if (main == null)
                return;
            main.log();
        }
        public override string ToString()
        {
            var strMin = minMem == null ? "" : minMem.suppressions.Count.ToString();
            var strMax = maxMem == null ? "" : maxMem.ajouts.Count.ToString();
            var strName = string.Format("{0} ({1}) {2}", name, resolveOrder(), newv);
            return string.Format("{0} {1} delta->{2} correction->{3}  mustUpdate->{4} canGo {5} atomic {6} idem {7} ({8}/{9})", strName, state, delta.ToString("0.###"), d.ToString("0.###"), mustUpdate, canGo, atomicMode, sameConfiguration, strMin, strMax);
        }
        private void log()
        {
            Program.log.log("{0} {1}", name, sb.ToString());
            Program.log.log("{0} total:{1}", name, total.ToString("0.###"));
            Program.log.log("{0} delta {1}", name, delta.ToString("0.###"));
            Program.log.log("{0} cmin {1}", name, cmin.ToString("0.###"));
            Program.log.log("{0} dmin {1}", name, dmin.ToString("0.###"));
            Program.log.log("{0} cmax {1}", name, cmax.ToString("0.###"));
            Program.log.log("{0} dmax {1}", name, dmax.ToString("0.###"));
            if (mustUpdate)
            {
                //foreach (AutoBuilder builder in list)
                //{
                //    if (builder.d != 0)
                //    {
                log("correction {0}", d);
                log(" valeur {0} --> {1}", org, newv);
                //    }
                //}
            }
            else Program.log.log("valeur non modifiée {0}", org);
            Program.log.log("\r\n");
            Program.log.log("\r\n");
            foreach (AutoBuilder builder in list)
            {
                builder.log(builder.ToString());
            }
        }
        private XmlElement xml;
        public void lookup(XmlElement node)
        {
            var att = node.Attributes["auto"];
            if (att != null)
            {
                // && conf.name.Equals(att.Value))
                var targets = att.Value.Split(';');
                foreach (var target in targets)
                {
                    if (name.Equals(target))
                    {
                        xml = node;
                        return;
                    }
                }
            }
            foreach (XmlNode sub in node.ChildNodes)
            {
                if (sub is XmlElement)
                {
                    lookup(sub as XmlElement);
                    if (xml != null)
                        return;
                }
            }
        }
        private int resolveOrder()
        {
            if (conf.order < int.MaxValue)
                return conf.order;
            return naturalOrder;
        }
        public int CompareTo(AutoBuilder other)
        {
            if (other == this)
                return 0;
            var cmp = resolveOrder().CompareTo(other.resolveOrder());
            if (cmp == 0)
                throw new ApplicationException(string.Format("deux builders d'ordre identique {0}/{1}", this.name, other.name));
            return cmp;
        }

        private bool checkSignal;
        public void signal(TrackBorderItem tb)
        {
            checkSignal = false;
            var item = items.Find(i => i.type == tb.type);
            if (item != null)
            {
                if (client != null)
                {
                    if (!tb.source.isChildOf(client))
                        return; 
                }
                item.signal(tb);
                checkSignal = true;
            }

        }

        public bool Checked
        {
            get { return checkSignal; }
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Auto\AutoBuilderItem.cs">
    <content><![CDATA[using pdb.podcast.Tuning;
using pdb.util;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using pdb.podcast.Delta;
using TimeSpan = pdb.util.timeSpan;

namespace pdb.podcast.Auto
{
    class AutoBuilderItem : IBorder
    {


        /// <summary>
        /// Valeur initiale de la valeur gérée
        /// </summary>
        private double org;
        private double pertinentOrg = -1;
        private TimeSpan torg;
        private TimeSpan tmin;
        private TimeSpan tmax;
        /// <summary>
        /// Valeur modifiée
        /// </summary>
        private double newv;
        public double NewV { get { return newv; } }
        internal TrackBorderItem Rejected { get { return _rejected; } }
        internal TrackBorderItem Selected { get { return _selected; } }
        internal void makePertinent() { pertinentOrg = org; }

        private string name;

        /// <summary>
        /// Attribut concerné
        /// </summary>
        XmlAttribute att;
        XmlElement xml;
        double dd;
        double d;

        private pdb.podcast.Tuning.Auto conf;
        public readonly borderType type;
        private AutoBuilder parent;
        public AutoBuilderItem(pdb.podcast.Tuning.Auto conf)
        {
            this.conf = conf;
            this.type = conf.type;
            this.name = string.Format("{0}:{1}", conf.name, type);
            if (conf.pente == 0)
                d = conf.max - conf.min;
            else
                d = conf.pente;
            dd = d * d;
        }

        private bool _toSave;
        public bool ToSave { get { return _toSave; } }

        public double Org { get { return org; } }

        public void setConf(pdb.podcast.Tuning.Auto conf) { this.conf = conf; }

        #region border
        private TrackBorderItem _selected;
        private TrackBorderItem _rejected;

        //private bool verify(TrackBorderItem tb)
        //{
        //    return true;
        //    double sourceValue = -1;
        //    var source = tb.source;
        //    switch (type)
        //    {
        //        case borderType.d: sourceValue = source.Duration; break;
        //        case borderType.fd: sourceValue = source.FeedDuration; break;
        //        case borderType.maxdate: sourceValue = (source.DateMax - Conf.Date0).TotalDays; break;
        //        default: return false;
        //    }

        //    if (Math.Abs(org - sourceValue) > 2.0E-7)
        //        return false;
        //    return true;
        //}
        private void setSelect(TrackBorderItem tb)
        {
            // pour down mémo des track sélectionnés

            _selected = tb;

        }

        private void setRejec(TrackBorderItem tb)
        {
            // A REVOIR

            //// pour up mémo des tracks rejetés
            ////1. S'il est par ailleurs déjà intégré, pas pertinent
            //if (parent.Source.contains(tb.candidat))
            //{
            //    return;
            //    if (_rejected != null)
            //    {
            //        if (_rejected.status > borderStatus.rejectedXtraLight)
            //            return;
            //        if (tb.val >= _rejected.val)
            //            return; 
            //    }
               
            //    tb.status = borderStatus.rejectedXtraLight; 
            //}

        
            ////2. On est en cours de construction donc il se peut que ce candidat soit in fine ajouté par d'autres
            //// intéret en up . S'il est dans la mémoire pas pertinent en up
            //if (parent.Mem.dict.ContainsKey(tb.candidat.Location))
            //    return;
            _rejected = tb;
        }
        public void signal(TrackBorderItem tb)
        {

            if (tb.Virtual && !Conf.BorderVirtual)
                return;
            if (tb.Selected)
            {
                if (tb.val >= torg)
                    return;
                if (tb.val <= tmin)
                    return;
                if (_selected == null)
                    setSelect(tb);
                else
                {
                    if (tb.status > _selected.status) // && !Conf.BorderIdem)
                        setSelect(tb);
                    else if (tb.status == _selected.status)
                    {
                        if (tb.val > _selected.val)
                            setSelect(tb);
                    }
                }

            }
            else
            {

                if (tb.val <= torg)
                    return;
                if (tb.val >= tmax)
                    return;


                if (_rejected == null)
                    setRejec(tb);
                else
                {
                    if (tb.status > _rejected.status)// && !Conf.BorderIdem)
                        setRejec(tb);
                    else if (tb.status == _rejected.status)
                    {
                        if (tb.val < _rejected.val)
                            setRejec(tb);
                    }
                }

            }
        }
        #endregion

        public void setOrg(XmlElement xml)
        {
            misc.log(ToString());
            _rejected = null;
            _selected = null;
            _toSave = false;
            this.xml = xml;
            att = this.xml.Attributes[type.ToString()];
            if (att == null)
                org = -1;
            else
                org = Convert.ToDouble(att.Value);

            if (org < conf.min)
            {
                org = conf.min;
                newv = org;
                save();
            }
            else if (org > conf.max)
            {
                org = conf.max;
                newv = org;
                save();
            }
            torg = getValue(org);
            tmin = getValue(conf.min);
            tmax = getValue(conf.max);
            if (pertinentOrg < 0)
                pertinentOrg = org;
            //  misc.log(ToString());
        }
        private double dt; public double Dt { get { return dt; } }
        private double tension; public double Tension { get { return tension; } }

        public void setTension(bool up)
        {
            dt = getDt(up);
            tension = getTension(up);
        }

        private double getDt(bool up)
        {
            double t0 = _getTension(pertinentOrg);
            double t1 = _getTension(up);
            return (t1 - t0) / conf.coeff;

        }

        private double getTension(bool up)
        {
            return _getTension(up) / conf.coeff;
        }

        private double getValue(TimeSpan val)
        {
            switch (type)
            {
                case borderType.none: break;
                case borderType.d:
                case borderType.fd:
                    return val.TotalMinute;
                case borderType.maxdate: return val.TotalDay;
                case borderType.c:
                    break;
                default: return -1;

            }
            return -1;
        }

        private TimeSpan getValue(double val)
        {
            switch (type)
            {
                case borderType.none: break;
                case borderType.d:
                case borderType.fd:
                    return TimeSpan.FromMinutes(val);
                case borderType.maxdate: return TimeSpan.FromDays(val);
                case borderType.c:
                    break;
                default: return new TimeSpan();

            }
            return new TimeSpan();
        }

        private double _getTension(bool up)
        {

            // double t0 = getTension(org, dd);
            newv = org;
            if (up)
            {
                if (_rejected == null)
                    return int.MaxValue;
                newv = Math.Round(getValue(_rejected.val), 8);

            }
            else
            {
                if (_selected == null)
                    return int.MaxValue;
                newv = Math.Round(getValue(_selected.val), 8);
            }
            return _getTension(newv);
        }

        public void save()
        {
            //  xml.SetAttribute(type.ToString(), newv.ToString()); 
            att.Value = newv.ToString();
            _toSave = true;
        }





        private double _getTension(double org)
        {


            var d2 = org - conf.min;
            if (conf.pente > 0)
                return (d2 / d);

            var d1 = org - conf.max;

            return -1 + 2 * (d1 * d1 + d2 * d2) / dd;
        }

        public override string ToString()
        {
            var sb = new System.Text.StringBuilder();
            sb.AppendLine();
            sb.Append(name); sb.Append(" ");
            sb.Append(org); sb.Append(" ");

            sb.Append("tension="); sb.Append(_getTension(org)); sb.Append(" ");
            if (_selected != null)
            {
                sb.AppendLine();
                sb.Append(_selected);
            }

            if (_rejected != null)
            {
                sb.AppendLine();
                sb.Append(_rejected);
            }
            sb.AppendLine();
            return sb.ToString();
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Auto\TrackBorderItem.cs">
    <content><![CDATA[using pdb.podcast.Tuning;
using System;
using TimeSpan = pdb.util.timeSpan; 

namespace pdb.podcast.Auto
{
    public enum borderType
    {
        none,
        d,
        fd,
        maxdate,
        c
    }
    public enum borderStatus : byte
    {
        rejectedLight = 0,
        rejectedStrict = 1,
        selectedLight = 2,
        selectedStrict = 3
    }

    //[Flags]
    //public enum border : byte
    //{
    //    virtuel = 0,
    //    strict = 1,
    //    rejected = 0,
    //    selected = 2
    //}

    /// <summary>
    /// Infos sur la sélection ou la non sélection d'un podcast
    /// </summary>
    public class TrackBorderItem
    {
        /// <summary>
        /// Limite à l'orgine de l'info
        /// </summary>
        public readonly LimitItemBase source;
        /// <summary>
        /// Podcast
        /// </summary>
        public readonly TrackInfoItunes candidat;
        /// <summary>
        /// Type de paramètre pris en compte
        /// </summary>
        public readonly borderType type;
        /// <summary>
        /// Valeur actuelle pour le paramètre
        /// </summary>
        public readonly TimeSpan val;
        public readonly borderStatus status;

        public TrackBorderItem(LimitItemBase source, TrackInfoItunes candidat, borderType type, TimeSpan val, borderStatus status)
        {
            this.source = source;
            this.candidat = candidat;
            this.type = type;
            this.val = val;

            //int s = 2 * (selected ? 1 : 0) + (strict ? 1 : 0);
            this.status = status;
        }

        //public TrackBorderItem(LimitItemBase source, TrackInfoItunes candidat, borderType type, TimeSpan ts, borderStatus status) :
        //    this(source, candidat, type, ts.TotalMinutes, status)
        //{
        //}

        public TrackBorderItem(LimitItemBase source, TrackInfoItunes candidat, borderType type, DateTime t, borderStatus status) :
            this(source, candidat, type,  new TimeSpan(t - Conf.Date0), status)
        {
        }


        //public TrackBorderItem(LimitItemBase source, TrackInfoItunes candidat, borderType type, double val, border status)
        //    : this
        //        (source, candidat, type, val, (borderStatus)status)
        //{
        //}



        //public TrackBorderItem(LimitItemBase source, TrackInfoItunes candidat, borderType type, DateTime t, border status) :
        //    this(source, candidat, type, (t - Conf.Date0).TotalDays, status)
        //{
        //}

        //public TrackBorderItem(LimitItemBase source, TrackInfoItunes candidat, borderType type, TimeSpan ts, border status) :
        //    this(source, candidat, type, ts.TotalMinutes, status)
        //{
        //}


        public TrackBorderItem(LimitItemBase source, TrackInfoItunes candidat, borderType type, TimeSpan val, bool selected, bool strict) :
            this(source, candidat, type, val, (borderStatus)(2 * Convert.ToByte(selected) + Convert.ToByte(strict)))
        {
        }


        public TrackBorderItem(LimitItemBase source, TrackInfoItunes candidat, borderType type, DateTime t, bool selected, bool strict) :
            this(source, candidat, type,new TimeSpan(t-Conf.Date0),selected,strict)
        {
        }

        //public TrackBorderItem(LimitItemBase source, TrackInfoItunes candidat, borderType type, TimeSpan ts, bool selected, bool strict) :
        //    this(source, candidat, type, ts.TotalMinutes, selected,strict)
        //{
        //}

        public override bool Equals(object obj)
        {
            var o = obj as TrackBorderItem;
            if (o == null)
                return false;
            return candidat.Equals(o.candidat);
        }

        public override int GetHashCode()
        {
            return candidat.GetHashCode();
        }

        public override string ToString()
        {
            // string statut// Selected ? "selected" : "rejected";
            return string.Format("{0} {1} {2} {3} {4}", status, type, val, candidat, source);
        }
        public bool Selected { get { return status >= borderStatus.selectedLight; } }
        public bool Virtual { get { return (byte)status % 2 == 0; } }
    }

}
]]></content>
  </file>
  <file path="\pdb.podcast\Load\FeedLimitItemLoader.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using pdb.podcast.Tuning;
using pdb.util;
using pdb.util.list;
using pdb.podcast.Auto;
using timeSpan = pdb.util.timeSpan; 

namespace pdb.podcast.Load
{
    public enum loadState
    {
        loadCandidat,
        standAlone,
        selection,
        end
    }
    public enum depotType
    {
        load,
        rapporte
    }
    /// <summary>
    /// Chargeur des pistes associées à un item de limite sur un dossier
    /// </summary>
    class FeedLimitItemLoader
    {
        private loadState state;
        /// <summary>
        /// Répertoire
        /// </summary>
        private DirConf dir;
        /// <summary>
        /// Limite
        /// </summary>
        public readonly LimitItem limit;
        /// <summary>
        /// Album
        /// </summary>
        private string album;
        /// <summary>
        /// Chargeur de limite
        /// </summary>
        private LimitsLoader parent;


        /// <summary>
        /// Nombre de piste max
        /// </summary>
        int nbMax;
        int loadNbMax;
        /// <summary>
        /// Durée cumulée max
        /// </summary>
        timeSpan durationMax;
        timeSpan loadDurationMax;

        ///// <summary>
        ///// Date de publication min
        ///// </summary>
        //DateTime dateMin;

        // private Logger logger;
        private Logger logLimit;
        private Logger logItem;

        /// <summary>
        /// Durée cumulée
        /// </summary>
        timeSpan currentDuration = new timeSpan();
        timeSpan currentDurationVirtuel = new timeSpan(); 

        /// <summary>
        /// Nombre total
        /// </summary>
        int nb = 0;

        private bool? endByFd;
        public bool EndByFd { get { if (endByFd == null) return false; return endByFd.Value; } }


        public void phase2()
        {
            currentDuration = new timeSpan();
            currentDurationVirtuel = new timeSpan(); 
            nb = 0;
            state = loadState.selection;
            endByFd = null; 
        }


        private bool loadEqSel;
        public bool LoadEqSel { get { return loadEqSel; } }

        public FeedLimitItemLoader(LimitItem limit, string album, LimitsLoader parent)
        {
            this.dir = limit.Dir;
            this.limit = limit;

            this.parent = parent;
            this.album = album;


            nbMax = limit.Nb;


            var feedDuration = limit.FeedDuration;
            int rating = limit.Rating;
            durationMax = timeSpan.FromMinutes(feedDuration);


            loadDurationMax = durationMax;
            loadNbMax = nbMax;

            loadEqSel = true; 

            if (limit.Dir.Cascading)
            {
                if (limit.LoadNb > nbMax)
                    loadNbMax = limit.LoadNb;
                if (limit.LoadFeedDuration > feedDuration)
                {
                    loadDurationMax = timeSpan.FromMinutes(limit.LoadFeedDuration);
                    loadEqSel = false; 
                }

            }

            logItem = Logger.getLogger(limit.ID + "\\" + album, null, false);
            logLimit = limit.Logger;
        }

        private void log(string txt)
        {
            logLimit.log(txt);
            logItem.log(txt);
        }

        private void log(string txt, params object[] other)
        {

            logLimit.log(txt, other);
            logItem.log(txt, other);
        }




        public timeSpan getCurrentDuration(bool real)
        {
            if (real)
                return currentDuration;
            return currentDurationVirtuel; 
        }
      
        public int Nb { get { return nb; } }

        public bool control(TrackInfoItunes track, bool select, bool real)
        {
            //if (real && state == loadState.end)
            //    return false;
          

            string location = track.Location;
            if (string.IsNullOrEmpty(location))
                return false;



            //     string str = string.Format("{0} {1} {2} {3}", limit, nb, currentDuration.TotalMinutes.ToString("0"), track.ToString());
            string phase = select ? "ctl" : "load";

            if (!Logger.CreateNullLoggers)
            {
                string str = string.Format("{0} {1} {2} {3}", limit, nb, currentDuration, track.ToString());

                log("-->  {0} ok {1} ", phase, str);
            }

            var ok = checkStatus(string.Format("-->  {0}", phase), select, track, limit, real);

            if (!ok)
                return false;

            if (select && real)
            {
                var selected = selectMode.simple;
                if (dir.Histo)
                {
                    selected = selectMode.serial;
                    if (dir.HistoAll.HasValue && dir.HistoAll.Value)
                        selected = selectMode.histo;
                }
                else
                {
                    //if (!candidat.Serial && !candidat.Histo)
                    selected = selectMode.simple;
                }

                track.select(selected, limit);
                Feeds.Instance.recordTrack(track, limit);
            }

            //report aux niveaux inférieurs
            if (real)
                parent.recordLimitItemCandidat(track, limit);
            return true;
        }




        private bool checkStatus(string phase, bool select, TrackInfoItunes track, LimitItem itemSource, bool real)
        {
            endByFd = null; 
            bool ret = true;
            //        string str = string.Format("{0} {1} {2} {3} {4}", limit, itemSource, (nb), currentDuration.TotalMinutes.ToString("0"), track.ToString());

            var _nb = nb + 1;
            var durationBase = real ? currentDuration : currentDurationVirtuel;
            var dur = durationBase + track.Duree;

            int _nbMax = select ? this.nbMax : this.loadNbMax;
            var _durationMax = select ? this.durationMax : this.loadDurationMax;

            if (_nb > _nbMax)
            {
                if (real)
                {
                    limit.NbFeedLimit = true;
                    if (!Logger.CreateNullLoggers)
                    {
                        string str = string.Format("{0} {1} {2} {3} {4}", limit, itemSource, (nb), currentDuration, track.ToString());
                        log("{0} stop nb {1} ", phase, str);
                    }
                    state = loadState.end;
                }

                endByFd = false; 
                ret = false;
            }



            // vérification des valeurs cumulées
            if (dur > _durationMax)
            {
               
                if (real)
                {
                  
                    if (!limit.DurationFeedLimit)
                    {
                        if (!Logger.CreateNullLoggers)
                        {
                            string str = string.Format("{0} {1} {2} {3} {4}", limit, itemSource, (nb), currentDuration, track.ToString());
                            log("{0} stop d. {1} ", phase, str);
                        }
                    }
                    limit.DurationFeedLimit = true;
                    state = loadState.end;
                }

                //if (select || durationMax == loadDurationMax)
                //{
                //    if (ret)
                //    {
                //        var tb = new TrackBorderItem(limit, track, borderType.fd, dur, false);
                //        limit.signal(tb);
                //    }
                //    //limit.checkBorderFd(track, dur, false);
                //}

                if (endByFd == null)
                    endByFd = true; 
                ret = false;
            }
            else
            {
               // endByFd = null;
                //if (select || durationMax == loadDurationMax)
                //{
                //    if (ret)
                //    {
                //        var tb = new TrackBorderItem(limit, track, borderType.fd, dur, true);
                //        limit.signal(tb);
                //    }
                //}
            }







            if (real)
            {
                nb = _nb;
                currentDuration += track.Duree;
            }

            currentDurationVirtuel += track.Duree; 

            return ret;

        }

    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Tuning\Auto.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using pdb.util;
using pdb.podcast.Auto;
namespace pdb.podcast.Tuning
{
    class Auto
    {
        delegate void sets(string value);
        delegate void setd(double value);
        delegate void seti(int value);
        delegate void setb(bool value);

        private void buildd(XmlNode parent, XmlNode child, string name, setd setd)
        {
            XmlAttribute att = null;
            if (parent != null)
                att = parent.Attributes[name];
            if (att != null)
                setd(Convert.ToDouble(att.InnerText));
            att = child.Attributes[name];
            if (att != null)
                setd(Convert.ToDouble(att.InnerText));

            XmlElement elt = null;
            if (parent != null)
                elt = parent[name];
            if (elt != null)
                setd(Convert.ToDouble(elt.InnerText));
            elt = child[name];
            if (elt != null)
                setd(Convert.ToDouble(elt.InnerText));
        }

        private void buildi(XmlNode parent, XmlNode child, string name, seti seti)
        {
            XmlAttribute att = null;
            if (parent != null)
                att = parent.Attributes[name];
            if (att != null)
                seti(Convert.ToInt32(att.InnerText));
            att = child.Attributes[name];
            if (att != null)
                seti(Convert.ToInt32(att.InnerText));

            XmlElement elt = null;
            if (parent != null)
                elt = parent[name];
            if (elt != null)
                seti(Convert.ToInt32(elt.InnerText));
            elt = child[name];
            if (elt != null)
                seti(Convert.ToInt32(elt.InnerText));
        }

        private void builds(XmlNode parent, XmlNode child, string name, sets sets)
        {
            XmlAttribute att = null;
            if (parent != null)
                att = parent.Attributes[name];
            if (att != null)
                sets(att.InnerText);
            att = child.Attributes[name];
            if (att != null)
                sets(att.InnerText);

            XmlElement elt = null;
            if (parent != null)
                elt = parent[name];
            if (elt != null)
                sets(elt.InnerText);
            elt = child[name];
            if (elt != null)
                sets(elt.InnerText);
        }

        private void buildb(XmlNode parent, XmlNode child, string name, setb setb)
        {
            XmlAttribute att = null;
            if (parent != null)
                att = parent.Attributes[name];
            if (att != null)
                setb("true" == att.InnerText);
            att = child.Attributes[name];
            if (att != null)
                setb("true" == att.InnerText);

            XmlElement elt = null;
            if (parent != null)
                elt = parent[name];
            if (elt != null)
                setb("true" == elt.InnerText);
            elt = child[name];
            if (elt != null)
                setb("true" == elt.InnerText);
        }

        public string name = "";
        public borderType type = borderType.none;
        public double target;
        public double delta;
        public double write;
        public int cloop = 20;
        public int verif = 4;
        public int idem = 4;
        public int order = int.MaxValue;
        public double min = -int.MaxValue;
        public double max = int.MaxValue;
        public double coeff = 0;
        public bool selectFix;
        public bool selectAbs;
        public double pente; 
        public List<Level> levels = new List<Level>();
        public List<Auto> items = new List<Auto>();

        public Auto()
        {
        }
        public Auto(Auto parent, XmlElement xparent, XmlElement node)
        {
            if (node == null)
                return;
            //if (parent != null)
            //{
            //    name = parent.name; 
            //    type = parent.type; 
            //    target = parent.target; 
            //    write = parent.write; 
            //    delta = parent.delta; 
            //    write = parent.write; 
            //    cloop = parent.cloop; 
            //    verif = parent.verif; 
            //    idem = parent.idem; 
            //    order = parent.order; 
            //    min = parent.min; 
            //    max = parent.max; 
            //    coeff = parent.coeff; 
            //    levels = new List<Level>(parent.levels); 
            //}
            XMLTool xml = new XMLTool(node);

            if (node.Attributes["type"] != null)
                type = (borderType)Enum.Parse(typeof(borderType), node.Attributes["type"].Value, true);
            builds(xparent, node, "name", (v) => name = v);
            buildd(xparent, node, "target", (v) => target = v);
            buildd(xparent, node, "delta", (v) => delta = v);
            buildd(xparent, node, "write", (v) => write = v);
            buildi(xparent, node, "cloop", (v) => cloop = v);
            buildi(xparent, node, "verif", (v) => verif = v);
            buildi(xparent, node, "verif", (v) => idem = v);
            buildi(xparent, node, "order", (v) => order = v);

            buildd(xparent, node, "min", (v) => min = v);
            buildd(xparent, node, "max", (v) => max = v);
            buildd(xparent, node, "coeff", (v) => coeff = v);
            buildb(xparent, node, "selectFix", (v) => selectFix = v);
            buildb(xparent, node, "selectAbs", (v) => selectAbs = v);
            buildd(xparent, node, "pente", (v) => pente = v); 

            /*//  type = xml.getAttValue("type");
            //  target = xml.getDoubleAttValue("target");
             // delta = xml.getDoubleAttValue("delta");
             // write = xml.getDoubleAttValue("write");
            //  cloop = xml.getIntAttValue("cloop", 20);
            //  verif = xml.getIntAttValue("verif", 4);
             // idem = xml.getIntAttValue("idem", 4);
             // order = xml.getIntAttValue("order", int.MaxValue);
              min = xml.getDoubleAttValue("min", -int.MaxValue);
              max = xml.getDoubleAttValue("max", int.MaxValue);
              coeff = xml.getDoubleAttValue("coeff", 0);
           
              string str = "";
              if (target < 0)
              {
                  str = xml.getNodeValue("target");
                  if (!string.IsNullOrEmpty(str))
                      target = Convert.ToDouble(str);
              }
              if (delta < 0)
              {
                  str = xml.getNodeValue("delta");
                  if (!string.IsNullOrEmpty(str))
                      delta = Convert.ToDouble(str);
              }
              if (write < 0)
              {
                  str = xml.getNodeValue("write");
                  if (!string.IsNullOrEmpty(str))
                      write = Convert.ToDouble(str);
              }
              str = xml.getNodeValue("cloop");
              if (!string.IsNullOrEmpty(str))
                  cloop = Convert.ToInt16(str);
              str = xml.getNodeValue("verif");
              if (!string.IsNullOrEmpty(str))
                  verif = Convert.ToInt16(str);
              str = xml.getNodeValue("idem");
              if (!string.IsNullOrEmpty(str))
                  idem = Convert.ToInt16(str);
              str = xml.getNodeValue("order");
              if (!string.IsNullOrEmpty(str))
                  order = Convert.ToInt16(str);
              str = xml.getNodeValue("min");
              if (!string.IsNullOrEmpty(str))
                  min = Convert.ToDouble(str);
              str = xml.getNodeValue("max");
              if (!string.IsNullOrEmpty(str))
                  max = Convert.ToDouble(str);
              str = xml.getNodeValue("coeff");
              if (!string.IsNullOrEmpty(str))
                  coeff = Convert.ToDouble(str);
              levels = new List<Level>();*/

            if (parent != null)
                levels = new List<Level>(parent.levels);

            var xlevels = xml.NodeLookUp("levels");

            if (xlevels != null)
            {
                levels.Clear();
                foreach (XmlNode sub in xlevels.ChildNodes)
                {
                    if (sub is XmlElement)
                    {
                        var level = new Level(sub as XmlElement);
                        levels.Add(level);
                    }
                }
            }
            else if (levels.Count == 0)
            {
                var level = new Level(node);
                levels.Add(level);
            }
            var xitems = xml.NodeLookUp("items");
            if (xitems != null)
            {
                foreach (XmlNode sub in xitems.ChildNodes)
                {
                    if (sub is XmlElement)
                    {
                        var subAuto = new Auto(this, node, sub as XmlElement);
                        items.Add(subAuto);
                    }
                }
            }

        }
    }
    class Level
    {
        public double d;
        public double inf;
        public double sup;
        public Level()
        {
        }
        public Level(XmlElement node)
        {
            if (node == null)
                return;
            XMLTool xml = new XMLTool(node);
            d = xml.getDoubleAttValue("d");
            inf = xml.getDoubleAttValue("inf");
            sup = xml.getDoubleAttValue("sup");
            string str = xml.getAttValue("d");
            if (!string.IsNullOrEmpty(str))
                d = Convert.ToDouble(str);
            str = xml.getAttValue("inf");
            if (!string.IsNullOrEmpty(str))
                inf = Convert.ToDouble(str);
            str = xml.getAttValue("sup");
            if (!string.IsNullOrEmpty(str))
                sup = Convert.ToDouble(str);
        }
    }
}]]></content>
  </file>
  <file path="\pdb.podcast\Tuning\Conf.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Xml;
using pdb.util;
using pdb.ordo.conf;
using pdb.podcast.Auto;

namespace pdb.podcast.Tuning
{
    public enum menage
    {
        none,
        read,
        name
    }
    public class Conf
    {
        //private static string CONF_FILE = @"..\conf.xml";
        #region membres
        private DirConf root;
        private bool buildLimitMulti;
        private bool single;
        private Move move;
        private bool deleteDoublon;
        private bool getDescription;
        private int volumeMin = int.MinValue;
        private bool simulation;
        private string copyAll;
        private int maxScan = 10;
        private ConfOrdo ordo = new ConfOrdo();
        private menage menage = menage.none;
        // private string zique;
        private bool writePlayLists;
        private bool writePreSel;
        private bool writeItems;
        private bool writeUse;
        private bool writeExclu;
        private bool genFeed;
        private int genFeedPrior = 11;
        private int genUsePrior = 11;
        private int genExcluPrior = 11;
        private bool transmit = true;
        private bool transmitTotal = true;
        private bool transmitTotalGuest = true;
        private bool? cascading = null;
        private bool autoBlock;

        private ConfDate dates = new ConfDate();

        private List<SelectParam> selectParams = new List<SelectParam>();
        private Journal journal;
        private string rootIt = "auto";
        private bool onlyEnabled = true;
        private bool onlyUnRead = true;

        // private Auto auto = null;
        private bool logGen = true;
        private DateTime date0;
        private Html html = new Html();

        private bool autoSequence = true;
        private bool borderVirtual;
        private bool borderIdem;
        private bool borderGranSlam; 

        #endregion
        public static readonly Conf Instance = new Conf();
        private static bool started;
        private Conf() { confFile = new FileInfo(@"..\conf.xml"); }
        public void setConfFile(string conf)
        {
            this.confFile = new FileInfo(@"..\" + conf);
        }

        #region getters
        public static bool BuildLimitMulti { get { return Instance.buildLimitMulti; } }
        public static bool Single { get { return Instance.single; } }
        public static DirConf DirConf { get { return Instance.root; } }
        public static Move Move { get { return Instance.move; } }
        public static bool DeleteDoublon { get { return Instance.deleteDoublon; } }
        public static bool GetDescription { get { return Instance.getDescription; } }
        public static int VolumeMin { get { return Instance.volumeMin; } }
        public static bool Simulation { get { return Instance.simulation; } }
        public static string CopyAll { get { return Instance.copyAll; } }
        public static ConfOrdo Ordo { get { return Instance.ordo; } }
        public static int MaxScan { get { return Instance.maxScan; } }
        public static menage Menage { get { return Instance.menage; } }
        public static bool WritePlayLists { get { return Instance.writePlayLists; } }
        public static bool WritePreSel { get { return Instance.writePreSel; } }
        public static bool WriteItems { get { return Instance.writeItems; } }
        public static bool WriteUse { get { return Instance.writeUse; } }
        public static bool WriteExclu { get { return Instance.writeExclu; } }
        public static bool GenFeed { get { return Instance.genFeed; } }
        public static int GenFeedPrior { get { return Instance.genFeedPrior; } }
        public static int GenUsePrior { get { return Instance.genUsePrior; } }
        public static int GenExcluPrior { get { return Instance.genExcluPrior; } }

        public static bool Transmit { get { return Instance.transmit; } }
        public static bool TransmitTotal { get { return Instance.transmitTotal; } }
        public static bool TransmitTotalGuest { get { return Instance.transmitTotalGuest; } }
        public static bool? Cascading { get { return Instance.cascading; } }
        public static Dictionary<int, DateTime> PlayedDates { get { return Instance.dates.Dates; } }
        public static List<SelectParam> SelectParams { get { return Instance.selectParams; } }
        internal static Journal Journal { get { return Instance.journal; } }
        public static string RootIt { get { return Instance.rootIt; } }

        public static bool OnlyEnabled { get { return Instance.onlyEnabled; } }
        public static bool OnlyUnRead { get { return Instance.onlyUnRead; } }

        public static bool AutoBlock { get { return Instance.autoBlock; } }
        public static bool LogGen { get { return Instance.logGen; } }
        public static DateTime Date0 { get { return Instance.date0; } }
        internal static Html Html { get { return Instance.html; } }

        public static bool AutoSequence { get { return Instance.autoSequence; } }
        public static bool BorderVirtual { get { return Instance.borderVirtual; } }
        public static bool BorderIdem { get { return Instance.borderIdem; } }
        public static bool BorderGranSlam { get { return Instance.borderGranSlam; } }

        //  public static string Zique { get { return Instance.zique; } }
        #endregion

        private DateTime lastModif = DateTime.MinValue;
        private FileInfo confFile;
        public FileInfo ConfFile { get { return confFile; } }
        #region load

        public XmlElement load(bool waitForModification)
        {

            while (true)
            {
                confFile.Refresh();
                if (!confFile.Exists)
                    throw new ApplicationException(confFile + " n'existe pas !!");
                DateTime dt = confFile.LastWriteTime;
                if (dt > lastModif || !waitForModification)
                    break;
                Thread.Sleep(1000);
            }

            lastModif = confFile.LastWriteTime;

            XmlDocument l_doc = new XmlDocument();
            l_doc.Load(confFile.FullName);

            XmlElement xroot = l_doc.DocumentElement;
            XMLTool l_xmlConf = new XMLTool(xroot);

            string str = l_xmlConf.getNodeValue("volumeMin");
            if (!string.IsNullOrEmpty(str))
                volumeMin = Convert.ToInt32(str);

            str = l_xmlConf.getNodeValue("maxScan");
            if (!string.IsNullOrEmpty(str))
                maxScan = Convert.ToInt32(str);

            buildLimitMulti = l_xmlConf.getBoolValue("buildLimitMulti");
            simulation = l_xmlConf.getBoolValue("simulation");
            //   zique = l_xmlConf.getNodeValue("zique");

            deleteDoublon = l_xmlConf.getBoolValue("deleteDoublon");
            getDescription = l_xmlConf.getBoolValue("getDescription");
            copyAll = l_xmlConf.getNodeValue("copyAll");

            str = l_xmlConf.getNodeValue("menage");
            if (!string.IsNullOrEmpty(str))
                menage = (menage)(Enum.Parse(typeof(menage), str, true));

            writePlayLists = l_xmlConf.getBoolValue("writePlayLists");
            writePreSel = l_xmlConf.getBoolValue("writePreSel");
            writeItems = l_xmlConf.getBoolValue("writeItems");
            writeUse = l_xmlConf.getBoolValue("writeUse");
            writeExclu = l_xmlConf.getBoolValue("writeExclu");
            genFeed = l_xmlConf.getBoolValue("genFeed");
            str = l_xmlConf.getNodeValue("genFeedPrior");
            if (!string.IsNullOrEmpty(str))
                genFeedPrior = Convert.ToInt32(str);

            str = l_xmlConf.getNodeValue("genUsePrior");
            if (!string.IsNullOrEmpty(str))
                genUsePrior = Convert.ToInt32(str);

            str = l_xmlConf.getNodeValue("genExcluPrior");
            if (!string.IsNullOrEmpty(str))
                genExcluPrior = Convert.ToInt32(str);

            transmit = l_xmlConf.getBoolValue("transmit");
            transmitTotal = l_xmlConf.getBoolValue("transmitTotal");
            transmitTotalGuest = l_xmlConf.getBoolValue("transmitTotalGuest");
            onlyEnabled = l_xmlConf.getBoolValue("onlyEnabled", true);
            onlyUnRead = l_xmlConf.getBoolValue("onlyUnRead", true);
            str = l_xmlConf.getNodeValue("cascading");
            if (!string.IsNullOrEmpty(str))
                cascading = "true".Equals(str);
            //  cascading = l_xmlConf.getBoolValue("cascading");

            str = l_xmlConf.getNodeValue("date0");
            if (!string.IsNullOrEmpty(str))
                date0 = Convert.ToDateTime(str);

            var xDates = l_xmlConf.NodeLookUp("playedDates");
            dates = new ConfDate(xDates);

            logGen = l_xmlConf.getBoolValue("logGen");
            var createNullLoggerOrg = Logger.CreateNullLoggers;

            Logger.CreateNullLoggers = !logGen;
            XmlElement xDir = l_xmlConf.NodeLookUp("dir");

            var rootLimit = new Limits();
            buildLimit(xDir, rootLimit, null);

            root = new DirConf(rootLimit, xDir.Attributes["name"].InnerText, null);
            root.build(null, xDir); 
            buildDirChilds(xDir, root);

            XmlElement xMove = l_xmlConf.NodeLookUp("move");
            move = new Move(xMove);

            ordo = new ConfOrdo(l_xmlConf.NodeLookUp("ordo"));

            selectParams.Clear();

            var xSelect = l_xmlConf.getNode("select");
            foreach (XMLTool xsub in xSelect)
                selectParams.Add(new SelectParam(xsub));

            journal = null;
            var xJournal = XMLTool.NodeLookUp(xroot, "journal");
            if (xJournal != null)
            {
                journal = new Tuning.Journal();
                buildLimitItem(xJournal, xJournal, journal);
                var xxJournal = new XMLTool(xJournal);
                journal.NbJour = xxJournal.getIntAttValue("nbJour");
            }

            rootIt = l_xmlConf.getNodeValue("rootIt");

            autoBlock = l_xmlConf.getBoolValue("autoBlock", true);
            //XmlElement xAuto = l_xmlConf.NodeLookUp("auto");
            //if (xAuto == null)
            //    auto = null;
            //else
            //    auto = new Auto(xAuto);

            XmlElement xHtml = l_xmlConf.NodeLookUp("html");
            html = new Html(xHtml);

            autoSequence = l_xmlConf.getBoolValue("autoSequence", true);
            borderVirtual = l_xmlConf.getBoolValue("borderVirtual", false);
            borderIdem = l_xmlConf.getBoolValue("borderIdem", false);
            borderGranSlam = l_xmlConf.getBoolValue("borderGranSlam", false);

            Logger.CreateNullLoggers = createNullLoggerOrg;
            started = true;
            return xroot;

        }

        #region limites

        private void buildDirChilds(XmlNode node, DirConf parent)
        {
            AutoBuilder.setClient(parent, node); 
            foreach (XmlNode child in node.ChildNodes)
            {
                if (child.Name == "auto")
                {
                    AutoBuilder.build(child, parent);
                }
                else
                {
                    if (child.Name == "dir")
                    {
                        string name = (child.Attributes["name"].InnerText);
                        Limits childLimite = parent.Limites.Clone() as Limits;
                        DirConf sub = new DirConf(childLimite, name, parent);
                        sub.build(node, child);
                        //if (child.Attributes["d"] != null)
                        //    sub.Duration = Convert.ToSingle(child.Attributes["d"].Value);

                        buildLimit(child, childLimite, sub);

                        if (child.Attributes["all"] != null)
                        {
                            sub.HistoAll = child.Attributes["all"].Value == "true";
                        }

                        if (child.Attributes["cascading"] != null)
                            sub.Cascading = child.Attributes["cascading"].Value == "true";
                        if (child.Attributes["selectionPre"] != null)
                            sub.SelectionPre = child.Attributes["selectionPre"].Value == "true";

                        if (child.Attributes["transmit"] != null)
                            sub.TransmitToParent = child.Attributes["transmit"].Value == "true";
                        if (child.Attributes["transmitTotal"] != null)
                            sub.TransmitTotal = child.Attributes["transmitTotal"].Value == "true";
                        if (child.Attributes["transmitTotalGuest"] != null)
                            sub.TransmitTotalGuest = child.Attributes["transmitTotalGuest"].Value == "true";
                        parent.addChild(sub);
                        if (!started)
                            misc.log(sub.display());
                        buildDirChilds(child, sub);

                    }
                }
            }

        }

        private void buildLimitItem(XmlNode parent, XmlNode child, LimitItem item)
        {
            string strTd = child.InnerText;
            if (!string.IsNullOrEmpty(strTd) && child.Name == "td")
                item.Td = Convert.ToInt32(strTd);

            AutoBuilder.setClient(item, child); 

            foreach (XmlNode sub in child.ChildNodes)
            {
                if (sub.Name == "auto")
                    AutoBuilder.build(sub, item);
            }

            item.build(parent, child);

            //var dAtt0 = parent.Attributes["d"];
            //if (dAtt0 != null)
            //    item.Duration = Convert.ToSingle(dAtt0.InnerText);

            //var dAtt = child.Attributes["d"];
            //if (dAtt != null)
            //    item.Duration = Convert.ToSingle(dAtt.InnerText);

            //var cAtt0 = parent.Attributes["c"];
            //if (cAtt0 != null)
            //    item.Contribution = Convert.ToSingle(cAtt0.InnerText);

            //var cAtt = child.Attributes["c"];
            //if (cAtt != null)
            //    item.Contribution = Convert.ToSingle(cAtt.InnerText);

            //var fdAtt0 = parent.Attributes["fd"];
            //if (fdAtt0 != null)
            //    item.FeedDuration = Convert.ToSingle(fdAtt0.InnerText);

            //var fdAtt = child.Attributes["fd"];
            //if (fdAtt != null)
            //    item.FeedDuration = Convert.ToSingle(fdAtt.InnerText);

            //var nbAtt0 = parent.Attributes["nb"];
            //if (nbAtt0 != null)
            //    item.Nb = Convert.ToInt32(nbAtt0.InnerText);
            //var nbAtt = child.Attributes["nb"];
            //if (nbAtt != null)
            //    item.Nb = Convert.ToInt32(nbAtt.InnerText);

            //var dateAtt0 = parent.Attributes["date"];
            //if (dateAtt0 != null)
            //    item.DateMin = getDate(dateAtt0.InnerText);
            //var dateAtt = child.Attributes["date"];
            //if (dateAtt != null)
            //    item.DateMin = getDate(dateAtt.InnerText);

            //var dateAtt0Max = parent.Attributes["maxdate"];
            //if (dateAtt0Max != null)
            //    item.DateMax = getDate(dateAtt0Max.InnerText);
            //var dateAttMax = child.Attributes["maxdate"];
            //if (dateAttMax != null)
            //    item.DateMax = getDate(dateAttMax.InnerText);
        }

        public static DateTime getDate(string str)
        {
            int delta = -1;
            double d = -1;
            if (Date0 > DateTime.MinValue)
                //{
                //    if (int.TryParse(str, out delta))
                //    {
                //        int dt = delta;
                //        if (delta % 365 == 0)
                //        {
                //            dt = delta / 365;
                //            return Date0.AddYears(dt);
                //        }

                //        if (delta % 30 == 0)
                //        {
                //            dt = delta / 30;
                //            return Date0.AddMonths(dt);
                //        }
                //        return Date0.AddDays(delta);
                //    }
                //    else
                if (double.TryParse(str, out d))
                {
                    return Date0.AddDays(d);
                }
            //       }

            return Convert.ToDateTime(str);
        }

        private void buildLimit(XmlNode node, Limits limits, DirConf dir)
        {

            Limit[] tab = new Limit[Limits.NB];

            foreach (XmlNode child in node.ChildNodes)
            {
                if (child.Name == "list")
                {

                    int level = Convert.ToInt32(child.Attributes["l"].InnerText);
                    Limit limit = new Limit(level);
                    var items = new List<LimitItem>();

                    double tdMin = 0;
                    foreach (XmlNode xItem in child.ChildNodes)
                    {
                        if (xItem.Name == "auto")
                        {
                            AutoBuilder.build(xItem, limit);
                        }
                        else if (xItem.Name == "td")
                        {
                            var item = new LimitItem(limit);
                            buildLimitItem(child, xItem, item);
                            item.TdMin = tdMin;

                            var itemTd = item.Td;
                            if (itemTd < int.MaxValue)
                                tdMin = item.Td;
                            items.Add(item);
                        }
                    }

                    if (items.Count == 0)
                    {
                        var defaultItem = new LimitItem(limit);
                        buildLimitItem(child, child, defaultItem);
                        items.Add(defaultItem);
                    }

                    limit.Items = items;

                    //var dAtt = child.Attributes["d"];
                    //if (dAtt != null)
                    //    limit.Duration = Convert.ToInt32(dAtt.InnerText);

                    //var fdAtt = child.Attributes["fd"];
                    //if (fdAtt != null)
                    //    limit.FeedDuration = Convert.ToInt32(fdAtt.InnerText);

                    //var nbAtt = child.Attributes["nb"];
                    //if (nbAtt != null)
                    //    limit.Nb = Convert.ToInt32(nbAtt.InnerText);
                    tab[level] = limit;
                }

            }

            Limit current = null;
            bool oneTabAtLeast = false;
            //  LimitItem currentItem = null;

            double currentDuration = int.MaxValue;
            double lcurrentDuration = int.MaxValue;
            double currentContrib = int.MaxValue;
            double currentFeedDuration = int.MaxValue;
            double lcurrentFeedDuration = int.MaxValue;
            int currentNb = int.MaxValue;
            int lcurrentNb = int.MaxValue;

            double currentTd = int.MaxValue;

            double currentTdMin = int.MaxValue;
            DateTime currentDateMin = DateTime.MinValue;
            DateTime currentDateMax = DateTime.MaxValue;

            for (int i = 0; i < Limits.NB; i++)
            {

                //if (tab[i] != null)
                //{

                if (tab[i] != null)
                {
                    current = tab[i];
                    oneTabAtLeast = true;

                }

                if (!oneTabAtLeast)
                    current = limits[i];

                var _limit = limits[i];
                _limit.Level = i;
                limits[i].Parent = limits;

                //foreach (LimitItem currentItem in current.Items)
                //{

                if (_limit.Items.Count != current.Items.Count)
                {
                    _limit.Items.Clear();
                }

                for (int j = 0; current != null && j < current.Items.Count; j++)
                {

                    var currentItem = current.Items[j];
                    // if (currentItem.Duration < int.MaxValue)
                    currentDuration = currentItem.Duration;
                    lcurrentDuration = currentItem.LoadDuration;
                    //if (currentItem.Contribution < int.MaxValue)
                    currentContrib = currentItem.Contribution;
                    // if (currentItem.FeedDuration < int.MaxValue)
                    currentFeedDuration = currentItem.FeedDuration;
                    lcurrentFeedDuration = currentItem.LoadFeedDuration;

                    //   if (currentItem.Nb < int.MaxValue)
                    currentNb = currentItem.Nb;
                    lcurrentNb = currentItem.LoadNb;
                    //  if (currentItem.Td < int.MaxValue)
                    currentTd = currentItem.Td;
                    currentTdMin = currentItem.TdMin;

                    currentDateMin = currentItem.DateMin;
                    currentDateMax = currentItem.DateMax;
                    //}
                    //}

                    //if (current != null)
                    //{
                    LimitItem _limitItem = null;
                    if (j >= _limit.Items.Count)
                    {
                        _limitItem = currentItem.Clone() as LimitItem;
                        _limit.Items.Add(_limitItem);
                        _limitItem.Limit = _limit;

                    }
                    else
                    {
                        _limitItem = _limit.Items[j];

                    }
                    //if (currentDuration < int.MaxValue)
                    _limitItem.setDuration(currentDuration, false); // Duration = currentDuration;
                    _limitItem.LoadDuration = lcurrentDuration;
                    //if (currentContrib < int.MaxValue)
                    //    _limitItem.Contribution = currentContrib;
                    // if (currentFeedDuration < int.MaxValue)
                    _limitItem.setFeedDuration(currentFeedDuration, false); // FeedDuration = currentFeedDuration;
                    _limitItem.LoadFeedDuration = lcurrentFeedDuration;
                    // if (currentNb < int.MaxValue)
                    _limitItem.Nb = currentNb;
                    _limitItem.LoadNb = lcurrentNb;
                    //   if (currentTd < int.MaxValue)
                    _limitItem.Td = currentTd;
                    _limitItem.TdMin = currentTdMin;
                    _limitItem.DateMin = currentDateMin;
                    _limitItem.setDateMax(currentDateMax, false); 
                    _limitItem.Contribution = currentContrib;

                    

                    if (dir != null)
                    {
                        if (_limitItem.Duration == int.MaxValue)
                            _limitItem.setDuration(dir.Duration, true); // Duration = dir.Duration;
                        if (_limitItem.LoadDuration == int.MaxValue)
                            _limitItem.LoadDuration = dir.LoadDuration;
                        if (_limitItem.Contribution == int.MaxValue)
                            _limitItem.Contribution = dir.Contribution;
                        if (_limitItem.Td == int.MaxValue)
                            _limitItem.Td = dir.Td;
                        if (_limitItem.Nb == int.MaxValue)
                            _limitItem.Nb = dir.Nb;
                        if (_limitItem.LoadNb == int.MaxValue)
                            _limitItem.LoadNb = dir.LoadNb;
                        if (_limitItem.FeedDuration == int.MaxValue)
                            _limitItem.setFeedDuration(dir.FeedDuration,true);
                        if (_limitItem.LoadFeedDuration == int.MaxValue)
                            _limitItem.LoadFeedDuration = dir.LoadFeedDuration;
                        if (_limitItem.DateMin == DateTime.MinValue)
                            _limitItem.DateMin = dir.DateMin;
                        if (_limitItem.DateMax == DateTime.MaxValue)
                            _limitItem.setDateMax(dir.DateMax,true);
                    }

                    _limitItem.setParent(dir); 

                }

                //}
                // }

            }

        }
        #endregion
        #endregion

    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Tuning\LimitItem.cs">
    <content><![CDATA[using System;
using pdb.util;
using pdb.podcast.Report;
using pdb.podcast.Auto;
using System.Collections.Generic;

namespace pdb.podcast.Tuning
{
    /// <summary>
    /// Item de limite concernant la durée 
    /// </summary>
    public class LimitItem : LimitItemBase, IBuilderSource, IBorder
    {


        /// <summary>
        /// Détailler le rapport - à bouger
        /// </summary>
        public static bool includeDetail;


        public int Level { get { return limit.Level; } }
        public int Rating { get { return limit.Level * 20; } }



        private Limit limit;
        private TripleStat stats = new TripleStat();


        public override string ToString()
        {
            if (nb == 0 || feedDuration == 0)
                return Dir.ToString() + string.Format("\\{0}", limit.Level);
            return Dir.ToString() + string.Format("\\{0}:{1} {2} {3} {4} {5} {6} {7} {8}", limit.Level, getS("d", duration), getS("c", contribution), getS("fd", feedDuration), getS("nb", nb), getS("td", td), getS("tdMin", tdMin), getS("date", dateMin), getS("dateMax", dateMax));
        }

        private static string getS(string desc, int v)
        {
            if (v < int.MaxValue && v > 0)
                return string.Format("{0}->{1}", desc, v);
            return "";
        }

        private static string getS(string desc, double v)
        {
            if (v < int.MaxValue && v > 0)
                return string.Format("{0}->{1}", desc, v);
            return "";
        }

        private static string getS(string desc, DateTime v)
        {
            if (v > DateTime.MinValue && v < DateTime.MaxValue)
                return string.Format("{0}->{1}", desc, v);
            return "";
        }



        public void recordTrackMoy(TrackInfoItunes track, int countItems)
        {
            stats.recordTrack(track, countItems);
        }


        private bool durationLimitAtteinte;
        private bool contributionLimitAtteinte;
        private bool durationFeedLimit;
        private bool nbFeedLimit;
        public bool DurationLimitAtteinte { get { return durationLimitAtteinte; } set { durationLimitAtteinte = value; } }
        public bool ContributionLimitAtteinte { get { return contributionLimitAtteinte; } set { contributionLimitAtteinte = value; } }
        private bool loadDurationLimitAtteinte;
        public bool LoadDurationLimitAtteinte { get { return loadDurationLimitAtteinte; } set { loadDurationLimitAtteinte = value; } }

        public bool DurationFeedLimit { set { durationFeedLimit = value; } get { return durationFeedLimit; } }
        public bool NbFeedLimit { set { nbFeedLimit = value; } get { return nbFeedLimit; } }

        #region border
        public bool checkPub(TrackInfoItunes candidat)
        {
            var d = candidat.Pub;
            if (d < dateMin)
                return false;
            if (d > dateMax)
                return false;
            return true;
        }
        #endregion
        //#region border
        ///// <summary>
        ///// track In le plus près de la limite dateMin
        ///// </summary>
        //TrackInfoItunes borderDateMinIn;
        ///// <summary>
        ///// Track rejeté le plus près de la limite dateMin
        ///// </summary>
        //TrackInfoItunes borderDateMinOut;

        ///// <summary>
        ///// track In le plus près de la limite dateMax
        ///// </summary>
        //TrackInfoItunes borderDateMaxIn;
        ///// <summary>
        ///// Track rejeté le plus près de la limite dateMax
        ///// </summary>
        //TrackInfoItunes borderDateMaxOut;

        ///// <summary>
        ///// Dernier accepté par rapport à la durée totale
        ///// </summary>
        //TrackInfoItunes borderDurationIn;
        ///// <summary>
        ///// Premier rejeté par rapport à la durée totale
        ///// </summary>
        //TrackInfoItunes borderDurationOut;

        //TimeSpan borderDurationValueIn;
        //TimeSpan borderDurationValueOut;

        ///// <summary>
        ///// Dernier accepté par rapport à la durée de feed
        ///// </summary>
        //TrackInfoItunes borderFdIn;
        ///// <summary>
        ///// Premier rejeté par rapport à la durée Feed
        ///// </summary>
        //TrackInfoItunes borderFdOut;

        //TimeSpan borderFdValueIn;
        //TimeSpan borderFdValueOut; 

        //public void clearBorder()
        //{
        //    borderDateMinIn = null;
        //    borderDateMinOut = null;
        //    borderDateMaxIn = null; 
        //    borderDateMaxOut = null;
        //    borderDurationIn = null;
        //    borderDurationOut = null;
        //    borderDurationValueIn = new TimeSpan();
        //    borderDurationValueOut = new TimeSpan();

        //    borderFdIn = null;
        //    borderFdOut = null;
        //    borderFdValueIn = new TimeSpan();
        //    borderFdValueOut = new TimeSpan(); 
        //}
       

       
        //// --------vIn----limit ------vout
        //public void checkBorderFd(TrackInfoItunes candidat, TimeSpan duration, bool selected)
        //{
        //    if (selected && duration.TotalMinutes <= this.feedDuration )
        //    {
        //        if (borderFdIn == null || duration > borderFdValueIn )
        //        {
        //            borderFdIn = candidat;
        //            borderFdValueIn = duration;
        //        }
        //    }
        //    else if (!selected && duration.TotalMinutes > this.feedDuration)
        //    {
        //        if (borderFdOut == null || duration < borderFdValueOut)
        //        {
        //            borderFdOut = candidat;
        //            borderFdValueOut = duration;
        //        }
        //    }
        //    else
        //    {
        //    }
        //    }

        //public void checkBorderDuration(TrackInfoItunes candidat, TimeSpan duration, bool selected)
        //{
        //    if (selected && duration.TotalMinutes <= this.duration)
        //    {
        //        borderDurationIn = candidat;
        //        borderDurationValueIn = duration;
        //    }
        //    else if (!selected && duration.TotalMinutes > this.duration)
        //    {
        //        if (borderDurationOut == null)
        //        {
        //            borderDurationOut = candidat;
        //            borderDurationValueOut = duration;
        //        }
        //    }
        //    else
        //    {
        //    }
        //}

        //public void checkBorderDates(TrackInfoItunes candidat, bool selected)
        //{
        //    // ---minOut --limit ---minIn ----
        //    var d = candidat.Pub;
        //    if (d < dateMin)
        //    {
        //        if (borderDateMinOut == null ||d > borderDateMinOut.Pub )
        //            borderDateMinOut = candidat;
        //    }
        //    else if (d>=dateMin && selected)
        //    {
        //        if (borderDateMinIn == null || d < borderDateMinIn.Pub)
        //            borderDateMinIn = candidat;

        //    }
        //    // ---maxIn --limit ---maxOut ----
        //    if (d > dateMax)
        //    {
        //        if (borderDateMaxOut == null || d < borderDateMaxOut.Pub)
        //            borderDateMaxOut = candidat;
        //    }
        //    else if (d <= dateMax &&selected)
        //    {
        //        if (borderDateMaxIn == null || d >borderDateMaxIn.Pub )
        //            borderDateMaxIn = candidat;
        //    }
        //}

       

        //#endregion

        public void writeStat(ITextWriter sbRapport)
        {
            writeStatHeader(sbRapport);
            stats.buildValues(sbRapport);

        }

        private LimitItemStat stat;
        internal LimitItemStat Stat { set { stat = value; } get { return stat; } }

        public void writeStatHeader(ITextWriter sbRapport)
        {
            if (loadDurationLimitAtteinte)
                sbRapport.Append("d");
            else
                sbRapport.Append(" ");

            if (durationLimitAtteinte)
                sbRapport.Append("d");
            else
                sbRapport.Append(" ");

            if (contributionLimitAtteinte)
                sbRapport.Append("c");
            else
                sbRapport.Append(" ");

            if (durationFeedLimit)
                sbRapport.Append("f");
            else
                sbRapport.Append(" ");

            if (nbFeedLimit)
                sbRapport.Append("n");
            else
                sbRapport.Append(" ");
            sbRapport.Append(" ");

        }

        public void getToTaux(ITextWriter sb)
        {

        }

        public void rapport(DescBuilder sb)
        {
            sb.Append("\t");
            //sb.Append(Dir.getPath());
            //sb.Append(" ");
            sb.Append(ToString());
            sb.Append(" ");
        }

        public DirConf Dir { get { return limit.Dir; } }
        public string id = null;
        public string ID
        {
            get
            {
                if (id == null)
                {
                    int index = limit.index(this);
                    if (index >= 0)
                        id = Dir.getPath() + "\\" + Level + "\\_" + (index + 1);
                    else
                        id = Dir.getPath() + "\\_" + Level;

                }
                return id;
            }
        }
        private Logger logger;

        public LimitItem(Limit limit)
        {
            this.limit = limit;
        }
        public Logger Logger
        {
            get
            {
                if (logger == null)
                {
                    logger = Logger.getLogger(ID, false);
                }
                return logger;
            }
        }

        public object Clone()
        {
            var limitiItem =  new LimitItem(limit) { Nb = this.nb,  Td = this.td, TdMin = this.tdMin, DateMin = this.dateMin, Contribution = this.contribution, Stat = this.stat };
            limitiItem.duration = this.duration;
            limitiItem.feedDuration = this.feedDuration;
            limitiItem.dateMax = this.dateMax;            
            return limitiItem; 

        }

        public Limit Limit { set { limit = value; } get { return limit; } }


        public List<TrackInfoItunes> getSelectedTracks()
        {
            if (stat == null)
                return new List<TrackInfoItunes>();
            return new List<TrackInfoItunes>(stat.Total.Use.List);
        }

        public double getTotalSize()
        {
            if (stat == null)
                return -1;
            return stat.Total.Use.getTotalSize();
        }

        public string getEmpreinte()
        {
            if (stat == null)
                return "NULL";
            return stat.Total.Use.getEmpreinte();
        }


        public void addBorderObs(IBorderTransmit auto)
        {
            throw new NotImplementedException();
        }

        public void signal(TrackBorderItem tb)
        {
            // en attendant d'implémenter les autos pour limitItem
            if (tb == null)
                return;
            switch (tb.type)
            {
                case borderType.none: return;

                case borderType.d: if (!hduration) return; 
                    break;
                case borderType.fd: if (!hfeedDuration) return; 
                    break;
                case borderType.maxdate: if (!hdateMax) return;
                    break;
                case borderType.c:
                    break;
                default:
                    break;
            }
            limit.signal(tb);
           
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Tuning\LimitItemBase.cs">
    <content><![CDATA[using pdb.podcast.Auto;
using System;
using System.Xml;

namespace pdb.podcast.Tuning
{

    public class LimitItemBase
    {
        /// <summary>
        /// temps total de tous les flux associés à cette limite
        /// </summary>
        protected double duration = int.MaxValue;
        /// <summary>
        /// Temps total phase load de tous les flux associés à cette limite
        /// </summary>
        protected double loadDuration = int.MaxValue; 

        protected LimitItemBase parent;
        const double MAX = int.MaxValue;


        delegate void setf(double value);
        delegate void setI(int value);
        delegate void setd(DateTime value);

        public bool isChildOf(LimitItemBase p)
        {
            if (p == null)
                return true;
            if (this == p)
                return true;
            if (parent == null)
                return false;
            return parent.isChildOf(p); 

        }

        public void setParent(LimitItemBase parent)
        {
            this.parent = parent;
        }

        /// <summary>
        /// Contribution max de cette limite
        /// </summary>
        protected double contribution = int.MaxValue;
        /// <summary>
        /// nombre d'éléments max
        /// </summary>
        protected int nb = int.MaxValue;

        protected int lNb = int.MaxValue;

        /// <summary>
        /// durée totale du flux
        /// </summary>
        protected double feedDuration = int.MaxValue;

        protected double lFd = int.MaxValue; 

        /// <summary>
        /// durée max de chaque track
        /// </summary>
        protected double td = int.MaxValue;

        /// <summary>
        /// Durée min de chaque track
        /// </summary>
        protected double tdMin = 0;

        protected DateTime dateMin;

        protected DateTime dateMax = DateTime.MaxValue;

        public bool hduration; 
        public double Duration
        {
            get
            {
                if (parent == null || duration < MAX)
                    return duration;
                return parent.Duration;
            }
        //    set { duration = value; }
        }
        public void setDuration(double value, bool hduration)
        {
            this.duration = value;
            this.hduration = hduration; 
        }
       

        public double LoadDuration
        {
            get
            {
                if (parent == null || loadDuration < MAX)
                    return loadDuration;
                return parent.LoadDuration;
            }
            set { loadDuration = value; }
        }
        public double Contribution
        {
            get
            {
                if (parent == null || contribution < MAX)
                    return contribution;
                return parent.Contribution;
            }

            set { contribution = value; }
        }
        public double FeedDuration
        {
            get
            {
                if (parent == null || feedDuration < MAX)
                    return feedDuration;
                return parent.FeedDuration;
            }
          //  set { feedDuration = value; }
        }
        public bool hfeedDuration; 
        public void setFeedDuration(double value, bool hduration)
        {
            this.feedDuration = value;
            this.hfeedDuration = hduration;
        }
       
        public double LoadFeedDuration
        {
            get
            {
                if (parent == null || lFd < MAX)
                    return lFd;
                return parent.LoadFeedDuration;
            }
            set { lFd = value; }
        }

        public int Nb
        {
            get
            {
                if (parent == null || nb < int.MaxValue)
                    return nb;
                return parent.Nb;
            }
            set { nb = value; }
        }

        public int LoadNb
        {
            get
            {
                if (parent == null || lNb < int.MaxValue)
                    return lNb;
                return parent.LoadNb;
            }
            set { lNb = value; }
        }


        /// <summary>
        /// durée max de chaque track
        /// </summary>
        public double Td { set { td = value; } get { return td; } }
        /// <summary>
        /// Durée min de chaque track
        /// </summary>
        public double TdMin
        {
            set { tdMin = value; }
            get
            {
                if (parent == null || tdMin < MAX)
                    return tdMin;
                return parent.TdMin;
            }
        }
        public DateTime DateMin { set { dateMin = value; } get { return dateMin; } }
        public DateTime DateMax {
            //set { dateMax = value; } 
            get { return dateMax; } }
        public bool hdateMax;
        public void setDateMax(DateTime value, bool hdateMax)
        {
            this.dateMax = value;
            this.hdateMax = hdateMax; 
        }

        public void build(XmlNode parent, XmlNode child)
        {
            buildf(parent, child, "d", (v) => duration = v);
            buildf(parent, child, "ld", (v) => loadDuration = v);
            buildf(parent, child, "c", (v) => contribution = v);
            buildf(parent, child, "fd", (v) => feedDuration = v);
            buildf(parent, child, "lfd", (v) => lFd = v);
            buildi(parent, child, "nb", (v) => nb = v);
            buildi(parent, child, "lnb", (v) => lNb = v);
            buildd(parent, child, "date", (v) => dateMin = v);
            buildd(parent, child, "maxdate", (v) => dateMax = v);
        }

        private void buildf(XmlNode parent, XmlNode child, string name, setf setf)
        {
            XmlAttribute att = null;
            if (parent != null)
                att = parent.Attributes[name];
            if (att != null)
                setf(Convert.ToDouble(att.InnerText));
            att = child.Attributes[name];
            if (att != null)
                setf(Convert.ToDouble(att.InnerText));
        }

        private void buildi(XmlNode parent, XmlNode child, string name, setI seti)
        {
            XmlAttribute att = null;
            if (parent != null)
                att = parent.Attributes[name];
            if (att != null)
                seti(Convert.ToInt16(att.InnerText));
            att = child.Attributes[name];
            if (att != null)
                seti(Convert.ToInt16(att.InnerText));
        }

        private void buildd(XmlNode parent, XmlNode child, string name, setd setd)
        {
            XmlAttribute att = null;
            if (parent != null)
                att = parent.Attributes[name];
            if (att != null)
                setd(Conf.getDate(att.InnerText));
            att = child.Attributes[name];
            if (att != null)
                setd(Conf.getDate(att.InnerText));
        }

    }


}
]]></content>
  </file>
  <file path="\pdb.util\TimeSpan.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace pdb.util
{
    public struct timeSpan
    {
        public static DateTime Date0;
        private int sec;
        public const int SEC_IN_MIN = 60;
        public const int SEC_IN_HOUR = SEC_IN_MIN * 60;
        public const int SEC_IN_DAY = SEC_IN_HOUR * 24;



        private timeSpan(double sec)
        {
            this.sec = (int)Math.Round(sec);
        }
        public timeSpan(System.TimeSpan ts)
        {
            this.sec = (int)Math.Round(ts.TotalSeconds);
        }

        //public static timeSpan operator +(timeSpan t1, System.TimeSpan ts2)
        //{
        //    return new timeSpan(t1.sec + ts2.TotalSeconds);
        //}

        public static timeSpan operator +(timeSpan t1, timeSpan t2)
        {
            return new timeSpan(t1.sec + t2.sec);
        }

        //public static timeSpan operator -(timeSpan t1, System.TimeSpan ts2)
        //{
        //    return new timeSpan(t1.sec - ts2.TotalSeconds);
        //}

        public static timeSpan operator -(timeSpan t1, timeSpan t2)
        {
            return new timeSpan(t1.sec - t2.sec);
        }
        public static bool operator ==(timeSpan t1, timeSpan t2)
        {
            return t1.sec == t2.sec;
        }

        public static bool operator !=(timeSpan t1, timeSpan t2)
        {
            return t1.sec != t2.sec;
        }
        public static bool operator >(timeSpan t1, timeSpan t2)
        {
            return t1.sec > t2.sec;
        }
        public static bool operator >=(timeSpan t1, timeSpan t2)
        {
            return t1.sec >= t2.sec;
        }
        public static bool operator <(timeSpan t1, timeSpan t2)
        {
            return t1.sec < t2.sec;
        }
        public static bool operator <=(timeSpan t1, timeSpan t2)
        {
            return t1.sec <= t2.sec;
        }
        public static timeSpan FromMinutes(double d)
        {
            var s = d * SEC_IN_MIN;
            if (s > int.MaxValue)
                return new timeSpan(int.MaxValue);
            return new timeSpan(s);
        }

        public static timeSpan FromDays(double d)
        {
            var s = d * SEC_IN_DAY;
            if (s >= int.MaxValue)
                return new timeSpan(int.MaxValue);
            return new timeSpan(s);
        }

        public static timeSpan FromDate(DateTime t)
        {
            return new timeSpan(t - Date0);
        }

        public double TotalMinute { get { return sec / 60.0; } }
        public double TotalDay { get { return sec / 86400.0; } }

        public override string ToString()
        {
            int d = sec / SEC_IN_DAY;
            int r = sec - d * SEC_IN_DAY;
            int h = r / SEC_IN_HOUR;
            r -= h * SEC_IN_HOUR;
            int m = r / SEC_IN_MIN;
            r -= SEC_IN_MIN * m;
            StringBuilder sb = new StringBuilder();
            sb.Append(TotalMinute.ToString("0.#")); sb.Append(" ");

            bool w = false; 
            if (d > 0)
            {
                w = true; 
                sb.Append(d); sb.Append("j ");
            }
            if (w || h > 0)
            {
                w = true; 
                sb.Append(h); sb.Append("h ");
            }
            if (w||m > 0)
            {
                sb.Append(m); sb.Append("m ");
            }
            sb.Append(r); sb.Append("s");

            return sb.ToString();

        }

    }


}
]]></content>
  </file>
</db>
