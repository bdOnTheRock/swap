<db path="C:\Bernard\db1\PieceDb3Ref">
  <file path="\pdb.player\Vue\Conf\ConfVirt.xaml">
    <content><![CDATA[<UserControl x:Class="pdb.player.Vue.Conf.ConfVirt"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="86" d:DesignWidth="1193">
    <Grid Grid.IsSharedSizeScope="True" Height="55" Width="1154">
        <Grid.RowDefinitions>
            <RowDefinition Height="22*" />
            <RowDefinition Height="13*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" SharedSizeGroup="V1" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V2" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V3" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V4" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V5" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V6" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V7" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V8" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V9" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V10" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V11" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V12" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V13" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V14" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V15" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V16" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V17" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V18" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V19" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V20" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V21" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V22" />

            <ColumnDefinition Width="Auto" SharedSizeGroup="V23" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V24" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V25" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V26" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V27" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="V28" />
        </Grid.ColumnDefinitions>
      
     
        <CheckBox Height="20" VerticalAlignment="Center" Name="cb_lissage" ToolTip="lissage" Margin="5" Padding="2" Grid.RowSpan="2" />
        <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="1" Name="cb_removeEpsilon" ToolTip="removeEpsilon" Margin="5" Padding="2" Grid.RowSpan="2" />
        <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="2" Name="cb_reSort" ToolTip="reSort" Margin="5" Padding="2" Grid.RowSpan="2" />
        <TextBox  Height="20" Grid.Column="3" Name="tb_safe" Width="30" ToolTip="safe" Margin="5" KeyUp="tb_safe_KeyUp" Grid.RowSpan="2" />
        <TextBox  Height="20" Grid.Column="4" Name="tb_coeff" Width="50" ToolTip="coeff des morceaux virtuels" Margin="5" KeyUp="tb_safe_KeyUp" Grid.RowSpan="2" />
        <TextBox  Height="20"  Grid.Column="5" Name="tb_coeffT" Width="50" ToolTip="coeff total des morceaux virtuels" Margin="5" KeyUp="tb_coeffT_KeyUp" Grid.RowSpan="2" />


        <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="6" Name="cb_cumul" ToolTip="cumul" Margin="5" Padding="2" Grid.RowSpan="2" />
        <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="7" Name="cb_noAdd" ToolTip="pas d'ajout" Margin="5" Padding="2" Grid.RowSpan="2" />
       
      
        <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="8" Name="cb_virtOnlyDisabled" ToolTip="virtuel: seulement les décochés" Margin="5" Padding="2" Grid.RowSpan="2" />
        <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="9" Name="cb_forceCoeffVirt" ToolTip="virtuel: coeff forcé" Margin="5" Padding="2" Grid.RowSpan="2" />
        <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="10" Name="cb_virtAlignSelected" ToolTip="virtuel: aligné sur le coché" Margin="5" Padding="2" Grid.RowSpan="2" />
        <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="11" Name="cb_virtAlignPrec" ToolTip="virtuel: aligné sur le précédent" Margin="5" Padding="2" Grid.RowSpan="2" />
        <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="12" Name="cb_coeffVirtAdjust" ToolTip="coeffvirt ajusté sur coeff selected" Margin="5" Padding="2" Grid.RowSpan="2" />
        <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="13" Name="cb_coeffVirtAuto" ToolTip="coeffvirt automatique" Margin="5" Padding="2" Grid.RowSpan="2" />
        <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="14" Name="cb_noaddEnd" ToolTip="en fin d'alum pas de virtuel" Margin="5" Padding="2" Grid.RowSpan="2" />
        <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="15" Name="cb_noaddAll" ToolTip="tout virtuel" Margin="5" Padding="2" Grid.RowSpan="2" />
        <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="16" Name="cb_auto" ToolTip="pilotage auto" Margin="5" Padding="2" Grid.RowSpan="2" />
        <TextBox  Height="20" Grid.Column="17" Name="tb_dcoeffp" Width="40" ToolTip="delta en montée" Margin="5" Grid.RowSpan="2" KeyUp="tb_dcoeffp_KeyUp" />
        <TextBox  Height="20" Grid.Column="18" Name="tb_dcoeffm" Width="40" ToolTip="delta en descente" Margin="5" Grid.RowSpan="2" />
        <TextBox  Height="20" Grid.Column="19" Name="tb_convergence" Width="40" ToolTip="convergence" Margin="5" Grid.RowSpan="2" KeyUp="tb_convergence_KeyUp" />        
        <TextBox  Height="20" Grid.Column="20" Name="tb_dconvdeltap" Width="60" ToolTip="evol convergent +" Margin="5" Grid.RowSpan="2" />
        <TextBox  Height="20" Grid.Column="21" Name="tb_dconvdeltam" Width="60" ToolTip="cevol convergent -" Margin="5" Grid.RowSpan="2" />
        
        <CheckBox Height="20" VerticalAlignment="Center" Grid.Column="22" Name="cb_link" ToolTip="aligner convergence et coeff" Margin="5" Padding="2" Grid.RowSpan="2" Click="cb_link_Click" />
        <TextBox  Height="20" Grid.Column="23" Name="tb_prod" Width="60" ToolTip="produit de convergence" Margin="5" Grid.RowSpan="2" KeyUp="tb_prod_KeyUp" />
        <TextBox  Height="20" Grid.Column="24" Name="l_prod" Width="60" ToolTip="produit de convergence effectif" Margin="5" Grid.RowSpan="2"   IsEnabled="False"/>
        <TextBox  Height="20" Grid.Column="25" Name="tb_anti" Width="40" ToolTip="anti-convergence" Margin="5" Grid.RowSpan="2" />
        <TextBox  Height="20" Grid.Column="26" Name="tb_antideltap" Width="60" ToolTip="evol anti-convergent +" Margin="5" Grid.RowSpan="2" />
        <TextBox  Height="20" Grid.Column="27" Name="tb_antideltam" Width="60" ToolTip="evol anti-convergent -" Margin="5" Grid.RowSpan="2" />
    </Grid>
</UserControl>
]]></content>
  </file>
  <file path="\pdb.player\Vue\Conf\ConfVirt.xaml.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using pdb.util;

namespace pdb.player.Vue.Conf
{
    public interface IConfSort
    {
        string CoeffEnabled { get; }
        bool DuplicateItem { get; }
    }
    /// <summary>
    /// Interaction logic for ConfVirt.xaml
    /// </summary>
    public partial class ConfVirt : UserControl
    {
        private ConfMedianneVirt conf;
        private IConfSort parent;
        private bool displaying; 
        

        public ConfVirt()
        {
            InitializeComponent();
        }

        public ConfVirt(ConfMedianneVirt conf, IConfSort parent)
            : this()
        {
            this.conf = conf;
            this.parent = parent;
            display();
            onchange();
        }

        public ConfMedianneVirt Conf
        {
            set
            {
                this.conf = value; 
            }
        }


        public void display()
        {

            displaying = true; 
            cb_lissage.IsChecked = conf.lissage;
            cb_removeEpsilon.IsChecked = conf.removeEpsilon;
            cb_reSort.IsChecked = conf.reSort;


            cb_cumul.IsChecked = conf.cumul;
            cb_noAdd.IsChecked = conf.noAdd;
            tb_safe.Text = conf.safe.ToString();
            tb_coeff.Text = conf.coeffVirt.ToString();


            cb_virtOnlyDisabled.IsChecked = conf.virtOnlyDisabled;
            cb_forceCoeffVirt.IsChecked = conf.forceCoeffVirt;
            cb_virtAlignPrec.IsChecked = conf.virtAlignPrec;
            cb_virtAlignSelected.IsChecked = conf.virtAlignSelected;
            cb_coeffVirtAdjust.IsChecked = conf.coeffVirtAdjust;
            cb_coeffVirtAuto.IsChecked = conf.coeffVirtAuto;


            cb_noaddEnd.IsChecked = conf.noAddEnd;
            cb_noaddAll.IsChecked = conf.noAddAll;

            cb_auto.IsChecked = conf.auto;
            tb_dcoeffp.Text = conf.dcoeffp.ToString("0.###");
            tb_dcoeffm.Text = conf.dcoeffm.ToString("0.###");
            tb_convergence.Text = conf.dconvergence.ToString("0.###");
            tb_dconvdeltap.Text = conf.dconvdeltap.ToString("0.######");
            tb_dconvdeltam.Text = conf.dconvdeltam.ToString("0.######");

            tb_anti.Text = conf.danticonvergence.ToString("0.###");
            tb_antideltap.Text = conf.danticonvdeltap.ToString("0.######");
            tb_antideltam.Text = conf.danticonvdeltam.ToString("0.######");

            cb_link.IsChecked = conf.linkconv;


            tb_prod.Text = conf.LinkProduct.ToString("0.######");
            l_prod.Text = conf.calcProduct(conf.dcoeffp, conf.dconvergence).ToString("0.######");
            tb_prod.IsEnabled = conf.linkconv; 
            displaying = false; 

        }

       

        public void record()
        {


            conf.lissage = cb_lissage.IsChecked.Value;
            conf.removeEpsilon = cb_removeEpsilon.IsChecked.Value;
            conf.reSort = cb_reSort.IsChecked.Value;

            conf.cumul = cb_cumul.IsChecked.Value;
            conf.noAdd = cb_noAdd.IsChecked.Value;
            conf.safe = Convert.ToInt32(tb_safe.Text);
            conf.coeffVirt = Convert.ToDecimal(tb_coeff.Text);

            conf.virtOnlyDisabled = cb_virtOnlyDisabled.IsChecked.Value;
            conf.forceCoeffVirt = cb_forceCoeffVirt.IsChecked.Value;
            conf.virtAlignPrec = cb_virtAlignPrec.IsChecked.Value;
            conf.virtAlignSelected = cb_virtAlignSelected.IsChecked.Value;
            conf.coeffVirtAuto = cb_coeffVirtAuto.IsChecked.Value;
            conf.coeffVirtAdjust = cb_coeffVirtAdjust.IsChecked.Value;

            conf.noAddEnd = cb_noaddEnd.IsChecked.Value;
            conf.noAddAll = cb_noaddAll.IsChecked.Value;

            conf.auto = cb_auto.IsChecked.Value; 
            conf.dcoeffp = Convert.ToDecimal(tb_dcoeffp.Text);
            conf.dcoeffm = Convert.ToDecimal(tb_dcoeffm.Text);
            conf.dconvergence = Convert.ToDecimal(tb_convergence.Text);
            conf.dconvdeltap = Convert.ToDecimal(tb_dconvdeltap.Text);
            conf.dconvdeltam = Convert.ToDecimal(tb_dconvdeltam.Text);

            conf.danticonvergence = Convert.ToDecimal(tb_anti.Text);
            conf.danticonvdeltap = Convert.ToDecimal(tb_antideltap.Text);
            conf.danticonvdeltam = Convert.ToDecimal(tb_antideltam.Text);


            conf.linkconv = cb_link.IsChecked.Value; 



        }



        private void onchange2()
        {
            try
            {
                var safe = Convert.ToInt32(tb_safe.Text);
                var coeffT = Convert.ToDouble(tb_coeffT.Text);
                var coeff = Math.Pow(coeffT, (1.0 / (double)safe));
                tb_coeff.Text = coeff.ToString();
            }
            catch
            {
            }
        }

        private void tb_safe_KeyUp(object sender, System.Windows.Input.KeyEventArgs e)
        {
            onchange();
        }

        private void tb_coeffT_KeyUp(object sender, System.Windows.Input.KeyEventArgs e)
        {
            onchange2();
        }

        public void onchange()
        {



            if (true == cb_coeffVirtAdjust.IsChecked)
            {
                try
                {
                    var safe = Convert.ToInt32(tb_safe.Text);
                    var coeffEnabled = Convert.ToDecimal(parent.CoeffEnabled);
                    var coeffVirt = Math.Pow((double)coeffEnabled, 1.0 / (safe + 1.0));
                    tb_coeff.Text = coeffVirt.ToString();
                }
                catch
                {
                }
            }

            try
            {
                var safe = Convert.ToInt32(tb_safe.Text);
                var coeff = Convert.ToDouble(tb_coeff.Text);
                var coeffT = Math.Pow(coeff, (double)safe);
                tb_coeffT.Text = coeffT.ToString("0.###");
            }
            catch
            {
            }

        }

        private void cb_link_Click(object sender, RoutedEventArgs e)
        {
            tb_prod.IsEnabled = cb_link.IsChecked.Value;
          
        }

     

        private void tb_prod_KeyUp(object sender, KeyEventArgs e)
        {
            try
            {
                var coeffp = Convert.ToDecimal(tb_dcoeffp.Text);
                var prod = Convert.ToDecimal(tb_prod.Text);
                tb_convergence.Text = conf.calcConv(coeffp, prod).ToString("0.###");
            }
            catch 
            {
                
                
            }
        }

        private void tb_dcoeffp_KeyUp(object sender, KeyEventArgs e)
        {
            calcProduct(); 
        }

        private void tb_convergence_KeyUp(object sender, KeyEventArgs e)
        {
            calcProduct(); 
        }

        private void calcProduct()
        {
            try
            {
                var coeffp = Convert.ToDecimal(tb_dcoeffp.Text);
                var convergence = Convert.ToDecimal(tb_convergence.Text);
                tb_prod.Text = conf.calcProduct(coeffp, convergence).ToString("0.###");
            }
            catch
            {
            }
        }

    }
}
]]></content>
  </file>
  <file path="\pdb.util\Medianne.cs">
    <content><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.Xml;

namespace pdb.util
{
    public enum selectedCoeff
    {
        none,
        noCoeff,
        main,
        min
    }

    public enum medianneMode
    {
        none = 0,
        strict = 1,
        light = 2,
        moy = 3

    }
    public enum removeLast
    {
        non = 0,
        unselected = 1,
        virtuel = 2,
        tous = 3
    }

    public enum modeMin
    {
        /// <summary>
        /// On ne gère pas
        /// </summary>
        non = 0,
        /// <summary>
        /// Morceaux supérieurs à la limite ( pas d'influence sur le résultat)
        /// </summary>
        orphelin = 1,
        /// <summary>
        /// Morceaux cochés et notés
        /// </summary>
        toujours = 2

    }
    [Serializable]
    public class ConfMedianne : TuningBase
    {
        public medianneMode type;
        public decimal medianne = 0.5m;
        public bool quasi;

        public bool enabled;



        public bool removeFirst;
        public bool deleteFirst;
        public removeLast removeLast;

        public decimal expEnabled = 0m;

        public decimal zero = 0m;
        /// <summary>
        /// 
        /// </summary>
        public bool removeEnabled;




        public modeMin cmpMin;

        private ConfMedianneVirt _main;
        private ConfMedianneVirt _min;

        public ConfMedianneVirt Main { get { return _main; } }
        public ConfMedianneVirt Min { get { return _min; } }
        public ConfMedianne()
        {
            _main = new ConfMedianneVirt();
            _min = new ConfMedianneVirt();

        }

        public void makeIdem()
        {
            _min = _main;
        }

        public void duplicateMainIf()
        {
            if (_min == _main)
                _min = new ConfMedianneVirt(_main);
        }
        public ConfMedianne(ConfMedianne o)
        {
            type = o.type;
            medianne = o.medianne;
            quasi = o.quasi;

            enabled = o.enabled;



            removeFirst = o.removeFirst;
            deleteFirst = o.deleteFirst;
            removeLast = o.removeLast;

            expEnabled = o.expEnabled;

            zero = o.zero;
            removeEnabled = o.removeEnabled;



            cmpMin = o.cmpMin;

            _main = new ConfMedianneVirt(o._main);
            _min = new ConfMedianneVirt(o._min);

        }

        public ConfMedianne(XmlElement parent, XmlElement child)
            : base(parent, child)
        {
            var strType = "";
            builds("type", v => strType = v);
            type = (medianneMode)Enum.Parse(typeof(medianneMode), strType, true);
            builddec("medianne", v => medianne = v);
            buildb("quasi", v => quasi = v);
            buildb("enabled", v => enabled = v);
            buildb("removeFirst", v => removeFirst = v);
            buildb("deleteFirst", v => deleteFirst = v);
            builddec("expEnabled", v => expEnabled = v);
            builddec("zero", v => zero = v);
            buildb("removeEnabled", v => removeEnabled = v);
            string _modeMin = "";
            builds("cmpMin", v => _modeMin = v);
            if (!string.IsNullOrEmpty(_modeMin))
                cmpMin = (modeMin)Enum.Parse(typeof(modeMin), _modeMin, true);

            string _removeLast = null;
            builds("removeLast", v => _removeLast = v);
            removeLast = (removeLast)Enum.Parse(typeof(removeLast), _removeLast, true);

            _main = null;
            _min = null;
            var subs = XMLTool.NodeLookUp(child, "virts");
            if (subs != null)
            {
                foreach (XmlNode _n in subs.ChildNodes)
                {
                    if (_n is XmlElement)
                    {
                        if (_main == null)
                        {
                            _main = new ConfMedianneVirt(child, _n as XmlElement);

                        }
                        else if (_min == null)
                        {
                            _min = new ConfMedianneVirt(child, _n as XmlElement);
                        }
                    }
                }
                if (_min == null && _main != null)
                    _min = new ConfMedianneVirt(_main);
            }
        }

        public override void save(XmlWriter w)
        {
            base.save(w);
            writeStart("cmp");
            write("type", type);
            write("medianne", medianne);
            write("quasi", quasi);
            write("enabled", enabled);
            write("removeFirst", removeFirst);
            write("deleteFirst", deleteFirst);
            write("expEnabled", expEnabled);
            write("zero", zero);
            write("removeEnabled", removeEnabled);
            write("cmpMin", cmpMin);
            write("removeLast", removeLast);

            writeStart("virts");
            _main.save(w);
            _min.save(w);
            writeEnd();

            writeEnd();



        }


        public void auto(selectedCoeff motif)
        {
            if (!enabled)
                return;
            if (motif == selectedCoeff.none)
                return;
            var coeffPrisEncompte = motif > selectedCoeff.noCoeff;
            if (_min == _main || _min.coeffVirt == 1m)
            {
                _main.calcAuto(coeffPrisEncompte, 1);
            }
            else
            {
                if (coeffPrisEncompte)
                {
                    if (motif == selectedCoeff.main)
                        _main.calcAuto(true, 1);
                    if (motif == selectedCoeff.min)
                        _min.calcAuto(true, 1);
                }
                else
                {
                    _main.calcAuto(false, 1);
                    _min.calcAuto(false, 1);
                }
            }
        }
    }

    [Serializable]
    public class ConfMedianneVirt : TuningBase
    {
        const decimal EPSILON = 0.001m;
        public int safe;
        public decimal coeffVirt = 1m;

        public bool virtOnlyDisabled;
        public bool noAddEnd;
        public bool noAddAll;
        public bool virtAlignSelected;
        public bool virtAlignPrec;
        public bool coeffVirtAuto;
        public bool coeffVirtAdjust;

        public bool removeEpsilon;

        public bool forceCoeffVirt;
        public bool lissage;
        public bool cumul;

        public bool reSort;
        public bool noAdd;


        public bool auto;
        public decimal dcoeffp;
        public decimal dcoeffm;
        /// <summary>
        /// atténuation progressive des coeffs
        /// </summary>
        public decimal dconvergence;

        public decimal dconvdeltap = 1m;
        public decimal dconvdeltam = 1m;

        /// <summary>
        /// anti atténuation
        /// </summary>
        public decimal danticonvergence = 1m;
        public decimal danticonvdeltap = 1m;
        public decimal danticonvdeltam = 1m;
        private bool _linkconv;
        private decimal linkProduct;
        public bool linkconv { get { return _linkconv; } set { _linkconv = value; calcProduct(); } }

        private void calcProduct()
        {
            this.linkProduct = calcProduct(this.dcoeffp, this.dconvergence);
        }

        public decimal calcProduct(decimal dcoeffp, decimal dconvergence)
        {
            var linkProduct = this.linkProduct;
            try
            {
                linkProduct = dcoeffp / (1 - dconvergence);
                // 1 0,9 -> 10
                // 0.1 0,99 
            }
            catch
            {
            }

            return linkProduct;
        }

        private void calcConv()
        {
            this.dconvergence = calcConv(this.dcoeffp, this.linkProduct);
        }

        public decimal LinkProduct
        {
            get
            {
                if (linkProduct == 0m)
                    calcProduct();
                return linkProduct;
            }
            set
            {
                linkProduct = value;
                calcConv();

            }
        }

        public decimal calcConv(decimal dcoeffp, decimal linkProduct)
        {
            var dconvergence = this.dconvergence;
            try
            {
                // 1- conv = coeff / prod
                dconvergence = 1 - dcoeffp / linkProduct; //1/10
            }
            catch
            {

            }
            return dconvergence;
        }

        private bool? lastAutoDirection;

        public ConfMedianneVirt()
        { }
        public ConfMedianneVirt(ConfMedianneVirt o)
        {
            safe = o.safe;
            coeffVirt = o.coeffVirt;
            virtOnlyDisabled = o.virtOnlyDisabled;
            noAddEnd = o.noAddEnd;
            noAddAll = o.noAddAll;
            virtAlignSelected = o.virtAlignSelected;
            virtAlignPrec = o.virtAlignPrec;
            coeffVirtAuto = o.coeffVirtAuto;
            coeffVirtAdjust = o.coeffVirtAdjust;
            removeEpsilon = o.removeEpsilon;
            forceCoeffVirt = o.forceCoeffVirt;
            lissage = o.lissage;
            cumul = o.cumul;
            reSort = o.reSort;
            noAdd = o.noAdd;
            auto = o.auto;
            dcoeffp = o.dcoeffp;
            dcoeffm = o.dcoeffm;
            dconvergence = o.dconvergence;
            dconvdeltap = o.dconvdeltap;
            dconvdeltam = o.dconvdeltam;
            danticonvergence = o.danticonvergence;
            danticonvdeltap = o.danticonvdeltap;
            danticonvdeltam = o.danticonvdeltam;
            _linkconv = o._linkconv;
        }
        public ConfMedianneVirt(XmlElement parent, XmlElement child)
            : base(parent, child)
        {

            builddec("coeffVirt", v => coeffVirt = v);
            buildi("safe", v => safe = v);

            buildb("virtOnlyDisabled", v => virtOnlyDisabled = v);
            buildb("noAddEnd", v => noAddEnd = v);
            buildb("noAddAll", v => noAddAll = v);
            buildb("virtAlignSelected", v => virtAlignSelected = v);
            buildb("virtAlignPrec", v => virtAlignPrec = v);
            buildb("coeffVirtAuto", v => coeffVirtAuto = v);
            buildb("coeffVirtAdjust", v => coeffVirtAdjust = v);

            buildb("removeEpsilon", v => removeEpsilon = v);
            buildb("forceCoeffVirt", v => forceCoeffVirt = v);
            buildb("lissage", v => lissage = v);
            buildb("cumul", v => cumul = v);
            buildb("reSort", v => reSort = v);
            buildb("noAdd", v => noAdd = v);
            buildb("auto", v => auto = v);
            builddec("dcoeffp", v => dcoeffp = v);
            builddec("dcoeffm", v => dcoeffm = v);
            builddec("dconvergence", v => dconvergence = v);
            builddec("dconvdeltap", v => dconvdeltap = v);
            builddec("dconvdeltam", v => dconvdeltam = v);

            builddec("danticonvergence", v => danticonvergence = v);
            builddec("danticonvdeltap", v => danticonvdeltap = v);
            builddec("danticonvdeltam", v => danticonvdeltam = v);
            buildb("linkconv", v => _linkconv = v);


        }

        public override void save(XmlWriter w)
        {
            base.save(w);
            writeStart("v");
            write("coeffVirt", coeffVirt);
            write("safe", safe);

            write("virtOnlyDisabled", virtOnlyDisabled);
            write("noAddEnd", noAddEnd);
            write("noAddAll", noAddAll);
            write("virtAlignSelected", virtAlignSelected);
            write("virtAlignPrec", virtAlignPrec);
            write("coeffVirtAuto", coeffVirtAuto);
            write("coeffVirtAdjust", coeffVirtAdjust);

            write("removeEpsilon", removeEpsilon);
            write("forceCoeffVirt", forceCoeffVirt);
            write("lissage", lissage);
            write("cumul", cumul);
            write("reSort", reSort);
            write("noAdd", noAdd);
            write("auto", auto);
            write("dcoeffp", dcoeffp);
            write("dcoeffm", dcoeffm);
            write("dconvergence", dconvergence);
            write("dconvdeltap", dconvdeltap);
            write("dconvdeltam", dconvdeltam);

            write("danticonvergence", danticonvergence);
            write("danticonvdeltap", danticonvdeltap);
            write("danticonvdeltam", danticonvdeltam);
            write("linkconv", linkconv);
            writeEnd();
        }

        public void calcAuto(bool selectedByCoeff, int nb)
        {
            if (!auto)
                return;
            var last = lastAutoDirection;
            lastAutoDirection = selectedByCoeff;
            var lastProduct = linkProduct;
            if (selectedByCoeff)
                makeDelta(false, dcoeffm, nb);
            else
                makeDelta(true, dcoeffp, nb);

            var c0 = dcoeffp;
            /// au debut dconvergence à effet  fort 0.9 doit arriver à 0.999
            /// // quand j'applique la convergence, je fait baisser son effet

            if (dconvergence > 0 && last.HasValue)
            {
                var aux = dconvergence;
                if (last != selectedByCoeff)
                {
                    dcoeffp *= dconvergence;
                    dcoeffm *= dconvergence;
                    if (dcoeffp < EPSILON) dcoeffp = EPSILON;
                    if (dcoeffm < EPSILON) dcoeffm = EPSILON;

                    lastAutoDirection = null;


                    if (_linkconv)
                        calcConv();
                    else
                    {

                        var delta = 1 - dconvergence; // 1- 0.9 = 0.1 // 1-0.1 = 0.9
                        delta *= dconvdeltam; // 0.09 // 0.81
                        dconvergence = 1 - delta; // 0.9 -> 0.91 // 0.1-> 0.19
                    }



                    danticonvergence *= danticonvdeltam;
                    if (danticonvergence < 1m) danticonvergence = 1;

                    //delta = danticonvergence - 1; // 0.1
                    //delta *= danticonvdeltam;  //0.09; 
                    //    danticonvergence = 1+delta; // 1.1 -> 1.09



                }
                else
                {
                    dcoeffp *= danticonvergence;
                    dcoeffm *= danticonvergence;
                    if (_linkconv)
                        calcConv();
                    else
                    {

                        var delta = 1 - dconvergence; // 1- 0.9 = 0.1 // 1-0.1 = 0.9
                        delta *= dconvdeltap; // 0.11 // 0.99
                        dconvergence = 1 - delta; // 0.9 -> 0.89 // 0.01
                        if (dconvergence < 0)
                            dconvergence = 0;
                    }

                    danticonvergence *= danticonvdeltap;



                }
                misc.log("convergence {0:0.##}->{1:0.##}", c0, dcoeffp);
                misc.log("evol convergence {0:0.######}->{1:0.######}", aux, dconvergence);
            }



        }

        private void makeDelta(bool sens, decimal delta, int nb)
        {
            try
            {
                decimal coeffT = (decimal)Math.Pow((double)coeffVirt, safe);
                string montee = sens ? "up" : "down";
                var c0 = coeffT;
                if (sens)
                {
                    for (int i = 0; i < nb; i++)
                        coeffT += delta;
                }
                else
                {
                    for (int i = 0; i < nb; i++)
                        coeffT -= delta;
                }
                if (coeffT < 1)
                    coeffT = 1;

                var coeff = (decimal)Math.Pow((double)coeffT, (1.0 / (double)safe));

                misc.log("{0} {1} {2:0.##}->{3:0.##}", montee, delta, c0, coeffT);
                coeffVirt = coeff;
            }
            catch
            {
            }


        }

    }
    public class CalcMedianne
    {
        const decimal PRECISION = 0.0000001m;
        private static int index;
        public static int Index { get { return index; } }


        public static DecimalIndex getMedianne(IEnumerable list, decimal coeffMedianne)
        {
            var _list = new List<decimal>();
            foreach (object o in list)
            {
                _list.Add(Convert.ToDecimal(o));
            }
            return getMedianne(_list, coeffMedianne);
        }

        public static DecimalIndex getMedianne(IList<decimal> list, decimal coeffMedianne)
        {
            return new DecimalIndex() { d = getMedianne_(list, coeffMedianne), index = index };
        }

        //public static DecimalIndex getMedianneLight(IList<decimal> list, ConfMedianne mode)
        //{

        //    DecimalIndex ret = new DecimalIndex();
        //    var medianne = getMedianne_(list, mode.medianne);
        //    ret.d = medianne;
        //    ret.index = index;
        //    if (list.Count == 1)
        //        return ret;

        //    int indexV = 0;

        //    int count = list.Count;

        //    if (mode.safe > 0)
        //    {

        //        int i0 = count - 1;

        //        for (int i = 0; i < count; i++)
        //        {
        //            if (list[i] == 0m)
        //            {
        //                i0 = i;
        //                break;
        //            }
        //        }
        //        if (i0 == 0)
        //            return ret;

        //        //for (int i00 = 1; i00 <= i0; i00++)
        //        //{
        //        //    decimal coeff = (decimal)i00 / (decimal)i0;
        //        List<decimal> _list = new List<decimal>(list);
        //        //for (int i = i00; i < count; i++)
        //        //    _list[i] = 0m;
        //        //liste partielle originale
        //        //  List<decimal> _list0 = new List<decimal>(_list);
        //        int _count = Math.Min(count, i0 + mode.safe);
        //        decimal[] virt = new decimal[_count];
        //        for (int i = 0; i < i0; i++)
        //        {
        //            decimal _coeff = 1m;
        //            decimal _base = _list[i];
        //            for (int j = i + 1; j < _count; j++)
        //            {
        //                _coeff /= mode.coeffVirt;
        //                virt[j] += _base * _coeff;
        //            }
        //        }

        //        decimal value = int.MaxValue;
        //        int ii = 0;
        //        for (ii = 1; ii < count && ii < _count; ii++)
        //        {
        //            value = _list[ii];
        //            var calc = virt[ii];
        //            if (value < calc)
        //            {
        //                if (mode.lissage || value == 0m)
        //                {
        //                    value = calc;
        //                    _list[ii] = value;
        //                }

        //            }
        //            else
        //                indexV = ii;
        //        }
        //        if (mode.removeEpsilon)
        //        {
        //            // j'ai 5 virtuel alors que j'ai deux safe
        //            ///xx---
        //            int nb = 0;
        //            for (int i = indexV + 1; i < _count; i++)
        //            {
        //                nb++;
        //                if (nb <= mode.safe)
        //                    continue;
        //                _list[i] = 0m;
        //            }

        //        }

        //        if (mode.reSort)
        //        {
        //            _list.Sort();
        //            _list.Reverse();
        //        }

        //        //for (int i = 0; i < nbAdd; i++)
        //        //    _list.RemoveAt(0); 


        //        var retAux = calcmedianneVirt(_list, mode.medianne, mode.quasi);
        //        //retAux.d *= coeff;
        //        if (retAux > ret)
        //        {
        //            ret = retAux;
        //            //  ret.index += nbAdd; 
        //        }
        //        //}


        //    }
        //    else
        //        ret = calcmedianneVirt(list, mode.medianne, mode.quasi);

        //    //  ret = getRapport(ret);


        //    return ret;
        //}


        public static DecimalIndex getMedianneLight0(IList<decimal> list, decimal coeffMedianne, bool quasi, int nbVirt)
        {
            DecimalIndex ret = new DecimalIndex();
            var medianne = getMedianne_(list, coeffMedianne);
            ret.d = medianne;
            ret.index = index;
            if (list.Count == 1)
                return ret;

            int count = list.Count;


            // decimal ret = medianne; //int.MinValue;

            if (nbVirt > 0)
            {

                int i0 = count - 1;

                for (int i = 0; i < count; i++)
                {
                    if (list[i] == 0m)
                    {
                        i0 = i;
                        break;
                    }
                }
                if (i0 == 0)
                    return ret;

                for (int i00 = 1; i00 <= i0; i00++)
                {
                    decimal coeff = (decimal)i00 / (decimal)i0;
                    List<decimal> _list = new List<decimal>(list);
                    for (int i = i00; i < count; i++)
                        _list[i] = 0m;
                    int _count = Math.Min(count, i00 + nbVirt);
                    decimal[] virt = new decimal[_count];
                    for (int i = 0; i < i00; i++)
                    {
                        decimal _coeff = 1m;
                        decimal _base = _list[i];
                        for (int j = i + 1; j < _count; j++)
                        {
                            _coeff /= 10m;
                            virt[j] += _base * _coeff;
                        }
                    }
                    // decimal prec = -1m;  
                    int _nbVirt = 0;
                    decimal value = int.MaxValue;
                    int ii = 0;
                    for (ii = 1; ii < count && ii < _count; ii++)
                    {
                        //   prec = value;
                        value = _list[ii];
                        var calc = virt[ii];
                        if (value < calc)
                        {
                            if (_nbVirt >= nbVirt)
                                break;
                            _nbVirt++;
                            value = calc;  //Math.Min(prec, calc);
                            _list[ii] = value;

                        }
                        else
                            _nbVirt = 0;
                    }
                    for (int i = ii; i < count && i < _count; i++)
                    {
                        _list[i] = 0m;
                    }
                    //_list.Sort();
                    //_list.Reverse(); 



                    var retAux = calcmedianneVirt(_list, coeffMedianne, quasi);
                    retAux.d *= coeff;
                    if (retAux > ret)
                        ret = retAux;
                }


            }
            else
                ret = calcmedianneVirt(list, coeffMedianne, quasi);

            //  ret = getRapport(ret);

            //if (ret < medianne)
            //    ret = medianne;
            return ret;
        }

        private static decimal getLn(decimal rapport)
        {
            if (rapport <= 0)
                return 0m;
            return Convert.ToDecimal(10 + Math.Log10((double)rapport));
        }
        private static decimal getRapport(decimal ln)
        {
            return Convert.ToDecimal(Math.Pow(10, (double)ln - 10));
        }

        private static DecimalIndex calcmedianneVirt(IList<decimal> _list, decimal coeffMedianne, bool quasi)
        {

            int count = _list.Count;

            DecimalIndex ret = new DecimalIndex() { d = 0m, index = 0 }; // 0m; // decimal ret = int.MinValue;
            for (int i = 0; i < count; i++)
            {
                if (i > 0)
                {

                    _list.RemoveAt(count - i);
                }

                var aux = getMedianne_(_list, coeffMedianne);
                if (aux == 0m)
                    continue;
                // aux = getLn(aux);
                //decimal coeff = 1; 
                //if (count >2)
                //coeff = (decimal)(count - 2 - i) / (decimal)(count - 2); 
                decimal coeff = 1 - (decimal)i / (decimal)count; // (decimal)count - i / (decimal)count;
                if (quasi)
                    coeff *= coeff;
                aux = aux * coeff;
                if (aux > ret.d)
                {
                    ret.d = aux;
                    ret.index = index;
                }

                if (_list[count - i - 1] > 0m)
                    break;


            }

            //     if (ret == int.MinValue)
            //         return 0m;
            return ret;
        }


        public static decimal getMedianneLight0(IList<decimal> list, decimal coeffMedianne, bool quasi)
        {
            if (list.Count == 1)
                return getMedianne_(list, coeffMedianne);
            decimal ret = 0m;
            int count = list.Count;

            List<decimal> _list = new List<decimal>(list);
            // ret = getMedianne_(_list, coeffMedianne);
            decimal nb = 0m;
            for (int i = 0; i < count - 1; i++)
            {
                if (i > 0)
                    _list.RemoveAt(count - i);
                var aux = getMedianne_(_list, coeffMedianne);
                decimal coeff = count - 1 - i;
                if (quasi)
                    coeff *= coeff;
                ret += aux * coeff;
                nb += coeff;


            }
            ret /= nb;


            return ret;
        }
        private static decimal getMedianne_(IList<decimal> list, decimal coeffMedianne)
        {
            index = 0;
            if (list == null)
                throw new ArgumentException("liste nulle");
            int count = list.Count;
            if (count == 0)
                throw new ArgumentException("liste vide");
            if (coeffMedianne < 0 || coeffMedianne > 1)
                throw new ArgumentException("coeffMedianne doit être compris entre 0 et 1, valeur:" + coeffMedianne);
            if (count == 1)
                return list[0];
            if (coeffMedianne == 0)
                return list[0];
            if (coeffMedianne == 1)
            {
                index = count - 1;
                return list[count - 1];
            }

            var medianne = coeffMedianne * (count - 1);

            index = (int)medianne;
            int i1 = index + 1;
            var val0 = list[index];
            var val1 = list[i1];
            if (Math.Abs(medianne - Convert.ToDecimal(index)) < PRECISION)
                return val0;
            if (Math.Abs(medianne - i1) < PRECISION)
            {
                index = i1;
                return val1;
            }

            var pente = (val1 - val0);
            var dx = medianne - index;
            var dy = pente * dx;
            return val0 + dy;

        }

        //public static int getEquiv(IList<double> listRef, double target, int i0, int i1)
        //{
        //    var val0 = listRef[i0]; 
        //     var val1 = listRef[i1]; 
        //    if (i1 - i0 == 1)
        //    {
        //        // on prend le plus proche
        //        var delta0 = target - val0;
        //        var delta1 = val1 - target; 

        //        if (delta0 <= delta1)
        //            return i0;
        //        return i1; 
        //    }

        //    int imiddle = (i0 + i1) / 2;
        //    if (imiddle == i0)
        //        imiddle++; 
        //    var vmiddle = listRef[imiddle];

        //    if (vmiddle == target)
        //        return imiddle;
        //    if (Math.Abs(vmiddle - target) < PRECISION)
        //        return imiddle;

        //    if (vmiddle < target)
        //        return getEquiv(listRef, target, imiddle, i1);
        //    return getEquiv(listRef, target, i0, imiddle); 


        //}
    }
}]]></content>
  </file>
  <file path="\PieceDb.Consolid\albums\AlbumMedianne.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using pdb.util;
using System.Collections;

namespace pdb.gen.albums
{
    class AlbumMedianne
    {
        const decimal PRECISION = 0.0000001m;
        const decimal EPSILON = 0.0000000000001m;
        const decimal EPSILON_LOG = EPSILON;
        private static int index;
        public static int Index { get { return index; } }


        //public static DecimalIndex getMedianne(IEnumerable list, decimal coeffMedianne)
        //{
        //    var _list = new List<decimal>();
        //    foreach (object o in list)
        //    {
        //        _list.Add(Convert.ToDecimal(o));
        //    }
        //    return getMedianne(_list, coeffMedianne);
        //}

        //public static DecimalIndex getMedianne(List<decimal> list, decimal coeffMedianne)
        //{
        //    return new DecimalIndex() { d = getMedianne_(list, coeffMedianne), index = index };
        //}

        //public static DecimalIndex getMedianneLight(List<decimal> list, List<Piece> pieces, ConfMedianne mode, bool signal)
        //{
        //    DecimalIndex ret0 = new DecimalIndex();
        //    DecimalIndex ret = ret0;
        //    try
        //    {


        //        var _zero = mode.zero;
        //        var medianne = getMedianne_(list, mode.medianne);
        //        ret0.d = medianne;
        //        ret0.index = index;

        //        if (list.Count == 1)
        //            return ret0;

        //        if (mode.safe == 0)
        //        {
        //            return calcmedianneVirt(list, mode, 0, 0);
        //        }

        //        int indexV = 0;
        //        int nbAdd = 0;

        //        int count = list.Count;

        //        if (mode.safe > 0)
        //        {

        //            int i0 = count - 1;
        //            int _nbNoAdd = 0;

        //            for (int i = 0; i < count; i++)
        //            {
        //                if (list[i] <= _zero)
        //                {
        //                    i0 = i;
        //                    _nbNoAdd = count - i0;
        //                    break;
        //                }
        //            }
        //            if (i0 == 0)
        //                return ret0;

        //            //for (int i00 = 1; i00 <= i0; i00++)
        //            //{
        //            //    decimal coeff = (decimal)i00 / (decimal)i0;
        //            List<decimal> _list = new List<decimal>(list);
        //            //for (int i = i00; i < count; i++)
        //            //    _list[i] = 0m;
        //            //liste partielle originale
        //            //  List<decimal> _list0 = new List<decimal>(_list);
        //            int _count = System.Math.Min(count, i0 + mode.safe);
        //            decimal[] virt = new decimal[_count];
        //            _nbNoAdd = System.Math.Min(mode.safe, _nbNoAdd);
        //            if (mode.noAdd)
        //            {

        //                decimal _coeff = 1m;
        //                for (int j = _nbNoAdd - 1; j >= 0; j--)
        //                {
        //                    if (j < count)
        //                    {
        //                        _coeff /= mode.coeffVirt;
        //                        _list[j] = _list[j] * _coeff;
        //                    }
        //                }
        //            }
        //            else if (mode.lissage || mode.removeEpsilon || mode.cumul)
        //            {
        //                for (int i = 0; i < i0; i++)
        //                {
        //                    decimal _coeff = 1m;
        //                    decimal _base = _list[i];
        //                    for (int j = i + 1; j < _count; j++)
        //                    {
        //                        _coeff /= mode.coeffVirt;
        //                        virt[j] = System.Math.Max(virt[j], _base * _coeff); //     += _base * _coeff;
        //                    }
        //                }
        //            }
        //            else
        //            {
        //                decimal courant = _list[0];
        //                for (int i = 1; i < _count; i++)
        //                {
        //                    if (_list[i] <= _zero)
        //                    {
        //                        courant /= mode.coeffVirt;
        //                        virt[i] = courant;
        //                    }
        //                    else
        //                        courant = _list[i];
        //                }
        //            }

        //            decimal value = int.MaxValue;
        //            int ii = 0;
        //            if (mode.noAdd)
        //            {
        //                //for (ii = 1; ii < count && ii < _count; ii++)
        //                //{
        //                //    var calc = virt[ii];
        //                //    if (calc > 0m)
        //                //        list[ii] = calc;
        //                //}
        //            }
        //            else
        //            {
        //                for (ii = 1; ii < count && ii < _count; ii++)
        //                {
        //                    value = _list[ii];
        //                    var calc = virt[ii];
        //                    if (value < calc)
        //                    {
        //                        if (mode.lissage || value <= _zero)
        //                        {
        //                            if (value <= _zero)
        //                                nbAdd++;
        //                            value = calc;
        //                            _list[ii] = value;
        //                        }

        //                    }
        //                    else
        //                        indexV = ii;
        //                }
        //                if (mode.removeEpsilon)
        //                {
        //                    // j'ai 5 virtuel alors que j'ai deux safe
        //                    ///xx---
        //                    int nb = 0;
        //                    for (int i = indexV + 1; i < _count; i++)
        //                    {
        //                        nb++;
        //                        if (nb <= mode.safe)
        //                            continue;
        //                        _list[i] = 0m;
        //                    }

        //                }
        //                if (mode.removeFirst)
        //                {
        //                    for (int i = 0; i < nbAdd; i++)
        //                    {
        //                        _list[i] = 0m;
        //                    }
        //                }
        //            }

        //            for (int i = 0; i < _list.Count && i < pieces.Count; i++)
        //                pieces[i].setClassementVirtuel(_list[i]);

        //            if (mode.deleteFirst)
        //            {
        //                for (int i = 0; i < nbAdd; i++)
        //                {
        //                    _list.RemoveAt(0);
        //                }
        //            }

        //            if (mode.reSort || mode.removeFirst || mode.noAdd)
        //            {
        //                _list.Sort();
        //                _list.Reverse();
        //                pieces.Sort(new PieceCmp());
        //            }



        //            if (mode.noAdd)
        //                nbAdd = _nbNoAdd;

        //            ret = calcmedianneVirt(_list, mode, nbAdd, System.Math.Min(i0, mode.safe));
        //            if (mode.expEnabled != 0)
        //            {
        //                int _nb = pieces.Count<Piece>(p => !p.Enabled);
        //                decimal _c = (decimal)_nb / (decimal)count;
        //                _c = Math.Pow(_c, mode.expEnabled);
        //                ret.d *= _c;
        //            }


        //        }
        //        else
        //            ret = calcmedianneVirt(list, mode, 0, 0);

        //        //if (ret < ret0)
        //        //    ret = ret0; 



        //    }
        //    finally
        //    {
        //        if (signal)
        //        {
        //            try
        //            {
        //                pieces[ret.index].MedianneLight = true;
        //                pieces[ret.indexBorder].Border = true;
        //                pieces[ret.indexBorderEffect].BorderEffect = true;
        //                pieces[ret.indexBorderMin].BorderMin = true;

        //            }
        //            catch { }
        //        }
        //    }

        //    return ret;
        //}

        public static int buildVirtual(List<Piece> pieces, ConfMedianne mode, ConfMedianneVirt modeVirt, decimal coeffEnabled, bool main, ref int i0)
        {


            int indexV = 0;
            int nbAdd = 0;

            int count = pieces.Count;
            List<Piece> _pieces = pieces;
            var _zero = mode.zero;


            if (modeVirt.safe > 0)
            {
                i0 = count - 1;
                int _nbNoAdd = 0;


                for (int i = 0; i < count; i++)
                {
                    var pp = pieces[i];
                    if (pp.VirtualClassement == 0m)
                    {
                        i0 = i;
                        _nbNoAdd = count - i0;
                        break;
                    }
                }

                if (modeVirt.virtOnlyDisabled || mode.removeLast == removeLast.unselected)
                    _nbNoAdd = pieces.Count<Piece>(p => p.Enabled);  // || p.VirtualClassement == 0m);
                if (modeVirt.noAddAll)
                    _nbNoAdd = pieces.Count;
                if (modeVirt.noAddEnd)
                {
                    // var nb1 = pieces.Count<Piece>(p => p.Enabled);
                    // morceaux déjà notés
                    var nb2 = pieces.Count<Piece>(p => !p.Enabled && p.RapportClassement > 0);
                    _nbNoAdd = _nbNoAdd - nb2;
                    if (_nbNoAdd < 0)
                        _nbNoAdd = 0;
                }
                if (i0 == 0)
                    return 0;
                //}

                //for (int i00 = 1; i00 <= i0; i00++)
                //{
                //    decimal coeff = (decimal)i00 / (decimal)i0;
                List<decimal> _list = new List<decimal>();
                for (int i = 0; i < _pieces.Count; i++)
                    _list.Add(_pieces[i].VirtualClassement);
                //for (int i = i00; i < count; i++)
                //    _list[i] = 0m;
                //liste partielle originale
                //  List<decimal> _list0 = new List<decimal>(_list);
                int _count = System.Math.Min(count, i0 + modeVirt.safe);
                decimal[] virt = new decimal[_count];
                _nbNoAdd = System.Math.Min(modeVirt.safe, _nbNoAdd);
                if (modeVirt.noAdd)
                {
                    var _coeffVirt = modeVirt.coeffVirt;
                    if (count < modeVirt.safe && modeVirt.coeffVirtAuto)
                    {
                        if (modeVirt.coeffVirtAdjust)
                            _coeffVirt = Math.Pow(coeffEnabled, 1.0m / (count + 1.0m));
                        else
                        {
                            // ex 2^10 = 1024
                            // je veux obtenir 1024 avec 3
                            _coeffVirt = Math.Pow(_coeffVirt, (decimal)modeVirt.safe / (decimal)count);
                        }
                    }

                    decimal _coeff = 1m;
                    decimal prec = 0m;
                    if (modeVirt.virtAlignPrec)
                    {
                        if (_nbNoAdd < _list.Count)
                            prec = _list[_nbNoAdd];
                    }

                    for (int j = _nbNoAdd - 1; j >= 0; j--)
                    {
                        if (j < _pieces.Count)
                        {

                            if (!modeVirt.virtOnlyDisabled || !_pieces[j].Enabled)
                            {
                                _coeff /= _coeffVirt;
                                var cand = _list[j] * _coeff;
                                if (modeVirt.virtAlignPrec)
                                {
                                    if (cand < prec)
                                        cand = prec + EPSILON;
                                }

                                if (modeVirt.virtAlignSelected && modeVirt.virtOnlyDisabled)
                                {
                                    // quel serait le score s'il était coché
                                    var vu = _list[j] / coeffEnabled;
                                    // en plus une petite marge
                                    //  vu *= mode.coeffVirt; 
                                    if (cand < vu)
                                        cand = vu;
                                }
                                _list[j] = cand;
                            }
                            else if (modeVirt.forceCoeffVirt)
                                _coeff /= _coeffVirt;
                            prec = _list[j];
                        }
                    }

                }
                else if (modeVirt.lissage || modeVirt.removeEpsilon || modeVirt.cumul)
                {
                    for (int i = 0; i < i0; i++)
                    {
                        decimal _coeff = 1m;
                        decimal _base = _list[i];
                        for (int j = i + 1; j < _count; j++)
                        {
                            _coeff /= modeVirt.coeffVirt;
                            virt[j] = System.Math.Max(virt[j], _base * _coeff); //     += _base * _coeff;
                        }
                    }
                }
                else
                {
                    decimal courant = _list[0];
                    for (int i = 1; i < _count; i++)
                    {
                        if (_list[i] <= _zero)
                        {
                            courant /= modeVirt.coeffVirt;
                            virt[i] = courant;
                        }
                        else
                            courant = _list[i];
                    }
                }

                decimal value = int.MaxValue;
                int ii = 0;
                if (modeVirt.noAdd)
                {
                    //for (ii = 1; ii < count && ii < _count; ii++)
                    //{
                    //    var calc = virt[ii];
                    //    if (calc > 0m)
                    //        list[ii] = calc;
                    //}
                }
                else
                {
                    for (ii = 1; ii < count && ii < _count; ii++)
                    {
                        value = _list[ii];
                        var calc = virt[ii];
                        if (value < calc)
                        {
                            if (modeVirt.lissage || value <= _zero)
                            {
                                if (value <= _zero)
                                    nbAdd++;
                                value = calc;
                                _list[ii] = value;
                            }

                        }
                        else
                            indexV = ii;
                    }
                    if (modeVirt.removeEpsilon)
                    {
                        // j'ai 5 virtuel alors que j'ai deux safe
                        ///xx---
                        int nb = 0;
                        for (int i = indexV + 1; i < _count; i++)
                        {
                            nb++;
                            if (nb <= modeVirt.safe)
                                continue;
                            _list[i] = 0m;
                        }

                    }
                    if (mode.removeFirst)
                    {
                        for (int i = 0; i < nbAdd; i++)
                        {
                            _list[i] = 0m;
                        }
                    }
                }

                for (int i = 0; i < _list.Count && i < _pieces.Count; i++)
                {
                    if (main)
                        _pieces[i].setClassementVirtuel(_list[i]);
                    else
                        _pieces[i].setClassementVirtuel2(_list[i]);
                }

                if (mode.deleteFirst)
                {
                    for (int i = 0; i < nbAdd; i++)
                    {
                        pieces.RemoveAt(0);
                    }
                }

                if (modeVirt.reSort || mode.removeFirst || modeVirt.noAdd)
                {
                    //_list.Sort();
                    //_list.Reverse();
                    if (main)
                        pieces.Sort(new PieceCmp());
                    else
                        pieces.Sort(new PieceCmp2());
                }



                if (modeVirt.noAdd)
                    nbAdd = _nbNoAdd;
            }
            return nbAdd;
        }

        public static DecimalIndex getMedianneLight(List<Piece> pieces, decimal coeffEnabled, ConfMedianne mode, bool signal)
        {

            DecimalIndex ret0 = new DecimalIndex();
            DecimalIndex ret = ret0;
            try
            {
                var _zero = mode.zero;
                var medianne = getMedianne_(pieces, mode.medianne);
                ret0.d = medianne;
                ret0.index = index;
                ret = ret0;
                if (pieces.Count == 1)
                    return ret0;

                //if (mode.safe == 0)
                //{
                //    return calcmedianneVirt(pieces, mode, 0, 0);
                //}

                //int indexV = 0;
                //int nbAdd = 0;

                //int count = pieces.Count;
                //List<Piece> _pieces = pieces;
                ////if (mode.virtOnlyDisabled)
                ////{
                ////    _pieces = pieces.FindAll(p => !p.Enabled && p.VirtualClassement > 0m);
                ////    _pieces.Sort(new PieceCmp());
                ////}


                //if (mode.safe > 0)
                //{
                //    int i0 = count - 1;
                //    int _nbNoAdd = 0;
                //    //if (mode.virtOnlyDisabled)
                //    //{
                //    //    _nbNoAdd = pieces.Count<Piece>(p => p.Enabled);
                //    //}
                //    //else
                //    //{

                //    for (int i = 0; i < count; i++)
                //    {
                //        var pp = pieces[i];
                //        if (pp.VirtualClassement == 0m)
                //        {
                //            i0 = i;
                //            _nbNoAdd = count - i0;
                //            break;
                //        }
                //    }

                //    if (mode.virtOnlyDisabled || mode.removeLast == removeLast.unselected)
                //        _nbNoAdd = pieces.Count<Piece>(p => p.Enabled);  // || p.VirtualClassement == 0m);
                //    if (mode.noAddAll)
                //        _nbNoAdd = pieces.Count;
                //    if (mode.noAddEnd)
                //    {
                //        // var nb1 = pieces.Count<Piece>(p => p.Enabled);
                //        // morceaux déjà notés
                //        var nb2 = pieces.Count<Piece>(p => !p.Enabled && p.RapportClassement > 0);
                //        _nbNoAdd = _nbNoAdd - nb2;
                //        if (_nbNoAdd < 0)
                //            _nbNoAdd = 0;
                //    }
                //    if (i0 == 0)
                //        return ret0;
                //    //}

                //    //for (int i00 = 1; i00 <= i0; i00++)
                //    //{
                //    //    decimal coeff = (decimal)i00 / (decimal)i0;
                //    List<decimal> _list = new List<decimal>();
                //    for (int i = 0; i < _pieces.Count; i++)
                //        _list.Add(_pieces[i].VirtualClassement);
                //    //for (int i = i00; i < count; i++)
                //    //    _list[i] = 0m;
                //    //liste partielle originale
                //    //  List<decimal> _list0 = new List<decimal>(_list);
                //    int _count = System.Math.Min(count, i0 + mode.safe);
                //    decimal[] virt = new decimal[_count];
                //    _nbNoAdd = System.Math.Min(mode.safe, _nbNoAdd);
                //    if (mode.noAdd)
                //    {
                //        var _coeffVirt = mode.coeffVirt;
                //        if (count < mode.safe && mode.coeffVirtAuto)
                //        {
                //            if (mode.coeffVirtAdjust)
                //                _coeffVirt = Math.Pow(coeffEnabled, 1.0m / (count + 1.0m));
                //            else
                //            {
                //                // ex 2^10 = 1024
                //                // je veux obtenir 1024 avec 3
                //                _coeffVirt = Math.Pow(_coeffVirt, (decimal)mode.safe / (decimal)count);
                //            }
                //        }

                //        decimal _coeff = 1m;
                //        decimal prec = 0m;
                //        if (mode.virtAlignPrec)
                //        {
                //            if (_nbNoAdd < _list.Count)
                //                prec = _list[_nbNoAdd];
                //        }

                //        for (int j = _nbNoAdd - 1; j >= 0; j--)
                //        {
                //            if (j < _pieces.Count)
                //            {

                //                if (!mode.virtOnlyDisabled || !_pieces[j].Enabled)
                //                {
                //                    _coeff /= _coeffVirt;
                //                    var cand = _list[j] * _coeff;
                //                    if (mode.virtAlignPrec)
                //                    {
                //                        if (cand < prec)
                //                            cand = prec + EPSILON;
                //                    }

                //                    if (mode.virtAlignSelected && mode.virtOnlyDisabled)
                //                    {
                //                        // quel serait le score s'il était coché
                //                        var vu = _list[j] / coeffEnabled;
                //                        // en plus une petite marge
                //                        //  vu *= mode.coeffVirt; 
                //                        if (cand < vu)
                //                            cand = vu;
                //                    }
                //                    _list[j] = cand;
                //                }
                //                else if (mode.forceCoeffVirt)
                //                    _coeff /= _coeffVirt;
                //                prec = _list[j];
                //            }
                //        }

                //    }
                //    else if (mode.lissage || mode.removeEpsilon || mode.cumul)
                //    {
                //        for (int i = 0; i < i0; i++)
                //        {
                //            decimal _coeff = 1m;
                //            decimal _base = _list[i];
                //            for (int j = i + 1; j < _count; j++)
                //            {
                //                _coeff /= mode.coeffVirt;
                //                virt[j] = System.Math.Max(virt[j], _base * _coeff); //     += _base * _coeff;
                //            }
                //        }
                //    }
                //    else
                //    {
                //        decimal courant = _list[0];
                //        for (int i = 1; i < _count; i++)
                //        {
                //            if (_list[i] <= _zero)
                //            {
                //                courant /= mode.coeffVirt;
                //                virt[i] = courant;
                //            }
                //            else
                //                courant = _list[i];
                //        }
                //    }

                //    decimal value = int.MaxValue;
                //    int ii = 0;
                //    if (mode.noAdd)
                //    {
                //        //for (ii = 1; ii < count && ii < _count; ii++)
                //        //{
                //        //    var calc = virt[ii];
                //        //    if (calc > 0m)
                //        //        list[ii] = calc;
                //        //}
                //    }
                //    else
                //    {
                //        for (ii = 1; ii < count && ii < _count; ii++)
                //        {
                //            value = _list[ii];
                //            var calc = virt[ii];
                //            if (value < calc)
                //            {
                //                if (mode.lissage || value <= _zero)
                //                {
                //                    if (value <= _zero)
                //                        nbAdd++;
                //                    value = calc;
                //                    _list[ii] = value;
                //                }

                //            }
                //            else
                //                indexV = ii;
                //        }
                //        if (mode.removeEpsilon)
                //        {
                //            // j'ai 5 virtuel alors que j'ai deux safe
                //            ///xx---
                //            int nb = 0;
                //            for (int i = indexV + 1; i < _count; i++)
                //            {
                //                nb++;
                //                if (nb <= mode.safe)
                //                    continue;
                //                _list[i] = 0m;
                //            }

                //        }
                //        if (mode.removeFirst)
                //        {
                //            for (int i = 0; i < nbAdd; i++)
                //            {
                //                _list[i] = 0m;
                //            }
                //        }
                //    }

                //    for (int i = 0; i < _list.Count && i < _pieces.Count; i++)
                //        _pieces[i].setClassementVirtuel(_list[i]);

                //    if (mode.deleteFirst)
                //    {
                //        for (int i = 0; i < nbAdd; i++)
                //        {
                //            pieces.RemoveAt(0);
                //        }
                //    }

                //    if (mode.reSort || mode.removeFirst || mode.noAdd)
                //    {
                //        //_list.Sort();
                //        //_list.Reverse();
                //        pieces.Sort(new PieceCmp());
                //    }



                //    if (mode.noAdd)
                //        nbAdd = _nbNoAdd;
                int i0 = 0;
                int count = pieces.Count;
                int nbAdd = buildVirtual(pieces, mode, mode.Main, coeffEnabled, true, ref i0);
                ret = calcmedianneVirt(pieces, mode, nbAdd, System.Math.Min(i0, mode.Main.safe));
                if (mode.expEnabled != 0)
                {
                    int _nb = pieces.Count<Piece>(p => !p.Enabled);
                    decimal _c = (decimal)_nb / (decimal)count;
                    _c = Math.Pow(_c, mode.expEnabled);
                    ret.d *= _c;
                }


                //}
                //else
                //    ret = calcmedianneVirt(pieces, mode, 0, 0);

                //if (ret < ret0)
                //    ret = ret0; 

            }
            finally
            {

                if (signal)
                {
                    try
                    {
                        pieces[ret.index].MedianneLight = true;
                        pieces[ret.indexBorder].Border = true;
                        pieces[ret.indexBorderEffect].BorderEffect = true;
                        pieces[ret.indexBorderMin].BorderMin = true;

                    }
                    catch { }
                }
            }

            return ret;
        }




        private class PieceCmp : IComparer<Piece>
        {
            private static PieceTrackNumberComparer tn = new PieceTrackNumberComparer();
            public int Compare(Piece x, Piece y)
            {
                int cmp = x.VirtualClassement.CompareTo(y.VirtualClassement);
                if (cmp != 0)
                    return -cmp;
                return tn.Compare(x, y);
            }
        }

        private class PieceCmp2 : IComparer<Piece>
        {
            private static PieceTrackNumberComparer tn = new PieceTrackNumberComparer();
            public int Compare(Piece x, Piece y)
            {
                int cmp = x.VirtualClassement2.CompareTo(y.VirtualClassement2);
                if (cmp != 0)
                    return -cmp;
                return tn.Compare(x, y);
            }
        }




        //private static DecimalIndex calcmedianneVirt(IList<decimal> list, ConfMedianne conf, int nbAdd, int nbDel)
        //{
        //    var _list = new List<decimal>(list);
        //    int count = _list.Count;

        //    DecimalIndex ret = new DecimalIndex() { d = 0m, index = 0 }; // 0m; // decimal ret = int.MinValue;
        //    int _nbSupp = 0;
        //    bool beginBorder = false;
        //    for (int i = 0; i < count; i++)
        //    {

        //        if (i > 0)
        //        {

        //            _list.RemoveAt(count - i);

        //        }

        //        var aux = getMedianne_(_list, conf.medianne);
        //        if (aux == 0m)
        //            continue;
        //        if (!beginBorder)
        //        {
        //            beginBorder = true;
        //            ret.indexBorder = count - i - 1;
        //        }
        //        // aux = getLn(aux);
        //        //decimal coeff = 1; 
        //        //if (count >2)
        //        //coeff = (decimal)(count - 2 - i) / (decimal)(count - 2); 
        //        decimal coeff = 1 - (decimal)i / (decimal)count; // (decimal)count - i / (decimal)count;
        //        if (conf.removeFirst && !conf.deleteFirst && i > nbDel)
        //        {
        //            coeff = 1 - (decimal)(i - nbDel) / (decimal)count;
        //        }
        //        if (conf.quasi)
        //            coeff *= coeff;
        //        aux = aux * coeff;
        //        if (aux > ret.d)
        //        {
        //            ret.d = aux;
        //            ret.index = index;
        //            ret.indexBorderEffect = count - i - 1;
        //        }

        //        if (_list[count - i - 1] > conf.zero)
        //        {

        //            if (conf.removeLast == removeLast.non)
        //                break;
        //            _nbSupp++;
        //            if (conf.removeLast == removeLast.virtuel && _nbSupp >= nbAdd)
        //                break;
        //        }


        //    }

        //    //     if (ret == int.MinValue)
        //    //         return 0m;
        //    return ret;
        //}



        private static DecimalIndex calcmedianneVirt(IList<Piece> list, ConfMedianne conf, int nbAdd, int nbDel)
        {
            var _list = new List<Piece>(list);
            var classes = _list.FindAll(p => p.VirtualClassement > conf.zero);
            int count = _list.Count;

            int nbEnabled = classes.Count<Piece>(p => p.Enabled);
            int nbDisabled = classes.Count<Piece>(p => !p.Enabled);
            int nbdispo = System.Math.Min(nbEnabled, nbDisabled);


            DecimalIndex ret = new DecimalIndex() { d = 0m, index = 0 }; // 0m; // decimal ret = int.MinValue;
            int _nbSupp = 0;
            //int _nbSuppDisabled = 0;
            //int _nbSuppEnabled = 0;
            bool beginBorder = false;
            for (int i = 0; i < count; i++)
            {

                if (i > 0)
                {
                    //var d = _list[count - i];
                    //if (d.Enabled)
                    //    nbEnabled--;
                    //else
                    //    nbDisabled--;

                    _list.RemoveAt(count - i);

                }

                var aux = getMedianne_(_list, conf.medianne);
                if (aux == 0m)
                    continue;
                if (!beginBorder)
                {
                    beginBorder = true;
                    ret.indexBorder = count - i - 1;
                }
                // aux = getLn(aux);
                //decimal coeff = 1; 
                //if (count >2)
                //coeff = (decimal)(count - 2 - i) / (decimal)(count - 2); 
                decimal coeff = 1 - (decimal)i / (decimal)count; // (decimal)count - i / (decimal)count;
                if (conf.removeFirst && !conf.deleteFirst && i > nbDel)
                {
                    coeff = 1 - (decimal)(i - nbDel) / (decimal)count;
                }
                if (conf.quasi)
                    coeff *= coeff;
                aux = aux * coeff;
                if (aux > ret.d)
                {
                    ret.d = aux;
                    ret.index = index;
                    ret.indexBorderEffect = count - i - 1;
                }

                ret.indexBorderMin = count - i - 1;
                var p = _list[count - i - 1];

                if (p.VirtualClassement > conf.zero)
                {
                    // je regarde si le morceau est désactivé
                    // si c'est coché, je ne regarde pas quand je considère qu'on peut supprimmer les morceaux activé
                    if (p.Enabled)
                        nbEnabled--;
                    else
                        nbDisabled--;
                    nbdispo--;

                    if (!p.Enabled || !conf.removeEnabled || conf.removeLast == removeLast.unselected)
                    {
                        //bool priseEncompte = true || nbEnabled <= 0 || !conf.removeEnabled || conf.removeLast == removeLast.unselected;
                        //if (priseEncompte)
                        //{
                        if ((conf.removeLast == removeLast.non || conf.removeLast == removeLast.unselected) && nbEnabled < 0)
                            break;

                        if (conf.removeLast == removeLast.unselected) //&& (nbEnabled <= 0 ||  nbDisabled <=0))
                        {
                            if (nbdispo < 0)
                                break;
                        }

                        _nbSupp++;
                        if (conf.removeLast == removeLast.virtuel && _nbSupp >= nbAdd)
                            break;
                        // }


                    }
                }


            }

            //     if (ret == int.MinValue)
            //         return 0m;
            return ret;
        }

        //public static decimal getMedianneLight0(IList<decimal> list, decimal coeffMedianne, bool quasi)
        //{
        //    if (list.Count == 1)
        //        return getMedianne_(list, coeffMedianne);
        //    decimal ret = 0m;
        //    int count = list.Count;

        //    List<decimal> _list = new List<decimal>(list);
        //    // ret = getMedianne_(_list, coeffMedianne);
        //    decimal nb = 0m;
        //    for (int i = 0; i < count - 1; i++)
        //    {
        //        if (i > 0)
        //            _list.RemoveAt(count - i);
        //        var aux = getMedianne_(_list, coeffMedianne);
        //        decimal coeff = count - 1 - i;
        //        if (quasi)
        //            coeff *= coeff;
        //        ret += aux * coeff;
        //        nb += coeff;


        //    }
        //    ret /= nb;


        //    return ret;
        //}
        //private static decimal getMedianne_(IList<decimal> list, decimal coeffMedianne)
        //{
        //    index = 0;
        //    if (list == null)
        //        throw new ArgumentException("liste nulle");
        //    int count = list.Count;
        //    if (count == 0)
        //        throw new ArgumentException("liste vide");
        //    if (coeffMedianne < 0 || coeffMedianne > 1)
        //        throw new ArgumentException("coeffMedianne doit être compris entre 0 et 1, valeur:" + coeffMedianne);
        //    if (count == 1)
        //        return list[0];
        //    if (coeffMedianne == 0)
        //        return list[0];
        //    if (coeffMedianne == 1)
        //    {
        //        index = count - 1;
        //        return list[count - 1];
        //    }

        //    var medianne = coeffMedianne * (count - 1);

        //    index = (int)medianne;
        //    int i1 = index + 1;
        //    var val0 = list[index];
        //    var val1 = list[i1];
        //    if (Math.Abs(medianne - Convert.ToDecimal(index)) < PRECISION)
        //        return val0;
        //    if (Math.Abs(medianne - i1) < PRECISION)
        //    {
        //        index = i1;
        //        return val1;
        //    }

        //    var pente = (val1 - val0);
        //    var dx = medianne - index;
        //    var dy = pente * dx;
        //    return val0 + dy;

        //}

        private static decimal getMedianne_(IList<Piece> list, decimal coeffMedianne)
        {
            index = 0;
            if (list == null)
                throw new ArgumentException("liste nulle");
            int count = list.Count;
            if (count == 0)
                throw new ArgumentException("liste vide");
            if (coeffMedianne < 0 || coeffMedianne > 1)
                throw new ArgumentException("coeffMedianne doit être compris entre 0 et 1, valeur:" + coeffMedianne);
            if (count == 1)
                return list[0].VirtualClassement;
            if (coeffMedianne == 0)
                return list[0].VirtualClassement;
            if (coeffMedianne == 1)
            {
                index = count - 1;
                return list[count - 1].VirtualClassement;
            }

            var medianne = coeffMedianne * (count - 1);

            index = (int)medianne;
            int i1 = index + 1;
            var val0 = list[index].VirtualClassement;
            var val1 = list[i1].VirtualClassement;
            if (Math.Abs(medianne - Convert.ToDecimal(index)) < PRECISION)
                return val0;
            if (Math.Abs(medianne - i1) < PRECISION)
            {
                index = i1;
                return val1;
            }

            if (val1 < PRECISION)
            {
                index = i1;
                return val1;
            }

            //         var pente = (val1 - val0);
            var dx = medianne - index;

            // var ret = val0 + pente * dx;


            // moyenne avec calcul de log
            var log0 = Math.Log(val0 + EPSILON_LOG);
            var log1 = Math.Log(val1 + EPSILON_LOG);
            // pente = log1 - log0;
            var log = log0 + (log1 - log0) * dx;
            return Math.Exp(log) - EPSILON_LOG;
          

        }

        //public static int getEquiv(IList<double> listRef, double target, int i0, int i1)
        //{
        //    var val0 = listRef[i0]; 
        //     var val1 = listRef[i1]; 
        //    if (i1 - i0 == 1)
        //    {
        //        // on prend le plus proche
        //        var delta0 = target - val0;
        //        var delta1 = val1 - target; 

        //        if (delta0 <= delta1)
        //            return i0;
        //        return i1; 
        //    }

        //    int imiddle = (i0 + i1) / 2;
        //    if (imiddle == i0)
        //        imiddle++; 
        //    var vmiddle = listRef[imiddle];

        //    if (vmiddle == target)
        //        return imiddle;
        //    if (Math.Abs(vmiddle - target) < PRECISION)
        //        return imiddle;

        //    if (vmiddle < target)
        //        return getEquiv(listRef, target, imiddle, i1);
        //    return getEquiv(listRef, target, i0, imiddle); 


        //}
    }
}
]]></content>
  </file>
</db>
