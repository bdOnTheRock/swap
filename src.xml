<db path="C:\Bernard\db1\pd4bb">
  <file path="\PieceDb.Consolid\albums\AlbumMedianne.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using pdb.gen.auto;
using pdb.gen.medianne;
using pdb.gen.Tuning;
using pdb.util;
using Math = pdb.util.Math;

namespace pdb.gen.albums
{
    class AlbumMedianne
    {
        const decimal PRECISION = 0.0000001m;
        const decimal EPSILON = 0.0000000000001m;
        const decimal EPSILON_LOG = EPSILON;
        // private static PieceExtended index;
        //  public static int Index { get { return index; } }
        private static PieceExtended median;


        //public static DecimalIndex getMedianne(IList<Piece> list, bool main, decimal coeffMedianne)
        //{

        //    return new DecimalIndex() { d = getMedianne_(list, main, coeffMedianne), index = index };
        //}


        public static DecimalPiece getMedianne(IList<PieceExtended> list, bool main, decimal coeffMedianne)
        {
            PieceExtended.Mode = PieceExtended.mode.main;
            var ret = getMedianne_(list, coeffMedianne);
            return new DecimalPiece() { d = ret, index = median };
        }
        private List<PieceExtended> pieces;
        private ConfMedianne mode;
        private int _nbNoAdd;
        public AlbumMedianne(List<PieceExtended> pieces, ConfMedianne mode)
        {
            this.pieces = pieces;
            this.mode = mode;
            this._nbNoAdd = getNoAdd(mode.Main);
        }



        public void buildVirtual(bool combine, bool simple)
        {

            if (!mode.Min.Use)
            {
                buildVirtual0(mode.Main, true);
                align(mode.Main, PieceExtended.mode.main);
            }
            else
            {
                buildVirtual0(mode.Main, true);
                buildVirtual0(mode.Min, false);

                if (combine)
                {
                    foreach (PieceExtended p in pieces)
                        p.Combine();
                    align(mode.Main, PieceExtended.mode.combine);
                }

                if (!simple)
                {
                    align(mode.Main, PieceExtended.mode.main);
                    align(mode.Min, PieceExtended.mode.min);
                }
            }



            //if (!mode.Min.Use)
            //{
            //    buildVirtual0(mode.Main, true);
            //    align(mode.Main, PieceExtended.mode.main);
            //}
            //else if (combine && simple)
            //{
            //    buildVirtual0(mode.Main, true);
            //    buildVirtual0(mode.Min, false);
            //    foreach (PieceExtended p in pieces)
            //        p.Combine();
            //    align(mode.Main, PieceExtended.mode.combine);
            //}
            //else
            //{
            //    buildVirtual0(mode.Main, true);
            //    buildVirtual0(mode.Min, false);
            //    align(mode.Main, PieceExtended.mode.main);
            //    align(mode.Min, PieceExtended.mode.min);

            //    if (combine)
            //    {
            //        foreach (PieceExtended p in pieces)
            //            p.Combine();
            //        align(mode.Main, PieceExtended.mode.combine);
            //    }
            //}
        }

        private int getNoAdd(ConfMedianneVirt modeVirt)
        {

            var safe = modeVirt.safe;
            var _nbNoAdd = 0;

            int i0 = 0;
            int count = pieces.Count;
            if ((modeVirt.coeffVirtAuto && modeVirt.coeffVirtAutoAll) || modeVirt.noAddAll)
                _nbNoAdd = pieces.Count;
            else if (modeVirt.virtOnlyDisabled || mode.removeLast == removeLast.unselected)
            {
                _nbNoAdd = pieces.Count(p => p.Enabled);  // || p.VirtualClassement == 0m);
                if (modeVirt.coeffVirtAuto && modeVirt.coeffVirtAutoAll)
                    return _nbNoAdd;
                if (_nbNoAdd > 0)
                    _nbNoAdd--;
            }
            else
            {
                for (int i = 0; i < count; i++)
                {
                    var pp = pieces[i];
                    if (pp.VirtualClassement == 0m)
                    {
                        i0 = i;
                        _nbNoAdd = count - i0;
                        break;
                    }
                }
            }

            if (modeVirt.coeffVirtAuto && modeVirt.coeffVirtAutoAll)
                return _nbNoAdd;

            if (modeVirt.noAddEnd)
            {
                // var nb1 = pieces.Count<Piece>(p => p.Enabled);
                // morceaux déjà notés
                var nb2 = pieces.Count<PieceExtended>(p => !p.Enabled && p.RapportClassement > 0);
                _nbNoAdd = _nbNoAdd - nb2;
                if (_nbNoAdd < 0)
                    _nbNoAdd = 0;
            }
            _nbNoAdd = System.Math.Min(safe, _nbNoAdd);

            return _nbNoAdd;
        }

        public void align(ConfMedianneVirt modeVirt, PieceExtended.mode main)
        {
            var count = pieces.Count;
            if (count < 2)
                return;
            PieceExtended.Mode = main;
            pieces.Sort(new PieceCmp0());

            decimal prec = pieces[count - 1].Value;

            var coeffEnabled = modeVirt.CoeffOld;


            for (int j = count - 2; j >= 0; j--)
            {
                var cand = pieces[j].Value;
                bool change = false;
                if (cand == 0)
                    continue;
                if (modeVirt.virtAlignPrec)
                {
                    if (cand < prec)
                    {
                        cand = prec + EPSILON;
                        change = true;
                    }
                }

                if (modeVirt.virtAlignSelected && modeVirt.virtOnlyDisabled)
                {

                    // quel serait le score s'il était coché
                    var vu = pieces[j].Value / coeffEnabled;
                    // en plus une petite marge
                    //  vu *= mode.coeffVirt; 
                    if (cand < vu)
                    {
                        cand = vu;
                        change = true;
                    }
                }
                if (change)
                    pieces[j].Value = cand;

                prec = cand;
            }

        }

        //public void align0(ConfMedianneVirt modeVirt, PieceExtended.mode main)
        //{
        //    var count = pieces.Count; 
        //    if (count < 2)
        //        return;
        //    pieces.Sort(new PieceCmp0()); 
        //    //if (main== PieceExtended.mode.main)
        //    //    pieces.Sort(new PieceCmp());
        //    //else if (main == PieceExtended.mode.min)
        //    //    pieces.Sort(new PieceCmp2());
        //    //else
        //    //    pieces.Sort(new PieceCmp3());
        //    decimal prec = 0m;

        //    var coeffEnabled = modeVirt.CoeffOld;

        //    if (modeVirt.virtAlignPrec)
        //    {
        //        //if (_nbNoAdd < pieces.Count)
        //            prec = pieces[_nbNoAdd].Value;
        //    }

        //    for (int j = _nbNoAdd - 1; j >= 0; j--)
        //    {
        //        if (j < pieces.Count)
        //        {

        //            if (!modeVirt.virtOnlyDisabled || !pieces[j].Enabled)
        //            {
        //                var cand = pieces[j].Value;
        //                if (modeVirt.virtAlignPrec)
        //                {
        //                    if (cand < prec)
        //                        cand = prec + EPSILON;
        //                }

        //                if (modeVirt.virtAlignSelected && modeVirt.virtOnlyDisabled)
        //                {

        //                    // quel serait le score s'il était coché
        //                    var vu = pieces[j].Value / coeffEnabled;
        //                    // en plus une petite marge
        //                    //  vu *= mode.coeffVirt; 
        //                    if (cand < vu)
        //                        cand = vu;
        //                }
        //                pieces[j].Value = cand;

        //            }

        //            prec = pieces[j].Value;
        //        }
        //    }
        //}

        public void buildVirtual0(ConfMedianneVirt modeVirt, bool main)
        {
            DateTime limitDC = DateTime.Now.AddDays(-modeVirt.virtDelay);
            var coeffEnabled = modeVirt.CoeffOld;

            var _coeffVirt = modeVirt.coeffVirt;
            var safe = modeVirt.safe;
            int i0 = 0;

            int count = pieces.Count;
            PieceClassementComparer cmp = null;
            PieceExtended.Mode = main ? PieceExtended.mode.main : PieceExtended.mode.min;

            if (coeffEnabled > 1)
            {
                for (int i = 0; i < count; i++)
                {
                    var p = pieces[i];

                    if (p.Enabled && (!modeVirt.oldAsZero || !p.LastClassementRecent))
                        p.setCoeff(coeffEnabled, main);
                }
            }

            cmp = new PieceClassementComparer(false, main ? PieceExtended.mode.main : PieceExtended.mode.min);
            pieces.Sort(cmp);

            int indexV = 0;
            int nbAdd = 0;
            var _zero = mode.zero;
            i0 = count - 1;


            int _count = System.Math.Min(count, i0 + safe);
            decimal[] virt = null; // = new decimal[_count];
            //_nbNoAdd = System.Math.Min(safe, _nbNoAdd);

            if (modeVirt.noAdd)
            {
                if (_coeffVirt > 1)
                {
                    if (modeVirt.coeffVirtAuto && (modeVirt.coeffVirtAutoAll || count < safe))
                    // if (count < safe && modeVirt.coeffVirtAuto)
                    {
                        if (modeVirt.coeffVirtAdjust)
                            _coeffVirt = Math.Pow(coeffEnabled, 1.0m / (count + 1.0m));
                        else
                        {
                            // ex 2^10 = 1024
                            // je veux obtenir 1024 avec 3
                            _coeffVirt = Math.Pow(_coeffVirt, (decimal)safe / (decimal)count);
                        }
                    }

                    decimal _coeff = 1m;


                    for (int j = _nbNoAdd - 1; j >= 0; j--)
                    {
                        if (j < pieces.Count)
                        {
                            var dc = pieces[j].Piece.UpdateClassement;

                            if (modeVirt.forceCoeffVirt)
                                _coeff *= _coeffVirt;
                            else if (!modeVirt.virtOnlyDisabled || !pieces[j].Enabled)
                                _coeff *= _coeffVirt;


                            if (pieces[j].Empty)
                                continue;
                            if (dc == null || dc.Value < limitDC)
                            {
                                pieces[j].Value = pieces[j].Value / _coeff;
                            }
                            //pieces[j].EffectMain = coeffEnabled < _coeff;

                        }
                    }
                }

            }
            else if (modeVirt.lissage || modeVirt.removeEpsilon || modeVirt.cumul)
            {
                if (_coeffVirt > 1)
                {
                    if (virt == null)
                        virt = new decimal[_count];
                    for (int i = 0; i < i0; i++)
                    {
                        decimal _coeff = 1m;
                        decimal _base = pieces[i].Value;
                        for (int j = i + 1; j < _count; j++)
                        {
                            _coeff /= _coeffVirt;
                            virt[j] = System.Math.Max(virt[j], _base * _coeff); //     += _base * _coeff;
                        }
                    }
                }
            }
            else
            {
                if (_coeffVirt > 1)
                {
                    if (virt == null)
                        virt = new decimal[_count];
                    decimal courant = pieces[0].Value;
                    for (int i = 1; i < _count; i++)
                    {
                        if (pieces[i].Value <= _zero)
                        {
                            courant /= _coeffVirt;
                            virt[i] = courant;
                        }
                        else
                            courant = pieces[i].Value;
                    }
                }
            }

            decimal value = int.MaxValue;


            if (!modeVirt.noAdd)
            {
                int ii = 0;
                if (virt == null)
                    virt = new decimal[_count];
                for (ii = 1; ii < count && ii < _count; ii++)
                {
                    value = pieces[ii].Value;
                    var calc = virt[ii];
                    if (value < calc)
                    {
                        if (modeVirt.lissage || value <= _zero)
                        {
                            if (value <= _zero)
                                nbAdd++;
                            value = calc;
                            pieces[ii].Value = value;
                        }

                    }
                    else
                        indexV = ii;
                }
                if (modeVirt.removeEpsilon)
                {
                    // j'ai 5 virtuel alors que j'ai deux safe
                    ///xx---
                    int nb = 0;
                    for (int i = indexV + 1; i < _count; i++)
                    {
                        nb++;
                        if (nb <= safe)
                            continue;
                        pieces[i].Value = 0m;
                    }

                }
                if (mode.removeFirst)
                {
                    for (int i = 0; i < nbAdd; i++)
                    {
                        pieces[i].Value = 0m;
                    }
                }
            }



            if (mode.deleteFirst)
            {
                for (int i = 0; i < nbAdd; i++)
                {
                    pieces.RemoveAt(0);
                }
            }

        }

        //public static int buildVirtual(List<PieceExtended> pieces, ConfMedianne mode, ConfMedianneVirt modeVirt, bool main, bool combine, ref int i0)
        //{
        //    var coeffEnabled = modeVirt.CoeffOld;

        //    var _coeffVirt = modeVirt.coeffVirt;
        //    var safe = modeVirt.safe;
        //    if (combine)
        //    {
        //        coeffEnabled = mode.Main.CoeffOld * mode.Min.CoeffOld;
        //        _coeffVirt = mode.Main.coeffVirt * mode.Min.coeffVirt;
        //        safe = (int)Math.Max(mode.Main.safe, mode.Min.safe);
        //    }


        //    //   var coeff = 1 / coeffEnabled; 
        //    int count = pieces.Count;
        //    PieceClassementComparer cmp = new PieceClassementComparer(false);
        //    pieces.Sort(cmp);
        //    //if (coeffEnabled != 1)
        //    //{
        //    if (coeffEnabled > 1)
        //    {
        //        for (int i = 0; i < count; i++)
        //        {
        //            var p = pieces[i];
        //            //  var rapportClassement = p.RapportClassement;
        //            if (coeffEnabled != 1m && p.Enabled && (!modeVirt.oldAsZero || !p.LastClassementRecent))
        //            {
        //                p.setCoeff(coeffEnabled, main);
        //                //rapportClassement /= coeffEnabled;
        //            }

        //            //p.setClassementVirtuel(rapportClassement);
        //            //if (!main)
        //            //    p.setClassementVirtuel2(rapportClassement);
        //        }
        //    }

        //    cmp = new PieceClassementComparer(false, main ? PieceExtended.mode.main : PieceExtended.mode.min);
        //    pieces.Sort(cmp);
        //    // }

        //    int indexV = 0;
        //    int nbAdd = 0;


        //    // List<Piece> _pieces = pieces;
        //    var _zero = mode.zero;


        //    //if (modeVirt.safe > 0)
        //    //{
        //    i0 = count - 1;
        //    int _nbNoAdd = 0;




        //    if (modeVirt.virtOnlyDisabled || mode.removeLast == removeLast.unselected)
        //    {
        //        _nbNoAdd = pieces.Count(p => p.Enabled);  // || p.VirtualClassement == 0m);
        //        if (_nbNoAdd > 0)
        //            _nbNoAdd--;
        //    }
        //    else if (modeVirt.noAddAll)
        //        _nbNoAdd = pieces.Count;
        //    else
        //    {
        //        for (int i = 0; i < count; i++)
        //        {
        //            var pp = pieces[i];
        //            if (pp.VirtualClassement == 0m)
        //            {
        //                i0 = i;
        //                _nbNoAdd = count - i0;
        //                break;
        //            }
        //        }
        //    }

        //    if (modeVirt.noAddEnd)
        //    {
        //        // var nb1 = pieces.Count<Piece>(p => p.Enabled);
        //        // morceaux déjà notés
        //        var nb2 = pieces.Count<PieceExtended>(p => !p.Enabled && p.RapportClassement > 0);
        //        _nbNoAdd = _nbNoAdd - nb2;
        //        if (_nbNoAdd < 0)
        //            _nbNoAdd = 0;
        //    }
        //    //if (i0 == 0)
        //    //    return 0;
        //    //}

        //    //for (int i00 = 1; i00 <= i0; i00++)
        //    //{
        //    //    decimal coeff = (decimal)i00 / (decimal)i0;
        //    //List<decimal> _list = new List<decimal>();
        //    //for (int i = 0; i < pieces.Count; i++)
        //    //    _list.Add(pieces[i].getVirtual(main));
        //    //for (int i = i00; i < count; i++)
        //    //    _list[i] = 0m;
        //    //liste partielle originale
        //    //  List<decimal> _list0 = new List<decimal>(_list);
        //    int _count = System.Math.Min(count, i0 + safe);
        //    decimal[] virt = new decimal[_count];
        //    _nbNoAdd = System.Math.Min(safe, _nbNoAdd);

        //    if (modeVirt.noAdd)
        //    {
        //        if (_coeffVirt > 1)
        //        {
        //            // var coeffEnabled = modeVirt.coeffOld; 

        //            if (count < safe && modeVirt.coeffVirtAuto)
        //            {
        //                if (modeVirt.coeffVirtAdjust)
        //                    _coeffVirt = Math.Pow(coeffEnabled, 1.0m / (count + 1.0m));
        //                else
        //                {
        //                    // ex 2^10 = 1024
        //                    // je veux obtenir 1024 avec 3
        //                    _coeffVirt = Math.Pow(_coeffVirt, (decimal)safe / (decimal)count);
        //                }
        //            }

        //            decimal _coeff = 1m;
        //            decimal prec = 0m;
        //            if (modeVirt.virtAlignPrec)
        //            {
        //                if (_nbNoAdd < pieces.Count)
        //                    prec = pieces[_nbNoAdd].Value;
        //            }

        //            for (int j = _nbNoAdd - 1; j >= 0; j--)
        //            {
        //                if (j < pieces.Count)
        //                {

        //                    if (!modeVirt.virtOnlyDisabled || !pieces[j].Enabled)
        //                    {
        //                        _coeff *= _coeffVirt;
        //                        var cand = pieces[j].Value / _coeff;
        //                        if (modeVirt.virtAlignPrec)
        //                        {
        //                            if (cand < prec)
        //                                cand = prec + EPSILON;
        //                        }

        //                        if (modeVirt.virtAlignSelected && modeVirt.virtOnlyDisabled)
        //                        {
        //                            // quel serait le score s'il était coché
        //                            var vu = pieces[j].Value / coeffEnabled;
        //                            // en plus une petite marge
        //                            //  vu *= mode.coeffVirt; 
        //                            if (cand < vu)
        //                                cand = vu;
        //                        }
        //                        pieces[j].Value = cand;
        //                        // pieces[j].EffectMain = coeffEnabled < _coeff;
        //                    }
        //                    else if (modeVirt.forceCoeffVirt)
        //                        _coeff /= _coeffVirt;
        //                    prec = pieces[j].Value;
        //                }
        //            }
        //        }

        //    }
        //    else if (modeVirt.lissage || modeVirt.removeEpsilon || modeVirt.cumul)
        //    {
        //        if (_coeffVirt > 1)
        //        {
        //            for (int i = 0; i < i0; i++)
        //            {
        //                decimal _coeff = 1m;
        //                decimal _base = pieces[i].Value;
        //                for (int j = i + 1; j < _count; j++)
        //                {
        //                    _coeff /= _coeffVirt;
        //                    virt[j] = System.Math.Max(virt[j], _base * _coeff); //     += _base * _coeff;
        //                }
        //            }
        //        }
        //    }
        //    else
        //    {
        //        if (_coeffVirt > 1)
        //        {
        //            decimal courant = pieces[0].Value;
        //            for (int i = 1; i < _count; i++)
        //            {
        //                if (pieces[i].Value <= _zero)
        //                {
        //                    courant /= _coeffVirt;
        //                    virt[i] = courant;
        //                }
        //                else
        //                    courant = pieces[i].Value;
        //            }
        //        }
        //    }

        //    decimal value = int.MaxValue;
        //    int ii = 0;
        //    if (modeVirt.noAdd)
        //    {
        //        //for (ii = 1; ii < count && ii < _count; ii++)
        //        //{
        //        //    var calc = virt[ii];
        //        //    if (calc > 0m)
        //        //        list[ii] = calc;
        //        //}
        //    }
        //    else
        //    {
        //        for (ii = 1; ii < count && ii < _count; ii++)
        //        {
        //            value = pieces[ii].Value;
        //            var calc = virt[ii];
        //            if (value < calc)
        //            {
        //                if (modeVirt.lissage || value <= _zero)
        //                {
        //                    if (value <= _zero)
        //                        nbAdd++;
        //                    value = calc;
        //                    pieces[ii].Value = value;
        //                }

        //            }
        //            else
        //                indexV = ii;
        //        }
        //        if (modeVirt.removeEpsilon)
        //        {
        //            // j'ai 5 virtuel alors que j'ai deux safe
        //            ///xx---
        //            int nb = 0;
        //            for (int i = indexV + 1; i < _count; i++)
        //            {
        //                nb++;
        //                if (nb <= safe)
        //                    continue;
        //                pieces[i].Value = 0m;
        //            }

        //        }
        //        if (mode.removeFirst)
        //        {
        //            for (int i = 0; i < nbAdd; i++)
        //            {
        //                pieces[i].Value = 0m;
        //            }
        //        }
        //    }

        //    //for (int i = 0; i < _list.Count && i < pieces.Count; i++)
        //    //{
        //    //    pieces[i].setValue(_list[i], main); 
        //    //    //if (main)
        //    //    //    pieces[i].setClassementVirtuel(_list[i]);
        //    //    //else
        //    //    //    pieces[i].setClassementVirtuel2(_list[i]);
        //    //}

        //    if (mode.deleteFirst)
        //    {
        //        for (int i = 0; i < nbAdd; i++)
        //        {
        //            pieces.RemoveAt(0);
        //        }
        //    }

        //    if (modeVirt.reSort || mode.removeFirst || modeVirt.noAdd)
        //    {
        //        //_list.Sort();
        //        //_list.Reverse();
        //        if (main)
        //            pieces.Sort(new PieceCmp());
        //        else
        //            pieces.Sort(new PieceCmp2());
        //    }



        //    if (modeVirt.noAdd)
        //        nbAdd = _nbNoAdd;
        //    //}
        //    return nbAdd;
        //}


        public DecimalPiece getMedianneLight(ConfMedianneVirt modeVirt, PieceExtended.mode main)
        {

            DecimalPiece ret0 = new DecimalPiece();
            DecimalPiece ret = ret0;
            try
            {
                var _zero = mode.zero;

                PieceExtended.Mode = main;
                //foreach (PieceExtended p in pieces)
                //    p.Mode = main;

                var medianne = getMedianne_(pieces, mode.medianne);
                ret0.d = medianne;
                ret0.index = median;
                ret = ret0;


                int i0 = 0;
                int count = pieces.Count;


                ret = calcmedianneVirt(modeVirt);
                if (mode.expEnabled != 0)
                {
                    int _nb = pieces.Count<PieceExtended>(p => !p.Enabled);
                    decimal _c = (decimal)_nb / (decimal)count;
                    _c = Math.Pow(_c, mode.expEnabled);
                    ret.d *= _c;
                }




            }
            finally
            {


            }

            return ret;
        }






        //public static DecimalIndex getMedianneLight(List<PieceExtended> pieces, ConfMedianne mode, ConfMedianneVirt modeVirt, PieceExtended.mode main, bool combine)
        //{

        //    DecimalIndex ret0 = new DecimalIndex();
        //    DecimalIndex ret = ret0;
        //    try
        //    {
        //        var _zero = mode.zero;


        //        foreach (PieceExtended p in pieces)
        //            p.Mode = main;

        //        var medianne = getMedianne_(pieces, mode.medianne);
        //        ret0.d = medianne;
        //        ret0.index = index;
        //        ret = ret0;
        //        //if (pieces.Count == 1)
        //        //    return ret0;

        //        int i0 = 0;
        //        int count = pieces.Count;
        //        int nbAdd = buildVirtual(pieces, mode, modeVirt, main, combine, ref i0);
        //        //if (mode.combine && mode.simple)
        //        //{
        //        //    int i1 = 0;
        //        //    buildVirtual(pieces, mode, mode.Min, false, ref i1);
        //        //    foreach (var p in pieces)
        //        //    {
        //        //        p.setClassementVirtuelCombine();
        //        //    }
        //        //}
        //        ret = calcmedianneVirt(pieces, mode, modeVirt, main, nbAdd, System.Math.Min(i0, modeVirt.safe));
        //        if (mode.expEnabled != 0)
        //        {
        //            int _nb = pieces.Count<PieceExtended>(p => !p.Enabled);
        //            decimal _c = (decimal)_nb / (decimal)count;
        //            _c = Math.Pow(_c, mode.expEnabled);
        //            ret.d *= _c;
        //        }




        //    }
        //    finally
        //    {


        //    }

        //    return ret;
        //}

        private class PieceCmp0 : IComparer<PieceExtended>
        {
            private static PieceTrackNumberComparerE tn = new PieceTrackNumberComparerE();
            public int Compare(PieceExtended x, PieceExtended y)
            {
                int cmp = x.Piece.RapportClassement.CompareTo(y.Piece.RapportClassement);
                if (cmp != 0)
                    return -cmp;
                return tn.Compare(x, y);
            }
        }


        private class PieceCmp : IComparer<PieceExtended>
        {
            private static PieceTrackNumberComparerE tn = new PieceTrackNumberComparerE();
            public int Compare(PieceExtended x, PieceExtended y)
            {
                int cmp = x.VirtualClassement.CompareTo(y.VirtualClassement);
                if (cmp != 0)
                    return -cmp;
                return tn.Compare(x, y);
            }
        }

        private class PieceCmp2 : IComparer<PieceExtended>
        {
            private static PieceTrackNumberComparerE tn = new PieceTrackNumberComparerE();
            public int Compare(PieceExtended x, PieceExtended y)
            {
                int cmp = x.VirtualClassement2.CompareTo(y.VirtualClassement2);
                if (cmp != 0)
                    return -cmp;
                return tn.Compare(x, y);
            }
        }

        private class PieceCmp3 : IComparer<PieceExtended>
        {
            private static PieceTrackNumberComparerE tn = new PieceTrackNumberComparerE();
            public int Compare(PieceExtended x, PieceExtended y)
            {
                int cmp = x.VirtualClassement2.CompareTo(y.VirtualClassement2);
                if (cmp != 0)
                    return -cmp;
                return tn.Compare(x, y);
            }
        }




        //private static DecimalIndex calcmedianneVirt(IList<decimal> list, ConfMedianne conf, int nbAdd, int nbDel)
        //{
        //    var _list = new List<decimal>(list);
        //    int count = _list.Count;

        //    DecimalIndex ret = new DecimalIndex() { d = 0m, index = 0 }; // 0m; // decimal ret = int.MinValue;
        //    int _nbSupp = 0;
        //    bool beginBorder = false;
        //    for (int i = 0; i < count; i++)
        //    {

        //        if (i > 0)
        //        {

        //            _list.RemoveAt(count - i);

        //        }

        //        var aux = getMedianne_(_list, conf.medianne);
        //        if (aux == 0m)
        //            continue;
        //        if (!beginBorder)
        //        {
        //            beginBorder = true;
        //            ret.indexBorder = count - i - 1;
        //        }
        //        // aux = getLn(aux);
        //        //decimal coeff = 1; 
        //        //if (count >2)
        //        //coeff = (decimal)(count - 2 - i) / (decimal)(count - 2); 
        //        decimal coeff = 1 - (decimal)i / (decimal)count; // (decimal)count - i / (decimal)count;
        //        if (conf.removeFirst && !conf.deleteFirst && i > nbDel)
        //        {
        //            coeff = 1 - (decimal)(i - nbDel) / (decimal)count;
        //        }
        //        if (conf.quasi)
        //            coeff *= coeff;
        //        aux = aux * coeff;
        //        if (aux > ret.d)
        //        {
        //            ret.d = aux;
        //            ret.index = index;
        //            ret.indexBorderEffect = count - i - 1;
        //        }

        //        if (_list[count - i - 1] > conf.zero)
        //        {

        //            if (conf.removeLast == removeLast.non)
        //                break;
        //            _nbSupp++;
        //            if (conf.removeLast == removeLast.virtuel && _nbSupp >= nbAdd)
        //                break;
        //        }


        //    }

        //    //     if (ret == int.MinValue)
        //    //         return 0m;
        //    return ret;
        //}


        private DecimalPiece calcmedianneVirt(ConfMedianneVirt confc)
        {
            var _list = new List<PieceExtended>(pieces);
            var classes = _list.FindAll(p => p.VirtualClassement > mode.zero);

            if (confc.oldAsZero)
                classes = _list.FindAll(p => p.LastClassementRecent);

            int count = _list.Count;

            int nbEnabled = classes.Count<PieceExtended>(p => p.Enabled);
            int nbDisabled = classes.Count<PieceExtended>(p => !p.Enabled);
            int nbdispo = System.Math.Min(nbEnabled, nbDisabled);


            DecimalPiece ret = new DecimalPiece() { d = 0m, index = null }; // 0m; // decimal ret = int.MinValue;
            if (pieces.Count > 0)
                ret.index = pieces[0];
            int _nbSupp = 0;

            bool beginBorder = false;
            for (int i = 0; i < count; i++)
            {
                if (i > 0)
                    _list.RemoveAt(count - i);

                var aux = getMedianne_(_list, mode.medianne);
                if (aux == 0m)
                    continue;
                if (!beginBorder)
                {
                    beginBorder = true;
                    ret.indexBorder = pieces[count - i - 1];
                }

                decimal coeff = 1 - (decimal)i / (decimal)count; // (decimal)count - i / (decimal)count;

                if (mode.quasi)
                    coeff *= coeff;
                aux = aux * coeff;
                if (aux > ret.d)
                {
                    ret.d = aux;
                    ret.index = median;
                    ret.indexBorderEffect = pieces[count - i - 1];
                }

                ret.indexBorderMin = pieces[count - i - 1];
                var p = _list[count - i - 1];

                if (p.VirtualClassement > mode.zero && (!confc.oldAsZero || p.LastClassementRecent))
                {
                    // je regarde si le morceau est désactivé
                    // si c'est coché, je ne regarde pas quand je considère qu'on peut supprimmer les morceaux activé
                    if (p.Enabled)
                        nbEnabled--;
                    else
                        nbDisabled--;
                    nbdispo--;

                    if (!p.Enabled || !mode.removeEnabled || mode.removeLast == removeLast.unselected)
                    {
                        //bool priseEncompte = true || nbEnabled <= 0 || !conf.removeEnabled || conf.removeLast == removeLast.unselected;
                        //if (priseEncompte)
                        //{
                        if ((mode.removeLast == removeLast.non || mode.removeLast == removeLast.unselected) && nbEnabled < 0)
                            break;

                        if (mode.removeLast == removeLast.unselected) //&& (nbEnabled <= 0 ||  nbDisabled <=0))
                        {
                            if (nbdispo < 0)
                                break;
                        }
                        _nbSupp++;
                    }
                }


            }


            return ret;
        }

        //private static DecimalIndex calcmedianneVirt(IList<PieceExtended> list, ConfMedianne conf, ConfMedianneVirt confc, bool main, int nbAdd, int nbDel)
        //{
        //    var _list = new List<PieceExtended>(list);
        //    var classes = _list.FindAll(p => p.VirtualClassement > conf.zero);

        //    if (confc.oldAsZero)
        //        classes = _list.FindAll(p => p.LastClassementRecent);

        //    int count = _list.Count;

        //    int nbEnabled = classes.Count<PieceExtended>(p => p.Enabled);
        //    int nbDisabled = classes.Count<PieceExtended>(p => !p.Enabled);
        //    int nbdispo = System.Math.Min(nbEnabled, nbDisabled);


        //    DecimalIndex ret = new DecimalIndex() { d = 0m, index = 0 }; // 0m; // decimal ret = int.MinValue;
        //    int _nbSupp = 0;
        //    //int _nbSuppDisabled = 0;
        //    //int _nbSuppEnabled = 0;
        //    bool beginBorder = false;
        //    for (int i = 0; i < count; i++)
        //    {

        //        if (i > 0)
        //        {
        //            //var d = _list[count - i];
        //            //if (d.Enabled)
        //            //    nbEnabled--;
        //            //else
        //            //    nbDisabled--;

        //            _list.RemoveAt(count - i);

        //        }

        //        var aux = getMedianne_(_list, conf.medianne);
        //        if (aux == 0m)
        //            continue;
        //        if (!beginBorder)
        //        {
        //            beginBorder = true;
        //            ret.indexBorder = count - i - 1;
        //        }
        //        // aux = getLn(aux);
        //        //decimal coeff = 1; 
        //        //if (count >2)
        //        //coeff = (decimal)(count - 2 - i) / (decimal)(count - 2); 
        //        decimal coeff = 1 - (decimal)i / (decimal)count; // (decimal)count - i / (decimal)count;
        //        if (conf.removeFirst && !conf.deleteFirst && i > nbDel)
        //        {
        //            coeff = 1 - (decimal)(i - nbDel) / (decimal)count;
        //        }
        //        if (conf.quasi)
        //            coeff *= coeff;
        //        aux = aux * coeff;
        //        if (aux > ret.d)
        //        {
        //            ret.d = aux;
        //            ret.index = index;
        //            ret.indexBorderEffect = count - i - 1;
        //        }

        //        ret.indexBorderMin = count - i - 1;
        //        var p = _list[count - i - 1];

        //        if (p.VirtualClassement > conf.zero && (!confc.oldAsZero || p.LastClassementRecent))
        //        {
        //            // je regarde si le morceau est désactivé
        //            // si c'est coché, je ne regarde pas quand je considère qu'on peut supprimmer les morceaux activé
        //            if (p.Enabled)
        //                nbEnabled--;
        //            else
        //                nbDisabled--;
        //            nbdispo--;

        //            if (!p.Enabled || !conf.removeEnabled || conf.removeLast == removeLast.unselected)
        //            {
        //                //bool priseEncompte = true || nbEnabled <= 0 || !conf.removeEnabled || conf.removeLast == removeLast.unselected;
        //                //if (priseEncompte)
        //                //{
        //                if ((conf.removeLast == removeLast.non || conf.removeLast == removeLast.unselected) && nbEnabled < 0)
        //                    break;

        //                if (conf.removeLast == removeLast.unselected) //&& (nbEnabled <= 0 ||  nbDisabled <=0))
        //                {
        //                    if (nbdispo < 0)
        //                        break;
        //                }

        //                _nbSupp++;
        //                if (conf.removeLast == removeLast.virtuel && _nbSupp >= nbAdd)
        //                    break;
        //                // }


        //            }
        //        }


        //    }

        //    //     if (ret == int.MinValue)
        //    //         return 0m;
        //    return ret;
        //}



        //private static decimal getMedianne_(IList<PieceExtended> list, bool main, decimal coeffMedianne)
        //{
        //    var l = new List<decimal>();
        //    foreach (PieceExtended p in list)
        //    {
        //        if (main)
        //            l.Add(p.VirtualClassement); 
        //        else
        //            l.Add(p.VirtualClassement2); 
        //    }

        //    return CalcMedianne.getMedianneDec(l, coeffMedianne); 
        //}

        private static decimal getMedianne_(IList<Piece> list, bool main, decimal coeffMedianne)
        {
            var l = new List<decimal>();
            foreach (Piece p in list)
            {
                if (main)
                    l.Add(p.VirtualClassement);
                else
                    l.Add(p.VirtualClassement2);
            }

            return CalcMedianne.getMedianneDec(l, coeffMedianne);
        }


        private static decimal getMedianne_(IList<PieceExtended> list, decimal coeffMedianne)
        {

            if (list == null)
                throw new ArgumentException("liste nulle");
            int count = list.Count;
            if (count == 0)
                throw new ArgumentException("liste vide");
            if (coeffMedianne < 0 || coeffMedianne > 1)
                throw new ArgumentException("coeffMedianne doit être compris entre 0 et 1, valeur:" + coeffMedianne);
            if (count == 1 || coeffMedianne == 1)
            {
                median = list[0];
                return median.Value;
            }

            if (coeffMedianne == 1)
            {
                median = list[count - 1];
                return median.Value;
            }

            var medianne = coeffMedianne * (count - 1);

            var index = (int)medianne;
            int i1 = index + 1;
            var val0 = list[index].Value;
            var val1 = list[i1].Value;
            median = list[index];
            if (Math.Abs(medianne - Convert.ToDecimal(index)) < PRECISION)
            {
                return val0;
            }
            if (Math.Abs(medianne - i1) < PRECISION)
            {
                median = list[i1];
                return val1;
            }
            if (val1 < PRECISION)
            {
                median = list[i1];
                return val1;
            }
            var dx = medianne - index;


            // var ret = val0 + pente * dx;


            // moyenne avec calcul de log
            var log0 = Math.Log(val0 + EPSILON_LOG);
            var log1 = Math.Log(val1 + EPSILON_LOG);
            // pente = log1 - log0;
            var log = log0 + (log1 - log0) * dx;
            return Math.Exp(log) - EPSILON_LOG;


        }

    }
}
]]></content>
  </file>
  <file path="\PieceDb.Consolid\auto\ConfMedianneVirt.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;
using pdb.util;
using Math = pdb.util.Math;
using StringBuilder = pdb.util.StringBuilder;

namespace pdb.gen.auto
{
    public partial class ConfMedianneVirt : TuningBase
    {
        [NonSerialized]
        const string PATH_DYN = "..\\dynamic";
        private string Path { get { return string.Format("{0}{1}", DIR_CONF, fdata); } }
        private string PathDiff { get { return string.Format("{0}{1}", DIR_CONF, fdiff); } }
        private string PathDiffTmp { get { return string.Format("{0}{1}", DIR_CONF, fdiffTmp); } }
        // private string PathLastFull { get { return string.Format("{0}{1}", DIR_CONF, flast); } }
        const string PATH_DYN_DIFF = "..\\dynamic_diff";


        const int NB_HISTO = 1000000;
        public int safe;
        public decimal coeffVirt = 1m;
        public double virtDelay = 1.0; 



        public string name;


        /// <summary>
        /// lié au mode db
        /// </summary>
        public dbMode mode;
        /// <summary>
        /// fichier ou est consigné l'historique courant
        /// </summary>
        public string fdata;
        /// <summary>
        /// fichier ou est consigné l'incrémental de l'historique
        /// </summary>
        public string fdiff;
        /// <summary>
        /// fichier ou est consigné l'incrémental de l'historique en mode full en vue de la sauvegarfe
        /// </summary>
        public string fdiffTmp;
        ///// <summary>
        ///// fichier ou est consigné la dernière sauvegarde full de l'historique
        ///// </summary>
        //public string flast;

        public int indexDiff = 0;

        public bool virtOnlyDisabled;
        public bool noAddEnd;
        public bool noAddAll;
        public bool virtAlignSelected;
        public bool virtAlignPrec;
        /// <summary>
        /// calcul du coeff en fonction du nombre de pistes
        /// </summary>
        public bool coeffVirtAuto;
        /// <summary>
        ///  calcul du coeff en fonction du nombre de pistes dans tous les cas
        /// </summary>
        public bool coeffVirtAutoAll; 
        public bool coeffVirtAdjust;

        public bool removeEpsilon;

        public bool forceCoeffVirt;
        public bool lissage;
        public bool cumul;

        public bool reSort;
        public bool noAdd;


        public bool auto;

        public int serialp = 1;
        public int serialm = 1;
        public int serialAlt = 1;
        public decimal serialElastique = 1m;

        /// <summary>
        /// Coeff appliqué à _nbElastique quand chgt de direction et selectedByCoeff
        /// </summary>
        public decimal coeffElastique1dm = 1m;

        /// <summary>
        /// Coeff appliqué à _nbElastique quand chgt de direction et non selectedByCoeff
        /// </summary>
        public decimal coeffElastique1dp = 1m;

        /// <summary>
        /// Coeff appliqué à _nbElastique2 quand chgt de direction et selectedByCoeff
        /// </summary>
        public decimal coeffElastique2dm = 1m;

        /// <summary>
        /// Coeff appliqué à _nbElastique2 quand chgt de direction et non selectedByCoeff
        /// </summary>
        public decimal coeffElastique2dp = 1m;






        /// <summary>
        /// Coeff appliqué à _nbElastique quand  pas chgt de direction et selectedByCoeff
        /// </summary>
        public decimal coeffElastique1sm = 1m;

        /// <summary>
        /// Coeff appliqué à _nbElastique quand pas chgt de direction et non selectedByCoeff
        /// </summary>
        public decimal coeffElastique1sp = 1m;

        /// <summary>
        /// Coeff appliqué à _nbElastique2 quand pas chgt de direction et selectedByCoeff
        /// </summary>
        public decimal coeffElastique2sm = 1m;

        /// <summary>
        /// Coeff appliqué à _nbElastique2 quand pas chgt de direction et non selectedByCoeff
        /// </summary>
        public decimal coeffElastique2sp = 1m; 


        //public decimal coeffElastique1 = 1m;
        //public decimal coeffElastique2 = 1m;

        //public decimal coeffElastique1r = 1m;
        //public decimal coeffElastique2r = 1m;

        /// <summary>
        /// pas de calcul
        /// </summary>
        public decimal pas = 0.1m;
        /// <summary>
        /// vitesse : augmentation ou diminution du coeff virtuel
        /// </summary>
        public decimal v;

        /// <summary>
        /// variation de la vitesse en proportion
        /// </summary>
        public decimal vv = 1.1m;

        ///// <summary>
        ///// Vitesse virtuelle : pour calculer l'accélaration en tenant compte des contraintes en simulant un augmentation. Mauvaise idée. toujours egal à v en cas de contrainte
        ///// </summary>
        //private decimal vv;
        /// <summary>
        /// borne visant à limiter le delta entre deux pas
        /// </summary>
        public decimal d0 = 0.01m;
        //  public decimal dcoeffm;


        /// <summary>
        /// accélération : augmentation ou diminution de la vitesse
        /// </summary>
        public decimal a;
        //public decimal a0 =0.01m;
        //public decimal dconvergence01;
        /// <summary>
        /// variation de l'accélération en proportion
        /// </summary>
        public decimal aa = 0.01m;
        /// <summary>
        ///accélaration plancher
        /// </summary>
        public decimal aepsilon = 0.001m;

        /// <summary>
        /// ecart min entre deux positions
        /// </summary>
        private decimal epsilon = 0.001m * 0.001m;
        /// <summary>
        /// ecart de vitesse entre deux positions
        /// </summary>
        private decimal vepsilon = 0.001m * 0.001m;

        private bool? lastDelta;
        private bool? lastAutoDirection;
        /// <summary>
        /// nb consecutif dans le même sens pour info
        /// </summary>
        private int _nbSameDirection;
        /// <summary>
        /// nb même sens borné pour calcul
        /// </summary>
        private int _nbSameDirectionBox;
        /// <summary>
        /// nb allez/retour pour calcul
        /// </summary>
        private int _nbAlt;
        /// <summary>
        /// bilan même sens vs allez-retour. Quand trop grand on agrandit le delta, quand trop petit on diminue
        /// </summary>
        private decimal _nbElastique;

        /// <summary>
        /// bilan même sens vs allez-retour. Quand trop grand on agrandit le delta, quand trop petit on diminue
        /// </summary>
        private decimal _nbElastique2;
        /// <summary>
        /// nb allez/retour consécutifs pour info
        /// </summary>
        private int _nbAltHisto;

        /// <summary>
        /// Quand plusieurs montées consécutives : application d'un coeff à la vitesse pour accélérer la reprise à la normale
        /// </summary>
        private decimal coeffStaticp = 1;
        /// <summary>
        /// Quand plusieurs descentes consécutives : application d'un coeff à la vitesse pour accélérer la reprise à la normale
        /// </summary>
        private decimal coeffStaticm = 1;

        /// <summary>
        /// Après plusieurs montées consécutives : retour au coeff nominal 
        /// </summary>
        private decimal coeffStaticpRetour = 1;
        /// <summary>
        /// Quand plusieurs descentes consécutives : retour au coeff nominal 
        /// </summary>
        private decimal coeffStaticmRetour = 1;
        public decimal CoeffStaticmRetour { get { return coeffStaticmRetour; } }

        /// <summary>
        /// Retour mode large
        /// </summary>
        private bool coeffStaticRetourLarge; 

        /// <summary>
        /// Valeur courante du coeff corrigeant les situations anormales du point de vue des montées consécutives
        /// </summary>
        private decimal currentStaticp = 1;
        /// <summary>
        /// Valeur courante du coeff corrigeant les situations anormales du point de vue des descentes consécutives
        /// </summary>
        private decimal currentStaticm = 1;
        public decimal CurrentStaticm { get { return currentStaticm; } }

        /// <summary>
        /// On gere spécifiquement le cas des descentes consécutives
        /// </summary>
        public bool checkFall; 

        /// <summary>
        /// Rapport de vitesse négative / vitesse positive
        /// </summary>
        private decimal rapportmp = 1m;
        /// <summary>
        /// anti atténuation
        /// </summary>
        //public decimal danticonvergence = 1m;
        //public decimal danticonvergence0;
        //public decimal danticonvergence01;

        //public decimal danticonvdeltap = 1m;
        //public decimal danticonvdeltam = 1m;
        private bool _linkconv;
        private decimal linkProduct;
        private List<HistoValue> histo = new List<HistoValue>();
        //  private List<decimal> histoDiff = new List<decimal>();

        private decimal coeffOld = 1m;

        public bool oldAsZero;
        private bool coeffOldAuto;
        public bool coeffOldSwap;
        public int coeffOldAutoLevel;
        private bool use;


        public bool Use { get { return use; } }

        public ConfMedianneVirt()
        { }

        public ConfMedianneVirt(ConfMedianneVirt o, bool raz)
            : this(o)
        {
            if (raz)
            {
                // safe = 0;
                coeffOld = 1;
                coeffVirt = 1;
            }
        }
        public ConfMedianneVirt(ConfMedianneVirt o)
        {
            name = o.name;
            mode = o.mode;
            fdata = o.fdata;
            fdiff = o.fdiff;
            fdiffTmp = o.fdiffTmp;
            //  flast = o.flast;
            safe = o.safe;
            coeffVirt = o.coeffVirt;
            virtOnlyDisabled = o.virtOnlyDisabled;
            noAddEnd = o.noAddEnd;
            noAddAll = o.noAddAll;
            virtAlignSelected = o.virtAlignSelected;
            virtAlignPrec = o.virtAlignPrec;
            coeffVirtAuto = o.coeffVirtAuto;
            coeffVirtAutoAll = o.coeffVirtAutoAll; 

            coeffVirtAdjust = o.coeffVirtAdjust;
            removeEpsilon = o.removeEpsilon;
            forceCoeffVirt = o.forceCoeffVirt;
            lissage = o.lissage;
            cumul = o.cumul;
            reSort = o.reSort;
            noAdd = o.noAdd;
            auto = o.auto;
            //dcoeffp = o.dcoeffp;
            //dcoeffm = o.dcoeffm;
            //dconvergence = o.dconvergence;
            //dconvdeltap = o.dconvdeltap;
            //dconvdeltam = o.dconvdeltam;
            //danticonvergence = o.danticonvergence;
            //danticonvdeltap = o.danticonvdeltap;
            //danticonvdeltam = o.danticonvdeltam;

            pas = o.pas;
            v = o.v;
            d0 = o.d0;
            a = o.a;
            aa = o.aa;
            aepsilon = o.aepsilon;
            _linkconv = o._linkconv;
            serialp = o.serialp;
            serialm = o.serialm;
            serialAlt = o.serialAlt;

            serialElastique = o.serialElastique;
            coeffElastique1dm = o.coeffElastique1dm;
            coeffElastique1dp = o.coeffElastique1dp;
            coeffElastique1sm = o.coeffElastique1sm;
            coeffElastique1sp = o.coeffElastique1sp;
            coeffElastique2dm = o.coeffElastique2dm;
            coeffElastique2dp = o.coeffElastique2dp;
            coeffElastique2sm = o.coeffElastique2sm;
            coeffElastique2sp = o.coeffElastique2sp; 


            _nbSameDirection = o._nbSameDirection;
            _nbSameDirectionBox = o._nbSameDirectionBox;
            _nbAlt = o._nbAlt;
            _nbAltHisto = o._nbAltHisto;
            _nbElastique = o._nbElastique;
            _nbElastique2 = o._nbElastique2;

            coeffOld = o.coeffOld;
            coeffOldAuto = o.coeffOldAuto;
            coeffOldSwap = o.coeffOldSwap;
            oldAsZero = o.oldAsZero;
            coeffOldAutoLevel = o.coeffOldAutoLevel;
            epsilon = o.epsilon;

            //dconvergence0 = o.dconvergence0;
            //dconvergence01 = o.dconvergence01;
            //danticonvergence0 = o.danticonvergence0;
            //danticonvergence01 = o.danticonvergence01;

            lastDelta = o.lastDelta;
            use = o.use;
            coeffStaticRetourLarge = o.coeffStaticRetourLarge;
            this.checkFall = o.checkFall;
            this.virtDelay = o.virtDelay; 
            histo = new List<HistoValue>(o.histo);

        }
        public ConfMedianneVirt(XmlElement parent, XmlElement child)
            : base(parent, child)
        {
            var str = "";
            builds("mode", v => str = v);
            if (!string.IsNullOrEmpty(str))
                mode = (dbMode)Enum.Parse(typeof(dbMode), str);
            builds("name", v => name = v);
            builds("fdata", v => fdata = v);
            builds("fdiff", v => fdiff = v);
            builds("fdiffTmp", v => fdiffTmp = v);
            // builds("flast", v => flast = v);
            builddec("coeffVirt", v => coeffVirt = v);
            buildi("safe", v => safe = v);

            buildb("virtOnlyDisabled", v => virtOnlyDisabled = v);
            buildb("noAddEnd", v => noAddEnd = v);
            buildb("noAddAll", v => noAddAll = v);
            buildb("virtAlignSelected", v => virtAlignSelected = v);
            buildb("virtAlignPrec", v => virtAlignPrec = v);
            buildb("coeffVirtAuto", v => coeffVirtAuto = v);
            buildb("coeffVirtAutoAll", v => coeffVirtAutoAll = v);
            buildb("coeffVirtAdjust", v => coeffVirtAdjust = v);

            buildb("removeEpsilon", v => removeEpsilon = v);
            buildb("forceCoeffVirt", v => forceCoeffVirt = v);
            buildb("lissage", v => lissage = v);
            buildb("cumul", v => cumul = v);
            buildb("reSort", v => reSort = v);
            buildb("noAdd", v => noAdd = v);
            buildb("auto", v => auto = v);

            builddec("pas", v => pas = v);
            builddec("v", vv => v = vv);
            builddec("dv", v => dv = v);
            builddec("d0", v => d0 = v);
            builddec("a", v => a = v);
            builddec("aa", v => aa = v);
            builddec("vepsilon", v => vepsilon = v);
            builddec("aepsilon", v => aepsilon = v);


            //builddec("dcoeffp", v => dcoeffp = v);
            //builddec("dcoeffm", v => dcoeffm = v);
            //builddec("dconvergence", v => dconvergence = v);
            //builddec("dconvergence0", v => dconvergence0 = v);
            //builddec("dconvergence01", v => dconvergence01 = v);
            //builddec("dconvdeltap", v => dconvdeltap = v);
            //builddec("dconvdeltam", v => dconvdeltam = v);

            //builddec("danticonvergence", v => danticonvergence = v);
            //builddec("danticonvergence0", v => danticonvergence0 = v);
            //builddec("danticonvergence01", v => danticonvergence01 = v);
            //builddec("danticonvdeltap", v => danticonvdeltap = v);
            //builddec("danticonvdeltam", v => danticonvdeltam = v);
            buildb("linkconv", v => _linkconv = v);
            buildi("serialp", v => serialp = v);
            buildi("serialm", v => serialm = v);
            buildi("serialAlt", v => serialAlt = v);
            buildi("elastique", v => serialElastique = v);


            builddec("coeffElastique1dm", v => coeffElastique1dm = v);
            builddec("coeffElastique1dp", v => coeffElastique1dp = v);
            builddec("coeffElastique1sm", v => coeffElastique1sm = v);
            builddec("coeffElastique1sp", v => coeffElastique1sp = v);
            builddec("coeffElastique2dm", v => coeffElastique2dm = v);
            builddec("coeffElastique2dp", v => coeffElastique2dp = v);

            builddec("coeffElastique2sm", v => coeffElastique2sm = v);
            builddec("coeffElastique2sp", v => coeffElastique2sp = v);


            buildi("serial", v => _nbSameDirection = v);
            buildi("serialBox", v => _nbSameDirectionBox = v);
            buildi("serialAltC", v => _nbAlt = v);
            buildi("serialAltH", v => _nbAltHisto = v);
            builddec("elastiqueC", v => _nbElastique = v);
            builddec("elastiqueC2", v => _nbElastique2 = v);


            builddec("coeffOld", v => coeffOld = v);
            buildb("oldAsZero", v => oldAsZero = v);
            buildb("coeffOldAuto", v => coeffOldAuto = v);
            buildb("coeffOldSwap", v => coeffOldSwap = v);
            buildi("coeffOldAutoLevel", v => coeffOldAutoLevel = v);
            builddec("epsilon", v => epsilon = v);

            buildbn("lastDelta", v => lastDelta = v);

            builddec("coeffStaticp", v => coeffStaticp = v);
            builddec("coeffStaticm", v => coeffStaticm = v);

            builddec("coeffStaticpRetour", v => coeffStaticpRetour = v);
            builddec("coeffStaticmRetour", v => coeffStaticmRetour = v);
            buildb("coeffStaticRetourLarge", v => coeffStaticRetourLarge = v); 
            

            builddec("currentStaticp", v => currentStaticp = v);
            builddec("currentStaticm", v => currentStaticm = v);
            builddec("rapportmp", v => rapportmp = v);

            buildb("use", v => use = v);
            buildb("checkFall", v => checkFall = v);
            buildd("virtDelay", v => virtDelay = v); 


            HistoValue last = null;
            var xhisto = XMLTool.NodeLookUp(child, "histo");
            if (xhisto != null)
            {
                foreach (XmlElement sub in xhisto.ChildNodes)
                {
                    var _nevw = new HistoValue(sub.InnerText, last);
                    histo.Add(_nevw);
                    last = _nevw;
                }
            }
            else
            {

                if (File.Exists(Path))
                {
                    var lines = File.ReadAllLines(Path);
                    for (int i = 0; i < lines.GetLength(0); i++)
                    {
                        try
                        {
                            var line = lines[i];

                            if (string.IsNullOrEmpty(line))
                                continue;
                            var _nevw = new HistoValue(line, last);
                            histo.Add(_nevw);
                            last = _nevw;
                        }
                        catch (Exception ex)
                        {
                            misc.log(string.Format("impossible de lire la ligne n° {0}:{1}", i + 1, lines[i]), ex);
                            throw;
                        }
                    }
                    indexDiff = histo.Count;

                    //if (histo.Count >0 )
                    //    coeffVirt = getCoeff(histo[histo.Count -1]);


                }

                if (File.Exists(PathDiff))
                {
                    var histoDiff = new List<HistoValue>();
                    var lines = File.ReadAllLines(PathDiff);
                    for (int i = 0; i < lines.GetLength(0); i++)
                    {
                        try
                        {
                            var line = lines[i];
                            if (string.IsNullOrEmpty(line))
                                continue;

                            var _nevw = new HistoValue(line, last);
                            histoDiff.Add(_nevw);
                            last = _nevw;
                        }
                        catch (Exception ex)
                        {
                            misc.log(string.Format("impossible de lire la ligne n° {0}:{1}", i + 1, lines[i]), ex);
                            throw;
                        }

                    }

                    if (mode == dbMode.full)
                    {
                        histo.AddRange(histoDiff);
                        indexDiff = histo.Count;
                    }
                    else
                    {
                        indexDiff = histo.Count - histoDiff.Count;
                    }

                }



                if (mode == dbMode.full && File.Exists(PathDiff))
                    File.Delete(PathDiff);

                if (histo.Count > 0)
                {
                    int index = histo.Count - 1;
                    decimal current = histo[index].coeff;
                    //coeffVirt = getCoeff(current);
                    bool? sens = null;

                    int nbSerie = 0;
                    // decimal delta = 0m;

                    var rr = 1;
                    //if (dcoeffp > 0)
                    //    rr = dcoeffm / dcoeffp;
                    if (rr > 0)
                    {
                        while (true)
                        {
                            index--;
                            if (index < 0)
                                break;
                            var aux = histo[index].coeff;
                            var _sens = current > aux;
                            if (sens == null)
                            {
                                sens = _sens;
                                lastAutoDirection = !_sens;

                                // delta = current - aux;
                            }


                            if (sens != _sens)
                                break;
                            current = aux;
                            nbSerie++;

                        }

                        //_nbSameDirection = nbSerie;
                        //dcoeffp = Math.Abs(delta); dcoeffm = dcoeffp * rr;

                    }
                }
            }

            checkCoeffOld();
            //if (histoDiff.Count > 0)
            //    coeffVirt = getCoeff(histo[histo.Count - 1]); 

        }



        public override void save(XmlWriter w)
        {
            base.save(w);
            writeStart("v");
            write("name", name);
            write("mode", mode);
            write("use", use); 
            write("serial", _nbSameDirection);
            write("elastiqueC", _nbElastique);
            write("elastiqueC2", _nbElastique2);

            write("coeffVirt", coeffVirt);
            write("coeffOld", coeffOld);
            write("serialBox", _nbSameDirectionBox);
            write("serialAltC", _nbAlt);
            write("serialAltH", _nbAltHisto);

            write("coeffStaticp", coeffStaticp);
            write("coeffStaticm", coeffStaticm);
            write("coeffStaticpRetour", coeffStaticpRetour);
            write("coeffStaticmRetour", coeffStaticmRetour);
            write("coeffStaticRetourLarge", coeffStaticRetourLarge); 
            write("currentStaticp", currentStaticp);
            write("currentStaticm", currentStaticm);
          
            write("lastDelta", lastDelta);

            write("serialAlt", serialAlt);
            write("elastique", serialElastique);
          
            write("fdata", fdata);
            write("fdiff", fdiff);
            write("fdiffTmp", fdiffTmp);


            write("safe", safe);

            write("virtOnlyDisabled", virtOnlyDisabled);
            write("noAddEnd", noAddEnd);
            write("noAddAll", noAddAll);
            write("virtAlignSelected", virtAlignSelected);
            write("virtAlignPrec", virtAlignPrec);
            write("coeffVirtAuto", coeffVirtAuto);
            write("coeffVirtAutoAll", coeffVirtAutoAll);
            write("coeffVirtAdjust", coeffVirtAdjust);

            write("removeEpsilon", removeEpsilon);
            write("forceCoeffVirt", forceCoeffVirt);
            write("lissage", lissage);
            write("cumul", cumul);
            write("reSort", reSort);
            write("noAdd", noAdd);
            write("auto", auto);

            write("pas", pas);
            write("v", v);
            write("dv", dv);
            write("d0", d0);
            write("a", a);
            write("aa", aa);
            write("aepsilon", aepsilon);
            write("vepsilon", vepsilon);
            write("rapportmp", rapportmp);

            //write("dcoeffp", dcoeffp);
            //write("dcoeffm", dcoeffm);
            //write("dconvergence", dconvergence);
            //write("dconvergence0", dconvergence0);
            //write("dconvergence01", dconvergence01);
            //write("dconvdeltap", dconvdeltap);
            //write("dconvdeltam", dconvdeltam);

            //write("danticonvergence", danticonvergence);
            //write("danticonvergence0", danticonvergence0);
            //write("danticonvergence01", danticonvergence01);
            //write("danticonvdeltap", danticonvdeltap);
            //write("danticonvdeltam", danticonvdeltam);
            write("linkconv", linkconv);
            write("serialp", serialp);
            write("serialm", serialm);

            write("checkFall", checkFall); 



          

            write("oldAsZero", oldAsZero);
            write("coeffOldAuto", coeffOldAuto);
            write("coeffOldSwap", coeffOldSwap);

            write("coeffOldAutoLevel", coeffOldAutoLevel);
            write("epsilon", epsilon);

            write("coeffElastique1dm", coeffElastique1dm);
            write("coeffElastique1dp", coeffElastique1dp);
            write("coeffElastique1sm", coeffElastique1sm);
            write("coeffElastique1sp", coeffElastique1sp);


            write("coeffElastique2dm", coeffElastique2dm);
            write("coeffElastique2dp", coeffElastique2dp);
            write("coeffElastique2sm", coeffElastique2sm);
            write("coeffElastique2sp", coeffElastique2sp);

            write("virtDelay", virtDelay); 


            var sb = new StringBuilder();
            var sbDiff = new StringBuilder();




            //if (modeDiff)
            //{
            //    histoDiff = null;
            //}
            //else
            //{
            //    if (histoDiff != null)
            //    {
            //        histo.AddRange(histoDiff);
            //        histoDiff = null;
            //    }

            //    if (File.Exists(PathDiff))
            //        File.Delete(PathDiff);
            //}

            int count = histo.Count;
            HistoValue last = null;
            for (int i = 0; i < count; i++)
            {
                histo[i].write(sb);
                //var v = Math.Round(histo[i].coeff, 10);
                //var sc = v.ToString();
                //var v2 = Math.Round(1000m * histo[i].delta, 10);
                //var sc2 = v2.ToString();

                //var v3 = Math.Round(1000m * histo[i].conv, 10);
                //var sc3 = v3.ToString();

                //sb.Append(sc);
                //sb.Append("|");
                //sb.Append(sc2);
                //sb.Append("|");
                //sb.AppendLine(sc3);

                if (i >= indexDiff)
                {
                    histo[i].writeDiff(sbDiff, last);
                    //sbDiff.Append(sc);
                    //sbDiff.Append("|");
                    //sbDiff.Append(sc2);
                    //sbDiff.Append("|");
                    //sbDiff.AppendLine(sc3);
                }
                last = histo[i];
            }


            if (!string.IsNullOrEmpty(fdata))
            {
                AsyncFileWriter.Instance.post(Path, sb.ToString());
                if (mode == dbMode.diff)
                    AsyncFileWriter.Instance.post(PathDiff, sbDiff.ToString());
                else
                    AsyncFileWriter.Instance.post(PathDiffTmp, sbDiff.ToString());


                if (mode == dbMode.full && File.Exists(PathDiff))
                    File.Delete(PathDiff);
            }


            writeEnd();
        }
        /// <summary>
        /// nb consecutif dans le même sens pour info
        /// </summary>
        public int Serial { get { return _nbSameDirection; } set { _nbSameDirection = value; } }
        /// <summary>
        /// nb même sens borné pour calcul
        /// </summary>
        public int SerialBox { get { return _nbSameDirectionBox; } }
        /// <summary>
        /// nb allez-retours pour calcul
        /// </summary>
        public int Alt { get { return _nbAlt; } }
        /// <summary>
        /// nb allez/retour consécutifs pour info
        /// </summary>
        public int AltHisto { get { return _nbAltHisto; } }
        /// <summary>
        /// Position de l'élastique. Positif : tend à agrandir le delta. du à plusieurs séries dans le même sens. Négatif : tend à diminuer le delta. du à plusieurs allez-retours consécutifs
        /// </summary>
        public decimal Elastique { get { return _nbElastique; } }
        public decimal Elastique2 { get { return _nbElastique2; } }
        public decimal dv = 0;
        public decimal dx = 0m;
        public decimal dcoeff = 1; 
        //  public decimal da;
        public decimal AccelerationRapport { get { return dv / epsilon; } }
        public decimal VitesseRapport { get { return dx / epsilon; } }
        public decimal danticonvergenceMin
        {
            get
            {
                return epsilon;
            }
        }




        public decimal CoeffOld
        {
            get { return coeffOld; }
            set { coeffOld = value; checkCoeffOld(); }
        }

        public bool CoeffOldAuto
        {
            get { return coeffOldAuto; }
            set { coeffOldAuto = value; checkCoeffOld(); }
        }

        //private decimal getCoeff(decimal coeffT) { return Math.Pow(coeffT, (1.0m / safe)); }


    }
}
]]></content>
  </file>
  <file path="\PieceDb.Consolid\stat\StatBuilder.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using pdb.util;
using Math = pdb.util.Math; 

namespace pdb.gen.stat
{
    class StatBuilder
    {


        private List<Piece> list;
        private StreamWriter st;
        private int level;
        private int sub;
        private int delta;

        private decimal coeff;

        public const int VAL_MAX = 6000;
        private int min;
        private int nbCurrent;
        private int index; 
        private Regex reg = new Regex("[6789]");
        public const int NB_MEDIANE = 36;
        private StatConteneur conteneur = new StatConteneur();
        public StatBuilder(IEnumerable<Piece> list)
        {
            this.list = new List<Piece>(list);
            this.list.Reverse();
        }

        private void record()
        {
            st.Write((double)min / 1000);
            st.Write("\t");
            st.WriteLine(nbCurrent);
        }
        private void record3()
        {
            var _min = (decimal)min / 100000m; 
            st.Write(_min);
            st.Write("\t");
            var v = (decimal)nbCurrent / coeff;
            st.Write(v.ToString("0.#####"));

            st.Write("\t");
            decimal cur = Piece.getRapport(_min);            
            st.WriteLine(cur.ToString("0.######")); 
        }

        private void record4()
        {
            var _min = (decimal)min / (10000 * loupeCoeff); 
            st.Write(_min);
            st.Write("\t");
            double v = (double)nbCurrent / (double)coeff;
            st.Write(v.ToString("0.#####"));

            st.Write("\t");
            decimal cur = Piece.getRapport(_min);
            st.WriteLine(cur.ToString("0.######")); 

        }

        private void record2()
        {
            conteneur.record(level, sub, min, nbCurrent);
        }

        public void gener()
        {
            gener("stats.txt");
        }

        public void gener0()
        {
            gener0("stats.txt");
        }


        public void gener0(string file)
        {
            decimal EPSILON = 0.00000001m;
            int count = list.Count;
            if (count == 0)
                return;
            using (Stream stream = new FileStream(@"..\" + file, FileMode.Create))
            {
                using (st = new StreamWriter(stream, Encoding.ASCII))
                {
                    try
                    {
                        int deltaBase = 10000;
                        for (level = 0; level < 4; level++)
                        {
                            deltaBase /= 10;
                            int nb = VAL_MAX / deltaBase;
                            //  var tab = new int[nb]; 
                            for (sub = 3; sub >= 1; sub--)
                            {
                                // level 0 > 0,1,2,3,4,5 puis 01, 23,45, puis 0,3
                                delta = sub * deltaBase;
                                //   nb =(int)( 6 / sub * Math.Pow(10, 4 - level)); 
                                // level = 1 =>600

                                // parcourir la liste triée
                                // pour chaque pièce comparer classNameAndRating
                                int index = 0;
                                st.WriteLine();
                                st.Write("\t\t\tlevel:"); st.Write(level); st.Write(" sub:"); st.WriteLine(sub);

                                min = 0;
                                int max = delta;


                                var current = list[index].ClassementValueDecimal0;
                                nbCurrent = 0;

                                bool _end = false;
                                while (true)
                                {
                                    if (min >= VAL_MAX)
                                        break;

                                    if (current * 1000 + EPSILON >= max || _end)
                                    {
                                        //if (!reg.IsMatch(min.ToString()))
                                        record();

                                        min = max;
                                        while (reg.IsMatch(min.ToString()))
                                            min += deltaBase;

                                        max = min + delta;
                                        nbCurrent = 0;

                                    }
                                    else
                                    {
                                        nbCurrent++;
                                        index++;
                                        if (index >= list.Count)
                                        {

                                            _end = true;
                                            continue;
                                        }
                                        current = list[index].ClassementValueDecimal0;
                                    }
                                }

                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex);
                    }
                    st.WriteLine();

                    try
                    {
                        //phase deux déterminer les tantièmes
                        //1,2,3..10,20,30..100,
                        double nbTot = count;
                        double portion = nbTot;
                        int K = 1;
                        decimal valueFrom = 0;

                        decimal classTo = 6.0m;
                        decimal classFrom = 0.0m;

                        List<Tranche> tranches = new List<Tranche>();
                        const int DETAIL = 1000;

                        for (int i = 0; i < 6 * DETAIL; i++)
                        {
                            if (reg.IsMatch(i.ToString()))
                                continue;
                            tranches.Add(new Tranche(i));
                        }
                        for (level = 1; level < 2; level++)
                        {



                            for (int div = 2; div <= NB_MEDIANE; div++)
                            {


                                //  st.Write("\t\t\tlevel:"); st.Write(level); st.Write(" div:"); st.WriteLine(div);
                                valueFrom = 0;
                                int iFrom = 0;
                                int iTo = count - 1;
                                portion = nbTot / div;
                                classFrom = 0;
                                for (sub = 1; sub <= div; sub++)
                                {

                                    double to = sub * portion;
                                    iTo = 0;
                                    if (to > 0)
                                        iTo = (int)to - 1;
                                    if (iTo >= list.Count)
                                        iTo = list.Count - 1;
                                    if (iTo < 0)
                                        iTo = 0;
                                    decimal rapport = list[iTo].RapportClassementDecimal;
                                    classTo = list[iTo].ClassementValueDecimal0;


                                    //st.Write(classFrom);
                                    ////st.Write("\t");
                                    //st.Write(classTo);
                                    //st.Write("\t");
                                    ////st.Write(valueFrom);
                                    ////
                                    //st.Write(rapport);
                                    //st.Write("\t");


                                    //int nb = (iTo - iFrom + 1);                          
                                    //st.Write(nb);
                                    //st.Write("\t");
                                    decimal densite = 0;
                                    if (rapport != valueFrom)
                                        densite = 1.0m / ((rapport - valueFrom) * (decimal)div);
                                    //st.Write("\t");
                                    //st.Write(densite);
                                    //st.WriteLine(); 

                                    for (int i = 0; i < 6 * DETAIL; i++)
                                    {
                                        if (i < classFrom * DETAIL)
                                            continue;
                                        if (i > classTo * DETAIL)
                                            continue;
                                        if (reg.IsMatch(i.ToString()))
                                            continue;
                                        Tranche tranche = tranches.Find(t => t.index == i);
                                        tranche.densites[div - 1] = densite;
                                    }

                                    valueFrom = rapport;
                                    iFrom = iTo;
                                    classFrom = classTo;
                                }
                            }
                            K *= 10;
                        }

                        st.WriteLine();
                        st.Write("\t");
                        st.Write("\t");
                        st.Write("\t");

                        for (int i = 0; i < NB_MEDIANE; i++)
                        {
                            st.Write(i + 2);
                            st.Write("\t");
                            st.Write(i + 2);
                            st.Write("\t");
                        }
                        Tranche last = null;
                        foreach (Tranche tranche in tranches)
                        {
                            st.WriteLine();
                            st.Write((double)tranche.index / DETAIL);
                            st.Write("\t");

                            for (int i = 0; i < NB_MEDIANE; i++)
                            {
                                var densite = tranche.densites[i];
                                st.Write(densite);
                                st.Write("\t");
                                if (last == null || last.densites[i] != densite)
                                {
                                    st.Write(densite);
                                }
                                else
                                    st.Write(0);
                                st.Write("\t");
                            }
                            last = tranche;
                        }

                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e);
                    }
                }
            }
        }


        //public void gener3(bool generDistrib)
        //{
        //    gener3("stats3.txt", generDistrib);
        //}
        public void gener3(string file, bool generDistrib)
        {
            decimal EPSILON = 0.00000001m;
            int VAL_MAX = StatBuilder.VAL_MAX * 100;
            int count = list.Count;
            if (count == 0)
                return;
            while (true)
            {
                try
                {
                    misc.log("gener " + file);


                    var filename = Path.GetFileNameWithoutExtension(file);
                    var ext = Path.GetExtension(file);
                    string _file = @"..\" + filename + "_med" + ext;
                    string f0 = @"..\" + file;
                    string f0tmp = f0 + ".tmp";
                    string f1tmp = _file + ".tmp";
                    int NBLINE = 65500;
                    int nbLine = 0;
                    using (Stream stream = new FileStream(f0tmp, FileMode.Create))
                    {
                        using (st = new StreamWriter(stream, Encoding.ASCII))
                        {
                            try
                            {
                                int deltaBase = 1000000;
                                for (level = 5; level >= 0; level--)
                                {
                                    if (nbLine >= NBLINE) break;
                                    deltaBase /= 10;
                                    int nb = VAL_MAX / deltaBase;

                                    for (sub = 3; sub >= 1; sub--)
                                    {
                                        if (nbLine >= NBLINE) break;
                                        coeff = Math.Pow(6, level - 1) * (decimal)sub;
                                        // level 0 > 0,1,2,3,4,5 puis 01, 23,45, puis 0,3
                                        delta = sub * deltaBase;
                                        index = 0;
                                        st.WriteLine(); nbLine++;
                                        st.Write("\t\t\tlevel:"); st.Write(level); st.Write(" sub:"); st.WriteLine(sub); nbLine++;

                                        min = 0;
                                        int max = delta;


                                        decimal current = list[index].ClassementValueDecimal0;
                                        nbCurrent = 0;

                                        bool _end = false;
                                        while (true)
                                        {
                                            if (min >= VAL_MAX)
                                                break;

                                            if (current * 100000 + EPSILON >= max || _end)
                                            {

                                                record3();

                                                nbLine++;
                                                if (nbLine >= NBLINE) break;


                                                min = max;
                                                while (reg.IsMatch(min.ToString()))
                                                    min += deltaBase;

                                                max = min + delta;
                                                nbCurrent = 0;

                                            }
                                            else
                                            {
                                                nbCurrent++;
                                                index++;
                                                if (index >= list.Count)
                                                {

                                                    _end = true;
                                                    continue;
                                                }
                                                current = list[index].ClassementValueDecimal0;
                                            }
                                        }

                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine(ex);
                                throw; 
                            }

                        }
                    }

                    File.Copy(f0tmp, f0, true);
                    File.Delete(f0tmp);

                    misc.log("fin gener " + file);

                    if (!generDistrib)
                        return;

                    misc.log("gener distrib " + _file);

                    using (FileStream stream2 = new FileStream(f1tmp, FileMode.Create))
                    {
                        using (st = new StreamWriter(stream2, Encoding.UTF8))
                        {

                            try
                            {
                                //phase deux déterminer les tantièmes
                                //1,2,3..10,20,30..100,
                                double nbTot = count;
                                double portion = nbTot;
                                int K = 1;
                                decimal valueFrom = 0;

                                decimal classTo = 6.0m;
                                decimal classFrom = 0.0m;

                                List<Tranche> tranches = new List<Tranche>();
                                Dict<int, Tranche> dict = new Dict<int, Tranche>();
                                const int DETAIL = 10000;

                                for (int i = 0; i < 6 * DETAIL; i++)
                                {
                                    if (reg.IsMatch(i.ToString()))
                                        continue;
                                    var tranche = new Tranche(i);
                                    tranches.Add(tranche);
                                    dict[i] = tranche;
                                }
                                for (level = 1; level < 2; level++)
                                {



                                    for (int div = 2; div <= NB_MEDIANE; div++)
                                    {


                                        //  st.Write("\t\t\tlevel:"); st.Write(level); st.Write(" div:"); st.WriteLine(div);
                                        valueFrom = 0;
                                        int iFrom = 0;
                                        int iTo = count - 1;
                                        portion = nbTot / div;
                                        classFrom = 0;
                                        for (sub = 1; sub <= div; sub++)
                                        {

                                            double to = sub * portion;
                                            iTo = 0;
                                            if (to > 0)
                                                iTo = (int)to - 1;
                                            if (iTo >= list.Count)
                                                iTo = list.Count - 1;
                                            if (iTo < 0)
                                                iTo = 0;
                                            decimal rapport = list[iTo].RapportClassementDecimal;
                                            classTo = list[iTo].ClassementValueDecimal0;


                                            //st.Write(classFrom);
                                            ////st.Write("\t");
                                            //st.Write(classTo);
                                            //st.Write("\t");
                                            ////st.Write(valueFrom);
                                            ////
                                            //st.Write(rapport);
                                            //st.Write("\t");


                                            //int nb = (iTo - iFrom + 1);                          
                                            //st.Write(nb);
                                            //st.Write("\t");
                                            decimal densite = 0m;
                                            if (rapport != valueFrom)
                                                densite = 1.0m / ((rapport - valueFrom) * div);
                                            //st.Write("\t");
                                            //st.Write(densite);
                                            //st.WriteLine(); 

                                            for (int i = 0; i < 6 * DETAIL; i++)
                                            {
                                                if (i < classFrom * DETAIL)
                                                    continue;
                                                if (i > classTo * DETAIL)
                                                    continue;
                                                if (reg.IsMatch(i.ToString()))
                                                    continue;
                                                Tranche tranche = dict[i];
                                                //  Tranche tranche = tranches.Find(t => t.index == i);
                                                tranche.densites[div - 1] = densite;
                                            }

                                            valueFrom = rapport;
                                            iFrom = iTo;
                                            classFrom = classTo;
                                        }
                                    }
                                    K *= 10;
                                }

                                st.WriteLine();
                                st.Write("\t");
                                st.Write("\t");
                                st.Write("\t");

                                for (int i = 0; i < NB_MEDIANE; i++)
                                {
                                    st.Write(i + 2);
                                    st.Write("\t");
                                    st.Write(i + 2);
                                    st.Write("\t");
                                }
                                Tranche last = null;
                                foreach (Tranche tranche in tranches)
                                {
                                    st.WriteLine();
                                    st.Write((double)tranche.index / DETAIL);
                                    st.Write("\t");

                                    for (int i = 0; i < NB_MEDIANE; i++)
                                    {
                                        var densite = tranche.densites[i];
                                        st.Write(densite);
                                        st.Write("\t");
                                        if (last == null || last.densites[i] != densite)
                                        {
                                            st.Write(densite);
                                        }
                                        else
                                            st.Write(0);
                                        st.Write("\t");
                                    }
                                    last = tranche;
                                }

                            }
                            catch (Exception e)
                            {
                                Console.WriteLine(e);
                                throw; 
                            }
                        }

                    }

                    File.Copy(f1tmp, _file, true);
                    File.Delete(f1tmp);

                    misc.log("fin gener distrib " + _file);
                    break; 
                }
                catch (Exception e)
                {
                    misc.log(e.ToString()); 
                }
            }
        }

        private int loupe;
        private decimal loupeCoeff;
        public int Loupe { set { loupe = value; loupeCoeff =  pdb.util.Math.Pow(1000, loupe); } }
        public void gener4(string file)
        {
            decimal EPSILON = 0.00000000001m / loupeCoeff;
            decimal VAL_MAX = StatBuilder.VAL_MAX * 10; // on laisse inchangé pour faire seulement une partie
            int count = list.Count;
            //if (count == 0)
            //    return;
           // misc.log("gener " + file + loupe);

            while (true)
            {
                try
                {
                    var filename = Path.GetFileNameWithoutExtension(file);
                    var ext = Path.GetExtension(file);
                    var str = "";
                    if (loupe > 0)
                        str = loupe.ToString();
                    string _file = @"..\" + filename + "_med" + str + ext;
                    string f0 = @"..\" + filename + str + ext;

                    misc.log("gener " + f0);

                    string f0tmp = f0 + ".tmp";
                    //   string f1tmp = _file + ".tmp";
                    using (Stream stream = new FileStream(f0tmp, FileMode.Create))
                    {
                        using (st = new StreamWriter(stream, Encoding.ASCII))
                        {
                            try
                            {
                                int deltaBase = (int)(100000);
                                for (level = 4; level >= 0; level--)
                                {
                                    deltaBase /= 10;
                                    //int nb = VAL_MAX / deltaBase;

                                    for (sub = 3; sub >= 1; sub--)
                                    {
                                        coeff = Math.Pow(6, level - 3 * loupe) * sub; /// loupeCoeff;
                                        // level 0 > 0,1,2,3,4,5 puis 01, 23,45, puis 0,3
                                        int delta = (int)(sub * deltaBase);
                                        index = 0;
                                        st.WriteLine();
                                        st.Write("\t\t\tlevel:"); st.Write(level); st.Write(" sub:"); st.WriteLine(sub);

                                        min = 0;
                                        var max = delta;

                                        decimal current = 0m; 
                                        if (count >0)
                                         current = list[index].ClassementValueDecimal0;
                                        nbCurrent = 0;

                                        bool _end = false;
                                        while (true)
                                        {
                                            if (min >= VAL_MAX)
                                                break;

                                            if (current * 10000 * loupeCoeff + EPSILON >= max || _end)
                                            {

                                                record4();

                                                min = max;
                                                while (reg.IsMatch(min.ToString()))
                                                    min += (int)deltaBase;

                                                max = min + delta;
                                                nbCurrent = 0;

                                            }
                                            else
                                            {
                                                nbCurrent++;
                                                index++;
                                                if (index >= count)
                                                {

                                                    _end = true;
                                                    continue;
                                                }
                                                current = list[index].ClassementValueDecimal0;
                                            }
                                        }

                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine(ex);
                                throw;
                            }

                        }
                    }

                    File.Copy(f0tmp, f0, true);
                    File.Delete(f0tmp);

                    misc.log("fin gener " + f0);
                    /*
                    if (!generDistrib)
                        return;

                    misc.log("gener distrib " + _file);

                    using (FileStream stream2 = new FileStream(f1tmp, FileMode.Create))
                    {
                        using (st = new StreamWriter(stream2, Encoding.UTF8))
                        {

                            try
                            {
                                //phase deux déterminer les tantièmes
                                //1,2,3..10,20,30..100,
                                double nbTot = count;
                                double portion = nbTot;
                                int K = 1;
                                decimal valueFrom = 0;

                                decimal classTo = 6.0m;
                                decimal classFrom = 0.0m;

                                List<Tranche> tranches = new List<Tranche>();
                                Dict<int, Tranche> dict = new Dict<int, Tranche>();
                                const int DETAIL = 10000;

                                for (int i = 0; i < 6 * DETAIL; i++)
                                {
                                    if (reg.IsMatch(i.ToString()))
                                        continue;
                                    var tranche = new Tranche(i);
                                    tranches.Add(tranche);
                                    dict[i] = tranche;
                                }
                                for (level = 1; level < 2; level++)
                                {



                                    for (int div = 2; div <= NB_MEDIANE; div++)
                                    {


                                        //  st.Write("\t\t\tlevel:"); st.Write(level); st.Write(" div:"); st.WriteLine(div);
                                        valueFrom = 0;
                                        int iFrom = 0;
                                        int iTo = count - 1;
                                        portion = nbTot / div;
                                        classFrom = 0;
                                        for (sub = 1; sub <= div; sub++)
                                        {

                                            double to = sub * portion;
                                            iTo = 0;
                                            if (to > 0)
                                                iTo = (int)to - 1;
                                            if (iTo >= list.Count)
                                                iTo = list.Count - 1;
                                            if (iTo < 0)
                                                iTo = 0;
                                            decimal rapport = list[iTo].RapportClassementDecimal;
                                            classTo = list[iTo].ClassementValueDecimal;


                                            //st.Write(classFrom);
                                            ////st.Write("\t");
                                            //st.Write(classTo);
                                            //st.Write("\t");
                                            ////st.Write(valueFrom);
                                            ////
                                            //st.Write(rapport);
                                            //st.Write("\t");


                                            //int nb = (iTo - iFrom + 1);                          
                                            //st.Write(nb);
                                            //st.Write("\t");
                                            decimal densite = 0m;
                                            if (rapport != valueFrom)
                                                densite = 1.0m / ((rapport - valueFrom) * div);
                                            //st.Write("\t");
                                            //st.Write(densite);
                                            //st.WriteLine(); 

                                            for (int i = 0; i < 6 * DETAIL; i++)
                                            {
                                                if (i < classFrom * DETAIL)
                                                    continue;
                                                if (i > classTo * DETAIL)
                                                    continue;
                                                if (reg.IsMatch(i.ToString()))
                                                    continue;
                                                Tranche tranche = dict[i];
                                                //  Tranche tranche = tranches.Find(t => t.index == i);
                                                tranche.densites[div - 1] = densite;
                                            }

                                            valueFrom = rapport;
                                            iFrom = iTo;
                                            classFrom = classTo;
                                        }
                                    }
                                    K *= 10;
                                }

                                st.WriteLine();
                                st.Write("\t");
                                st.Write("\t");
                                st.Write("\t");

                                for (int i = 0; i < NB_MEDIANE; i++)
                                {
                                    st.Write(i + 2);
                                    st.Write("\t");
                                    st.Write(i + 2);
                                    st.Write("\t");
                                }
                                Tranche last = null;
                                foreach (Tranche tranche in tranches)
                                {
                                    st.WriteLine();
                                    st.Write((double)tranche.index / DETAIL);
                                    st.Write("\t");

                                    for (int i = 0; i < NB_MEDIANE; i++)
                                    {
                                        var densite = tranche.densites[i];
                                        st.Write(densite);
                                        st.Write("\t");
                                        if (last == null || last.densites[i] != densite)
                                        {
                                            st.Write(densite);
                                        }
                                        else
                                            st.Write(0);
                                        st.Write("\t");
                                    }
                                    last = tranche;
                                }

                            }
                            catch (Exception e)
                            {
                                Console.WriteLine(e);
                            }
                        }

                    }

                    File.Copy(f1tmp, _file, true);
                    File.Delete(f1tmp);

                    misc.log("fin gener distrib " + _file);
                     * 
                     * */

                    break; 
                }
                catch (Exception ex)
                {
                    misc.log(ex.ToString()); 
                }

            }
        }

        public void gener(string file)
        {
            int count = list.Count;
            if (count == 0)
                return;
            decimal EPSILON = 0.00000001m;

            var filename = Path.GetFileNameWithoutExtension(file);
            var ext = Path.GetExtension(file);
            string _file = @"..\" + filename + "2" + ext;
            using (Stream stream = new FileStream(_file, FileMode.Create))
            {
                using (pdb.util.TextWriter st = new pdb.util.TextWriter(stream, Encoding.ASCII))
                {
                    try
                    {
                        int deltaBase = 10000;
                        for (level = 3; level >= 0; level--)
                        {
                            deltaBase /= 10;
                            int nb = VAL_MAX / deltaBase;
                            //  var tab = new int[nb]; 
                            for (sub = 3; sub >= 1; sub--)
                            {
                                // level 0 > 0,1,2,3,4,5 puis 01, 23,45, puis 0,3
                                delta = sub * deltaBase;
                                int index = 0;


                                min = 0;
                                int max = delta;


                                var current = list[index].ClassementValueDecimal0;
                                nbCurrent = 0;

                                bool _end = false;
                                while (true)
                                {
                                    if (min >= VAL_MAX)
                                        break;

                                    if (current * 1000 + EPSILON >= max || _end)
                                    {
                                        record2();

                                        min = max;
                                        while (reg.IsMatch(min.ToString()))
                                            min += deltaBase;

                                        max = min + delta;
                                        nbCurrent = 0;

                                    }
                                    else
                                    {
                                        nbCurrent++;
                                        index++;
                                        if (index >= list.Count)
                                        {

                                            _end = true;
                                            continue;
                                        }
                                        current = list[index].ClassementValueDecimal0;
                                    }
                                }

                            }
                        }

                        var datas = conteneur.Datas;

                        var results = new List<ResultLine>();

                        min = 0;
                        while (true)
                        {
                            while (reg.IsMatch(min.ToString()))
                                min++;
                            if (min >= VAL_MAX)
                                break;
                            results.Add(new ResultLine(min));
                            min++;
                        }

                        foreach (StatItem item in datas)
                        {
                            var level = item.level;
                            var sub = item.sub;
                            var _min = item.min;
                            var nb = item.nb;
                            // Détermination de la colonne
                            int col = 3 * level + sub - 1;

                            // Détermination du coeff d'expansion / moyenne
                            int coeff = (int)Math.Pow(6, level) * sub;

                            ResultLine res0 = results.Find(r => r.min == _min);
                            int index0 = results.IndexOf(res0);

                            for (int i = 0; i < coeff; i++)
                            {
                                results[index0 + i][col] = (double)nb / (double)coeff;
                            }

                        }


                        st.Append("min"); st.Append("\t");
                        for (int l = 0; l < 4; l++)
                        {
                            for (int s = 1; s <= 3; s++)
                            {
                                st.Append(l); st.Append(" ");
                                st.Append(s); st.Append("\t");
                            }

                        }
                        st.AppendLine();
                        st.AppendLine();


                        foreach (ResultLine line in results)
                        {
                            line.getLine(st); st.AppendLine();
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex);
                    }

                    try
                    {

                        st.AppendLine();
                        st.AppendLine();
                        //phase deux déterminer les tantièmes
                        //1,2,3..10,20,30..100,
                        double nbTot = count;
                        double portion = nbTot;
                        int K = 1;
                        decimal valueFrom = 0m;

                        decimal classTo = 6.0m;
                        decimal classFrom = 0.0m;

                        List<Tranche> tranches = new List<Tranche>();
                        const int DETAIL = 1000;
                        for (int i = 0; i < 6 * DETAIL; i++)
                        {
                            if (reg.IsMatch(i.ToString()))
                                continue;
                            tranches.Add(new Tranche(i));
                        }
                        for (level = 1; level < 2; level++)
                        {



                            for (int div = 2; div <= NB_MEDIANE; div++)
                            {


                                //  st.Write("\t\t\tlevel:"); st.Write(level); st.Write(" div:"); st.WriteLine(div);
                                valueFrom = 0;
                                int iFrom = 0;
                                int iTo = count - 1;
                                portion = nbTot / div;
                                classFrom = 0;
                                for (sub = 1; sub <= div; sub++)
                                {

                                    double to = sub * portion;
                                    iTo = 0;
                                    if (to > 0)
                                        iTo = (int)to - 1;
                                    if (iTo >= list.Count)
                                        iTo = list.Count - 1;
                                    if (iTo < 0)
                                        iTo = 0;
                                    var rapport = list[iTo].RapportClassementDecimal;
                                    classTo = list[iTo].ClassementValueDecimal0;


                                    //st.Write(classFrom);
                                    ////st.Write("\t");
                                    //st.Write(classTo);
                                    //st.Write("\t");
                                    ////st.Write(valueFrom);
                                    ////
                                    //st.Write(rapport);
                                    //st.Write("\t");


                                    //int nb = (iTo - iFrom + 1);                          
                                    //st.Write(nb);
                                    //st.Write("\t");
                                    decimal densite = 0m;
                                    if (rapport != valueFrom)
                                        densite = 1.0m / ((rapport - valueFrom) * div);
                                    //st.Write("\t");
                                    //st.Write(densite);
                                    //st.WriteLine(); 

                                    for (int i = 0; i < 6 * DETAIL; i++)
                                    {
                                        if (i < classFrom * DETAIL)
                                            continue;
                                        if (i > classTo * DETAIL)
                                            continue;
                                        if (reg.IsMatch(i.ToString()))
                                            continue;
                                        Tranche tranche = tranches.Find(t => t.index == i);
                                        tranche.densites[div - 1] = densite;
                                    }

                                    valueFrom = rapport;
                                    iFrom = iTo;
                                    classFrom = classTo;
                                }
                            }
                            K *= 10;
                        }

                        st.AppendLine();
                        st.Append("\t");
                        st.Append("\t");
                        st.Append("\t");

                        for (int i = 0; i < NB_MEDIANE; i++)
                        {
                            st.Append(i + 2);
                            st.Append("\t");
                            st.Append(i + 2);
                            st.Append("\t");
                        }
                        Tranche last = null;
                        foreach (Tranche tranche in tranches)
                        {
                            st.AppendLine();
                            st.Append((double)tranche.index / DETAIL);
                            st.Append("\t");


                            for (int i = 0; i < NB_MEDIANE; i++)
                            {
                                var densite = tranche.densites[i];
                                st.Append(densite);
                                st.Append("\t");
                                if (last == null || last.densites[i] != densite)
                                {
                                    st.Append(densite);
                                }
                                else
                                    st.Append(0);
                                st.Append("\t");
                            }
                            last = tranche;
                        }

                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex);
                    }
                }
            }
        }


    }
}
]]></content>
  </file>
</db>
