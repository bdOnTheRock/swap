<db path="C:\bernard\db2\">
  <file path="db4\pdb.player\ViewModel\DetailClassementViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Data;
using System.Windows.Input;
using pdb.gen.stat;
using pdb.player.ViewModel.Commande;
using pdb.obj;
using pdb.util;
using System.Threading;

namespace pdb.player.ViewModel
{
    enum ihmInDispo
    {
        none,
        rot,
        stat
    }

    public interface IRecordClassmentObserver
    {
        void signalClassementChange();
        void autoNextTrack(TrackListViewModel currentPlaying);
    }
    public interface IClassementObserver
    {
        void signalClassementChange(IClient client);
    }
    class DetailClassementViewModel : ViewModelBase
    {
        private static DetailClassementViewModel _instance;
        public static DetailClassementViewModel Instance { get { return _instance; } }
        private static IRecordClassmentObserver recordClassementObserver;
        public static IRecordClassmentObserver RecordObserver { set { recordClassementObserver = value; } }
        // private CPlayList _root;
        private PlayListViewModel currentClassList;
        private TrackListViewModel currentTrack;


        //   private CPlayList _currentClassList;
        private ICommand cmdRecord;
        private IClassementObserver ihm;
        public DetailClassementViewModel(IClassementObserver ihm)
        {
            this.ihm = ihm;
            cmdRecord = new RecordClassement(this);
            TrackListViewModel.CurrentHumanSelectedChanged += new EventHandler<ClientEventArgs>(TrackListViewModel_CurrentSelectedChanged);
            //this._root = root.getOrCreate("classement");
            //_currentClassList = _root;
            // findCurrentPlaylist();
            _instance = this;
        }

        void TrackListViewModel_CurrentSelectedChanged(object sender, ClientEventArgs e)
        {
            App.Dispatch(() =>
            {
                //if (currentTrack == null)
                //{
                if (currentTrack != TrackListViewModel.HumanSelected)
                {
                    currentTrack = TrackListViewModel.HumanSelected;
                    if (currentTrack != null)
                    {
                        setClassment(currentTrack.Classement, e.client);
                        Name = currentTrack.Name;
                        OnPropertyChanged("Classement");
                    }
                    //  OnPropertyChanged(""); 

                }
            }, e.client);
            //}
        }

        private bool onlyDisabled = false;
        public bool OnlyDisabled
        {
            get { return onlyDisabled; }
            set
            {
                if (value != onlyDisabled)
                {
                    onlyDisabled = value;
                    OnPropertyChanged("OnlyDisabled");
                }
            }
        }


        private bool uncheckAfter = false;
        public bool UncheckAfter
        {
            get { return uncheckAfter; }
            set
            {
                if (value != uncheckAfter)
                {
                    uncheckAfter = value;
                    OnPropertyChanged("UncheckAfter");
                }
            }
        }

        private bool auto = true;
        public bool Auto
        {
            get { return auto; }
            set
            {
                if (value != auto)
                {
                    auto = value;
                    OnPropertyChanged("Auto");
                }
            }
        }

        private ihmInDispo inDispo;
        public ihmInDispo IhmInDispo
        {
            get { return inDispo; }
            set
            {
                if (value != inDispo)
                {
                    inDispo = value;
                    OnPropertyChanged("IhmInDispo");
                }
            }
        }


        public string Name
        {
            get { if (currentTrack != null) return currentTrack.Name; return ""; }
            set { OnPropertyChanged("Name"); }
        }
        private string classement = "-";
        public string Classement
        {
            get { return classement; }
            set
            {
                setClassment(value, null);
            }

        }

        public void setClassment(string value, IClient client)
        {
            if (value != classement)
            {
                if (isClassment(value))
                {
                    classement = value;
                    if (this.client != null)
                        this.client.cancel();
                    //var client = new SimpleClient("buildStat\t", Logger.getLogger("Classement"));
                    if (client == null)
                        client = new SimpleClient("buildStat\t", Logger.getLogger("Classement"));
                    if (client.Cancel)
                        return;
                    client.log(value);
                    this.client = client;


                    if (!client.Cancel)
                    {
                        // waitBeforeSignalClassChange(client, value); 
                        new Thread(() => waitBeforeSignalClassChange(client, value)).Start();
                    }
                }

            }

        }


        private void waitBeforeSignalClassChange(IClient client, string value)
        {
            Thread.Sleep(30);
            if (client.Cancel)
                return;
            findCurrentPlaylist(client);
            if (client.Cancel)
                return;
            client.log("fin stats " + value);
            Thread.Sleep(30);
            if (client.Cancel)
                return;
            ihm.signalClassementChange(client);
        }

        public static bool isClassment(string str)
        {
            return pdb.obj.Classement.canBeClassement(str);
        }
        private IClient client;
        private void findCurrentPlaylist(IClient client)
        {
            if (App.bib == null)
                return;
            try
            {
                if (string.IsNullOrEmpty(classement))
                {
                    //  _currentClassList = _root;
                    currentClassList = App.bib.getClass("", true); // new PlayListViewModel(_root);
                }
                else
                {
                    if (!pdb.obj.Classement.canBeClassement(classement))
                        return;

                    currentClassList = App.bib.getClass(classement, true);

                    //var tab = classement.ToCharArray();
                    //var pl = _root;

                    //foreach (char c in tab)
                    //{
                    //    if (c == '.')
                    //        break;
                    //    pl = pl.get(c.ToString());
                    //}
                    //_currentClassList = pl;
                    //  currentClassList = new PlayListViewModel(pl);
                }

                buildStats(client);
            }
            finally
            {
                //  OnPropertyChanged("");
            }
        }

        #region stats
        int d, d0, d1, d2, d3, d4, d5, d01, d23, d45, d02, d35;
        const int NB_ROW = 4;
        const int NB_COL = 6;
        private int[,] tab = new int[NB_ROW, NB_ROW];
        private DynamicStatPair stats;


        private void buildStats(IClient client)
        {
            if (currentClassList == null)
                return;
            if (App.gen == null)
                return;


            stats = App.gen.generStat(client, classement, onlyDisabled);

            if (client.Cancel)
                return;
            d0 = get(0); // currentClassList.get("0", false).AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d1 = get(1); // currentClassList.get("1").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d2 = get(2);  //currentClassList.get("2").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d3 = get(3); //currentClassList.get("3").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d4 = get(4); //currentClassList.get("4").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d5 = get(5); //currentClassList.get("5").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;

            d01 = d0 + d1;
            d23 = d2 + d3;
            d45 = d4 + d5;

            d02 = d0 + d1 + d2;
            d35 = d3 + d4 + d5;

            d = d02 + d35;


            //   OnPropertyChanged("");
        }

        //public DataTable Stats
        //{
        //    get
        //    {
        //        if (stats == null)
        //            return null;
        //        var dt = new DataTable();
        //        for (int i = -DynamicStatLigne.SEMI_COLS; i <= DynamicStatLigne.SEMI_COLS; i++)
        //        {
        //            dt.Columns.Add(i.ToString(), typeof(int));
        //        }

        //        foreach (DynamicStatLigne ligne in stats.rows)
        //        {
        //            DataRow row = dt.Rows.Add();
        //            for (int i = -DynamicStatLigne.SEMI_COLS; i <= DynamicStatLigne.SEMI_COLS; i++)
        //            {
        //                row[i.ToString()] = ligne[i];
        //            }

        //        }

        //        return dt;

        //    }
        //}

        public DynamicStat getStats(IClient client)
        {
            if (stats == null)
                buildStats(client);
            return stats.offset;
        }

        private int get(int level)
        {
            if (currentClassList == null)
                return 0;
            if (stats == null)
                return 0;

            int row = 2;
            if (classement.Contains("."))
                row = 4;

            return stats.real[row][level];

            //var sub = currentClassList.get(level.ToString());
            //var pl = currentClassList;
            //int nb = 0;


            //if (onlyDisabled)
            //    nb += currentClassList.AlltracksVmd.Tracks.FindAll(t => t.PieceParentId < 0 && t.Rating == 20 * level).Count;
            //else
            //    nb += currentClassList.AlltracksVm.Tracks.FindAll(t => t.PieceParentId < 0 && t.Rating == 20 * level && (!t.Enabled || t.PieceGen.ClassementProvisoireRecent)).Count;

            //if (sub != null)
            //{
            //    if (onlyDisabled)
            //        nb += sub.AlltracksVmd.AllTracks.FindAll(t => t.PieceParentId < 0).Count;
            //    else
            //        nb += sub.AlltracksVm.AllTracks.FindAll(t => t.PieceParentId < 0 && (!t.Enabled || t.PieceGen.ClassementProvisoireRecent)).Count;
            //}

            //return nb;

            //if (!onlyDisabled)
            //    return tracks.Count;

            //tracks = tracks.FindAll(t => !t.Enabled);

            //return tracks.Count;

        }

        //private int get(string className, int level)
        //{
        //    var currentClassList = App.bib.getClass(className, false);
        //    var sub = currentClassList.get(level.ToString());
        //    List<TrackListViewModel> tracks;
        //    if (sub == null)
        //    {
        //        tracks = currentClassList.Tracks.FindAll(t => t.Rating == 20 * level);
        //    }
        //    else
        //    {
        //        tracks = sub.AllTracks;
        //    }

        //    if (!onlyDisabled)
        //        return tracks.Count;

        //    tracks = tracks.FindAll(t => !t.Enabled);

        //    return tracks.Count;

        //}

        private string getOffset(string classBase, int offset)
        {
            if (string.IsNullOrEmpty(classBase))
                return "";
            return "";
        }

        public int D { get { return d; } }
        public int D0 { get { return d0; } }
        public int D1 { get { return d1; } }
        public int D2 { get { return d2; } }
        public int D3 { get { return d3; } }
        public int D4 { get { return d4; } }
        public int D5 { get { return d5; } }

        public int D01 { get { return d01; } }
        public int D23 { get { return d23; } }
        public int D45 { get { return d45; } }

        public int D02 { get { return d02; } }
        public int D35 { get { return d35; } }
        #endregion

        private List<TrackListViewModel> _list;
        public List<TrackListViewModel> getTracks(IClient client)
        {

            if (_list == null)
            {
                if (App.gen == null)
                    return new List<TrackListViewModel>();
                if (client == null)
                    client = new SimpleClient("ClassementTracks", Logger.getLogger("ClassementTracks"));
                var list = App.gen.getTracks(client, classement, onlyDisabled);
                _list = new List<TrackListViewModel>();
                foreach (var p in list)
                {
                    TrackListViewModel t = TrackListViewModel.getOrCreate(p); // App.bib.Musique.FindTrack(p.PieceId);
                    if (t != null)
                        _list.Add(t);
                }
            }
            return _list;

        }
        public void reset()
        {
            _list = null;
        }
        //public AllTracksViewModel Tracks0
        //{
        //    get
        //    {
        //        AllTracksViewModel tracks = null;
        //        if (currentClassList == null)
        //            return null;
        //        if (onlyDisabled)
        //            tracks = currentClassList.AllTrackFatherDisabled;
        //        else
        //            tracks = currentClassList.AllTrackFather;
        //        if (tracks == null)
        //            return null;
        //        if (!onlyDisabled)
        //            tracks = currentClassList.AllTrackFather; 
        //        tracks.refresh();

        //        return tracks;

        //        //var list = currentClassList.AlltracksVm;
        //        //if (onlyDisabled)
        //        //    list = list.FindAll(t => !t.Enabled);

        //        ////if (currentTrack != null)
        //        ////{
        //        ////    foreach (TrackListViewModel t in list)
        //        ////    {
        //        ////        if (t.Location == currentTrack.Location)
        //        ////            t.IsSelected = true;
        //        ////        else
        //        ////            t.IsSelected = false;
        //        ////    }
        //        ////}
        //        //return currentClassList.AlltracksVm; 
        //        //return list;
        //    }
        //}

        public List<TrackListViewModel> Album
        {
            get
            {
                if (currentClassList == null)
                    return null;
                if (currentTrack == null)
                    return null;
                var tracks = App.getAlbum(currentTrack);
                //foreach (TrackListViewModel t in tracks)
                //{
                //    if (t.Location == currentTrack.Location)
                //        t.IsSelected = true;
                //    else
                //        t.IsSelected = false; 
                //}

                return tracks;
            }
        }



        public TrackListViewModel SelectedTrackInClassView
        {
            get
            {
                if (currentTrack == null | currentClassList == null)
                    return null;
                return currentTrack;
            }
            set
            {
            }
        }

        public TrackListViewModel SelectedTrackInAlbumView
        {
            get
            {
                if (currentTrack == null || currentClassList == null)
                    return null;
                var tracks = Album;
                if (tracks == null || tracks.Count == 0)
                    return null;
                return tracks.Find(t => t.PieceId == currentTrack.PieceId);
            }
            set
            {
            }
        }

        public void record()
        {
            App.Indispo = false;
            if (currentTrack == null)
                return;
            var currentPlaying = TrackListViewModel.CurrentPlaying;
            if (currentPlaying != null && currentPlaying.MasterId != currentTrack.MasterId)
            {
                IIhm ihm = App.Instance;
                if (!ihm.Confirm("Modifier le classement de " + currentTrack + " ?", "Classement"))
                    return;
            }



            currentTrack.Classement = classement;


            if (uncheckAfter)
                currentTrack.Enabled = false;

            if (recordClassementObserver != null)
            {
                recordClassementObserver.signalClassementChange();
                if (auto)
                    recordClassementObserver.autoNextTrack(currentTrack);
            }

        }

        //void IClient.log(string phase)
        //{
        //   if (client ==null)
        //        return; 
        //   client.log(phase); 
        //}

        public bool CanRecord
        {
            get
            {
                return currentTrack != null && currentTrack.Enabled && isClassment(classement);
            }
        }

        public ICommand Record { get { return cmdRecord; } }

        //bool IClient.Cancel
        //{
        //    get
        //    {
        //        if (client ==null)
        //            return false; 
        //        return client.Cancel; 
        //    }
        //}
    }
}
]]></content>
  </file>
</db>
