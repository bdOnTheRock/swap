<db path="C:\Bernard\db1\pd4bb">
  <file path="\pdb.podcast\Auto\AutoBuilder.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;
using pdb.podcast.Delta;
using pdb.podcast.Tuning;
using pdb.podcast.Report;
using pdb.podcast.Selection;
using pdb.podcast.Load;
using timeSpan = pdb.util.timeSpan;
using System.Diagnostics;


namespace pdb.podcast.Auto
{

    enum builderstate
    {
        none,
        enCours,
        stable
    }
    public class AutoBuilder : IComparable<AutoBuilder>//, IBorderTransmit
    {
        const char SEP = '\t';
        const string DAT = @"..\Data\";
        string file = "";
        private bool mustUpdate; public static bool MustUpdate = false;
        private double total = -1;
        private double delta;
        private double lastd;
        private double d;
        private double org;
        private double newv;
        private bool canGo;
        //private int lastGoodDelta;
        //private double lastGoodLevel;
        private int lastTotal;
        private int atomicMode;
        private int sameConfiguration;
        private double cmin;
        private double cmax;
        private double dmin;
        private double dmax;
        public const double EPSILON = 1e-10;
        //private bool dminAlready;
        //private bool dmaxAlready;
        private string _empreinte = "";
        private double delta0 = 0;
        private double lastDelta = 0;
        private int nbDown;
        private bool? useForfait;
        private Memory mem0;
        private Memory mem1;
        private Memory minMem;
        private Memory maxMem;
        private StringBuilder sb = new StringBuilder();
        // private static DateTime lastModif;
        private pdb.podcast.Tuning.Auto conf;
        private static List<AutoBuilder> list = new List<AutoBuilder>();
        private static List<AutoBuilder> old = null; 
        private static int index;
        private DirConf source; public DirConf Source { get { return source; } }

        private LimitItemBase client;
        private static XmlElement xmlRoot;
        private static XmlDocument doc;
        private static bool started = false;
        private string name = "";
        private builderstate state;
        private int naturalOrder = 1;
        private List<AutoBuilderItem> items = new List<AutoBuilderItem>();
        private AutoBuilderItem choose;
        private List<AutoBuilderItem> chooses = new List<AutoBuilderItem>();
        //public const int STOP_MAX = 3;
        //private int _stopLevel = STOP_MAX;
        // private bool 


        private List<LimitItemLoader> loaders = new List<LimitItemLoader>();
        //public void buildLoaders()
        //{
        //    loaders = new List<LimitItemLoader>();
        //    source.buildLoaders(loaders, this);

        //}

        //public void go()
        //{
        //    var total = new timeSpan();
        //    var fd = new timeSpan();
        //    var d = new timeSpan();
        //    var date = new timeSpan();
        //    var nb = 0;

        //    var dict = new pdb.util.BgDictString0<TrackInfoItunes>();

        //    while (true)
        //    {
        //        var _total = timeSpan.MaxValue;
        //        var _fd = timeSpan.MaxValue;
        //        var _d = timeSpan.MaxValue;
        //        var _date = timeSpan.MaxValue;
        //        var _nb = int.MaxValue;

        //        foreach (LimitItemLoader loader in loaders)
        //        {
        //            loader.checkV(this, nb, fd, d, date);
        //            if (_total > loader._durationv)
        //                _total = loader._durationv;
        //            if (_fd > loader.Fd)
        //                _fd = loader.Fd;
        //            if (_date > loader._datev)
        //                _date = loader._datev;
        //            if (_nb > loader._nb)
        //                _nb = loader._nb;
        //        }
        //    }
        //}
        private AutoBuilder(pdb.podcast.Tuning.Auto conf)
        {
            this.conf = conf;
            this.name = conf.name;
            mem0 = new Memory(DAT + "v." + conf.name + ".db.txt");
            mem1 = new Memory(DAT + "r." + conf.name + ".db.txt");
            this.file = DAT + "auto." + conf.name + ".log";
            foreach (pdb.podcast.Tuning.Auto sub in conf.items)
            {
                var item = AutoBuilderItem.get(this, sub); // new AutoBuilderItem(this, sub);
                items.Add(item);
            }
        }
        private void setConf(pdb.podcast.Tuning.Auto value)
        {

            conf = value;
            for (int i = 0; i < items.Count && i < conf.items.Count; i++)
            {
                items[i].setConf(conf.items[i]);
            }

        }

        private void setSource(DirConf source)
        {
            this.source = source;
            source.addBorderObs(this);
            source.Auto = this;
        }

        //// private static bool loaded; 
        //public static void getLoaders()
        //{
        //    //if (loaded)
        //    //    return;
        //    //loaded = true;
        //    foreach (AutoBuilder auto in list)
        //        auto.buildLoaders();
        //}

        //public static void test()
        //{
        //    //if (loaded)
        //    //    return;
        //    //loaded = true;
        //    foreach (AutoBuilder auto in list)
        //        auto.go();
        //}

        private static AutoBuilder main;
        public static void clear() { old = list; list = new List<AutoBuilder>();  }
        public static void build(XmlNode xAuto, DirConf source)
        {
            if (xAuto is XmlElement)
            {
                var conf = new pdb.podcast.Tuning.Auto(null, null, xAuto as XmlElement);
                var name = conf.name;
                AutoBuilder builder = list.Find(a => a.name == name);
                if (builder == null)
                {
                    builder = new AutoBuilder(conf);
                    list.Add(builder);
                    builder.naturalOrder = list.Count;
                    index = list.Count - 1;
                    if (main == null)
                        main = builder;
                    if (old != null)
                    {
                        AutoBuilder oldB = old.Find(a => a.name == name);
                        if (oldB != null)
                        {
                            builder._empreinte = oldB._empreinte;
                            builder.newv = oldB.newv;
                            builder.org = oldB.org;
                            builder.state = oldB.state;
                            builder.delta = oldB.delta;
                            builder.delta0 = oldB.delta0;
                            builder.lastd = oldB.lastd;
                            builder.lastDelta = oldB.lastDelta;
                            builder.lastTotal = oldB.lastTotal;
                            builder.nbDown = oldB.nbDown;
                            builder.total = oldB.total;
                            builder.chooses = oldB.chooses;
                            builder.goBack = oldB.goBack; 
                        }
                    }
                }
                builder.setConf(conf);
                builder.setSource(source);

            }
        }
        public static void setClient(LimitItemBase client, XmlNode node)
        {
            var att = node.Attributes["auto"];
            if (att == null)
                return;
            var name = att.Value;
            AutoBuilder builder = list.Find(a => a.name == name);
            if (builder == null)
                return;
            builder.client = client;

        }
        private void makeDelta(Memory mem, string mode, string file)
        {
            if (!File.Exists(file))
                File.WriteAllText(file, "quand\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tstate\tAdd\tiAdd\ttSupp\tiSup\t\r\n");
            mem.load();
            var listSe = source.getSelectedTracks();
            var loaded = source.getAllTracks();
            if (mem.Loaded)
            {
                var auxDixt = new pdb.util.BgDictString<TrackInfoItunes>(); // BgDictString<string, TrackInfoItunes>();
                foreach (TrackInfoItunes s in listSe)
                {
                    var key = s.Location;
                    auxDixt[key] = s;
                    if (!mem.dict.ContainsKey(key))
                    {
                        var desc = new TrackItemdesc(s.ToString(), s.GetProvider());
                        string line = desc.ToString();
                        mem.ajouts.Add(desc);
                        mem.tajouts.Add(s);
                        mem.dict.Add(key, desc);
                        sb.AppendLine(string.Format("{0} delta {1} ajouté {2}", name, mode, line));
                    }
                }
                List<string> toRemove = new List<string>();
                foreach (string key in mem.dict.Keys)
                {
                    if (!auxDixt.ContainsKey(key))
                    {
                        var line = mem.dict[key];
                        mem.suppressions.Add(line);
                        toRemove.Add(key);
                        if (loaded.ContainsKey(key))
                        {
                            var t = loaded[key];
                            mem.tsuppressions.Add(t);
                        }
                        sb.AppendLine(string.Format("{0} delta {1} supprimé {2}", name, mode, line));
                    }
                }

                foreach (string key in toRemove)
                    mem.dict.Remove(key);
                if (mem.ajouts.Count > 0 || mem.suppressions.Count > 0)
                {
                    int imax = Math.Max(mem.ajouts.Count, mem.suppressions.Count);
                    //using (TextWriter tw = new StreamWriter(file, true, Encoding.UTF8))
                    //{
                    //    //if (!exist)
                    //    //    tw.WriteLine("quand\tdiff\tcorr\torg\tnew\tAdd\tiAdd\ttSupp\tiSup");
                    //    tw.Write(DateTime.Now); tw.Write(SEP);
                    //    tw.Write((delta).ToString("0.###")); tw.Write(SEP);
                    //    tw.Write(d.ToString("0.###")); tw.Write(SEP);
                    //    tw.Write(org.ToString("0.###")); tw.Write(SEP);
                    //    tw.Write(newv.ToString("0.###")); tw.Write(SEP);
                    //    tw.Write(cmin.ToString("0.###")); tw.Write(SEP);
                    //    tw.Write(cmax.ToString("0.###")); tw.Write(SEP);
                    //    tw.Write(dmin.ToString("0.###")); tw.Write(SEP);
                    //    tw.Write(dmax.ToString("0.###")); tw.Write(SEP);
                    //    tw.Write(atomicMode); tw.Write(SEP);
                    //    tw.Write(state); tw.Write(SEP);
                    //    for (int i = 0; i < imax; i++)
                    //    {
                    //        if (i > 0)
                    //        {
                    //            tw.WriteLine();
                    //            for (int j = 0; j < 11; j++)
                    //                tw.Write(SEP);
                    //        }
                    //        if (i < mem.ajouts.Count)
                    //            tw.Write(mem.ajouts[i].track);
                    //        tw.Write(SEP);
                    //        if (i < mem.ajouts.Count)
                    //            tw.Write(mem.ajouts[i].item);
                    //        tw.Write(SEP);
                    //        if (i < mem.suppressions.Count)
                    //            tw.Write(mem.suppressions[i].track);
                    //        tw.Write(SEP);
                    //        if (i < mem.suppressions.Count)
                    //            tw.Write(mem.suppressions[i].item);
                    //        tw.Write(SEP);
                    //    }
                    //    tw.WriteLine();
                    //}
                }
            }
            mem.save(listSe);
        }
        private void reset()
        {
            atomicMode = -1;
            cmin = 0;
            cmax = int.MaxValue;
            dmin = int.MaxValue;
            dmax = -dmin;
            //dminAlready = false;
            //dmaxAlready = false;
            minMem = null;
            maxMem = null;
            sameConfiguration = 0;
            _empreinte = "";
            delta0 = 0;
            lastDelta = 0;
            state = builderstate.none;
            foreach (AutoBuilderItem item in items)
                item.reset();
           // _stopLevel = STOP_MAX;
        }
        private static void decrementIndex()
        {
            index--;
            if (index < 0)
                index = list.Count - 1;
        }
        //  private bool _modifFile; 

        public static bool Stable
        {
            get
            {

                foreach (AutoBuilder builder in list)
                    if (builder.state != builderstate.stable)
                        return false;
                return true;
            }
        }

        private static double _offset = -1;
        public static double Offset { get { return _offset; } set { _offset = value;} }
       

     

        public static void init(bool first)
        {
            if (list.Count == 0)
                return;
            list.Sort();
            //bool firstWIthTb = first && Conf.BorderTb;
            //bool secondwithoutTb = !first && !Conf.BorderTb;
            //bool readXml = firstWIthTb || secondwithoutTb;

            bool readXml = first;
            FileInfo f = null;
            if (readXml)
            {
                f = Conf.Instance.ConfFile;
                doc = new XmlDocument();
                doc.PreserveWhitespace = true;
                doc.Load(f.FullName);
                xmlRoot = doc.DocumentElement.SelectSingleNode("./dir") as XmlElement;
            }

            bool _modifFIle = false;
            foreach (AutoBuilder builder in list)
            {
                if (readXml)
                    builder.setValueOrg();
                //if (first)
                //    builder.causeRegister.Clear();
                if (builder.ToSave() && readXml)
                    _modifFIle = true;
            }
            _offset = 0; 

            if (_modifFIle)
            {
                f.CopyTo(f.FullName + ".sov", true);
                doc.Save(f.FullName);
            }
        }

        private bool ToSave()
        {
            foreach (AutoBuilderItem item in items)
            {
                if (item.ToSave)
                    return true;
            }
            return false;
        }

        public void setValueOrg()
        {

            xml = null;
            lookup(xmlRoot);
            if (xml == null)
                return;
            foreach (AutoBuilderItem item in items)
                item.setOrg(xml);
        }
        public static void Init3()
        {
            foreach (AutoBuilder item in list)
            {
                item.init3();
            }
        }
        public static bool Check(Feeds feeds)
        {
            if (list.Count == 0)
                return true;
            list.Sort();
            FileInfo f = Conf.Instance.ConfFile;

            bool _cango = true;
            MustUpdate = false;
            bool _modifFile = false;
            if (Conf.AutoSequence)
            {
                int i = -1;
                for (i = list.Count - 1; i >= 0; i--)
                {
                    var builder = list[i];
                    main = builder;
                    var cango = builder.check3();
                    if (!cango)
                        _cango = false;
                    if (builder.mustUpdate)
                        MustUpdate = true;
                    if (builder.newv != builder.org || builder.ToSave())
                    {
                        _modifFile = true;
                    }
                    if (!cango || MustUpdate || _modifFile)
                        break;
                }
                if (i > 0)
                    _cango = false;
            }
            else
            {
                //throw new NotImplementedException(); 
                //AutoBuilder builder = null;
                //if (!started)
                //{
                //    started = true;
                //    foreach (AutoBuilder b in list)
                //        b.total = b.source.getTotalSize();
                //}
                //// application de la précédente modif
                //builder = list[index];
                //if (builder.state > builderstate.none)
                //{
                //    builder.makeEmpreinteNonSequence();
                //    decrementIndex();
                //}
                //int i = -1;
                //for (i = list.Count - 1; i >= 0; i--)
                //{
                //    builder = list[i];
                //    bool cango = false;
                //    bool _cont = false;
                //    while (true)
                //    {
                //        if (i == index || _cont)
                //        {
                //            cango = builder.check();
                //            index = i;
                //            main = builder;
                //            _cont = false;
                //            break;
                //        }
                //        else
                //            cango = builder.checkWithoutModify();
                //        if (builder.state == builderstate.none)
                //            _cont = true;
                //        else
                //            break;
                //    }
                //    if (!cango)
                //        _cango = false;
                //    if (builder.mustUpdate)
                //        MustUpdate = true;
                //    if (i == index)
                //    {
                //        if (builder.newv != builder.org)
                //        {
                //            _modifFile = true;
                //        }
                //        else
                //        {
                //            //index--;
                //            //if (index < 0)
                //            //    index = list.Count - 1;
                //        }
                //    }
                //    if (_modifFile)
                //        break;
                //}
            }
            if (_modifFile)
            {
                f.CopyTo(f.FullName + ".sov", true);
                doc.Save(f.FullName);
            }

            foreach (AutoBuilder builder in list)
            {
                if (builder.state == builderstate.none)
                {
                    _cango = false;
                    break;
                }
            }
            return _cango;
        }


        private void log(string txt)
        {
            Program.logAuto.log(string.Format("{0}", txt));
        }
        private void log(string txt, params object[] args)
        {
            string _txt = string.Format(txt, args);
            log(_txt);
        }
        private void makeEmpreinteNonSequence()
        {
            var newEmpreinte = source.getEmpreinte();
            if (state == builderstate.stable)
            {
                if (newEmpreinte != _empreinte)
                    reset();
            }
            _empreinte = newEmpreinte;
            total = source.getTotalSize();
        }
        private bool checkWithoutModify()
        {
            mustUpdate = false;
            canGo = false;
            var newEmpreinte = source.getEmpreinte();
            try
            {
                if (state == builderstate.stable)
                {
                    if (newEmpreinte != _empreinte)
                        reset();
                    else
                    {
                        mustUpdate = false;
                        canGo = true;
                        org = newv;
                        return true;
                    }
                }
                else
                {
                    if (newEmpreinte != _empreinte)
                        reset();
                }
                if (Conf.AutoSequence || total < 0)
                    total = source.getTotalSize();
                double target = conf.target;
                delta = target - total;
                if (delta >= 0)
                {
                    if (delta < conf.write)
                        canGo = true;
                    if (delta < conf.delta)
                    {
                        state = builderstate.stable;
                        _empreinte = newEmpreinte;
                        return true;
                    }
                    mustUpdate = true;
                }
                else if (delta < 0)
                {
                    mustUpdate = true;
                    canGo = false;
                }
            }
            finally
            {
                if (state == builderstate.stable)
                {
                    mustUpdate = false;
                    _empreinte = newEmpreinte;
                    canGo = true;
                }
            }
            return canGo;
        }
        //private bool check()
        //{
        //    sb = new StringBuilder();
        //    sb.AppendLine();
        //    makeDelta(mem0, "virtuel", DAT + "vhisto." + conf.name + ".txt");
        //    mustUpdate = false;
        //    canGo = false;
        //    var newEmpreinte = source.getEmpreinte();
        //    if (state == builderstate.none)
        //        reset();
        //    else if (state == builderstate.stable)
        //    {
        //        if (newEmpreinte != _empreinte)
        //            reset();
        //        else
        //        {
        //            mustUpdate = false;
        //            canGo = true;
        //            org = newv;
        //            return true;
        //        }
        //    }
        //    if (Conf.AutoSequence || total < 0)
        //        total = source.getTotalSize();
        //    double target = conf.target;
        //    delta = target - total;
        //    log("delta {0}", delta);
        //    if (state == builderstate.none)
        //        delta0 = delta;
        //    state = builderstate.enCours;
        //    lastd = d;
        //    d = 0;
        //    xml = null;
        //    lookup(xmlRoot);
        //    if (xml == null)
        //        return true;
        //    string attTarget = conf.type.ToString();
        //    var att = xml.Attributes[attTarget];
        //    if (att == null)
        //        return true;
        //    org = Convert.ToDouble(att.Value);
        //    newv = org;
        //    try
        //    {
        //        if (delta * delta0 < 0)
        //        {
        //            if (atomicMode < 0)
        //            {
        //                atomicMode = 0;
        //                //if (minMem == null)
        //                //    minMem = new Memory(mem0);
        //                //if (maxMem == null)
        //                //    maxMem = new Memory(mem0);
        //                //if (minMem.suppressions.Count == 0)
        //                //    minMem.suppressions = new List<TrackItemdesc>(maxMem.ajouts);
        //                //if (maxMem.ajouts.Count == 0)
        //                //    maxMem.ajouts = new List<TrackItemdesc>(minMem.suppressions);
        //            }
        //        }
        //        bool cancelSameConf = false;
        //        bool cancelNb = false;
        //        if (atomicMode >= 0)
        //        {
        //            atomicMode++;
        //            if (Math.Abs(dmin - delta) < EPSILON)
        //                sameConfiguration++;
        //            else if (Math.Abs(dmax - delta) < EPSILON)
        //                sameConfiguration++;
        //            else
        //                sameConfiguration = 0;
        //            if (sameConfiguration > conf.idem)
        //                cancelSameConf = true;
        //            if (atomicMode > conf.cloop)
        //                cancelNb = true;
        //        }
        //        if (delta >= 0)
        //        {
        //            if (mem0.suppressions.Count > 0)
        //                minMem = new Memory(mem0);
        //            if (delta < conf.write)
        //                canGo = true;
        //            //  lastGoodLevel = org;
        //            //if (maxMem != null && minMem != null)
        //            //{
        //            if (atomicMode > 0)
        //            {
        //                if (cancelSameConf) //|| (mem0.suppressions.Count == 1 && mem0.ajouts.Count ==0))
        //                {
        //                    log("abandon recherche cartésienne cause idem");
        //                    state = builderstate.stable;
        //                    return true;
        //                }
        //                else if (cancelNb)
        //                {
        //                    log("abandon recherche cartésienne cause cloop");
        //                    state = builderstate.stable;
        //                    return true;
        //                }
        //                //if (Math.Abs(dmin - delta) < 0.01)
        //                //    dminAlready = true;
        //                //else
        //                //    dminAlready = false;
        //                if (maxMem != null && minMem != null)
        //                {
        //                    if (minMem.suppressions.Count == maxMem.ajouts.Count)
        //                    {
        //                        bool identique = true;
        //                        for (int i = 0; i < minMem.suppressions.Count; i++)
        //                        {
        //                            if (!minMem.suppressions[i].Equals(maxMem.ajouts[i]))
        //                            {
        //                                identique = false;
        //                                break;
        //                            }
        //                        }
        //                        if (identique)
        //                        {
        //                            if (minMem.suppressions.Count == 1 || atomicMode > conf.verif)
        //                            {
        //                                mustUpdate = false;
        //                                log("abandon recherche cartésienne cause cycle");
        //                                state = builderstate.stable;
        //                                _empreinte = newEmpreinte;
        //                                return true;
        //                            }
        //                        }
        //                    }
        //                }
        //            }
        //            cmin = org;
        //            dmin = delta;
        //            // lastGoodDelta = (int)delta;
        //            lastTotal = (int)total;
        //            if (delta < conf.delta)
        //            {
        //                state = builderstate.stable;
        //                _empreinte = newEmpreinte;
        //                return true;
        //            }
        //            mustUpdate = true;
        //            d = 0;
        //            if (atomicMode > 0)
        //            {
        //                //if (atomicMode > conf.cloop)
        //                //{
        //                //    mustUpdate = false;
        //                //    log("abandon recherche cartésienne cause cloop");
        //                //    state = builderstate.stable;
        //                //    _empreinte = newEmpreinte;
        //                //    return true;
        //                //}
        //                //if (dminAlready && dmaxAlready)
        //                //{
        //                //    mustUpdate = false;
        //                //    Program.logAuto.log("abandon recherche cartésienne cause cycle");
        //                //    return true;
        //                //}
        //                d = 0.5 * (cmax - cmin);
        //            }
        //            else
        //            {
        //                double _d = int.MaxValue;
        //                if (cmax >= 0 && cmin >= 0)
        //                    _d = cmax - cmin;
        //                double aux = int.MaxValue;
        //                // double aux2 = int.MaxValue;
        //                foreach (Level level in conf.levels)
        //                {
        //                    aux = (delta - level.d) * level.inf;
        //                    if (aux > d)
        //                        d = aux;
        //                }
        //                if (conf.coeff > 0)
        //                {

        //                    if (org > conf.max)
        //                        d = conf.max - org;
        //                    else
        //                    {
        //                        d *= conf.coeff * (conf.max - org) / (conf.max - conf.min);
        //                    }
        //                    //else
        //                    //{
        //                    //    var de = Math.Abs(delta);
        //                    //    aux2 = de / (target + de) * (conf.max - org) * conf.coeff;
        //                    //}
        //                }

        //                //if (d == 0 || aux2 < d)
        //                //    d = aux2;

        //                if (d > _d)
        //                    d = _d;
        //            }
        //        }
        //        else if (delta < 0)
        //        {
        //            if (mem0.ajouts.Count > 0)
        //                maxMem = new Memory(mem0);
        //            mustUpdate = true;
        //            canGo = false;
        //            //if (maxMem != null && minMem != null)
        //            //{
        //            //    if (atomicMode < 0)
        //            //        atomicMode = 0;
        //            //    atomicMode++;
        //            //}
        //            cmax = org;
        //            dmax = delta;
        //            d = 0;
        //            if (atomicMode > 0)
        //            {
        //                bool identique = false;
        //                if (minMem != null && maxMem != null
        //                    && maxMem.ajouts.Count == minMem.suppressions.Count)
        //                {
        //                    identique = true;
        //                    for (int i = 0; i < minMem.suppressions.Count; i++)
        //                    {
        //                        if (!minMem.suppressions[i].Equals(maxMem.ajouts[i]))
        //                        {
        //                            identique = false;
        //                            break;
        //                        }
        //                    }
        //                }
        //                if (cancelSameConf)// || (mem0.ajouts.Count == 1 && mem0.suppressions.Count == 0))
        //                {
        //                    log("retour derniere bonne valeur cause idem");
        //                    d = cmin - cmax;
        //                }
        //                else if (cancelNb)
        //                {
        //                    log("abandon recherche cartésienne cause cloop");
        //                    d = cmin - cmax;
        //                }
        //                else if (identique && (minMem.suppressions.Count == 1 || atomicMode > conf.verif))
        //                {
        //                    log("retour derniere bonne valeur cause cycle");
        //                    d = cmin - cmax;
        //                }
        //                //else if (atomicMode > conf.cloop)
        //                //{                      
        //                //    log("abandon recherche cartésienne cause cloop");
        //                //    d = cmin - cmax;
        //                //}
        //                else
        //                    d = 0.5 * (cmin - cmax);
        //            }
        //            else
        //            {

        //                double _d = -int.MaxValue;
        //                if (cmax >= 0 && cmin >= 0)
        //                    _d = cmin - cmax;
        //                double aux = -int.MaxValue;
        //                // double aux2 = -int.MaxValue;
        //                foreach (Level level in conf.levels)
        //                {
        //                    aux = (delta - conf.delta + level.d) * level.sup;
        //                    if (aux < d)
        //                        d = aux;
        //                }
        //                if (conf.coeff > 0)
        //                {
        //                    if (org < conf.min)
        //                        d = (conf.min - org);
        //                    else
        //                    {
        //                        d *= conf.coeff * (org - conf.min) / (conf.max - conf.min);
        //                    }
        //                    //else
        //                    //{
        //                    //    var de = Math.Abs(delta);
        //                    //    aux2 = de / (target+de) * (conf.min - org) * conf.coeff;
        //                    //}
        //                }

        //                //if (d == 0 || aux2 > d)
        //                //    d = aux2;

        //                if (d < _d)
        //                    d = _d;
        //            }
        //            //d = (delta - conf.delta) * conf.sup;
        //            //if (org <= lastGoodLevel)
        //            //{
        //            //    lastGoodLevel = -1;
        //            //    lastGoodDelta = -1;
        //            //    lastTotal = -1;
        //            //}
        //        }
        //        if (Math.Abs(d) < 0.00000001)
        //        {
        //            mustUpdate = false;
        //            // unCart();
        //            state = builderstate.stable;
        //            _empreinte = newEmpreinte;
        //            return true;
        //        }
        //        //if (dejaVu)
        //        //    Program.logAuto.log("déjà vu lastGoodLevel:{0} lastGoodDelta:{1}", lastGoodLevel, lastGoodDelta);
        //        log("correction {0}", d);
        //        newv = org + d;
        //        if (newv <= 0)
        //            newv = 0;
        //        if (conf.coeff > 0)
        //        {
        //            if (newv > conf.max)
        //                newv = conf.max;
        //            else if (newv < conf.min)
        //                newv = conf.min;
        //        }
        //        newv = Math.Round(newv, 8);
        //        log(" valeur {0} --> {1}", org, newv);
        //        att.Value = newv.ToString();
        //    }
        //    finally
        //    {
        //        if (state == builderstate.stable)
        //        {
        //            mustUpdate = false;
        //            _empreinte = newEmpreinte;
        //            canGo = true;
        //        }
        //        string strDate = "";
        //        var attD = xml.Attributes["date"];
        //        if (attD != null)
        //            strDate = attD.Value;
        //        bool exist = File.Exists(file);
        //        //using (TextWriter tw = new StreamWriter(file, true, Encoding.UTF8))
        //        //{
        //        //    // "quand\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tAdd\tiAdd\ttSupp\tiSup\tstate\t\r\n");
        //        //    if (!exist)
        //        //        tw.WriteLine("quand\ttarget\tdelta\tinf\tsup\ttotal\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tstate");
        //        //    tw.Write(DateTime.Now); tw.Write(SEP);
        //        //    tw.Write(target.ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write(conf.delta.ToString("0.###")); tw.Write(SEP);
        //        //    if (conf.levels.Count > 0) tw.Write(conf.levels[0].inf.ToString("0.###")); else tw.Write(""); tw.Write(SEP);
        //        //    if (conf.levels.Count > 0) tw.Write(conf.levels[0].sup.ToString("0.###")); else tw.Write(""); tw.Write(SEP);
        //        //    tw.Write(total.ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write((-delta).ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write(d.ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write(org.ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write(newv.ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write(cmin.ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write(cmax.ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write(dmin.ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write(dmax.ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write(atomicMode); tw.Write(SEP);
        //        //    tw.Write(state); tw.Write(SEP);
        //        //    tw.WriteLine();
        //        //}
        //        if (canGo)
        //            // makeDelta(mem1, "reel", @"..\rhisto.txt");
        //            makeDelta(mem1, "reel", DAT + "rhisto." + conf.name + ".txt");
        //    }
        //    return canGo;
        //}

        //private void calcChoose(bool up, bool strict, bool checkSelect)
        //{
        //    choose = null;
        //    double dt = double.MaxValue;
        //    double gap = double.MaxValue;
        //    // bool trou = false;
        //    foreach (AutoBuilderItem item in items)
        //    {
        //        item.after(up, strict, checkSelect);
        //        item.setTension(up, strict, checkSelect);
        //        if (item.Stop(_stopLevel))
        //        {
        //            if ((strict || checkSelect) && Conf.BorderGranSlam)
        //            {
        //                choose = null;
        //                break;
        //            }
        //            continue;
        //        }
        //        double aux = double.MaxValue;
        //        // var tension = item.Tension;
        //        if (conf.selectFix)
        //        {
        //            var tension = item.Tension;
        //            aux = up ? tension : -tension;
        //        }
        //        else
        //            aux = item.Dt;

        //        if (conf.selectAbs && !conf.selectFix && aux < 0)
        //            aux *= -1;



        //        if (item.getCauses().Count == 0)
        //        {
        //            // trou = true;
        //            if ((strict || checkSelect) && Conf.BorderGranSlam)
        //            {
        //                choose = null;
        //                break;
        //            }
        //            continue;
        //        }

        //        //var _gap = Math.Abs(aux);
        //        //if (_gap < gap)
        //        //    gap = _gap;

        //        if (aux < dt)
        //        {
        //            dt = aux;
        //            newv = item.NewV;
        //            choose = item;
        //        }
        //    }
        //    //if (trou && conf.gap && gap < double.MaxValue)
        //    //{
        //    //    foreach (AutoBuilderItem item in items)
        //    //    {
        //    //        if (item.Stop)
        //    //            continue;
        //    //        item.gap(up, conf.selectFix, gap);
        //    //    }
        //    //}
        //}

        //private bool check2()
        //{
        //    // _modifFile = false; 
        //    sb = new StringBuilder();
        //    sb.AppendLine();
        //    makeDelta(mem0, "virtuel", DAT + "vhisto." + conf.name + ".txt");




        //    if (mem0.ajouts.Count > 0 || mem0.suppressions.Count > 0)
        //    {
        //        if (conf.pertinentExclu)
        //        {
        //            foreach (AutoBuilderItem item in items)
        //            {
        //                if (item != choose)
        //                    item.makePertinent();
        //            }
        //        }
        //        else if (conf.pertinentAll)
        //        {
        //            foreach (AutoBuilderItem item in items)
        //                item.makePertinent();
        //        }
        //        else
        //        {
        //            foreach (AutoBuilderItem item in items)
        //            {
        //                item.checkAjout(mem0.tajouts);
        //                item.checkAjout(mem0.tsuppressions);
        //            }
        //        }


        //        //else if (choose != null)
        //        //    choose.makePertinent();
        //    }
        //    mustUpdate = false;
        //    canGo = false;
        //    var newEmpreinte = source.getEmpreinte();

        //    try
        //    {
        //        if (state == builderstate.none)
        //            reset();
        //        else if (state == builderstate.stable)
        //        {
        //            if (newEmpreinte != _empreinte)
        //                reset();
        //            else
        //            {
        //                mustUpdate = false;
        //                canGo = true;
        //                org = newv;
        //                return true;
        //            }
        //        }

        //        total = source.getTotalSize();
        //        double target = conf.target;
        //        delta = target - total;
        //        log("delta {0}", delta);

        //        if (_stopLevel < 0)
        //        {
        //            log("arret cause stopLevel");
        //            state = builderstate.stable;
        //            return true;
        //        }
        //        if (delta * lastDelta < 0)
        //        {
        //            //if (delta > 0)
        //            //{
        //            //    // ok!
        //            //    state = builderstate.stable;
        //            //    _empreinte = newEmpreinte;
        //            //    return true;
        //            //}
        //            // retour arrière
        //            if (choose != null && _stopLevel > 0)
        //            {
        //                log("retour arrière");
        //                _stopLevel--;
        //                choose.stop(_stopLevel);
        //                canGo = false;
        //                mustUpdate = true;
        //                return false;
        //            }
        //            else
        //            {
        //                if (delta > 0)
        //                {
        //                    // ok!
        //                    log("pas de retour arriere stoplevel=0");
        //                    state = builderstate.stable;
        //                    _empreinte = newEmpreinte;
        //                    return true;
        //                }
        //                else
        //                {
        //                    _stopLevel--;
        //                    choose.stop(_stopLevel);
        //                    canGo = false;
        //                    mustUpdate = true;
        //                    return false;
        //                }
        //            }
        //        }
        //        lastDelta = delta;
        //        if (state == builderstate.none)
        //            delta0 = delta;
        //        state = builderstate.enCours;
        //        lastd = d;
        //        d = 0;

        //        bool up = delta > 0;
        //        if (up && delta < conf.delta)
        //        {
        //            log("delta");
        //            state = builderstate.stable;
        //            _empreinte = newEmpreinte;
        //            return true;
        //        }
        //        mustUpdate = true;
        //        //double dt = double.MaxValue;

        //        //bool real = true;
        //        //if (delta * delta0 < 0)
        //        //{
        //        //    if (choose != null)
        //        //    {
        //        //        _stopLevel--;
        //        //        choose.stop(_stopLevel);
        //        //    }
        //        //    canGo = false;
        //        //    mustUpdate = true;
        //        //    return false;
        //        //}
        //        if (conf.stopAll)
        //        {
        //            foreach (AutoBuilderItem item in items)
        //            {
        //                if (item.Stop(1))
        //                {
        //                    state = builderstate.stable;
        //                    return true;
        //                }
        //            }
        //        }



        //        choose = null;
        //        if (_stopLevel >= 3 && conf.checkSelect && conf.checkStrict)
        //            calcChoose(up, true, true);
        //        if (choose != null)
        //            log("REEL - SELECT");
        //        else
        //        {
        //            if (_stopLevel >= 2 && conf.checkSelect)
        //                calcChoose(up, false, true);
        //            if (choose != null)
        //                log("VIRTUEL SELECT");
        //            else
        //            {
        //                if (_stopLevel >= 1 && conf.checkStrict)
        //                    calcChoose(up, true, false);
        //                if (choose != null)
        //                    log("REEL");
        //                else
        //                {
        //                    if (_stopLevel >= 0)
        //                    {
        //                        calcChoose(up, false, false);
        //                        if (choose != null)
        //                            log("VIRTUEL");
        //                    }
        //                }
        //            }
        //        }


        //        if (choose == null)
        //        {
        //            log("choose null");
        //            _stopLevel--;
        //            if (_stopLevel < 0)
        //            {
        //                state = builderstate.stable;
        //                return true;
        //            }
        //            else
        //            {
        //                canGo = false;
        //                mustUpdate = true;
        //                return false;
        //            }
        //        }

        //        org = choose.Org;



        //        if (up)
        //        {
        //            if (delta < conf.write)
        //                canGo = true;
        //            if (conf.checkEvol)
        //            {
        //                // var nextTrack = choose.rejected(real).candidat;
        //                var size = choose.EvolSize; // Stat.getSizeinMo(nextTrack);
        //                if (delta < size)
        //                {
        //                    _stopLevel--;
        //                    // choose.stop();
        //                    if (conf.stopAll)
        //                    {
        //                        foreach (AutoBuilderItem item in items)
        //                            item.stop(_stopLevel);
        //                        //state = builderstate.stable;
        //                        //return true;
        //                    }
        //                    else
        //                    {
        //                        choose.stop(_stopLevel);
        //                    }
        //                }
        //            }

        //        }
        //        else
        //        {
        //        }
        //        choose.save();
        //        Program.logAuto.log("===> " + choose.ToString());
        //    }
        //    finally
        //    {
        //        if (state == builderstate.stable)
        //        {
        //            mustUpdate = false;
        //            _empreinte = newEmpreinte;
        //            canGo = true;
        //        }

        //        //using (TextWriter tw = new StreamWriter(file, true, Encoding.UTF8))
        //        //{
        //        //    bool exist = File.Exists(file);
        //        //    // "quand\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tAdd\tiAdd\ttSupp\tiSup\tstate\t\r\n");
        //        //    if (!exist)
        //        //        tw.WriteLine("quand\ttarget\tdelta\tinf\tsup\ttotal\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tstate");
        //        //    tw.Write(DateTime.Now); tw.Write(SEP);
        //        //    tw.Write(conf.target.ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write(conf.delta.ToString("0.###")); tw.Write(SEP);
        //        //    if (conf.levels.Count > 0) tw.Write(conf.levels[0].inf.ToString("0.###")); else tw.Write(""); tw.Write(SEP);
        //        //    if (conf.levels.Count > 0) tw.Write(conf.levels[0].sup.ToString("0.###")); else tw.Write(""); tw.Write(SEP);
        //        //    tw.Write(total.ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write((-delta).ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write(d.ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write(org.ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write(newv.ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write(cmin.ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write(cmax.ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write(dmin.ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write(dmax.ToString("0.###")); tw.Write(SEP);
        //        //    tw.Write(atomicMode); tw.Write(SEP);
        //        //    tw.Write(state); tw.Write(SEP);
        //        //    tw.WriteLine();
        //        //}
        //        if (canGo)
        //            // makeDelta(mem1, "reel", @"..\rhisto.txt");
        //            makeDelta(mem1, "reel", DAT + "rhisto." + conf.name + ".txt");
        //    }
        //    return canGo;
        //}

        private void init3()
        {
            _cause = null;


            foreach (AutoBuilderItem item in items)
            {
                item.Candidat = null;
                item.limit = null;
                item.setTension();
            }
            // _modifFile = false; 
            sb = new StringBuilder();
            sb.AppendLine();
            makeDelta(mem0, "virtuel", DAT + "vhisto." + conf.name + ".txt");




            if (mem0.ajouts.Count > 0 || mem0.suppressions.Count > 0)
            {
                if (conf.pertinentExclu)
                {
                    foreach (AutoBuilderItem item in items)
                    {
                        if (item != choose)
                            item.makePertinent();
                    }
                }
                else if (conf.pertinentAll)
                {
                    foreach (AutoBuilderItem item in items)
                        item.makePertinent();
                }
                else
                {
                    foreach (AutoBuilderItem item in items)
                    {
                        item.checkAjout(mem0.tajouts);
                        item.checkAjout(mem0.tsuppressions);
                    }
                }


            }

            setDelta();


        }

        public static void SetDelta()
        {
            foreach (AutoBuilder item in list)
            {
                item.setDelta();
            }
        }

        private void setDelta()
        {
            mustUpdate = false;
            canGo = false;

            total = source.getTotalSize();
            double target = conf.target;
            delta = target - total;
            // log("delta {0}", delta);
        }

        private bool goBack; 

        private bool check3()
        {
            // _modifFile = false; 

            var newEmpreinte = source.getEmpreinte();

            try
            {
                if (state == builderstate.none)
                    reset();
                else if (state == builderstate.stable)
                {
                    if (newEmpreinte != _empreinte)
                        reset();
                    else
                    {
                        mustUpdate = false;
                        canGo = true;
                        org = newv;
                        return true;
                    }
                }


                



                //if (_stopLevel < 0)
                //{
                //    log("arret cause stopLevel");
                //    state = builderstate.stable;
                //    return true;
                //}
                var _lastDelta = lastDelta;
                lastDelta = delta;
                if (delta * _lastDelta < 0)
                {
                    //if (delta > 0)
                    //{
                    //    // ok!
                    //    state = builderstate.stable;
                    //    _empreinte = newEmpreinte;
                    //    return true;
                    //}
                    // retour arrière
                    if (delta > 0)
                    {
                        if (conf.forfaitNegatif > 0 && true == useForfait)
                        {
                            useForfait = false;
                        }
                        else
                        {
                            if (conf.stopAll || !goBack)
                            {
                                // ok!
                                log("pas de retour arriere");
                                state = builderstate.stable;
                                _empreinte = newEmpreinte;
                                useForfait = null;
                                return true;
                            }
                        }
                    }
                    else
                    {
                        canGo = false;
                        mustUpdate = true;
                      //  _stopLevel--;
                        foreach (AutoBuilderItem choose in chooses)
                        {
                            if (choose != null )//&& _stopLevel > 0)
                            {
                                log("retour arrière");
                                choose.stop();
                            }
                        }

                        // il reste des items ?
                        goBack = items.Find( i=> !i.Stopped) != null; 
                        return false;
                    }

                }


                var cdv = _cause.causes;
                chooses.Clear();


                foreach (CauseDataValue cd in cdv.datas)
                {
                    if (cd.Virtuel)
                        continue;
                    if (!cd.Update)
                        continue;

                    var item = items.Find(it => it.type == cd.type);
                    if (item == null)
                        continue;
                    if (item.Stopped)
                        continue;
                    chooses.Add(item);
                    item.save(cd.val);
                  
                    // item.Cause = cd;
                    item.Candidat = cdv.candidat;
                    item.limit = cdv.limit;

                }


                if (state == builderstate.none)
                    delta0 = delta;
                state = builderstate.enCours;
                lastd = d;
                d = 0;

                bool up = delta > 0;

                if (up)
                    nbDown = 0;
                else
                    nbDown++;
                if (up && delta < conf.delta)
                {
                    log("delta");
                    state = builderstate.stable;
                    _empreinte = newEmpreinte;
                    useForfait = null;
                    return true;
                }
                mustUpdate = true;
                //double dt = double.MaxValue;

                //bool real = true;
                //if (delta * delta0 < 0)
                //{
                //    if (choose != null)
                //    {
                //        _stopLevel--;
                //        choose.stop(_stopLevel);
                //    }
                //    canGo = false;
                //    mustUpdate = true;
                //    return false;
                //}
                //if (conf.stopAll)
                //{
                //    throw new NotImplementedException(); 
                //    //foreach (AutoBuilderItem item in items)
                //    //{
                //    //    if (item.Stop(1))
                //    //    {
                //    //        state = builderstate.stable;
                //    //        useForfait = null;
                //    //        return true;
                //    //    }
                //    //}
                //}

                if (_cause == null)
                {
                    Debugger.Launch(); 

                    log("_cause NULL");
                    return false; 

                    state = builderstate.stable;
                    useForfait = null;
                    return true;

                }
                if (up)
                {
                    if (delta < conf.write)
                        canGo = true;
                }

               

                if (!up && conf.forfaitNegatif > 0)
                {

                    if (nbDown > conf.forfaitNegatifOffset)
                    {
                        useForfait = true;
                        foreach (var item in items)
                        {
                            var tension = item.Tension;
                            tension -= conf.forfaitNegatif * (nbDown - conf.forfaitNegatifOffset);
                            if (tension < 0)
                                tension = 0;
                            item.modif(tension);
                            chooses.Add(item);
                        }
                    }
                }

                if (chooses.Count == 0)
                {
                    log("pas de choose");
                    state = builderstate.stable;
                    useForfait = null;
                    return true;

                }





            }
            finally
            {
                if (state == builderstate.stable)
                {
                    mustUpdate = false;
                    _empreinte = newEmpreinte;
                    canGo = true;
                }

                //using (TextWriter tw = new StreamWriter(file, true, Encoding.UTF8))
                //{
                //    bool exist = File.Exists(file);
                //    // "quand\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tAdd\tiAdd\ttSupp\tiSup\tstate\t\r\n");
                //    if (!exist)
                //        tw.WriteLine("quand\ttarget\tdelta\tinf\tsup\ttotal\tdiff\tcorr\torg\tnew\tcmin\tcmax\tdmin\tdmax\tatomic\tstate");
                //    tw.Write(DateTime.Now); tw.Write(SEP);
                //    tw.Write(conf.target.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(conf.delta.ToString("0.###")); tw.Write(SEP);
                //    if (conf.levels.Count > 0) tw.Write(conf.levels[0].inf.ToString("0.###")); else tw.Write(""); tw.Write(SEP);
                //    if (conf.levels.Count > 0) tw.Write(conf.levels[0].sup.ToString("0.###")); else tw.Write(""); tw.Write(SEP);
                //    tw.Write(total.ToString("0.###")); tw.Write(SEP);
                //    tw.Write((-delta).ToString("0.###")); tw.Write(SEP);
                //    tw.Write(d.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(org.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(newv.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(cmin.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(cmax.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(dmin.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(dmax.ToString("0.###")); tw.Write(SEP);
                //    tw.Write(atomicMode); tw.Write(SEP);
                //    tw.Write(state); tw.Write(SEP);
                //    tw.WriteLine();
                //}
                if (canGo)
                    // makeDelta(mem1, "reel", @"..\rhisto.txt");
                    makeDelta(mem1, "reel", DAT + "rhisto." + conf.name + ".txt");
            }
            return canGo;
        }


        public static void Log()
        {
            if (main == null)
                return;
            main.log();
        }
        public override string ToString()
        {
            var strMin = minMem == null ? "" : minMem.suppressions.Count.ToString();
            var strMax = maxMem == null ? "" : maxMem.ajouts.Count.ToString();
            var strName = string.Format("{0} ({1}) {2}", name, resolveOrder(), newv);
            var sb = new StringBuilder();
            sb.Append(string.Format("{0} {1} delta->{2} correction->{3}  mustUpdate->{4} canGo {5} atomic {6} idem {7} ({8}/{9}) ", strName, state, delta.ToString("0.###"), d.ToString("0.###"), mustUpdate, canGo, atomicMode, sameConfiguration, strMin, strMax));
            sb.Append(nbDown);
            sb.AppendLine();
            foreach (AutoBuilderItem item in items)
            {
                sb.Append(item);
            }
            sb.AppendLine("-----------------------------------------");
            return sb.ToString();

        }
        private void log()
        {
            Program.logAuto.log("");
            Program.logAuto.log("*****************************************************************************************");
            Program.logAuto.log("{0} {1}", name, sb.ToString());
            var type = "";
            if (choose != null)
                type = choose.type.ToString();
            Program.logAuto.log("{0} {1} total:{2}", name, type, total.ToString("0.###"));
            Program.logAuto.log("{0} {1} delta:{2}", name, type, delta.ToString("0.###"));
          //  Program.logAuto.log("{0} {1} stop:{2}", name, type, _stopLevel.ToString());

            //if (choose != null)               
            //   Program.logAuto.log("{0}", choose);

            //Program.logAuto.log("{0} cmin {1}", name, cmin.ToString("0.###"));
            //Program.logAuto.log("{0} dmin {1}", name, dmin.ToString("0.###"));
            //Program.logAuto.log("{0} cmax {1}", name, cmax.ToString("0.###"));
            //Program.logAuto.log("{0} dmax {1}", name, dmax.ToString("0.###"));
            if (mustUpdate)
            {
                //foreach (AutoBuilder builder in list)
                //{
                //    if (builder.d != 0)
                //    {
                log("correction {0}", d);
                //   log(" valeur {0} --> {1}", org, newv);

                //    }
                //}
            }
            else Program.logAuto.log("valeur non modifiée {0}", org);
            Program.logAuto.log("");
            foreach (AutoBuilder builder in list)
            {
                Program.logAuto.log(builder.ToString());
            }
            Program.logAuto.log("-------------------------------------------------------------------------------------------------------------------");
        }
        private XmlElement xml;
        public void lookup(XmlElement node)
        {
            var att = node.Attributes["auto"];
            if (att != null)
            {
                // && conf.name.Equals(att.Value))
                var targets = att.Value.Split(';');
                foreach (var target in targets)
                {
                    if (name.Equals(target))
                    {
                        xml = node;
                        return;
                    }
                }
            }
            foreach (XmlNode sub in node.ChildNodes)
            {
                if (sub is XmlElement)
                {
                    lookup(sub as XmlElement);
                    if (xml != null)
                        return;
                }
            }
        }
        private int resolveOrder()
        {
            if (conf.order < int.MaxValue)
                return conf.order;
            return naturalOrder;
        }
        public int CompareTo(AutoBuilder other)
        {
            if (other == this)
                return 0;
            var cmp = resolveOrder().CompareTo(other.resolveOrder());
            if (cmp == 0)
                throw new ApplicationException(string.Format("deux builders d'ordre identique {0}/{1}", this.name, other.name));
            return cmp;
        }

        private bool checkSignal;

        public double getMaxDateAuto()
        {
            var item = items.Find(i => i.type == borderType.maxdate);
            if (item == null)
                return 0;
            return item.Pente + item.Org; 
        }
        public void signal(TrackBorderItem tb)
        {
            checkSignal = false;
            var item = items.Find(i => i.type == tb.type);
            if (item != null)
            {
                if (client != null)
                {
                    if (!tb.source.isChildOf(client))
                        return;
                }
                item.signal(tb);
                checkSignal = true;
            }

        }

        public bool Checked
        {
            get { return checkSignal; }
        }

        //private CauseRegister causeRegister = new CauseRegister();
        //public CauseRegister CauseRegister { get { return causeRegister; } }

        //public void signal(CauseData cd)
        //{
        //    checkSignal = true;
        //    var item = items.Find(i => i.type == cd.type);
        //    if (item != null)
        //    {
        //        if (client != null)
        //        {
        //            if (!cd.limit.isChildOf(client))
        //                return;
        //        }
        //        causeRegister.signal(cd);
        //        //checkSignal = true;           
        //    }


        //}

        public void signal(CauseDatas cd)
        {
            checkSignal = true;
            if (client != null)
            {
                if (!cd.limit.isChildOf(client))
                    return;
            }
            int nb = 0;
            for (int i = 0; i < Causes.NB_TYPE; i++)
            {
                var data = cd.datas[i];
                if (data == null) //|| data.virtuel)
                    continue;

                var item = items.Find(it => it.type == data.type);
                if (item == null)
                    cd.datas[i].Virtuel = true;
                if (!cd.datas[i].Virtuel)
                    nb++;
            }

            //if (nb == 0)
            //    return; 

            // causeRegister.signal(cd);
            //     if (nb > 1) // OUAILLE ?
            checkCause(cd);

        }

        private CauseDatasTension _cause;
        private void checkCause(CauseDatas cause)
        {
            bool up = delta > 0;
            if (Conf.AutoSelect)
            {
                bool selected = cause.Selected;
                if (up && selected)
                    return;
                if (!up && !selected)
                    return;
            }

            if (up)
            {
                foreach (CauseDataValue cd in cause.datas)
                {
                    if (cd.Virtuel && !cd.Ok)
                        return;
                }

              //  double tot = 0;
                bool _checked = false;
                foreach (CauseDataValue cd in cause.datas)
                {
                    if (cd.Virtuel)
                        continue;
                    if (cd.Ok)
                        continue;
                  
                    //fd et nb dépendent des deux autres
                    // on ne prend pas en compte fd s'il concerne un track trop loin dans le temps. d, fd, nb, maxdate
                    //// Mauvaise idée, il faut au contraire pénaliser en augmentant le coût
                    //if (cd.type == borderType.fd || cd.type == borderType.nb)
                    //{
                    //    var cdd = cause.datas[0];
                    //    if (!cdd.Ok)
                    //        continue;
                    //    var cdt = cause.datas[3];
                    //    if (!cdt.Ok)
                    //        continue;
                    //}
                    var item = items.Find(it => it.type == cd.type);
                    if (item == null)
                        continue;

                    if (item.Stopped)
                        continue; 

                    if (cd.val <= item.torg)
                        continue;

                    _checked = true;

                    var tension = item.getTension(cd.val);
                    if (!conf.selectFix)
                    {
                        tension = item.Dt;
                    }

                    //tot += (tension * tension);
                    //if (_cause != null && tot >= _cause.tension)
                    //    return;



                    if (tension > 0 && _checked // (tot > 0 //COMMENT on peut avoir ZERO ???? et pourtant
                  && (_cause == null || tension < _cause.tension))
                    {
                        _cause = new CauseDatasTension(cause, tension);
                        cd.Update = true;
                    }

                }
                //if (tot > 0 && _checked // (tot > 0 //COMMENT on peut avoir ZERO ???? et pourtant
                //    && (_cause == null || tot < _cause.tension))
                //    _cause = new CauseDatasTension(cause, tot);

            }
            else
            {
                //foreach (CauseDataValue cd in cause.datas)
                //{
                //    if (cd.Virtuel && cd.Ok)
                //        return;
                //}

                double aux = 0;
                double min = int.MaxValue;
                CauseDataValue cdMin = null;
                foreach (CauseDataValue cd in cause.datas)
                {
                    if (cd.Virtuel)
                        continue;
                    if (!cd.Ok)
                        continue;
                    //fd et nb dépendent des deux autres
                    // on ne prend pas en compte fd s'il concerne un track trop loin dans le temps. d, fd, nb, maxdate
                    //// Mauvaise idée, il faut au contraire pénaliser en augmentant le coût
                    //if (cd.type == borderType.fd || cd.type == borderType.nb)
                    //{
                    //    var cdd = cause.datas[0];
                    //    if (!cdd.Ok)
                    //        continue;
                    //    var cdt = cause.datas[3];
                    //    if (!cdt.Ok)
                    //        continue;
                    //}



                    var item = items.Find(it => it.type == cd.type);
                    if (item == null)
                        continue;

                    if (item.Stopped)
                        continue; 

                    if (cd.val >= item.torg)
                        continue;

                    var tension = item.getTension(cd.val);
                    if (conf.selectFix)
                    {
                        aux = -tension;
                    }

                    else
                    {
                        aux = tension - item.Tension;
                        if (conf.selectAbs && aux < 0)
                            aux = -aux;
                    }


                    if (aux < min)
                    {
                        min = aux;
                        cdMin = cd;
                    }

                }
                if (cdMin == null)
                    return;

                if (_cause == null || _cause.tension > min)
                {
                    cdMin.Update = true;
                    _cause = new CauseDatasTension(cause, min);
                }

            }

        }



    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Auto\AutoBuilderItem.cs">
    <content><![CDATA[using pdb.podcast.Tuning;
using pdb.util;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using pdb.podcast.Delta;
using TimeSpan = pdb.util.timeSpan;
using pdb.podcast.Selection;
using pdb.podcast.Report;
using Math = System.Math;

namespace pdb.podcast.Auto
{
    class AutoBuilderItem //: IBorder
    {


        /// <summary>
        /// Valeur initiale de la valeur gérée
        /// </summary>
        private double org;
        private double pertinentOrg = -1;
        private timeSpan tpertinentOrg;
        public TimeSpan torg;
        private TimeSpan tmin;
        private TimeSpan tmax;
        /// <summary>
        /// Valeur modifiée
        /// </summary>
        private double newv;
        private double evolSize;
        public double NewV { get { return newv; } }
        internal TrackBorderItem rejected(bool real) { return real ? _rejected : _rejectedLight; }
        internal TrackBorderItem selected(bool real) { return real ? _selected : _selectedLight; }
        internal void makePertinent() { pertinentOrg = org; }

        public void checkAjout(IEnumerable<TrackInfoItunes> list)
        {
            if (pertinentOrg == org)
                return;

            var lcauses = _causes;


            foreach (Causes causes in lcauses)
            {
                foreach (TrackInfoItunes t in list)
                {
                    if (causes.candidat.Location == t.Location)
                    {
                        pertinentOrg = org;
                        return;
                    }
                }

            }


        }

        private string name;

        /// <summary>
        /// Attribut concerné
        /// </summary>
        XmlAttribute att;
        XmlElement xml;
        public double dd;
        public double d;
        private bool lastStrict;
        private bool lastUp;
        //private double lastDelta;

        private double lastOrg;

        private pdb.podcast.Tuning.Auto conf;
        public readonly borderType type;
        private AutoBuilder parent;
        private AutoBuilderItem(AutoBuilder parent, pdb.podcast.Tuning.Auto conf)
        {
            this.parent = parent;
            this.conf = conf;
            this.type = conf.type;
            this.name = getKey(conf); // string.Format("{0}:{1}", conf.name, type);
            if (conf.pente == 0)
                d = conf.max - conf.min;
            else
                d = conf.pente - conf.min;
            dd = d * d;
        }

        private static string getKey(pdb.podcast.Tuning.Auto conf) { return string.Format("{0}:{1}", conf.name, conf.type); }
        private static Dict<string, AutoBuilderItem> dict = new Dict<string, AutoBuilderItem>(); 

        public static AutoBuilderItem get(AutoBuilder parent, pdb.podcast.Tuning.Auto conf)
        {
            string key = getKey(conf); 
            var i = dict[key];
            if (i == null)
            {
                i = new AutoBuilderItem(parent, conf);
                dict[key] = i; 
            }

            i.parent = parent;
            i.conf = conf;
            //i.type = conf.type;
           // i.name = string.Format("{0}:{1}", conf.name, type);
            if (conf.pente == 0)
                i.d = conf.max - conf.min;
            else
                i.d = conf.pente - conf.min;
            i.dd = i.d * i.d;

            return i; 

        }

        private bool _toSave;
        public bool ToSave { get { return _toSave; } }

        public double Org { get { return org; } }

        public void setConf(pdb.podcast.Tuning.Auto conf) { this.conf = conf; }

        #region border
        private TrackBorderItem _selected;
        private TrackBorderItem _selectedLight;
        private TrackBorderItem _rejected;
        private TrackBorderItem _rejectedLight;

        //private bool verify(TrackBorderItem tb)
        //{
        //    return true;
        //    double sourceValue = -1;
        //    var source = tb.source;
        //    switch (type)
        //    {
        //        case borderType.d: sourceValue = source.Duration; break;
        //        case borderType.fd: sourceValue = source.FeedDuration; break;
        //        case borderType.maxdate: sourceValue = (source.DateMax - Conf.Date0).TotalDays; break;
        //        default: return false;
        //    }

        //    if (Math.Abs(org - sourceValue) > 2.0E-7)
        //        return false;
        //    return true;
        //}
        private void setSelect(TrackBorderItem tb)
        {
            // pour down mémo des track sélectionnés

            _selected = tb;

        }

        private void setRejec(TrackBorderItem tb)
        {
            // A REVOIR

            //// pour up mémo des tracks rejetés
            ////1. S'il est par ailleurs déjà intégré, pas pertinent
            //if (parent.Source.contains(tb.candidat))
            //{
            //    return;
            //    if (_rejected != null)
            //    {
            //        if (_rejected.status > borderStatus.rejectedXtraLight)
            //            return;
            //        if (tb.val >= _rejected.val)
            //            return; 
            //    }

            //    tb.status = borderStatus.rejectedXtraLight; 
            //}


            ////2. On est en cours de construction donc il se peut que ce candidat soit in fine ajouté par d'autres
            //// intéret en up . S'il est dans la mémoire pas pertinent en up
            //if (parent.Mem.dict.ContainsKey(tb.candidat.Location))
            //    return;
            _rejected = tb;
        }


        public void signal(TrackBorderItem tb)
        {

            if (tb.Virtual && !Conf.BorderVirtual)
                return;
            if (tb.Selected)
            {
                if (tb.val >= torg)
                    return;
                if (tb.val <= tmin)
                    return;

                if (!tb.Virtual)
                {
                    if (_selected == null)
                        _selected = tb;
                    else if (tb.val > _selected.val)
                        _selected = tb;
                }

                if (_selectedLight == null)
                    _selectedLight = tb;
                else if (tb.val > _selectedLight.val)
                    _selectedLight = tb;

                //if (_selected == null)
                //    setSelect(tb);
                //else
                //{
                //    if (tb.status > _selected.status && !Conf.BorderIdem)
                //        setSelect(tb);
                //    else if (tb.status == _selected.status || Conf.BorderIdem)
                //    {
                //        if (tb.val > _selected.val)
                //            setSelect(tb);
                //    }
                //}

            }
            else
            {

                if (tb.val <= torg)
                    return;
                if (tb.val >= tmax)
                    return;

                if (!tb.Virtual)
                {
                    if (_rejected == null)
                        _rejected = tb;
                    else if (tb.val < _rejected.val)
                        _rejected = tb;
                }

                if (_rejectedLight == null)
                    _rejectedLight = tb;
                else if (tb.val < _rejectedLight.val)
                    _rejectedLight = tb;


                //if (_rejected == null)
                //    setRejec(tb);
                //else
                //{
                //    if (tb.status > _rejected.status && !Conf.BorderIdem)
                //        setRejec(tb);
                //    else if (tb.status == _rejected.status || Conf.BorderIdem)
                //    {
                //        if (tb.val < _rejected.val)
                //            setRejec(tb);
                //    }
                //}

            }
        }
        #endregion

        public void setOrg(XmlElement xml)
        {
            // Program.logAuto.log(ToString());
            _rejected = null;
            _selected = null;
            _toSave = false;
            this.xml = xml;
            att = this.xml.Attributes[type.ToString()];
            lastOrg = org;
            if (att == null)
                org = -1;
            else
                org = Convert.ToDouble(att.Value);

            if (type == borderType.maxdate && AutoBuilder.Offset > 0)
            {
                org = org - AutoBuilder.Offset;
                newv = org;
                save(); 
            }

            if (org < conf.min)
            {
                org = conf.min;
                newv = org;
                save();
            }
            else if (org > conf.max)
            {
                org = conf.max;
                newv = org;
                save();
            }
            torg = getValue(org);
            tmin = getValue(conf.min);
            tmax = getValue(conf.max);
            if (pertinentOrg < 0)
                pertinentOrg = org;
            tpertinentOrg = getValue(pertinentOrg);
            if (lastOrg == 0)
                lastOrg = org;
            //  misc.log(ToString());
        }
        private double dt = -1; public double Dt { get { return dt; } set { dt = value; } }
        private double tension; public double Tension { get { return tension; } }
        // private int _stop = AutoBuilder.STOP_MAX;
        public bool Stopped { get { return stopped; } }
        private bool stopped;
        public void stop()
        {
            stopped = true;
            newv = lastOrg;
            org = lastOrg;
            //if (_stop > level)
            //    _stop = level;
            save();
        }
        public void reset()
        {
            //  _stop = AutoBuilder.STOP_MAX;
        }
        public void setTension(bool up, bool real, bool checkSelect)
        {

            dt = getDt(up, real, checkSelect);
        }

        public void setTension()
        {
            tension = _getTension(org);
        }

        public double Pente { get { return conf.pente; } }

        private double getDt(bool up, bool real, bool checkSelect)
        {
            double t0 = _getTension(pertinentOrg);
            tension = _getTension(up, real, checkSelect);
            return (tension - t0) / conf.coeff;

        }

        private double getTension(bool up, bool real, bool selected)
        {
            return _getTension(up, real, selected) / conf.coeff;
        }

        public double getValue(TimeSpan val)
        {
            switch (type)
            {

                case borderType.d:
                case borderType.fd:
                case borderType.nb:
                case borderType.c:
                    return val.TotalMinute;
                case borderType.maxdate: return val.TotalDay;
                default: return -1;

            }

        }

        private TimeSpan getValue(double val)
        {
            switch (type)
            {
                case borderType.d:
                case borderType.fd:
                case borderType.nb:
                case borderType.c:
                    return TimeSpan.FromMinutes(val);
                case borderType.maxdate: return TimeSpan.FromDays(val);
                default: return new TimeSpan();

            }
        }
        public double EvolSize { get { return evolSize; } }

        public List<Causes> getCauses()
        {
            return _causes;
        }

        //public List<Causes> getcauses(bool up, bool strict)
        //{
        //    List<Causes> list = null;
        //    if (up)
        //    {
        //        if (strict)
        //            list = _causesRejetStrict;
        //        else
        //            list = _causesRejet;
        //    }
        //    else
        //    {
        //        if (strict)
        //            list = _causesSelectStrict;
        //        else
        //            list = _causesSelect;
        //    }
        //    return list;
        //}

        public void gap(bool up, bool fix, double _gap)
        {
            _gap = Math.Abs(_gap);
            lastOrg = org; 
            if (fix)
            {
                newv = Math.Abs(_gap);
            }
            else
            {
                if (up)
                    newv = org + _gap;
                else
                    newv = org - _gap;
            }
            save();
        }

        private double _getTension(bool up, bool strict, bool checkSelect)
        {
            lastStrict = strict;
            lastUp = up;
            // double t0 = getTension(org, dd);
            newv = org;
            evolSize = 0;
            var list = _causes;


            if (list.Count > 0)
            {
                int ifin = 2;
                bool bselect = !up;
                if (checkSelect)
                {
                    ifin = 1;
                }

                CauseItem cause = null;

                for (int i = 0; i < ifin; i++)
                {
                    var _cause = list[0].getCause(type, strict, !up, bselect);
                    bselect = !bselect;
                    if (_cause == null)
                        continue;
                    if (cause == null)
                        cause = _cause;
                    else
                    {
                        if (up)
                        {
                            if (_cause.val < cause.val)
                                cause = _cause;
                        }
                        else
                        {
                            if (_cause.val > cause.val)
                                cause = _cause;
                        }
                    }
                }
                if (cause == null)
                    return int.MaxValue;
               // lastOrg = org; 
                newv = Math.Round(getValue(cause.val), 8);
                foreach (var c in list)
                {
                    var cand = c.candidat;
                    evolSize += Stat.getSizeinMo(cand);
                }
            }
            else
                return int.MaxValue;


            //if (false)
            //{

            //    if (up)
            //    {
            //        var _rejected = strict ? this._rejected : this._rejectedLight;
            //        if (_rejected == null)
            //            return int.MaxValue;
            //        newv = Math.Abs(Math.Round(getValue(_rejected.val), 8));
            //        evolSize = Stat.getSizeinMo(_rejected.candidat);

            //    }
            //    else
            //    {
            //        var _selected = strict ? this._selected : this._selectedLight;
            //        if (_selected == null)
            //            return int.MaxValue;
            //        newv = Math.Round(getValue(_selected.val), 8);
            //    }
            //}

            return _getTension(newv);
        }

        public void save()
        {
            //  xml.SetAttribute(type.ToString(), newv.ToString()); 
            att.Value = newv.ToString();
            _toSave = true;
        }

        public void save(timeSpan val)
        {
            lastOrg = org; 
            this.newv = Math.Round(getValue(val), 8);
            save();
        }

        //public void save(double _newv)
        //{
        //    this.newv = Math.Round(_newv, 8);
        //    save();
        //}

        public void modif(double tension)
        {
            var val = this.newv == 0 ? org : this.newv;
            val = (tension / Tension) * val;
            if (type == borderType.nb)
                val = Math.Round(val, 0);
            lastOrg = org; 
            this.newv = Math.Round(val, 8);
            save();
        }




        private List<Causes> _causes = new List<Causes>();

        public TrackInfoItunes Candidat { get; set; }
        // public CauseDataValue Cause { get; set; }
        public LimitItemBase limit { get; set; }


        //private List<Causes> _causesRejet = new List<Causes>();
        //private List<Causes> _causesSelect = new List<Causes>();

        //private List<Causes> _causesRejetStrict = new List<Causes>();
        //private List<Causes> _causesSelectStrict = new List<Causes>();



        //public void after()
        //{            
        //    _causesRejet = new List<Causes>();
        //    _causesSelect = new List<Causes>();
        //    _causesRejetStrict = new List<Causes>();
        //    _causesSelectStrict = new List<Causes>();
        //    after(true, true);
        //    after(true, false);
        //    after(false, true);
        //    after(false, false);
        //}
        //public void after(bool up, bool strict, bool checkSelection)
        //{
        //    _causes = new List<Causes>();
        //    var list = parent.CauseRegister.getList(false);
        //    int min = int.MaxValue;
        //    //  int minStrict = int.MaxValue;
        //    if (!up)
        //    {
        //        min = 0;
        //        //   minStrict = 0; 
        //    }
        //    int orgValue = torg.Value;
        //    foreach (Causes causes in list)
        //    {
        //        var candidat = causes.candidat;
        //        if (checkSelection)
        //        {
        //            if (up && candidat.Selected)
        //                continue;
        //            if (!up && !candidat.Selected)
        //                continue;
        //        }
        //        int ifin = 2;
        //        bool bselect = !up;
        //        if (checkSelection)
        //        {
        //            ifin = 1;
        //        }

        //        for (int i = 0; i < ifin; i++)
        //        {


        //            var cause = causes.getCause(type, strict, !up, bselect);
        //            bselect = !bselect;
        //            if (cause == null)
        //                continue;
        //            if (up && cause.Ok)
        //                continue;
        //            if (!up && !cause.Ok)
        //                continue;
        //            //if (value < 0)
        //            //    value = -value;
        //            int value = cause.val.Value;

        //            if (up)
        //            {

        //                if (value == min)
        //                {
        //                    _causes.Add(causes);

        //                }
        //                else if (value < min)
        //                {
        //                    _causes.Clear();
        //                    _causes.Add(causes);
        //                    min = value;
        //                }

        //            }
        //            else
        //            {
        //                if (value >= orgValue)
        //                    continue;

        //                if (value == min)
        //                {
        //                    _causes.Add(causes);
        //                }
        //                else if (value > min)
        //                {
        //                    _causes.Clear();
        //                    _causes.Add(causes);
        //                    min = value;
        //                }


        //            }
        //        }

        //    }
        //}


        private double _getTension(double org)
        {
            var d2 = org - conf.min;
            if (conf.pente > 0)
                return (d2 / d);

            var d1 = org - conf.max;

            return -1 + 2 * (d1 * d1 + d2 * d2) / dd;
        }

        public double getTension(timeSpan org)
        {
            var _org = getValue(org);
            var t = _getTension(_org);
            // dt = t - _getTension(pertinentOrg); 

            return t;
        }





        public override string ToString()
        {
            var sb = new System.Text.StringBuilder();
            sb.AppendLine();
            sb.Append(name); sb.Append(" ");
            sb.Append(org); sb.Append(" ");

            if (newv != 0 && newv != org)
            {
                sb.Append("==>");
                sb.Append(newv);
                sb.Append(" ");
            }

            //  sb.Append("stop="); sb.Append(_stop); sb.Append(" ");

            sb.Append("pertinent="); sb.Append(pertinentOrg); sb.Append(" ");
            sb.Append("tension="); sb.Append(tension); sb.Append(" ");
            if (dt != -1)
            {
                sb.Append("dt="); sb.Append(dt); sb.Append(" ");
            }


            if (newv != 0 && newv != org)
            {
                sb.Append("<== ");
            }
            var causes = _causes; // getcauses(lastUp, lastStrict);

            //  sb.AppendLine(); 

            if (Candidat != null)
            {
                sb.AppendLine();
                sb.Append(Candidat); sb.Append(" ");
            }
            if (limit != null)
            {
                // sb.AppendLine(); 
                sb.Append(limit);
            }



            foreach (Causes cause in causes)
            {
                sb.AppendLine();
                var strStrict = lastStrict ? "strict " : "light ";
                var strselect = lastUp ? "rejet " : "select ";
                sb.Append(strselect);
                sb.Append(strStrict);
                sb.Append(cause.getCause(type, lastStrict, !lastUp, !lastUp));
                sb.Append(" "); sb.Append(cause.candidat);
            }

            //if (_causesRejetStrict.Count > 0)
            //{


            //    foreach (Causes cause in _causesRejetStrict)
            //    {
            //        sb.AppendLine();
            //        sb.Append("rejet strict "); sb.Append(cause.getCause(type,true,false));                     
            //    }
            //}

            //else if (_causesRejet.Count > 0)
            //{

            //    foreach (Causes cause in _causesRejet)
            //    {
            //        sb.AppendLine();
            //        sb.Append("rejet light "); sb.Append(cause.getCause(type,false, false));      
            //    }
            //}

            //if (_causesSelectStrict.Count > 0)
            //{

            //    foreach (Causes cause in _causesSelectStrict)
            //    {
            //        sb.AppendLine();
            //        sb.Append("select strict "); sb.Append(cause.getCause(type,true,true));      
            //    }
            //}

            //else if (_causesSelect.Count > 0)
            //{              
            //    foreach (Causes cause in _causesSelectStrict)
            //    {
            //        sb.AppendLine();
            //        sb.Append("select light "); sb.Append(cause.getCause(type,false,true));      
            //    }
            //}



            if (_selected != null)
            {
                sb.AppendLine();
                sb.Append(_selected);
            }

            if (_rejected != null)
            {
                sb.AppendLine();
                sb.Append(_rejected);
            }
            sb.AppendLine();
            return sb.ToString();
        }


        public void signal(CauseDatas cd)
        {
            throw new NotImplementedException();
        }
    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Load\LimitItemLoader.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using pdb.podcast.Tuning;
using pdb.util;
using pdb.util.list;
using pdb.podcast.Auto;
using pdb.podcast.Selection;

//using TimeSpan = pdb.util.timeSpan; 

namespace pdb.podcast.Load
{
    public class LimitItemLoader
    {
        private static bool _selection;
        public static bool ModeSelection { get { return _selection; } set { _selection = value; } }
        private LimitItem limit;
        private LimitsLoader parent;
        //  private IDictionary<string, FeedLimitItemLoader> loaders = new BgDictString0<FeedLimitItemLoader>();
        //  public SequentialDictString<TrackInfoItunes> preloaded = new SequentialDictString<TrackInfoItunes>();
        //public SequentialDictString<TrackInfoItunes> standAlone = new SequentialDictString<TrackInfoItunes>();
        //public SequentialDictString<TrackInfoItunes> legacy = new SequentialDictString<TrackInfoItunes>();
        //public SequentialDictString<TrackInfoItunes> legacyRelax = new SequentialDictString<TrackInfoItunes>();
        //private SequentialDictString<TrackInfoItunes> selected = new SequentialDictString<TrackInfoItunes>();
        //public SequentialDictString<TrackInfoItunes> exclu = new SequentialDictString<TrackInfoItunes>();

        static ContexteBuilder context = ContexteBuilder.Instance;


        private List<TrackInfoItunes> candidats = new List<TrackInfoItunes>();

        /// <summary>
        /// Ensemble des tracks chargés en premier par la limite
        /// </summary>
        public List<TrackInfoItunes> use = new List<TrackInfoItunes>();
        // private Logger log;
        timeSpan currentDuration = new timeSpan();
        // timeSpan currentDurationVirtual = new timeSpan();
        timeSpan durationStop = new timeSpan();
        timeSpan currentContrib = new timeSpan();
        timeSpan trackDurationMax;
        timeSpan trackDurationMin;



        // List<TrackInfoItunes> list = new List<TrackInfoItunes>();
        //BgDictString0<TrackInfoItunes> selectedByFd = new BgDictString0<TrackInfoItunes>();
        //BgDictString0<TrackInfoItunes> manageByFd = new BgDictString0<TrackInfoItunes>();
        bool loadEqSel;

        public LimitItemLoader(LimitsLoader parent, LimitItem limit)
        {
            init(parent, limit);
        }

        public void init(LimitsLoader parent, LimitItem limit)
        {
            this.parent = parent;
            this.limit = limit;
            //log = limit.Logger;

            trackDurationMax = timeSpan.FromMinutes(limit.Td);
            trackDurationMin = timeSpan.FromMinutes(limit.TdMin);
        }


        //public timeSpan _durationv;
        //public timeSpan _datev;
        //private timeSpan _fd;
        //public timeSpan Fd { get { return _fd; } }

        public int _nb;

        //public void checkV(AutoBuilder auto, int nb, timeSpan fd, timeSpan d, timeSpan date)
        //{
        //    BgDictString0<TrackInfoItunes> dict = new BgDictString0<TrackInfoItunes>();

        //    int nbMin = int.MaxValue;
        //    timeSpan fdMin = timeSpan.MaxValue;
        //    timeSpan dMin = timeSpan.MaxValue;
        //    timeSpan dateMin = timeSpan.MaxValue;
        //    foreach (FeedLimitItemLoader loader in loaders.Values)
        //    {
        //        loader.checkV(nb, fd);
        //        var _nb = loader.NbV;
        //        var _fd = loader.FdV;
        //        if (_nb > nb && _nb < nbMin)
        //            nbMin = _nb;
        //        if (_fd > fd && fd < fdMin)
        //            fdMin = _fd;
        //        for (int i = 0; i <= loader.IndexV; i++)
        //        {
        //            var track = loader.Candidats[i];
        //            if (dict.ContainsKey(track.Location))
        //                continue;
        //            var _d = currentDuration + track.Duree;
        //            if (_d > d && d < dMin)
        //                dMin = _d;
        //            var _date = track.Ts;
        //            if (_date > date && _date < dateMin)
        //                dateMin = _date;
        //            break;
        //        }



        //    }

        //    this._durationv = dMin;
        //    this._datev = dateMin;
        //    this._nb = nbMin;
        //    this._fd = fdMin;
        //}

        public void loadCandidats(List<TrackInfoItunes> _loaded)
        {
            if (limit.Nb == 0)
                return;

            if (!limit.OverwriteConf && limit.Nb2 == 0)
                return;

            var duration = limit.Duration;
            //var _loadDuration = limit.LoadDuration; 
            loadEqSel = true;
            //if (limit.Dir.Cascading)
            //{
            var dd = limit.LoadDuration;
            if (dd > duration)
            {
                loadEqSel = false;
                duration = dd;
            }
            //}

            if (loadEqSel)
                duration += 200;


            //var duration = limit.LoadDuration;
            var durationMax = timeSpan.FromMinutes(duration);
            var dateMin = limit.DateMin;
            var dateMax = limit.DateMax;

            foreach (TrackInfoItunes candidat in _loaded)
            {
                //var location = candidat.Location;
                //if (string.IsNullOrEmpty(location))
                //    continue;

                //if (standAlone.ContainsKey(location))
                //    continue;

                var d = candidat.Pub2;
                if (d < dateMin)
                    continue;

                var duree = candidat.Duree;
                if (duree > trackDurationMax)
                    continue;
                if (duree < trackDurationMin)
                    continue;
                candidats.Add(candidat);
                //  standAlone.Add(location, candidat);
                Exporter.Record(candidat);

                //var loader = getLoader(candidat);
                //loader.AddCandidat(candidat);
                continue;



            }

        }




        private FeedLimitItemLoader getLoader(TrackInfoItunes candidat)
        {
            return limit.Dir.Loader.Albums.Get(candidat);
        }

        /// <summary>
        /// On supprime tout sauf les standalone
        /// </summary>
        public void reset()
        {
            //loaders = new BgDictString0<FeedLimitItemLoader>();
            //  public SequentialDictString<TrackInfoItunes> preloaded = new SequentialDictString<TrackInfoItunes>();
            // public SequentialDictString<TrackInfoItunes> standAlone = new SequentialDictString<TrackInfoItunes>();
            //legacy = new SequentialDictString<TrackInfoItunes>();
            //legacyRelax = new SequentialDictString<TrackInfoItunes>();
            //selected = new SequentialDictString<TrackInfoItunes>();
            //exclu = new SequentialDictString<TrackInfoItunes>();

            //selectedByFd = new BgDictString0<TrackInfoItunes>();
            //manageByFd = new BgDictString0<TrackInfoItunes>();
            use.Clear();


            currentDuration = new timeSpan();
            // timeSpan currentDurationVirtual = new timeSpan();
            durationStop = new timeSpan();
            currentContrib = new timeSpan();
            trackDurationMax = new timeSpan();
            trackDurationMin = new timeSpan();

            //var aux = new List<TrackInfoItunes>(candidats.Count);
            //foreach (TrackInfoItunes track in candidats)
            //{
            //    var copy = TrackInfoItunes.createCopy(track);
            //    aux.Add(copy);
            //}

            //candidats = aux; 
        }

        public void phase2()
        {
            currentDuration = new timeSpan();
            //  currentDurationVirtual = new timeSpan();
            //selectedByFd = new BgDictString0<TrackInfoItunes>();
            //manageByFd = new BgDictString0<TrackInfoItunes>();

            if (_selection)
            {
                currentContrib = new timeSpan();
                limit.DurationLimitAtteinte = false;
                limit.ContributionLimitAtteinte = false;
                limit.DurationFeedLimit = false;
                limit.NbFeedLimit = false;
            }
            foreach (FeedLimitItemLoader loader in limit.Dir.Loader.Albums)
                loader.phase2();
        }

        //public void recordGuest(TrackInfoItunes track, LimitItem itemSource)
        //{
        //    if (itemSource == limit)
        //        return;
        //    var location = track.Location;
        //    if (string.IsNullOrEmpty(location))
        //        return;
        //    //if (standAlone.ContainsKey(location))
        //    //    return;
        //    bool transmitTotal = limit.Dir.TransmitTotalGuest;
        //    //if (transmitTotal && legacy.ContainsKey(location))
        //    //    return;
        //    //if (!transmitTotal && legacyRelax.ContainsKey(location))
        //    //    return;


        //    if (track.Duree <= trackDurationMax && track.Duree >= trackDurationMin) // && track.Pub >= dateMin)
        //    {

        //        if (transmitTotal)
        //            legacy.Add(location, track);
        //        else
        //            legacyRelax.Add(location, track);
        //    }
        //}

        //public void recordTrackFromChild(TrackInfoItunes track, LimitItem itemSource, bool transmitTotal)
        //{
        //    var location = track.Location;
        //    if (string.IsNullOrEmpty(location))
        //        return;
        //    //if (standAlone.ContainsKey(location))
        //    //    return;
        //    if (transmitTotal && legacy.ContainsKey(location))
        //        return;
        //    if (!transmitTotal && legacyRelax.ContainsKey(location))
        //        return;
        //    if (track.Duree <= trackDurationMax && track.Duree >= trackDurationMin) // && track.Pub >= dateMin)
        //    {
        //        if (transmitTotal)
        //            legacy.Add(location, track);
        //        else
        //            legacyRelax.Add(location, track);

        //    }
        //}



        //private timeSpan getDuration(int nb, timeSpan minfd)
        //{
        //    timeSpan tot = new timeSpan();
        //    foreach (FeedLimitItemLoader feed in loaders.Values)
        //    {
        //        tot += feed.getTotalDurationFor(nb, minfd);
        //    }
        //    return tot;
        //}

        public void Selection()
        {

            if (limit.Nb == 0)
                return;

            //  var histo = limit.Dir.Histo;

            //var relax = legacyRelax.List;
            //if (relax.Count > 0)
            //{
            //    if (histo)
            //        relax.Sort(new PodCastComparerPub2());
            //    else
            //        relax.Sort(new PodCastComparerInv());
            //    selection(relax, false, false);
            //}

            //var list = legacy.List;
            //if (list.Count > 0)
            //{
            //    if (histo)
            //        list.Sort(new PodCastComparerPub2());
            //    else
            //        list.Sort(new PodCastComparerInv());
            //    selection(list, false, true);
            //}

            if (candidats.Count > 0)
            {
                selection(candidats);
            }



            //var list2 = standAlone.List;
            //if (list2.Count > 0)
            //{
            //    //if (histo)
            //    //    list2.Sort(new PodCastComparerPub2());
            //    //else
            //    //    list2.Sort(new PodCastComparerInv());

            //    selection(list2); //, true, true);
            //}

        }


        private class FdResponse
        {
            public int nb;
            public timeSpan duree;
            public bool okFd;
            public bool okNb;
            public bool Result { get { return okFd && okNb; } }
            //  public bool OnlyFd { get { return okFd && !okNb; } }


        }

        FdResponse check(FeedLimitItemLoader loader, TrackInfoItunes candidat, LimitItem limit)
        {
            var response = new FdResponse();

            var _nb = loader.Nb;

            if (!loader.isSelected(candidat))
                _nb++;
            response.nb = _nb;

            response.duree = loader.fd;

            var conf = loader.album.ConfAlbum;

            int _nbMax = limit.getNb(conf); //    load ? limit.LoadNb : (int)(System.Math.Min(limit.Nb, limit.Nb2));



            var __durationMax = limit.getFd(conf); //  load ? limit.LoadDuration : System.Math.Min(limit.FeedDuration, limit.Fd2);
            var _durationMax = timeSpan.FromMinutes(__durationMax);

            response.okNb = _nb <= _nbMax;
            response.okFd = response.duree <= _durationMax;

            if (context.Enabled)
            {
                if (!response.Result)
                {
                    if (response.okFd)
                    {
                        if (conf.Nb2 == int.MaxValue)
                        {
                            if (context.accept(candidat, _nb))
                            {
                                response.okNb = true;
                                // response.okFd = true;
                            }
                        }
                    }
                    else
                    {
                    }
                    //if (_nb <= context.Nb)
                    //{
                    //    if (context.accept(candidat))
                    //        response.okNb = true;
                    //}
                    //else
                    //    context.checkFin(candidat);
                }
            }




            return response;

        }

        private void selection(List<TrackInfoItunes> list)
        {
            var dtAutoMAwx = Conf.Date0.AddDays(  limit.Dir.getMaxDateAuto()); 
            var duration = limit.getDuration();

            var durationMax = timeSpan.FromMinutes(duration);

            var contributionMax = timeSpan.FromMinutes(limit.Contribution);

            int count = list.Count;
            for (int index = 0; index < count; index++)
            {

                TrackInfoItunes candidat = list[index];

                if (candidat.Album == "LA GRANDE TABLE 1ère partie")
                {
                }
                //if (candidat.Album == "SI TU NE VAS PAS A RIO")
                //{
                //}
                //foreach (TrackInfoItunes candidat in list)
                //{

                //if (candidat.Album == "Géopolitique")
                //{
                //}

                //if (candidat.Name == "Le monde selon Etienne Klein 17.01.13")
                //{
                //}
                var location = candidat.Location;
                if (string.IsNullOrEmpty(location))
                    continue;

                //if (_selection && selected.ContainsKey(location))
                //    continue;
                // vérification à postériori par rapports aux différents niveaux
                bool newContribut = candidat.Selected;

                DateTime d = candidat.getDate(); // candidat.TrackAlbum.ConfAlbum.checkPub ? candidat.Pub : candidat.Pub2;

                bool okDate = d <= limit.DateMax && d <= limit.DateMax2;
                var loader = getLoader(candidat);



                //tester uniquement fd et nb
                // _control = loader.control(candidat, select, false, false);

                // var _newDuration = currentDuration;
                //if (increment)
                //    _newDuration = currentDuration + candidat.Duree;

                // savoir si ça passe uniquement avec le critère d
                // okTotalDuration = currentDuration <= durationMax;

                //  bool okprovi = okDate && okTotalDuration;
                // bool ok = okDate && okTotalDuration && _control;

                // rejouer le controle pour incrémenter nb et fd      
                FdResponse response = null;
                //if (!increment) // données venant de sous-dossier (histo, voisins....)
                //{
                //    response = check(loader, candidat, limit);
                //    _control = response == null || response.Result;
                //    //  _control = loader.control(false, limit, candidat); // loader.control(parent, limit, candidat, select, false, okDate && okTotalDuration, true);
                //    //if (_control && !selectedByFd.ContainsKey(location))
                //    //    selectedByFd.Add(location, candidat);
                //    //if (!manageByFd.ContainsKey(location))
                //    //    manageByFd.Add(location, candidat);
                //}



                //if (!loader.LoadEqSel)
                //{

                //    if (_control)
                //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.selectedLight));
                //    else if (loader.EndByFd)
                //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.rejectedLight));

                //}

                //if (!increment && !_selection) //!loader.LoadEqSel &&
                //{
                //    //  if (!loader.OkNb)
                //    //  Program.CauseRegister.Get(candidat).check(loader.OkNb, borderType.nb, timeSpan.FromMinutes(loader.getNb(okDate)), limit);
                //    // if (!loader.OkFd)
                //    // Program.CauseRegister.Get(candidat).check(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit);

                //    limit.Dir.CauseRegister.signal(new CauseDatas(loader.OkNb, borderType.nb, timeSpan.FromMinutes(loader.getNbStop(okDate)), limit, candidat));
                //    limit.Dir.CauseRegister.signal(new CauseDatas(loader.OkFd, borderType.fd, loader.getDurationStop(okDate), limit, candidat));

                //    limit.signal(new CauseDatas(okDate, borderType.maxdate, new timeSpan(d - Conf.Date0), limit, candidat));
                //    limit.signal(new CauseDatas(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit, candidat));
                //}

                //if (!control(candidat, select, okDuration))
                //    continue;


                var newDuration = currentDuration + candidat.Duree;
                bool okTotalDuration = newDuration <= durationMax;
                //if (manageByFd.ContainsKey(location))
                //{
                //    _control = false;
                //    if (selectedByFd.ContainsKey(location))
                //        _control = true;
                //}
                //else
                //{
                response = check(loader, candidat, limit);
                bool _control = response == null || response.Result;
                //_control = loader.control(false, limit, candidat); // loader.control(parent, limit, candidat, select, false, okDate && okTotalDuration, true);

                //}

                if (_control)
                {
                    //currentDurationVirtual += candidat.Duree;
                    if (okDate)
                        currentDuration = newDuration;
                }


                // newDuration = currentDuration;
                //if (_control && !selectedByFd.ContainsKey(location))
                //    selectedByFd.Add(location, candidat);
                //if (!manageByFd.ContainsKey(location))
                //    manageByFd.Add(location, candidat);
                //  okTotalDuration = newDuration <= durationMax;






                bool go = okDate && _control && okTotalDuration;
                if (go)
                {
                    loader.record(candidat);
                    if (LimitItemLoader.ModeSelection)
                    {
                        candidat.select(selectMode.simple, limit);
                        limit.Dir.Feeds.recordTrack(candidat, limit);
                    }

                    //report aux niveaux inférieurs
                    // if (real)
                    // parent.recordLimitItemCandidat(candidat, limit);
                    // return true;

                }

                if (!_selection)
                {

                    if (limit.canSignal() && response != null)
                    {



                        var dataAuto = new CauseDatas(okDate, new timeSpan(d - Conf.Date0),
                            //loader.OkFd, loader.getCurrentDuration(okDate && okTotalDuration)
                            //, loader.OkNb, loader.getNb(okDate && okTotalDuration)
                            //, okTotalDuration, newDuration, candidat, limit);
                                response.okFd, response.duree
                        , response.okNb, response.nb
                        , okTotalDuration, newDuration, candidat, limit);

                        limit.signal(dataAuto);
                    }

                }

                if (_selection)
                {


                    //newDuration = currentDuration;
                    //okTotalDuration = newDuration <= durationMax;
                    if (!okTotalDuration)
                    {
                        //if (!Logger.CreateNullLoggers)
                        //    log.log("duration {0}", (newDuration)); //.TotalMinutes.ToString("0"));

                        if (_selection)
                            limit.DurationLimitAtteinte = true;
                        if (durationStop.Value == 0)
                        {
                            // currentDuration = newDuration;
                            durationStop = currentDuration;
                        }

                        if (true || Conf.AutoSelect)
                            continue;
                        else
                            break;

                    }

                    if (!okDate)
                        break;

                    if (!_control)
                        continue;





                    if (!newContribut)
                    {
                        // pour l'instant ? on ne gère pas la contribtion en mode rejeu

                        currentContrib += candidat.Duree;
                        if (currentContrib > contributionMax)
                        {
                            // log.log("contribution {0}", (currentContrib)); //.TotalMinutes.ToString("0"));
                            limit.ContributionLimitAtteinte = true;
                            break;
                        }

                        use.Add(candidat);
                    }



                    // enregistrement pour stockage et stats // et NON ! en plus gestion de la propagation des sous-répertoires vers les répertoires parent
                    limit.Dir.recordTrack(candidat, limit);



                }
                else
                {
                    if (!okDate && d > dtAutoMAwx)
                        break; 
                }

            }
        }


        //private void selection0(List<TrackInfoItunes> list, bool select, bool increment)
        //{
        //    var duration = limit.Duration;
        //    var durationMax = timeSpan.FromMinutes(duration);
        //    var contributionMax = timeSpan.FromMinutes(limit.Contribution);

        //    int count = list.Count;
        //    for (int index = 0; index < count; index++)
        //    {
        //        TrackInfoItunes candidat = list[index];
        //        //foreach (TrackInfoItunes candidat in list)
        //        //{

        //        //if (candidat.Album == "Géopolitique")
        //        //{
        //        //}

        //        //if (candidat.Name == "Le monde selon Etienne Klein 17.01.13")
        //        //{
        //        //}
        //        var location = candidat.Location;
        //        if (string.IsNullOrEmpty(location))
        //            continue;

        //        //if (_selection && selected.ContainsKey(location))
        //        //    continue;
        //        // vérification à postériori par rapports aux différents niveaux
        //        bool newContribut = candidat.Selected;

        //        DateTime d = candidat.TrackAlbum.CheckPub ? candidat.Pub : candidat.Pub2;
        //        bool okDate = d <= limit.DateMax && d <= limit.DateMax2;
        //        var loader = getLoader(candidat.Album);
        //        bool okTotalDuration = false;
        //        bool _control = false;

        //        //tester uniquement fd et nb
        //        // _control = loader.control(candidat, select, false, false);

        //        // var _newDuration = currentDuration;
        //        //if (increment)
        //        //    _newDuration = currentDuration + candidat.Duree;

        //        // savoir si ça passe uniquement avec le critère d
        //        okTotalDuration = currentDuration <= durationMax;

        //        bool okprovi = okDate && okTotalDuration;
        //        bool ok = okDate && okTotalDuration && _control;

        //        // rejouer le controle pour incrémenter nb et fd      
        //        if (!increment) // données venant de sous-dossier (histo, voisins....)
        //        {
        //            _control = loader.control(candidat, select, false, okDate && okTotalDuration, true);
        //            if (_control && !selectedByFd.ContainsKey(location))
        //                selectedByFd.Add(location, candidat);
        //            if (!manageByFd.ContainsKey(location))
        //                manageByFd.Add(location, candidat);
        //        }



        //        //if (!loader.LoadEqSel)
        //        //{

        //        //    if (_control)
        //        //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.selectedLight));
        //        //    else if (loader.EndByFd)
        //        //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.rejectedLight));

        //        //}

        //        //if (!increment && !_selection) //!loader.LoadEqSel &&
        //        //{
        //        //    //  if (!loader.OkNb)
        //        //    //  Program.CauseRegister.Get(candidat).check(loader.OkNb, borderType.nb, timeSpan.FromMinutes(loader.getNb(okDate)), limit);
        //        //    // if (!loader.OkFd)
        //        //    // Program.CauseRegister.Get(candidat).check(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit);

        //        //    limit.Dir.CauseRegister.signal(new CauseDatas(loader.OkNb, borderType.nb, timeSpan.FromMinutes(loader.getNbStop(okDate)), limit, candidat));
        //        //    limit.Dir.CauseRegister.signal(new CauseDatas(loader.OkFd, borderType.fd, loader.getDurationStop(okDate), limit, candidat));

        //        //    limit.signal(new CauseDatas(okDate, borderType.maxdate, new timeSpan(d - Conf.Date0), limit, candidat));
        //        //    limit.signal(new CauseDatas(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit, candidat));
        //        //}

        //        //if (!control(candidat, select, okDuration))
        //        //    continue;

        //        if (increment)
        //        {
        //            var newDuration = currentDuration + candidat.Duree;
        //            okTotalDuration = newDuration <= durationMax;
        //            if (manageByFd.ContainsKey(location))
        //            {
        //                _control = false;
        //                if (selectedByFd.ContainsKey(location))
        //                    _control = true;
        //            }
        //            else
        //            {
        //                _control = loader.control(candidat, select, false, okDate && okTotalDuration, true);

        //            }

        //            if (_control)
        //            {
        //                //currentDurationVirtual += candidat.Duree;
        //                if (okDate)
        //                    currentDuration += candidat.Duree;
        //            }


        //            // newDuration = currentDuration;
        //            if (_control && !selectedByFd.ContainsKey(location))
        //                selectedByFd.Add(location, candidat);
        //            if (!manageByFd.ContainsKey(location))
        //                manageByFd.Add(location, candidat);
        //            //  okTotalDuration = newDuration <= durationMax;



        //            //okTotalDuration = newDuration <= durationMax;
        //            //_control = loader.control(candidat, select, okDate && okTotalDuration, true,true);

        //            //if (okDate && _control)
        //            //    currentDuration += candidat.Duree;
        //            //currentDurationVirtual = currentDuration; // += candidat.Duree;

        //            //var newDuration = okDate && _control ? currentDuration : currentDurationVirtual;

        //            //  bool okTotalDuration = newDuration <= durationMax;

        //            if (!_selection)
        //            {


        //                var _fd = loader.getCurrentDuration(false);

        //                if (_fd > newDuration)
        //                {
        //                    newDuration = _fd;
        //                    okTotalDuration = newDuration <= durationMax;
        //                }
        //                if (_control)
        //                {
        //                }
        //                else
        //                {
        //                    //var fd = loader.getCurrentDuration(true);
        //                    //var nb = loader.getNb(true);

        //                    //newDuration = new timeSpan();
        //                    //foreach (FeedLimitItemLoader l in loaders.Values)
        //                    //    l.phaseTest();
        //                    //for (int j = 0; j <= index; j++)
        //                    //{
        //                    //    TrackInfoItunes t = list[j];
        //                    //    var subloader = getLoader(t.Album);
        //                    //    var subok = subloader.test(nb, fd, t);
        //                    //    if (j >= subloader.IndexBase)
        //                    //    {
        //                    //        if (subok || selectedByFd.ContainsKey(location))
        //                    //            newDuration += t.Duree;
        //                    //    }

        //                    //}
        //                    //// newDuration += getDuration(nb, fd);

        //                    //if (newDuration < currentDuration)
        //                    //{
        //                    //}
        //                    //else if (newDuration > currentDurationVirtual)
        //                    //{
        //                    //}
        //                    //okTotalDuration = newDuration <= durationMax;
        //                }


        //                //question fd
        //                //if (!loader.LoadEqSel)
        //                //{
        //                var dataRoot = new CauseDatas(okDate, new timeSpan(d - Conf.Date0),
        //              loader.OkFd, loader.getDurationStop(okDate)
        //              , loader.OkNb, loader.getNbStop(okDate)
        //              , okTotalDuration, durationStop.Value == 0 ? newDuration : durationStop, candidat, limit);

        //                limit.Dir.CauseRegister.signal(dataRoot);

        //                var dataAuto = new CauseDatas(okDate, new timeSpan(d - Conf.Date0),
        //                    //loader.OkFd, loader.getCurrentDuration(okDate && okTotalDuration)
        //                    //, loader.OkNb, loader.getNb(okDate && okTotalDuration)
        //                    //, okTotalDuration, newDuration, candidat, limit);
        //                        loader.OkFd, _fd// loader.getCurrentDuration (false)
        //                , loader.OkNb, loader.getNb(false)
        //                , okTotalDuration, newDuration, candidat, limit);

        //                limit.signal(dataAuto);
        //            }




        //            //   Program.CauseRegister.Get(candidat).check(okDate, new timeSpan(d - Conf.Date0),
        //            //loader.OkFd, loader.getDurationStop(okDate)
        //            //, loader.OkNb, loader.getNbStop(okDate)
        //            //, okTotalDuration, durationStop.Value == 0 ? newDuration : durationStop, limit);

        //            //   limit.signal(new CauseData(okDate, borderType.maxdate, new timeSpan(d - Conf.Date0), limit, candidat));
        //            //   limit.signal(new CauseData(loader.OkFd, borderType.fd, loader.getCurrentDuration(okDate), limit, candidat));
        //            //   limit.signal(new CauseData(okTotalDuration, borderType.d, newDuration, limit, candidat));

        //            if (Conf.BorderTb)
        //            {
        //                if (okDate && _control && okTotalDuration)
        //                    limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.selectedStrict));
        //                else if (okDate && okTotalDuration)
        //                {
        //                    if (loader.EndByFd)
        //                        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.rejectedStrict));
        //                }
        //                //else if (Conf.BorderVirtual)
        //                //{
        //                //    if (_control)
        //                //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.selectedLight));
        //                //    else if (loader.EndByFd)
        //                //        limit.signal(new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.rejectedLight));
        //                //}


        //                //}

        //                //if (!loadEqSel)
        //                //{
        //                // question d
        //                if (okDate && _control && okTotalDuration)
        //                    limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.selectedStrict));
        //                else if (okDate && _control)
        //                    limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.rejectedStrict));
        //                else if (Conf.BorderVirtual)
        //                {
        //                    if (okTotalDuration)
        //                        limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.selectedLight));
        //                    else
        //                        limit.signal(new TrackBorderItem(limit, candidat, borderType.d, newDuration, borderStatus.rejectedLight));
        //                }


        //                // question date
        //                if (okDate && _control && okTotalDuration)
        //                    limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.selectedStrict));
        //                else if (_control && okTotalDuration)
        //                    limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.rejectedStrict));
        //                else if (Conf.BorderVirtual)
        //                {
        //                    if (okDate)
        //                        limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.selectedLight));
        //                    else
        //                        limit.signal(new TrackBorderItem(limit, candidat, borderType.maxdate, d, borderStatus.rejectedLight));
        //                }

        //                //}

        //            }


        //            ////question duree
        //            //if (okDate && _control) // || Conf.BorderVirtual)
        //            //{
        //            //    var tb = new TrackBorderItem(limit, candidat, borderType.d, newDuration, okDuration, true); limit.signal(tb);
        //            //}
        //            //else if (Conf.BorderVirtual)
        //            //{
        //            //    var tb = new TrackBorderItem(limit, candidat, borderType.d, newDuration, okDuration, false); limit.signal(tb);
        //            //}

        //            ////question fd

        //            //if (_control)
        //            //{
        //            //    if (okDate && okDuration)
        //            //    {
        //            //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.selectedStrict); limit.signal(tb);
        //            //    }
        //            //    else if (Conf.BorderVirtual)
        //            //    {
        //            //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.selectedLight); limit.signal(tb);

        //            //    }
        //            //}
        //            //else //if (!loader.limit.NbFeedLimit)
        //            //{
        //            //    if (okDate && okDuration)
        //            //    {
        //            //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(true), borderStatus.rejectedStrict);
        //            //        limit.signal(tb);
        //            //    }
        //            //    else if (Conf.BorderVirtual)
        //            //    {
        //            //        var tb = new TrackBorderItem(limit, candidat, borderType.fd, loader.getCurrentDuration(okDate), borderStatus.rejectedLight);
        //            //        limit.signal(tb);
        //            //    }
        //            //}
        //            ////question date
        //            //if (_control && okDuration)
        //            //{
        //            //    var tb = new TrackBorderItem(limit, candidat, borderType.maxdate, candidat.Pub, okDate, true);
        //            //    limit.signal(tb);
        //            //}
        //            //else if (Conf.BorderVirtual)
        //            //{
        //            //    var tb = new TrackBorderItem(limit, candidat, borderType.maxdate, candidat.Pub, okDate, false);
        //            //    limit.signal(tb);
        //            //}



        //            //if (!_control && !Conf.BorderVirtual)
        //            //    continue;
        //            if (!okDate)
        //                continue;

        //            if (!_control)
        //                continue;
        //            newDuration = currentDuration;
        //            okTotalDuration = newDuration <= durationMax;
        //            if (!okTotalDuration)
        //            {
        //                //if (!Logger.CreateNullLoggers)
        //                //    log.log("duration {0}", (newDuration)); //.TotalMinutes.ToString("0"));

        //                if (_selection)
        //                    limit.DurationLimitAtteinte = true;
        //                if (durationStop.Value == 0)
        //                {
        //                    // currentDuration = newDuration;
        //                    durationStop = currentDuration;
        //                }

        //            }

        //            if (!okTotalDuration)
        //                continue;


        //            if (_selection && !newContribut)
        //            {
        //                // pour l'instant ? on ne gère pas la contribtion en mode rejeu

        //                currentContrib += candidat.Duree;
        //                if (currentContrib > contributionMax)
        //                {
        //                    //  log.log("contribution {0}", (currentContrib)); //.TotalMinutes.ToString("0"));
        //                    limit.ContributionLimitAtteinte = true;
        //                    break;
        //                }

        //                use.Add(candidat);
        //            }

        //            //   currentDuration = newDuration;




        //            if (_selection)
        //            {
        //                // enregistrement pour stockage et stats // et NON ! en plus gestion de la propagation des sous-répertoires vers les répertoires parent
        //                limit.Dir.recordTrack(candidat, limit);
        //                // enregistrement pour stockage et stats // et NON ! en plus gestion de la propagation des sous-répertoires vers les répertoires parent
        //                //  limit.Dir.recordTrack(candidat, limit);

        //                selected.Add(location, candidat);

        //                if (select)
        //                    exclu.Add(location, candidat);
        //            }





        //        }

        //    }
        //}

        public LimitItem Item { get { return limit; } }
        public override string ToString()
        {
            return limit.ToString();
        }

    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Tuning\DirConf.cs">
    <content><![CDATA[using System.Collections.Generic;
using pdb.podcast.Report;
using pdb.util;
using pdb.podcast.Load;
using pdb.podcast.Auto;
using pdb.podcast.Selection;
using System;

namespace pdb.podcast.Tuning
{
    /// <summary>
    /// Répertoire de pistes
    /// </summary>
    public class DirConf : LimitItemBase, IEnumerable<DirConf>//, IBuilderSource, IBorder
    {
        /// <summary>
        /// logger
        /// </summary>
        // private Logger log;
        /// <summary>
        /// Limites associées au noeud
        /// </summary>
        private Limits limites;
        /// <summary>
        /// Nom du répertoire
        /// </summary>
        private string name = "";

        /// <summary>
        /// Sous-répertoires
        /// </summary>
        private List<DirConf> childs = new List<DirConf>();

        /// <summary>
        /// Répertoire parent
        /// </summary>
        new private DirConf parent;

        /// <summary>
        /// Stats
        /// </summary>
        private DirStat stat;
        internal DirStat Stat { set { stat = value; } get { return stat; } }
        internal TrackConteneur Conteneur { get { return conteneur; } }

        private CauseRegister _causeRegister;
        internal CauseRegister CauseRegister
        {
            get
            {
                if (_causeRegister != null)
                    return _causeRegister;
                if (parent == null)
                    return null;
                return parent.CauseRegister;
            }
        }

        private Feeds feeds;
        internal Feeds Feeds
        {
            get
            {
                if (feeds != null)
                    return feeds;
                if (parent == null)
                    return null;
                return parent.Feeds;
            }
        }


        /// <summary>
        /// Ajout d'un sous-répertoire
        /// </summary>
        /// <param name="dir"></param>
        public void addChild(DirConf dir)
        {
            if (childs.Contains(dir))
                return;
            childs.Add(dir);

        }
        public DirConf Parent
        {
            get { return parent; }
        }

        public bool isChildOf(DirConf dir)
        {
            if (dir == this)
                return true;
            if (parent == null)
                return false;
            return parent.isChildOf(dir);
        }

        /// <summary>
        /// Conteneur des pistes
        /// </summary>
        private TrackConteneur conteneur;

        private FeedsLoader loader;
        internal FeedsLoader Loader
        {
            get
            {
                if (loader == null)
                    loader = new FeedsLoader(this);
                return loader;
            }

        }



        //public void buildLoaders(List<LimitItemLoader> list, AutoBuilder auto)
        //{
        //    if (auto != Auto)
        //        return;
        //    var loader = Loader;
        //    var fl = loader.LimitsLoader;
        //    fl.getLoaders(list);
        //    foreach (DirConf sub in childs)
        //    {
        //        sub.buildLoaders(list, auto);
        //    }
        //}

        /// <summary>
        /// Enregistrement d'une piste
        /// </summary>
        /// <param name="track">piste</param>
        /// <param name="provider">item de limite</param>
        public void recordTrack(TrackInfoItunes track, LimitItem limit)
        {
            if (offset > DateTime.MinValue)
            {
                track.Offset = offset;
                offset = offset.AddDays(1);
            }
            conteneur.recordTrack(track, limit);
            //if (parent != null)
            //    parent.recordTrackFromChild(track, limit, this);
        }

        //public void recordTrackStandAlone(TrackInfoItunes track, LimitItem limit)
        //{
        //    conteneur.recordTrackStandAlone(track, limit);
        //}

        /// <summary>
        /// Récupération de la liste des pistes
        /// </summary>
        /// <returns></returns>
        public List<TrackInfoItunes> getListe()
        {
            var list = conteneur.getListe();
            if (Histo)
                list.Sort(new PodcastComparerPubPub2());
            else
                list.Sort(new PodCastComparerInv());
            //log.log("");
            //log.log(getPath() + " getListe " + list.Count + " elt.");
            //foreach (TrackInfoItunes track in list)
            //{
            //    log.log(track.ToString());
            //}
            return list;
        }

        //public void recordTrackFromChild(TrackInfoItunes track, LimitItem itemSource, DirConf dirSource)
        //{
        //    if (dirSource.transmitToParent)
        //        Loader.recordTrackFromChild(track, itemSource, dirSource.transmitTotal);
        //    if (parent != null)
        //        parent.recordTrackFromChild(track, itemSource, this);
        //}

        /// <summary>
        /// Abandonné
        /// </summary>
        public void TransmissionListToParent(TrackInfoItunes track)
        {
        }


        //public void recordTrackForStats(TrackInfoItunes track, LimitItem provider)
        //{
        //    conteneur.recordTrackForStats(track, provider);
        //}








        public Limits Limites { get { return limites; } set { limites = value; } }


        private static Dict<string, DirConf> dict = new Dict<string, DirConf>();
        public static DirConf getDir(Limits limites, string name, DirConf parent)
        {
            // return new DirConf(limites, name, parent); 
            string path = getPath(parent, name);


            var d = dict[path];
            if (d == null)
            {
                d = new DirConf(limites, name, parent);
                dict[path] = d;
                return d;
            }
            else
            {
                //  var nd = new DirConf(limites, name, parent);
                dict[path] = d;
                d.recup = true;
                d.init(limites, name, parent);
                // nd.loader = d.loader; 
            }

            return d;

        }


        private DirConf(Limits limites, string name, DirConf parent)
            : base()
        {
            init(limites, name, parent);
        }
        private bool recup = false;

        public void Init()
        {
            if (recup && loader != null)
            {
                loader.init(this);
            }
        }
        private void init(Limits limites, string name, DirConf parent)
        {
            this.name = name;
            this.limites = limites;
            limites.Parent = this;
            this.parent = parent;
            this.setParent(parent);
            //  this.log = Logger.getLogger(getPath() + "\\dir", false);
            if (parent == null)
            {
                conteneur = new TrackConteneur(this, null);
                if (feeds == null)
                    feeds = new Feeds();
                if (Conf.Html.writeCause <= 0)
                {
                    _causeRegister = new NullRegister();
                }
                else
                    _causeRegister = new CauseRegister();
            }
            else
                conteneur = new TrackConteneur(this, parent.conteneur);
            //transmitToParent = Conf.Transmit;
            //transmitTotal = Conf.TransmitTotal;
            //transmitTotalGuest = Conf.TransmitTotalGuest;
            cascading = Conf.Cascading;
            if (loader != null)
            {
                if (parent != null)
                    loader.Albums.Clear();


            }

            this.borderObs.Clear();

        }

        ///// <summary>
        ///// durée max de chaque item
        ///// </summary>
        //public float Duration
        //{
        //    set { duration = value; }
        //    get
        //    {
        //        if (parent == null || duration < int.MaxValue)
        //        {
        //            return duration;
        //        }
        //        return parent.Duration;

        //    }
        //}

        /// <summary>
        /// Répertoire de type Info
        /// </summary>
        public bool? Info
        {
            get
            {
                if (name == "info")
                    return true;
                if (name == "PAS Info")
                    return false;
                if (parent == null)
                    return null;
                return parent.Info;
            }
        }

        /// <summary>
        /// Répertoire de type rare
        /// </summary>
        public bool? Rare
        {
            get
            {
                if (name == "RARE")
                    return true;
                if (name == "PAS RARE")
                    return false;
                if (parent == null)
                    return null;
                return parent.Rare;
            }
        }

        /// <summary>
        /// Répertoire de type historique
        /// </summary>
        public bool Histo
        {
            get
            {
                if (name == "Histo")
                    return true;
                if (parent == null)
                    return false;
                return parent.Histo;
            }
        }

        private bool serial;
        public bool Serial { get { return serial; } set { serial = value; } }

        /// <summary>
        /// Généralisation de l'historique à tous les noeuds enfant ou simple sélection nominative(par album)
        /// </summary>
        private bool? histoAll;
        public bool? HistoAll
        {
            get
            {
                if (histoAll.HasValue)
                    return histoAll;
                if (parent == null)
                    return null;
                return parent.HistoAll;
            }
            set
            {
                histoAll = value;
            }
        }

        private bool? cascading;
        public bool Cascading
        {
            get
            {
                if (cascading.HasValue)
                    return cascading != false;
                if (false == histoAll)
                    return false;
                if (parent == null)
                    return true;
                return parent.Cascading;
            }
            set
            {
                cascading = value;
            }
        }

        private bool? selectionPre;
        public bool SelectionPre
        {
            get
            {
                if (selectionPre.HasValue)
                    return selectionPre != false;
                if (false == selectionPre)
                    return false;
                if (parent == null)
                    return false;
                return parent.SelectionPre;
            }
            set
            {
                selectionPre = value;
            }
        }

        //private bool transmitToParent = true;
        //public bool TransmitToParent { get { return transmitToParent; } set { transmitToParent = value; } }

        //private bool transmitTotal = true;
        //public bool TransmitTotal { get { return transmitTotal; } set { transmitTotal = value; } }

        //private bool transmitTotalGuest = true;
        //public bool TransmitTotalGuest { get { return transmitTotalGuest; } set { transmitTotalGuest = value; } }



        /// <summary>
        /// Arbre généalogique du répertoire permettant de situer les listes à modifier
        /// </summary>
        public List<string> Folders
        {
            get
            {

                if (parent == null)
                    return new List<string> { name };
                var list = parent.Folders;
                list.Add(name);
                return list;

            }

        }
        public string Name { get { return name; } }

        /// <summary>
        /// Représentation du chemin depuis le root
        /// </summary>
        /// <returns></returns>
        public string getPath()
        {
            return getPath(parent, name);
        }

        public static string getPath(DirConf parent, string name)
        {
            if (parent == null)
                return name;
            string path = parent.getPath();
            if (string.IsNullOrEmpty(path))
                return name;
            return path + "\\" + name;
        }



        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append(getPath());
            //sb.Append(" ");
            ////double size = total / (1024.0 * 1024.0);
            ////sb.Append(size.ToString("0.##")); 
            ////sb.AppendLine();
            //sb.Append(limites.ToString());
            return sb.ToString();
            // return getPath() + " " + Environment.NewLine + limites.ToString();
        }

        public string display()
        {
            var sb = new StringBuilder();
            sb.Append(getPath());
            sb.AppendLine();
            ////double size = total / (1024.0 * 1024.0);
            ////sb.Append(size.ToString("0.##")); 
            ////sb.AppendLine();
            sb.Append(limites.ToString());
            return sb.ToString();
        }



        public IEnumerator<DirConf> GetEnumerator()
        {
            return childs.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return childs.GetEnumerator();
        }

        public List<LimitItem> getAllListItems()
        {
            var list = new List<LimitItem>();
            buildListLimitItems(list);
            return list;
        }

        protected void buildListLimitItems(ICollection<LimitItem> depot)
        {
            foreach (DirConf sub in this)
                sub.buildListLimitItems(depot);
            foreach (Limit limit in limites)
            {
                foreach (LimitItem item in limit.Items)
                    depot.Add(item);
            }
        }

        #region ITrackReport Members

        /// <summary>
        /// Rapport
        /// </summary>
        /// <param name="sb"></param>
        public void rapport(DescBuilder sb)
        {
            sb.beginLine();

            conteneur.rapport(sb);
            sb.AppendLine();


            if (!LimitItem.includeDetail)
                return;
            foreach (DirConf sub in childs)
            {
                var descBuilder = sb.createChild(sub.getPath());
                sub.rapport(descBuilder);
            }

        }
        public double getTotalSize()
        {
            return conteneur.getTotalSize();
        }





        #endregion

        #region IBuilderSource
        public List<TrackInfoItunes> getSelectedTracks()
        {
            var items = new List<TrackInfoItunes>(conteneur.Tracks.Total.Use.List);
            if (Histo)
                items.Sort(new PodcastComparerPubPub2());
            else
                items.Sort(new PodCastComparerInv());
            return items;
        }

        public IDictionary<string, TrackInfoItunes> getAllTracks()
        {
            return Feeds.LoadedTracks;
        }


        public string getEmpreinte()
        {
            return conteneur.Tracks.Total.Use.getEmpreinte();
        }


        private AutoBuilder auto;
        public AutoBuilder Auto
        {
            get
            {
                if (auto != null)
                    return auto;
                if (parent != null)
                    return parent.Auto;
                return null;
            }
            set
            {
                auto = value;
            }
        }
        #region IBorder
        private List<AutoBuilder> borderObs = new List<AutoBuilder>();
        public void addBorderObs(AutoBuilder auto)
        {
            borderObs.Add(auto);
        }
        #endregion
        #endregion

        public void signal(TrackBorderItem tb)
        {
            if (false == HistoAll)
                return;
            bool _checked = false;
            foreach (AutoBuilder border in borderObs)
            {
                border.signal(tb);
                if (border.Checked)
                    _checked = true;
            }

            if (_checked)
                return;
            if (parent != null)
                parent.signal(tb);
        }


        public bool canSignal()
        {
            return true;
            //if (false == HistoAll || serial) //OUAILLE?
            //    return false;
            //return true; 
        }

        public void signal(CauseDatas cd)
        {
            //if (false == HistoAll || serial) //OUAILLE?
            //    return;
            bool _checked = false;
            foreach (AutoBuilder border in borderObs)
            {
                border.signal(cd);
                if (border.Checked)
                    _checked = true;
            }

            if (_checked)
                return;
            if (parent != null)
                parent.signal(cd);
        }

        public double getMaxDateAuto()
        {
            foreach (AutoBuilder border in borderObs)
            {
                return border.getMaxDateAuto(); 
            }
            if (parent != null)
                return parent.getMaxDateAuto();
            return 0; 
        }
    }
}
]]></content>
  </file>
</db>
