<db path="C:\bernard\db1\db4">
  <file path="\pdb.player\ViewModel\DetailAlbumViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Input;
using pdb.player.ViewModel.Commande.PlayList;
using pdb.gen.albums;
using System.Text.RegularExpressions;
using pdb.player.ViewModel.Commande.Link;
using pdb.player.ViewModel.Commande;
using pdb.db;
using System.Windows.Media.Imaging;
using System.IO;
using pdb.util;
using System.Windows.Media;
using pdb.player.model;
using System.Collections.ObjectModel;
using pdb.obj;
using System.Threading;
using pdb.gen.conf;

namespace pdb.player.ViewModel
{

    public enum albumMode
    {
        identique,
        origine,
        origineSiVirtuel,
        plusLong,
        plusCourt
    }
    class DetailAlbumViewModel : ViewModelBase, ISelectedTracks
    {
        public static ArtWorkManager artworkManager = new ArtWorkManager();
        private TrackListViewModel humanSelected;
        private Album currentAlbum;
        // private List<TrackListViewModel> tracks;
        private albumMode mode;
        private bool albumVirtual;
        private static Logger log = Logger.getLogger("AlbumViewModel");
        private PlayList pl;
        private PlayListViewModel plv;
        public PlayListViewModel PlayListViewModel { get { return plv; } }


        public albumMode Mode
        {
            get
            {
                return mode;
            }
            set
            {
                if (value != mode)
                {
                    mode = value;
                    var client = new SimpleClient("Mode", log);
                    init(null, client);
                    OnPropertyChanged("");
                }
            }
        }

        public DetailAlbumViewModel()
        {
            TrackListViewModel.CurrentHumanSelectedChanged += new EventHandler<ClientEventArgs>(TrackListViewModel_CurrentSelectedChanged);
            App.refreshArtWork += App_refreshArtWork;
        }

        private void App_refreshArtWork(object sender, ClientEventArgs e)
        {
            initImg(TrackListViewModel.HumanSelected, e.client);
        }




        //  private ObservableCollection<ImageSource> images; 

        private IClient client;
        public void initImg(TrackListViewModel h, IClient client)
        {
            if (this.client != null)
                this.client.cancel();
            if (client == null)
                client = new SimpleClient("DetailAlbum", Logger.defaultLogger);
            this.client = client;
            if (client.Cancel)
                return;

            new Thread(() =>
            {
                var delay = CConf.DisplayImg;
                if (delay > 0)
                {
                    var dt = DateTime.Now.AddMilliseconds(delay);
                    while (DateTime.Now < dt)
                    {
                        if (client.Cancel)
                            return;
                        Thread.Sleep(30);
                    }
                    while (App.Indispo)
                    {
                        if (client.Cancel)
                            return;
                        Thread.Sleep(30);
                    }
                }

                if (client.Cancel)
                    return;
                App.Dispatch(() =>
                {
                    var img = DetailAlbumViewModel.artworkManager.get(h.PieceGen, client);
                    client.log("DetailAlbum::init::artworkManager");
                    if (client.Cancel)
                        return;
                    if (img != this.img)
                    {
                        this.img = img;
                        OnPropertyChanged("ArtWork");
                        client.log("DetailAlbum::init::OnPropertyChanged ArtWork");
                    }

                }, client);
            }).Start();
        }

        public void init(TrackListViewModel h, IClient client)
        {
            App.Dispatch(() =>
            {
                // tracks = null;
                if (client.Cancel)
                    return;
                // img = null;
                //images = new ObservableCollection<ImageSource>() ;
                //  long sizeImgMax = 0;
                // if (humanSelected == null)
                if (h == null)
                    humanSelected = TrackListViewModel.HumanSelected;
                if (humanSelected != null)
                {
                    var p = humanSelected.PieceGen;
                    var idOrg = p.PieceId;

                    switch (mode)
                    {
                        case albumMode.identique:
                        break;
                        case albumMode.origine:
                        p = p.Master;
                        break;
                        case albumMode.origineSiVirtuel:
                        if (p.Virtual)
                            p = p.Master;
                        break;
                        case albumMode.plusLong:
                        if (p.Virtual)
                        {
                            var virt = p.PieceAlbum.Count;
                            var master = p.Master.PieceAlbum.Count;
                            if (master > virt)
                                p = p.Master;
                        }

                        break;

                        case albumMode.plusCourt:
                        if (p.Virtual)
                        {
                            var virt = p.PieceAlbum.Count;
                            var master = p.Master.PieceAlbum.Count;
                            if (master < virt)
                                p = p.Master;
                        }

                        break;


                        default:
                        break;
                    }

                    albumVirtual = idOrg != p.PieceId;

                    if (client.Cancel)
                        return;
                    //App.Dispatch(() =>
                    //    {
                    //        img = artworkManager.get(humanSelected.PieceGen, client);
                    //        client.log("DetailAlbum::init::artworkManager");
                    //        OnPropertyChanged("ArtWork");

                    //    }, client);

                    // client.log("DetailAlbum::init::OnPropertyChanged ArtWork");

                    //if (client.Cancel)
                    //    return;
                    currentAlbum = p.PieceAlbum;
                    initAlbums();

                    client.log("DetailAlbum::init::initAlbums");
                    if (client.Cancel)
                        return;
                    if (!TrackListViewModel.HumanSelectedIsBusy)
                        initImg(TrackListViewModel.HumanSelected, client);

                }
                else
                {
                    // currentAlbum = null;
                    //tracks = new List<TrackListViewModel>();
                }
            }, client);
        }

        //public ObservableCollection<ImageSource> Images
        //{
        //    get
        //    {
        //        return images; 
        //    }
        //}

        void TrackListViewModel_CurrentSelectedChanged(object sender, ClientEventArgs e)
        {
            if (humanSelected != TrackListViewModel.HumanSelected)
            {
                init(null, e.client);
            }
        }
        private class PieceTrackNumberComparer : IComparer<TrackListViewModel>
        {
            public int Compare(TrackListViewModel x, TrackListViewModel y)
            {
                var cmp = x.TrackNumber.CompareTo(y.TrackNumber);
                if (cmp != 0)
                    return cmp;
                return x.getLocation().CompareTo(y.getLocation());
                //  return x.TrackNumber.CompareTo(y.TrackNumber);
            }
        }
        private class PieceVirtualClassementComparer : IComparer<TrackListViewModel>
        {
            private static PieceTrackNumberComparer tn = new PieceTrackNumberComparer();
            public int Compare(TrackListViewModel x, TrackListViewModel y)
            {
                int cmp = x.PieceGen.Classement.CompareTo(y.PieceGen.Classement);


                if (cmp != 0) return -cmp;
                //cmp = x.RapportClassement.CompareTo(y.RapportClassement);
                //if (cmp != 0) return -cmp;
                return tn.Compare(x, y);
                //  return -x.RapportClassement.CompareTo(y.RapportClassement);
            }
        }

        public List<TrackListViewModel> Album
        {
            get
            {
                if (currentAlbum == null || plv == null)
                    return new List<TrackListViewModel>();
                var tracks = plv.Tracks;
                tracks.Sort(new PieceVirtualClassementComparer());
                //int index = 0;
                //foreach (TrackListViewModel t in tracks)
                //{
                //    index++;
                //    t.Index = index;
                //    if (humanSelected != null && t.MasterId == humanSelected.MasterId)
                //        t.IsSelected = true;
                //    else
                //        t.IsSelected = false; 
                //}
                return tracks;

                //var tracks = new List<TrackListViewModel>(); 
                //foreach (var t in currentAlbum.Tracks)
                //{
                //    TrackListViewModel trackList = TrackListViewModel.get(t.PieceId); 
                //    //index++;
                //    //TrackListViewModel trackList = PlayListViewModel.findTrack(App.bib.Musique, t.PieceId);
                //    //if (trackList == null)
                //    //    continue;
                //    //trackList.Index = index;
                //    //if (t.MasterId == humanSelected.MasterId)
                //    //    trackList.IsSelected = true;
                //    //else
                //    //    trackList.IsSelected = false;
                //    tracks.Add(trackList);
                //}
                // //if (tracks != null)
                // //    return tracks;
                //// tracks = new List<TrackListViewModel>();
                // if (currentAlbum == null)
                // {
                //     //tracks = new List<TrackListViewModel>();
                // }
                // else
                // {
                //     // var ll = new List<TrackListViewModel>();

                //   //  int index = 0;
                //     foreach (var t in currentAlbum.Tracks)
                //     {
                //       //  index++;
                //         TrackListViewModel trackList = TrackListViewModel.getOrCreate(t); // PlayListViewModel.findTrack(App.bib.Musique, t.PieceId);
                //         if (trackList == null)
                //             continue;
                //        // trackList.Index = index;
                //         if (t.PieceId == humanSelected.PieceId)
                //             trackList.IsSelected = true;
                //         else
                //             trackList.IsSelected = false;
                //         tracks.Add(trackList);
                //     }
                // }
                //return tracks;

            }
        }

        public TrackListViewModel SelectedTrackInAlbumView
        {
            get
            {


                //var t = humanSelected;


                //if (!albumVirtual)
                //    return t;
                //if (plv != null && !plv.contains(t.PieceId))
                //{
                //    t = plv.Tracks.Find(tt => tt.MasterId == humanSelected.MasterId);
                //    if (t != null)
                //        return t;
                //}
                return humanSelected;

                //if (humanSelected == null)
                //    return null;
                //var tracks = Album;
                //if (tracks == null || tracks.Count == 0)
                //    return null;
                //var tt = tracks.Find(t => t.MasterId == humanSelected.MasterId);
                //return tt;
            }
            set
            {
                if (value == null)
                    return;
                if (humanSelected != null)
                    humanSelected.IsSelected = false;
                humanSelected = value;
                if (humanSelected != null)
                    humanSelected.IsSelected = true;
                // TrackListViewModel.setHumanSelected(App.bib.Musique, value);
                //  initAlbums(); 
                // TrackListViewModel.HumanSelected = humanSelected; 
                var client = new SimpleClient("SelectedTrackInAlbumView", log);
                init(humanSelected, client);
                OnPropertyChanged("");
            }
        }


        #region cmd

        private ICommand _contextCmdCheck;
        public ICommand ContextCmdCheck { get { if (_contextCmdCheck == null) _contextCmdCheck = new CheckCmd(this); return _contextCmdCheck; } }

        private ICommand _contextCmdUnCheck;
        public ICommand ContextCmdUnCheck { get { if (_contextCmdUnCheck == null) _contextCmdUnCheck = new UnCheckCmd(this); return _contextCmdUnCheck; } }


        private ICommand _contextLinkFather;
        public ICommand LinkFather { get { if (_contextLinkFather == null) _contextLinkFather = new LinkFather(); return _contextLinkFather; } }

        private ICommand _contextLinkChild;
        public ICommand LinkChild { get { if (_contextLinkChild == null) _contextLinkChild = new LinkChild(); return _contextLinkChild; } }

        private ICommand _contextLinkFusion;
        public ICommand LinkFusion { get { if (_contextLinkFusion == null) _contextLinkFusion = new LinkFusion(); return _contextLinkFusion; } }

        private ICommand _contextUnLink;
        public ICommand LinkReset { get { if (_contextUnLink == null) _contextUnLink = new LinkReset(); return _contextUnLink; } }

        private ICommand _contextDelete;
        public ICommand DeleteTrack { get { if (_contextDelete == null) _contextDelete = new DeleteCmd(); return _contextDelete; } }

        private ICommand _contexExplorer;
        public ICommand Explorer { get { if (_contexExplorer == null) _contexExplorer = new Explorer(); return _contexExplorer; } }

        private ICommand _contextInfo;
        public ICommand Info { get { if (_contextInfo == null) _contextInfo = new InfoCmd(); return _contextInfo; } }



        private ICommand _ContextCmdAddToList;
        public ICommand ContextCmdAddToList { get { if (_ContextCmdAddToList == null) _ContextCmdAddToList = new AddToList(this, App.Instance); return _ContextCmdAddToList; } }

        private ICommand _ContextCmdDbDeleteClassement;
        public ICommand ContextCmdDbDeleteClassement { get { if (_ContextCmdDbDeleteClassement == null) _ContextCmdDbDeleteClassement = new DbDeleteLastClassement(this); return _ContextCmdDbDeleteClassement; } }

        private ICommand _ContextCmdDbDeleteRead;
        public ICommand ContextCmdDbDeleteRead { get { if (_ContextCmdDbDeleteRead == null) _ContextCmdDbDeleteRead = new DbDeleteLastRead(this); return _ContextCmdDbDeleteRead; } }


        #endregion

        //  static Regex reg = new Regex(@"\[(.*)\]");
        /// <summary>
        /// moche mais pour l'instant on s'en contente
        /// </summary>
        public string Grouping
        {
            get
            {
                return getGrouping(false);
            }
        }

        private string getGrouping(bool albumVirt)
        {
            if (humanSelected == null)
                return "";
            var t = humanSelected.PieceGen;
            if (albumVirt)
                t = humanSelected.PieceGen.Master;

            var a = t.PieceAlbum;
            if (a == null)
                return "";
            string delta = "-";
            var updateClassement = a.UpdateClassement;
            if (updateClassement != null)
                delta = ((int)(DateTime.Now.Date - updateClassement.Value.Date).TotalDays).ToString();

            return string.Format("{0} {1} [{2}] {3}", t.StackIndex, delta, t.RankAlbumReverse, a.EquivLight);

            //var str = t.Grouping;

            //if (!reg.IsMatch(str))
            //    return str;

            //return reg.Match(str).Groups[1].Value;
        }

        public string GroupingAlt
        {
            get
            {
                return getGrouping(true);
            }
        }

        public bool WithVirtualAlbum
        {
            get
            {
                if (humanSelected == null)
                    return false;
                return humanSelected.PieceGen.PieceAlbum.Virtual;
            }
        }

        public string Name
        {
            get
            {
                if (humanSelected == null)
                    return "";
                return humanSelected.Album;
            }
        }

        public string NameAlt
        {
            get
            {
                if (humanSelected == null)
                    return "";
                return humanSelected.Piece.Master.Album;
            }
        }

        #region image
        private ImageSource img;
        public bool HasArtWork
        {
            get
            {
                return img != null;
            }
        }

        public ImageSource ArtWork
        {
            get { return img; }
        }

        #region albums
        public List<TrackListViewModel> Albums { get { return albums; } }
        private List<TrackListViewModel> albums = new List<TrackListViewModel>();
        private void initAlbums()
        {
            if (currentAlbum == null)
                return;

            var _albumName = currentAlbum.Name;
            //if (pl == null || _albumName != pl.Name)
            //{
            pl = new PlayList(_albumName);
            plv = new PlayListViewModel(pl);
            //  plv.setSecondary(); 
            foreach (var t in currentAlbum.Tracks)
            {
                pl.add(t);
            }
            plv.init();
            foreach (TrackListViewModel t in plv.Tracks)
            {
                if (t.PieceId == humanSelected.PieceId)
                    t.IsSelected = true;
                else
                    t.IsSelected = false;
            }
            if (humanSelected == null)
                return;

            albums = new List<TrackListViewModel>();


            foreach (var p in humanSelected.PieceGen.Master)
            {
                var pp = TrackListViewModel.getOrCreate(p); // pl.FindTrack(p.PieceId);
                if (pp != null)
                    albums.Add(pp);
            }
            albums.Sort(new AlbumComparer());

            //foreach (TrackListViewModel t in albums)
            //{
            //    t.IsSelected = t.PieceId == humanSelected.PieceId;
            //}
            //  return albums;
            //TrackListViewModel trackList = TrackListViewModel.getOrCreate(t); // PlayListViewModel.findTrack(App.bib.Musique, t.PieceId);
            //if (trackList == null)
            //    continue;
            //// trackList.Index = index;
            //if (t.PieceId == humanSelected.PieceId)
            //    trackList.IsSelected = true;
            //else
            //    trackList.IsSelected = false;
            //tracks.Add(trackList);
            // }


            //var albums = new List<TrackListViewModel>();
            //if (humanSelected == null)
            //    return albums;
            //var pl_ = PlayListViewModel.SelectedPlayList;
            //if (pl_ == null)
            //    return albums;
            //foreach (var p in humanSelected.PieceGen.Master)
            //{
            //    var pp = TrackListViewModel.getOrCreate(p); // pl.FindTrack(p.PieceId);
            //    if (pp != null)
            //        albums.Add(pp);
            //}
            //albums.Sort(new AlbumComparer());

            //foreach (TrackListViewModel t in albums)
            //{
            //    t.IsSelected = t.PieceId == humanSelected.PieceId;
            //}
            //return albums;


        }



        public TrackListViewModel SelectedTrackInAlbumsView
        {
            get
            {
                return humanSelected;

            }
            set
            {
                if (value == null)
                    return;
                if (humanSelected != null)
                    humanSelected.IsSelected = false;
                humanSelected = value;
                if (humanSelected != null)
                    humanSelected.IsSelected = true;
                //if (humanSelected != null)
                //    humanSelected.IsSelected = true;
                // TrackListViewModel.setHumanSelected(App.bib.Musique, value); // HumanSelected = value;
                var client = new SimpleClient("SelectedTrackInAlbumsView", log);
                init(humanSelected, client);
                OnPropertyChanged("");

            }
        }


        private class AlbumComparer : IComparer<TrackListViewModel>
        {
            //private int theOne; 
            //public AlbumComparer(TrackListViewModel humanselected)
            //{
            //    theOne = humanselected.PieceId; 
            //}

            public int Compare(TrackListViewModel x, TrackListViewModel y)
            {

                //if (x.PieceId == theOne)
                //    return -1;
                //if (y.PieceId == theOne)
                //    return 1;
                return x.RankAlbumReverse.CompareTo(y.RankAlbumReverse);
            }
        }
        #endregion
        #endregion


        public List<TrackListViewModel> SelectedTracks
        {
            get { return Album; }
        }
    }
}

]]></content>
  </file>
  <file path="\pdb.player\ViewModel\DetailClassementViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Data;
using System.Windows.Input;
using pdb.gen.stat;
using pdb.player.ViewModel.Commande;
using pdb.obj;
using pdb.util;
using System.Threading;

namespace pdb.player.ViewModel
{
    enum ihmInDispo
    {
        none,
        rot,
        stat
    }

    public interface IRecordClassmentObserver
    {
        void signalClassementChange();
        void autoNextTrack(TrackListViewModel currentPlaying);
    }
    public interface IClassementObserver
    {
        void signalClassementChange(IClient client);
    }
    class DetailClassementViewModel : ViewModelBase
    {
        private static DetailClassementViewModel _instance;
        public static DetailClassementViewModel Instance { get { return _instance; } }
        private static IRecordClassmentObserver recordClassementObserver;
        public static IRecordClassmentObserver RecordObserver { set { recordClassementObserver = value; } }
        // private CPlayList _root;
        private PlayListViewModel currentClassList;
        private TrackListViewModel currentTrack;


        //   private CPlayList _currentClassList;
        private ICommand cmdRecord;
        private IClassementObserver ihm;
        public DetailClassementViewModel(IClassementObserver ihm)
        {
            this.ihm = ihm;
            cmdRecord = new RecordClassement(this);
            TrackListViewModel.CurrentHumanSelectedChanged += new EventHandler<ClientEventArgs>(TrackListViewModel_CurrentSelectedChanged);
            //this._root = root.getOrCreate("classement");
            //_currentClassList = _root;
            // findCurrentPlaylist();
            _instance = this;
        }

        void TrackListViewModel_CurrentSelectedChanged(object sender, ClientEventArgs e)
        {
            App.Dispatch(() =>
            {
                //if (currentTrack == null)
                //{
                if (currentTrack != TrackListViewModel.HumanSelected)
                {
                    currentTrack = TrackListViewModel.HumanSelected;
                    if (currentTrack != null)
                    {
                        setClassment(currentTrack.Classement, e.client);
                        Name = currentTrack.Name;
                    }
                    //  OnPropertyChanged(""); 

                }
            }, e.client);
            //}
        }

        private bool onlyDisabled = false;
        public bool OnlyDisabled
        {
            get { return onlyDisabled; }
            set
            {
                if (value != onlyDisabled)
                {
                    onlyDisabled = value;
                    OnPropertyChanged("OnlyDisabled");
                }
            }
        }


        private bool uncheckAfter = false;
        public bool UncheckAfter
        {
            get { return uncheckAfter; }
            set
            {
                if (value != uncheckAfter)
                {
                    uncheckAfter = value;
                    OnPropertyChanged("UncheckAfter");
                }
            }
        }

        private bool auto = true;
        public bool Auto
        {
            get { return auto; }
            set
            {
                if (value != auto)
                {
                    auto = value;
                    OnPropertyChanged("Auto");
                }
            }
        }

        private ihmInDispo inDispo;
        public ihmInDispo IhmInDispo
        {
            get { return inDispo; }
            set
            {
                if (value != inDispo)
                {
                    inDispo = value;
                    OnPropertyChanged("IhmInDispo");
                }
            }
        }


        public string Name
        {
            get { if (currentTrack != null) return currentTrack.Name; return ""; }
            set { OnPropertyChanged("Name"); }
        }
        private string classement = "-";
        public string Classement
        {
            get { return classement; }
            set
            {
                setClassment(value, null);
            }

        }

        public void setClassment(string value, IClient client)
        {
            if (value != classement)
            {
                if (isClassment(value))
                {
                    classement = value;
                    if (this.client != null)
                        this.client.cancel();
                    //var client = new SimpleClient("buildStat\t", Logger.getLogger("Classement"));
                    if (client == null)
                        client = new SimpleClient("buildStat\t", Logger.getLogger("Classement"));
                    if (client.Cancel)
                        return;
                    client.log(value);
                    this.client = client;


                    if (!client.Cancel)
                    {
                        // waitBeforeSignalClassChange(client, value); 
                        new Thread(() => waitBeforeSignalClassChange(client, value)).Start();
                    }
                }

            }
        }


        private void waitBeforeSignalClassChange(IClient client, string value)
        {
            Thread.Sleep(30);
            if (client.Cancel)
                return;
            findCurrentPlaylist(client);
            if (client.Cancel)
                return;
            client.log("fin stats " + value);
            Thread.Sleep(30);
            if (client.Cancel)
                return;
            ihm.signalClassementChange(client);
        }

        public static bool isClassment(string str)
        {
            return pdb.obj.Classement.canBeClassement(str);
        }
        private IClient client;
        private void findCurrentPlaylist(IClient client)
        {
            if (App.bib == null)
                return;
            try
            {
                if (string.IsNullOrEmpty(classement))
                {
                    //  _currentClassList = _root;
                    currentClassList = App.bib.getClass("", true); // new PlayListViewModel(_root);
                }
                else
                {
                    if (!pdb.obj.Classement.canBeClassement(classement))
                        return;

                    currentClassList = App.bib.getClass(classement, true);

                    //var tab = classement.ToCharArray();
                    //var pl = _root;

                    //foreach (char c in tab)
                    //{
                    //    if (c == '.')
                    //        break;
                    //    pl = pl.get(c.ToString());
                    //}
                    //_currentClassList = pl;
                    //  currentClassList = new PlayListViewModel(pl);
                }

                buildStats(client);
            }
            finally
            {
                //  OnPropertyChanged("");
            }
        }

        #region stats
        int d0, d1, d2, d3, d4, d5, d01, d23, d45, d02, d35;
        const int NB_ROW = 4;
        const int NB_COL = 6;
        private int[,] tab = new int[NB_ROW, NB_ROW];
        private DynamicStat stats = null;
        private void buildStats(IClient client)
        {
            if (currentClassList == null)
                return;
            if (App.gen == null)
                return;


            stats = App.gen.generStat(client, classement, onlyDisabled);
            if (client.Cancel)
                return;
            d0 = get(0); // currentClassList.get("0", false).AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d1 = get(1); // currentClassList.get("1").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d2 = get(2);  //currentClassList.get("2").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d3 = get(3); //currentClassList.get("3").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d4 = get(4); //currentClassList.get("4").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;
            d5 = get(5); //currentClassList.get("5").AllTracks.FindAll(t => !onlyDisabled || !(t as TrackListViewModel).Enabled).Count;

            d01 = d0 + d1;
            d23 = d2 + d3;
            d45 = d4 + d5;

            d02 = d0 + d1 + d2;
            d35 = d3 + d4 + d5;

            //   OnPropertyChanged("");
        }

        public DataTable Stats
        {
            get
            {
                if (stats == null)
                    return null;
                var dt = new DataTable();
                for (int i = -DynamicStatLigne.SEMI_COLS; i <= DynamicStatLigne.SEMI_COLS; i++)
                {
                    dt.Columns.Add(i.ToString(), typeof(int));
                }

                foreach (DynamicStatLigne ligne in stats.rows)
                {
                    DataRow row = dt.Rows.Add();
                    for (int i = -DynamicStatLigne.SEMI_COLS; i <= DynamicStatLigne.SEMI_COLS; i++)
                    {
                        row[i.ToString()] = ligne[i];
                    }

                }

                return dt;

            }
        }

        public DynamicStat getStats(IClient client)
        {
            if (stats == null)
                buildStats(client);
            return stats;
        }

        private int get(int level)
        {
            if (currentClassList == null)
                return 0;
            if (stats == null)
                return 0;

            int row = 2;
            if (classement.Contains("."))
                row = 4;

            return stats[row][level];

            //var sub = currentClassList.get(level.ToString());
            //var pl = currentClassList;
            //int nb = 0;


            //if (onlyDisabled)
            //    nb += currentClassList.AlltracksVmd.Tracks.FindAll(t => t.PieceParentId < 0 && t.Rating == 20 * level).Count;
            //else
            //    nb += currentClassList.AlltracksVm.Tracks.FindAll(t => t.PieceParentId < 0 && t.Rating == 20 * level && (!t.Enabled || t.PieceGen.ClassementProvisoireRecent)).Count;

            //if (sub != null)
            //{
            //    if (onlyDisabled)
            //        nb += sub.AlltracksVmd.AllTracks.FindAll(t => t.PieceParentId < 0).Count;
            //    else
            //        nb += sub.AlltracksVm.AllTracks.FindAll(t => t.PieceParentId < 0 && (!t.Enabled || t.PieceGen.ClassementProvisoireRecent)).Count;
            //}

            //return nb;

            //if (!onlyDisabled)
            //    return tracks.Count;

            //tracks = tracks.FindAll(t => !t.Enabled);

            //return tracks.Count;

        }

        //private int get(string className, int level)
        //{
        //    var currentClassList = App.bib.getClass(className, false);
        //    var sub = currentClassList.get(level.ToString());
        //    List<TrackListViewModel> tracks;
        //    if (sub == null)
        //    {
        //        tracks = currentClassList.Tracks.FindAll(t => t.Rating == 20 * level);
        //    }
        //    else
        //    {
        //        tracks = sub.AllTracks;
        //    }

        //    if (!onlyDisabled)
        //        return tracks.Count;

        //    tracks = tracks.FindAll(t => !t.Enabled);

        //    return tracks.Count;

        //}

        private string getOffset(string classBase, int offset)
        {
            if (string.IsNullOrEmpty(classBase))
                return "";
            return "";
        }


        public int D0 { get { return d0; } }
        public int D1 { get { return d1; } }
        public int D2 { get { return d2; } }
        public int D3 { get { return d3; } }
        public int D4 { get { return d4; } }
        public int D5 { get { return d5; } }

        public int D01 { get { return d01; } }
        public int D23 { get { return d23; } }
        public int D45 { get { return d45; } }

        public int D02 { get { return d02; } }
        public int D35 { get { return d35; } }
        #endregion

        private List<TrackListViewModel> _list;
        public List<TrackListViewModel> getTracks(IClient client)
        {

            if (_list == null)
            {
                if (App.gen == null)
                    return new List<TrackListViewModel>();
                if (client == null)
                    client = new SimpleClient("ClassementTracks", Logger.getLogger("ClassementTracks"));
                var list = App.gen.getTracks(client, classement, onlyDisabled);
                _list = new List<TrackListViewModel>();
                foreach (var p in list)
                {
                    TrackListViewModel t = TrackListViewModel.getOrCreate(p); // App.bib.Musique.FindTrack(p.PieceId);
                    if (t != null)
                        _list.Add(t);
                }
            }
            return _list;

        }
        public void reset()
        {
            _list = null;
        }
        //public AllTracksViewModel Tracks0
        //{
        //    get
        //    {
        //        AllTracksViewModel tracks = null;
        //        if (currentClassList == null)
        //            return null;
        //        if (onlyDisabled)
        //            tracks = currentClassList.AllTrackFatherDisabled;
        //        else
        //            tracks = currentClassList.AllTrackFather;
        //        if (tracks == null)
        //            return null;
        //        if (!onlyDisabled)
        //            tracks = currentClassList.AllTrackFather; 
        //        tracks.refresh();

        //        return tracks;

        //        //var list = currentClassList.AlltracksVm;
        //        //if (onlyDisabled)
        //        //    list = list.FindAll(t => !t.Enabled);

        //        ////if (currentTrack != null)
        //        ////{
        //        ////    foreach (TrackListViewModel t in list)
        //        ////    {
        //        ////        if (t.Location == currentTrack.Location)
        //        ////            t.IsSelected = true;
        //        ////        else
        //        ////            t.IsSelected = false;
        //        ////    }
        //        ////}
        //        //return currentClassList.AlltracksVm; 
        //        //return list;
        //    }
        //}

        public List<TrackListViewModel> Album
        {
            get
            {
                if (currentClassList == null)
                    return null;
                if (currentTrack == null)
                    return null;
                var tracks = App.getAlbum(currentTrack);
                //foreach (TrackListViewModel t in tracks)
                //{
                //    if (t.Location == currentTrack.Location)
                //        t.IsSelected = true;
                //    else
                //        t.IsSelected = false; 
                //}

                return tracks;
            }
        }



        public TrackListViewModel SelectedTrackInClassView
        {
            get
            {
                if (currentTrack == null | currentClassList == null)
                    return null;
                return currentTrack;
            }
            set
            {
            }
        }

        public TrackListViewModel SelectedTrackInAlbumView
        {
            get
            {
                if (currentTrack == null || currentClassList == null)
                    return null;
                var tracks = Album;
                if (tracks == null || tracks.Count == 0)
                    return null;
                return tracks.Find(t => t.PieceId == currentTrack.PieceId);
            }
            set
            {
            }
        }

        public void record()
        {
            App.Indispo = false;
            if (currentTrack == null)
                return;
            var currentPlaying = TrackListViewModel.CurrentPlaying;
            if (currentPlaying != null && currentPlaying.MasterId != currentTrack.MasterId)
            {
                IIhm ihm = App.Instance;
                if (!ihm.Confirm("Modifier le classement de " + currentTrack + " ?", "Classement"))
                    return;
            }



            currentTrack.Classement = classement;


            if (uncheckAfter)
                currentTrack.Enabled = false;

            if (recordClassementObserver != null)
            {
                recordClassementObserver.signalClassementChange();
                if (auto)
                    recordClassementObserver.autoNextTrack(currentTrack);
            }

        }

        //void IClient.log(string phase)
        //{
        //   if (client ==null)
        //        return; 
        //   client.log(phase); 
        //}

        public bool CanRecord
        {
            get
            {
                return currentTrack != null && currentTrack.Enabled && isClassment(classement);
            }
        }

        public ICommand Record { get { return cmdRecord; } }

        //bool IClient.Cancel
        //{
        //    get
        //    {
        //        if (client ==null)
        //            return false; 
        //        return client.Cancel; 
        //    }
        //}
    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\InfoViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using pdb.gen;
using System.Windows.Input;
using pdb.player.ViewModel.Commande;
using pdb.player.ViewModel.Commande.PlayList;
using pdb.util;

namespace pdb.player.ViewModel
{

    class InfoViewModel : ViewModelBase, ISelectedTracks
    {
        private List<TrackListViewModel> list = new List<TrackListViewModel>();
        private HashSet<int> hs = new HashSet<int>();


        private bool withAlbum;
        private bool real;
        private bool withParent;


        private string album;
        private string artist;
        private string name;
        private int? trackNumber;
        private int? year;

        private bool applyAlbum;
        private bool applyArtist;
        private bool applyName;
        private bool applyTrackNumber;
        private bool applyYear;

        private bool loading;

        private TrackListViewModel current;

        public InfoViewModel(TrackListViewModel current)
        {
            this.current = current;
            buidList();
            TrackListViewModel.CurrentHumanSelectedChanged += new EventHandler<ClientEventArgs>(TrackListViewModel_CurrentHumanSelectedChanged);
        }

        void TrackListViewModel_CurrentHumanSelectedChanged(object sender, ClientEventArgs e)
        {
            if (TrackListViewModel.HumanSelected != current)
            {
                this.current = TrackListViewModel.HumanSelected;
                App.Dispatch(()=> buidList(), e.client); 
            }
        }

        public void init()
        {
            string album = null;
            string artist = null;
            string name = null;
            int? tn = null;
            int? y = null;

            for (int i = 0; i < list.Count; i++)
            {
                var t = list[i];
                if (i == 0)
                {
                    album = t.Album.toKey();
                    artist = t.Artist.toKey();
                    name = t.Name.toKey();
                    if (t.Year > 0)
                        y = t.Year;

                    if (t.TrackNumber > 0)
                        tn = t.TrackNumber;
                }

                else
                {
                    if (t.Album.toKey() != album)
                        album = null;
                    if (t.Artist.toKey() != artist)
                        artist = null;
                    if (t.Name.toKey() != name)
                        name = null;
                    if (!t.Year.Equals(y))// y != null && t.Year != y.Value)
                        y = null;
                    if (!t.TrackNumber.Equals(tn))
                        tn = null;
                }
                if (album == null && artist == null && name == null && tn == null && year == null)
                    break;
            }

            Album = album;
            Artist = artist;
            Name = name;
            // if (tn.HasValue)
            TrackNumber = tn;
            // if (y.HasValue)
            Year = y;



            applyAlbum = false;
            applyArtist = false;
            applyName = false;
            applyTrackNumber = false;
            applyYear = false;
            list.Sort(new TrackComparer());
            OnPropertyChanged("");
        }

        //private void buildAlbum(Piece t)
        //{
        //    foreach (Piece p in t.PieceAlbum)
        //    {
        //        TrackListViewModel tt = TrackListViewModel.getOrCreate(p);
        //        list.Add(tt);
        //    }
        //}



        private void add(Piece p)
        {
            Piece toInsert = p;
            if (real && p.Virtual)
                p = p.Parent;
            if (hs.Add(p.PieceId))
            {
                TrackListViewModel tt = TrackListViewModel.getOrCreate(p);
                list.Add(tt);
            }
            if (withParent && p.Parent != null)
            {
                p = p = p.Parent;
                if (hs.Add(p.PieceId))
                {
                    TrackListViewModel tt = TrackListViewModel.getOrCreate(p);
                    list.Add(tt);
                }
            }

        }

        private void buidList()
        {
            list.Clear();
            hs.Clear();
            loading = true;
            var source = current.PieceGen;
            if (source.Virtual && real)
                source = source.Parent;


            if (withAlbum)
            {
                foreach (Piece p in source.PieceAlbum)
                {
                    add(p);
                }
            }
            else
                add(source);

            init();
            loading = false;
            OnPropertyChanged("List");
        }

        public void Apply()
        {
            App.setChanging();
            foreach (TrackListViewModel t in list)
            {
                if (applyAlbum)
                    t.Album = album;
                if (applyArtist)
                    t.Artist = artist;
                if (applyName)
                    t.Name = name;
                if (applyTrackNumber)
                {
                    if (trackNumber == null)
                        t.TrackNumber = -1;
                    else
                        t.TrackNumber = trackNumber.Value;
                }

                if (applyYear)
                {
                    if (year == null)
                        t.Year = -1;
                    else
                        t.Year = year.Value;
                }

            }

            App.releaseChanging();
            App.invalidateAlbums();
            App.go();
        }

        private bool isUnique { get { return list.Count < 2; } }

        public List<TrackListViewModel> List { get { return list; } }

        public string Album
        {
            get
            {
                return album;
            }
            set
            {
                if (value != album)
                {
                    album = value;
                    ApplyAlbum = true;
                    if (!loading) OnPropertyChanged("Album");
                }
            }
        }

        public string Artist
        {
            get
            {
                return artist;
            }
            set
            {
                if (value != artist)
                {
                    artist = value;
                    ApplyArtist = true;
                    if (!loading) OnPropertyChanged("Artist");
                }
            }
        }


        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                if (value != name)
                {
                    name = value;
                    ApplyName = true;
                    if (!loading) OnPropertyChanged("Name");
                }
            }
        }

        public int? TrackNumber
        {
            get
            {
                return trackNumber;
            }
            set
            {
                if (value != trackNumber)
                {
                    trackNumber = value;
                    ApplyTrackNumber = true;
                    if (!loading) OnPropertyChanged("TrackNumber");
                }
            }
        }

        public int? Year
        {
            get
            {
                return year;
            }
            set
            {
                if (value != year)
                {
                    year = value;
                    ApplyYear = true;
                    if (!loading) OnPropertyChanged("Year");
                }
            }
        }

        public bool ApplyAlbum
        {
            get
            {
                return applyAlbum;
            }
            set
            {

                if (value != applyAlbum)
                {
                    applyAlbum = value;
                    if (!loading) OnPropertyChanged("ApplyAlbum");
                }
            }
        }

        public bool ApplyArtist
        {
            get
            {
                return applyArtist;
            }
            set
            {
                if (value != applyArtist)
                {
                    applyArtist = value;
                    if (!loading) OnPropertyChanged("ApplyArtist");
                }
            }
        }

        public bool ApplyName
        {
            get
            {
                return applyName;
            }
            set
            {
                if (value != applyName)
                {
                    applyName = value;
                    if (!loading) OnPropertyChanged("ApplyName");
                }
            }
        }


        public bool ApplyTrackNumber
        {
            get
            {
                return applyTrackNumber;
            }
            set
            {
                if (value != applyTrackNumber)
                {
                    applyTrackNumber = value;
                    if (!loading) OnPropertyChanged("ApplyTrackNumber");
                }
            }
        }

        public bool ApplyYear
        {
            get
            {
                return applyYear;
            }
            set
            {
                if (value != applyYear)
                {
                    applyYear = value;
                    if (!loading) OnPropertyChanged("ApplyYear");
                }
            }
        }


        public bool WithAlbum
        {
            get
            {
                return withAlbum;
            }
            set
            {
                if (value != withAlbum)
                {
                    withAlbum = value;
                    buidList();
                    OnPropertyChanged("WithAlbum");
                }
            }
        }

        public bool WithParent
        {
            get
            {
                return withParent;
            }
            set
            {
                if (value != withParent)
                {
                    withParent = value;
                    buidList();
                    OnPropertyChanged("WithParent");
                }
            }
        }

        public bool Real
        {
            get
            {
                return real;
            }
            set
            {
                if (value != real)
                {
                    real = value;
                    buidList();
                    OnPropertyChanged("Real");
                }
            }
        }


        private ICommand _contextInfo;
        public ICommand Info { get { if (_contextInfo == null) _contextInfo = new InfoCmd(); return _contextInfo; } }

        private ICommand _ContextCmdAddToList;
        public ICommand ContextCmdAddToList { get { if (_ContextCmdAddToList == null) _ContextCmdAddToList = new AddToList(this, App.Instance); return _ContextCmdAddToList; } }






        List<TrackListViewModel> ISelectedTracks.SelectedTracks
        {
            get { return list; }
        }

        private class TrackComparer : IComparer<TrackListViewModel>

        {
            public int Compare(TrackListViewModel x, TrackListViewModel y)
            {
                var xx = x.PieceId;
                var yy = y.PieceId;
                if (xx > 0)
                {
                    if (yy > 0)
                        return xx.CompareTo(yy);
                    else
                        return -1;
                }
                else
                {
                    if (yy < 0)
                        return xx.CompareTo(yy);
                    else
                        return -1;
                }

            }


        }
    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\PochetteViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Media;
using pdb.util;
using System.Threading;
using pdb.gen.conf;

namespace pdb.player.ViewModel
{
    class PochetteViewModel : ViewModelBase
    {
        private ImageSource img;
        public ImageSource ArtWork { get { return img; } }
        private IClient client;
        public PochetteViewModel()
        {
            TrackListViewModel.CurrentHumanSelectedChanged += new EventHandler<ClientEventArgs>(TrackListViewModel_CurrentHumanSelectedChanged);
            init(null);
            App.refreshArtWork += App_refreshArtWork;
        }

        private void App_refreshArtWork(object sender, ClientEventArgs e)
        {
            init(e.client);
        }

        void TrackListViewModel_CurrentHumanSelectedChanged(object sender, ClientEventArgs e)
        {
            if (!TrackListViewModel.HumanSelectedIsBusy)
            {
                init(e.client);
            }
        }



        public void init(IClient client)
        {
            if (this.client != null)
                this.client.cancel();
            if (client == null)
                client = new SimpleClient("PochetteViewModel", Logger.defaultLogger);
            this.client = client;
            if (client.Cancel)
                return;
            App.Dispatch(() =>
            {

                TrackListViewModel t = TrackListViewModel.HumanSelected;
                if (t == null)
                {
                    img = null;
                    OnPropertyChanged("ArtWork");
                    return;
                }

                if (client.Cancel)
                    return;

                new Thread(() =>
                {
                    var delay = CConf.DisplayImg;
                    if (delay > 0)
                    {
                        var dt = DateTime.Now.AddMilliseconds(delay);
                        while (DateTime.Now < dt)
                        {
                            if (client.Cancel)
                                return;
                            Thread.Sleep(30);
                        }
                        while (App.Indispo)
                        {
                            if (client.Cancel)
                                return;
                            Thread.Sleep(30);
                        }
                    }

                    if (client.Cancel)
                        return;
                    App.Dispatch(() =>
                {
                    var img = DetailAlbumViewModel.artworkManager.get(t.PieceGen, client);
                    client.log("Pochette::init::artworkManager");
                    if (client.Cancel)
                        return;
                    if (img != this.img)
                    {
                        this.img = img;
                        OnPropertyChanged("ArtWork");
                        client.log("Pochette::init::ImageSource");
                    }

                }, client);
                }).Start();

            }, client);



        }

    }
}
]]></content>
  </file>
  <file path="\pdb.player\ViewModel\TrackListViewModel.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Windows;
using pdb.obj;
using pdb.util;
using pdb.gen;
using pdb.db.obj;
using pdb.gen.albums;
using pdb.gen.medianne;

namespace pdb.player.ViewModel
{

    public class TrackListViewModel : BibViewModelBase, ITrackInfoItunes
    {


        private static Logger log = Logger.getLogger("Track");

        #region répercut
        //  private static BgDict<int, List<TrackListViewModel>> dictT = new BgDict<int, List<TrackListViewModel>>();
        #endregion

        private CPiece piece;
        private Piece track;

        // private TrackList track;
        //  private PieceViewModel piece;
        private static TrackListViewModel currentPlaying;
        private static TrackListViewModel currentSelected;
        //  public TrackList Track { get { return track; } }
        //   public CPiece Piece { get { return piece.Piece; } }
        // public Piece PieceGen { get { return track.Piece; } }

        public CPiece Piece { get { return piece; } }
        public Piece PieceGen { get { return track; } }
        public Piece Master { get { return track.Master; } }
        public bool Played { get { return piece.Played; } }

        public void remove()
        {
            //var list = dictT[PieceId];
            //if (list == null)
            //    return;
            //list.Remove(this);
        }

        public void refresh()
        {
            // piece.eraseCommentGrouping();
            OnPropertyChanged("ExportStatus");
            OnPropertyChanged("TV");
            //OnPropertyChanged("Comment");
            //OnPropertyChanged("Grouping");
            OnPropertyChanged("MedianneStatus");
            OnPropertyChanged("ClassementVirtuel");
            OnPropertyChanged("MedianneStatus");
            OnPropertyChanged("");
        }

        public override bool IsSelected
        {
            get
            {
                return base.IsSelected;
            }
            set
            {
                if (value != base.IsSelected)
                {
                    base.IsSelected = value;
                    if (value)
                        CurrentSelected = this;
                    OnPropertyChanged("TV");
                }
            }
        }

        private int index;
        public int Index
        {
            get { return index; }
            set
            {
                if (value != index)
                {
                    index = value;
                    OnPropertyChanged("Index");
                }
            }
        }

        private int index2;
        public int Index2
        {
            get { return index2; }
            set
            {
                if (value != index2)
                {
                    index2 = value;
                    OnPropertyChanged("Index2");
                }
            }
        }

        public int StackValue { get { return PieceGen.StackValue; } }
        public int StackIndex { get { return PieceGen.StackIndex; } }

        public bool Empeached { get { return PieceGen.isEmpeached(); } set { PieceGen.Empeached = value; } }
        public int EmpeachedNb { get { return PieceGen.EmpeachedNb; } }

        public static event EventHandler CurrentSelectedChanged;
        public static TrackListViewModel CurrentSelected
        {
            get
            {
                return currentSelected;
            }
            set
            {
                if (value != currentSelected)
                {
                    currentSelected = value;
                    if (CurrentSelectedChanged != null)
                        CurrentSelectedChanged("Track", EventArgs.Empty);
                }
            }
        }

        public static event EventHandler<ClientEventArgs> CurrentHumanSelectedChanged;
        private static TrackListViewModel humanSelected;
        private static TrackListViewModel reallyHumanSelected;
        private static int humanSelectedId;
        public static TrackListViewModel ReallyHumanSelected { set { reallyHumanSelected = value; } }
        public static TrackListViewModel HumanSelected
        {
            get { return humanSelected; }
            //set
            //{
            //    if (value != humanSelected)
            //    {
            //        humanSelected = value;
            //        if (CurrentHumanSelectedChanged != null)
            //            CurrentHumanSelectedChanged("Human", EventArgs.Empty);
            //    }
            //}
        }

        private static bool setHumanSelectedUsed;
        private static volatile object _lock = new object();
        static ClientEventArgs _currentEvent;
        public static void setHumanSelected(PlayListViewModel pl, TrackListViewModel track)
        {
            lock (_lock)
            {
                if (setHumanSelectedUsed)
                    return;
            }

            try
            {
                lock (_lock)
                    setHumanSelectedUsed = true;
                //if (humanSelected != null)
                //{
                //    humanSelected.refresh();
                //   // var b = humanSelected.Grouping; 
                //}
                if (track != humanSelected)
                {
                    humanSelected = track;


                    //  humanSelected.refresh();
                    // var b = humanSelected.Grouping; 
                    int id = 0;
                    if (track != null) id = track.PieceId;
                    if (id != humanSelectedId)
                    {
                        App.Indispo = false;
                        humanSelectedId = id;
                        if (CurrentHumanSelectedChanged != null)
                        {
                            if (_currentEvent != null)
                                _currentEvent.client.cancel();
                            var client = new SimpleClient(string.Format("HumanSelected {0}", id), log);
                            _currentEvent = new ClientEventArgs(client);
                            var del = CurrentHumanSelectedChanged.GetInvocationList();
                            CurrentHumanSelectedChanged (pl, _currentEvent);
                        }
                    }
                }
            }
            finally
            {
                lock (_lock)
                    setHumanSelectedUsed = false;
                if (_currentEvent != null)
                    _currentEvent.client.log("fin HumanSelected");
            }
        }

        public bool Enabled
        {
            get
            {
                return piece.Enabled;
            }
            set
            {
                piece.Enabled = value;
                //if (value != track.Enabled)
                //{
                //    track.Piece.Enabled = value;
                //    OnPropertyChanged("Enabled");
                //}
            }
        }
        //  private exportState exportState;
        //public int ExportState
        //{
        //    get
        //    {
        //        return (int)exportState;
        //    }
        //}

        public static EventHandler ExportStatusChange;
        private static void OnExportStatusChange(TrackListViewModel tv)
        {
            if (ExportStatusChange != null)
                ExportStatusChange(tv, EventArgs.Empty);
        }

        public static event EventHandler ClassementChange;
        private static void OnClassementChange(TrackListViewModel tv)
        {
            if (ClassementChange != null)
                ClassementChange(tv, EventArgs.Empty);
        }

        public TrackListViewModel TV { get { return this; } }

        public exportState ExportStatus
        {
            get
            {
                return MasterPiece.ExportStatus; // exportState;
            }
            set
            {
                if (MasterPiece.ExportStatus != value)
                {
                    MasterPiece.ExportStatus = value;
                    OnPropertyChanged("ExportStatus");
                    OnPropertyChanged("TV");
                    OnPropertyChanged("Background");
                    OnExportStatusChange(this);
                    //refresh();


                }
            }
        }

        public int IndexExport
        {
            get { return PieceGen.IndexExport; }
        }

        public selectedCoeff SelectedMotif
        {
            get
            {
                if (PieceGen == null)
                    return selectedCoeff.none;
                return PieceGen.SelectedMotif;
            }
        }



        private TrackListViewModel(Piece piece)
            : base(piece)
        {
            this.track = piece;
            this.piece = track.Track as CPiece;
        }
        # region registre
        #region main
        /// <summary>
        /// Registre des tracks présentés dans la grille principale
        /// </summary>
        private static BgDict<int, TrackListViewModel> dict = new BgDict<int, TrackListViewModel>();
        /// <summary>
        /// Récupère ou crée un track dans la grille principale
        /// </summary>
        /// <param name="p"></param>
        /// <returns></returns>
        public static TrackListViewModel getOrCreate(Piece p)
        {
            var t = dict[p.PieceId];
            if (t == null)
            {
                t = new TrackListViewModel(p);
                dict.Add(p.PieceId, t);
            }
            return t;
        }

        public static TrackListViewModel get(int id)
        {
            return dict[id];
        }
        public static IDictionary<int, TrackListViewModel> Dict { get { return dict; } }
        #endregion
        #region album
        /// <summary>
        /// Registre des tracks présentés dans la grille album
        /// </summary>
        private static BgDict<int, TrackListViewModel> dictA = new BgDict<int, TrackListViewModel>();
        /// <summary>
        /// Récupère ou crée un track dans la grille album
        /// </summary>
        /// <param name="p"></param>
        /// <returns></returns>
        public static TrackListViewModel getOrCreateA(Piece p)
        {
            var t = dictA[p.PieceId];
            if (t == null)
            {
                t = new TrackListViewModel(p);
                dictA.Add(p.PieceId, t);
            }
            return t;
        }

        public static TrackListViewModel getA(int id)
        {
            return dictA[id];
        }
        public static IDictionary<int, TrackListViewModel> DictA { get { return dictA; } }
        #endregion
        # endregion
        //public TrackListViewModel(TrackList track, PlayListViewModel playlist)
        //    : base(track, playlist)
        //{
        //    //this.track = track;
        //    //this.piece = PieceViewModel.getPiece(track); // new PieceViewModel(track); // track.Piece.Track as CPiece; 
        //    //piece.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(piece_PropertyChanged);
        //    //int id = track.PieceId;
        //    //if (!dictT.ContainsKey(id))
        //    //{
        //    //    var list = new List<TrackListViewModel>();
        //    //    dictT.Add(id, list);
        //    //}

        //    //dictT[id].Add(this);

        //}

        void piece_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            OnPropertyChanged(e.PropertyName);
        }

        public String StrPlaying
        {
            get
            {
                if (playing) return "<))";
                return "";
            }
        }
        public string MedianneStatus
        {
            get
            {
                var p = PieceGen;
                if (p.Medianne)
                    return ">>";
                if (p.MedianneLight)
                    return ">";
                if (p.Border)
                    return "-";
                if (p.BorderMin)
                    return "-";
                if (p.BorderEffect)
                    return "--";

                return "";
            }
        }

        private bool playing;
        public bool Playing
        {
            get { return playing; }
            set
            {
                if (value != playing)
                {
                    playing = value;
                    if (playing)
                    {
                        CurrentPlaying = this;
                    }
                    OnPropertyChanged("Playing");
                    OnPropertyChanged("StrPlaying");
                }
            }
        }

        public static TrackListViewModel CurrentPlaying
        {
            get
            {
                return currentPlaying;
            }
            set
            {
                if (value != currentPlaying)
                {
                    if (currentPlaying != null)
                        currentPlaying.Playing = false;
                    currentPlaying = value;
                }
            }
        }

        public static bool HumanSelectedIsBusy { get { return currentPlaying == humanSelected && currentPlaying != reallyHumanSelected; } }

        public int Rating
        {
            get
            {
                return piece.Rating;
            }
            set
            {
                piece.Rating = value;
                //if (value != track.Rating)
                //{
                //    track.Rating = value;
                //    onPropertyChanged("Rating");
                //}
            }
        }

        //  private pdb.db.obj.CPiece CPiece { get { return track.Piece.Track as pdb.db.obj.CPiece; } }

        public string ClassementCompact
        {
            get { return PieceGen.ClassementCompact; }
        }

        //public static readonly DependencyProperty ClassementProperty =
        //DependencyProperty.Register("Classement", typeof(String),
        // typeof(PieceViewModel), new UIPropertyMetadata(null));
        //  Classement ITrackNative.Classement { get { return PieceGen.Classement; } }
        public String Classement
        {
            get
            {
                return PieceGen.Classement.ToString();
            }
            set
            {

                // piece.StrClassement = value;
                //if (value != piece.Piece.StrClassement)
                //{

                lock (Albums.LockSort)
                {
                    piece.StrClassement = value;
                    track.invalidateCache(true);
                    App.gen.ClassementChange();

                    //piece.Classement = value;
                    // PieceGen.invalidateCache();
                    var albums = App.gen.Albums;
                    albums.signalClassChange(track);
                    //  albums.invalidateAll(false); 
                    if (DetailClassementViewModel.Instance.Auto)
                        App.gen.setUrgence();
                    try
                    {

                        PlayerViewModel.makeauto(this);
                        App.bib.setClassement(this, value);



                        // piece.Piece.StrClassement = value;

                    }
                    catch
                    {
                    }

                    OnClassementChange(this);
                    OnPropertyChanged("Classement");

                    App.go(this);
                    // onPropertyChanged("Classement");


                    // }

                }
            }
        }

        public int Year
        {
            get
            {
                return piece.Year;
            }
            set
            {
                if (value != Year)
                {
                    piece.Year = value;
                    App.invalidateAlbums();
                }
                //if (value != piece.Year)
                //{
                //    track.Year = value;
                //    onPropertyChanged("Year");
                //}
            }
        }

        public DateTime Added { get { return piece.Added; } }

        public DateTime FirstAcces
        {
            get
            {
                return track.FirstAcces;
            }
        }



        public DateTime AlbumAdded
        {
            get
            {
                return track.AlbumAdded;
            }
        }

        public int RankAlbum { get { return PieceGen.RankAlbum; } }
        public int RankAlbumZero { get { return PieceGen.RankAlbumZero; } }
        public int RankAlbumReverse { get { return PieceGen.RankAlbumReverse; } }
        //  public int RankAllAlbum { get { return PieceGen.RankAllAlbum; } }
        public int RankAlbumSt { get { return PieceGen.RankAlbumSt; } }
        public int RankAlbumZeroSt { get { return PieceGen.RankAlbumZeroSt; } }


        public int Rank { get { return PieceGen.Rank.Quality; } }
        //public static readonly DependencyProperty CommentProperty =
        //DependencyProperty.Register("Comment", typeof(string),
        //typeof(PieceViewModel), new UIPropertyMetadata(null)); 
        //public string Comment
        //{
        //    get
        //    {
        //        if (PieceGen.Virtual)
        //            return "";
        //        return piece.Comment;
        //    }
        //    set
        //    {
        //        if (PieceGen.Virtual)
        //            return;
        //        //piece.Comment = value; 
        //        if (value != piece.Comment)
        //        {
        //            //  track.Comment = value;
        //            piece.Comment = value;
        //            OnPropertyChanged("Comment");

        //        }
        //    }
        //}

        //public string Grouping
        //{
        //    get { return track.Piece.Grouping; }
        //    set
        //    {
        //        //  piece.Grouping = value;
        //        if (value != track.Piece.Grouping)
        //        {
        //            track.Piece.setGrouping(value, true);
        //            // track.setGrouping(value, true);
        //            OnPropertyChanged("Grouping");
        //        }
        //    }
        //}




        public bool isPodcast
        {
            get { return piece.isPodcast; }
        }


        public TimeSpan Duration
        {
            get { return piece.Duration; }
            set
            {
                piece.Duration = value;
                //if (!Exists)
                //    return; 
                //if (value != Duration)
                //{
                //    var deltaMs = Math.Abs(value.TotalMilliseconds - Duration.TotalMilliseconds);
                //    if (deltaMs >= 1)
                //    {
                //        track.Duration = value;
                //        if (deltaMs >= 1000)
                //            onPropertyChanged("Duration");
                //    }
                //}
            }
        }

        public string File
        {
            get { return piece.Files.PathReduc; }
        }

        public string Location
        {
            get { return piece.Location; }
        }

        public string Artist
        {
            get
            {
                return piece.Artist;
            }
            set
            {
                if (value != Artist)
                {
                    piece.Artist = value;
                    App.invalidateAlbums();
                }
                //if (value != track.Artist)
                //{
                //    track.Artist = value;
                //    onPropertyChanged("Artist");
                //}
            }
        }

        public string Album
        {
            get
            {
                if (track.Virtual)
                {
                    switch (track.VirtualMode)
                    {
                        case virtualMode.none:
                        break;
                        case virtualMode.artist:
                        return string.Format("[{0}]", track.Album);
                        case virtualMode.path:
                        break;
                        case virtualMode.year:
                        if (track.Album.Length == 3)
                            return string.Format("[[{0}0']]", track.Album);
                        else
                            return string.Format("[[{0}]]", track.Album);
                        case virtualMode.extended:
                        return string.Format("¤{0}", track.Album);
                        case virtualMode.added:
                        return string.Format("<{0}>", track.Album);
                        case virtualMode.word:
                        return string.Format("'{0}'", track.Album);
                        case virtualMode.list:
                        return string.Format("/{0}", track.Album);
                        default:
                        break;
                    }
                    return track.Album;
                }
                return piece.Album;
            }
            set
            {
                if (!track.Virtual)
                {
                    if (value != Album)
                    {
                        piece.Album = value;
                        App.invalidateAlbums();
                    }
                }
                //if (value != track.Album)
                //{
                //    track.Album = value;
                //    onPropertyChanged("Album");
                //}
            }
        }

        public string MasterAlbum
        {
            get
            {
                //    if (track.Virtual)
                //        return " " + PieceGen.Master.Album;
                return PieceGen.Master.Album;
            }
            set
            {
                if (value == null)
                    return;
                value = value.Trim();
                if (value != PieceGen.Master.Album)
                {
                    PieceGen.Master.Album = value;
                    OnPropertyChanged("MasterAlbum");
                }
            }
        }

        public Album album { get { return PieceGen.PieceAlbum; } }

        public string Name
        {
            get
            {
                return piece.Name;
            }
            set
            {
                piece.Name = value;
                //if (value != track.Name)
                //{
                //    track.Piece.Name = value;
                //    onPropertyChanged("Name");
                //}
            }
        }

        public int TrackNumber
        {
            get
            {
                return track.TrackNumber;
            }
            set
            {
                if (!track.Virtual)
                    piece.TrackNumber = value;
                //if (value != track.TrackNumber)
                //{
                //    track.TrackNumber = value;
                //    onPropertyChanged("TrackNumber");
                //}
            }
        }


        public void setClassement(string className, int rating)
        {
            piece.setClassement(className, rating);
            PieceGen.invalidateCache(true);

        }



        public DateTime PlayedDate
        {
            get { return piece.PlayedDate; }
        }

        //public string ArtWork
        //{
        //    get
        //    {
        //        return piece.ArtWork;
        //    }
        //    set
        //    {
        //        piece.ArtWork = value;
        //    }
        //}

        //public void setGrouping(string value, bool prior)
        //{
        //    track.Piece.setGrouping(value, prior);
        //    piece.Grouping = value; // TODO je fait quoi de ça ???
        //    // onPropertyChanged("Grouping");
        //}

        public string ClassementVirtuel { get { return PieceGen.ClassementVirtuel; } }

        public decimal CoeffVirtuel { get { return PieceGen.CoeffVirtuel - 1; } }

        public string ClassementVirtuel2 { get { return PieceGen.ClassementVirtuel2; } }

        public decimal CoeffVirtuel2 { get { return PieceGen.CoeffVirtuel2 - 1; } }

        public decimal Rendement
        {
            get
            {
                if (album == null)
                    return 0;
                return album.Rendement - 1;
            }
        }

        public bool FirstClass
        {
            get
            {
                return true;
            }
            set
            {

            }
        }



        public List<DateTime> Dates
        {
            get { return new List<DateTime>(piece.Dates); }
        }


        public string ClassEvol
        {
            get { return track.ClassEvol; }
        }

        public long Size { get { return Piece.Size; } }

        public bool? Exists { get { return Piece.Exists; } }
        public bool ExistsNow { get { return Piece.ExistsNow; } }

        //public void onPropertyChanged(string propertyName)
        //{
        //    var list = dictT[PieceId];
        //    if (list == null)
        //    {
        //        OnPropertyChanged(propertyName);
        //    }
        //    else
        //    {
        //        foreach (TrackListViewModel t in dictT[PieceId])
        //            t.OnPropertyChanged(propertyName);
        //    }
        //}




        public int PieceId
        {
            get { return track.PieceId; }
        }
        public int MasterId { get { return PieceGen.MasterId; } }


        public int PieceParentId
        {
            get { return track.PieceParentId; }
            set { track.PieceParentId = value; }
        }

        public void setParent(TrackListViewModel parent)
        {
            track.invalidateCache(false);
            parent.PieceGen.invalidateCache(false);

            track.albumMustRefresh();
            parent.track.albumMustRefresh();

            piece.Parent = parent.Piece.Master;
            track.setParent(parent.track);

            track.albumMustRefresh();
            parent.track.albumMustRefresh();

            track.invalidateCache(false);
            parent.PieceGen.invalidateCache(false);
        }

        public void fusion(TrackListViewModel toDelete)
        {

            PieceGen.invalidateCache(false);
            toDelete.PieceGen.invalidateCache(false);

            App.Db.List.fusion(piece, toDelete.Piece);
            PieceGen.invalidateCache(false);
            toDelete.PieceGen.invalidateCache(false);

        }





        #region key
        private TrackIdentity key;
        public TrackIdentity Key
        {
            get
            {
                if (key == null)
                    keyGener();
                return key;
            }
        }
        private void keyGener()
        {
            key = new TrackIdentity(this);
        }

        #endregion


        public List<string> RelativesPath
        {
            get { return track.RelativesPath; }
        }

        public DateTime? UpdateClassement { get { return PieceGen.UpdateClassement; } }
        public DateTime? AlbumUpdateClassement { get { return PieceGen.AlbumUpdateClassement; } }
        public DateTime? MasterAlbumUpdateClassement { get { return PieceGen.MasterAlbumUpdateClassement; } }



        public DateTime? LastRead { get { return PieceGen.LastRead; } }
        public DateTime? AlbumLastRead { get { return PieceGen.AlbumLastRead; } }

        public int NbClass { get { return PieceGen.NbClass; } }

        public List<DateTime> DatesClassementBrut
        {
            get
            {
                return track.DatesClassementBrut;
            }
        }


        public string getLocation()
        {
            return piece.getLocation();
        }

        public string EquivLight
        {
            get
            {
                if (album == null)
                    return "";
                return album.EquivLight;
            }
        }

        public string EquivLight0
        {
            get
            {
                if (album == null)
                    return "";
                return album.EquivLight0;
            }
        }

        public string EquivLightSt
        {
            get
            {

                if (album == null)
                    return "";
                return album.EquivLightSt;
            }
        }

        public decimal ClassementValueLightSt
        {
            get
            {
                if (album == null)
                    return 0;
                return album.ClassementValueLightSt;
            }
        }

        public decimal ClassementValueLight
        {
            get
            {
                if (album == null)
                    return 0;
                return album.ClassementValueLight;
            }
        }

        public int AlbumCount
        {
            get
            {
                if (album == null)
                    return 0;
                return album.Count;
            }
        }

        public bool Virtual { get { return PieceGen.Virtual; } }

        public int DeltaRank { get { return PieceGen.DeltaRank; } }


        public void setClassement(string classement)
        {
            Classement = classement;
        }


        public string strClassement
        {
            get { return Classement; }
        }

        public string MaxClassement
        {
            get { return track.MaxClassement.ToString(); }
        }

        public string DeepClassement
        {
            get { return track.DeepClassement.ToString(); }
        }




        public bool Keep { get { return PieceGen.Keep; } }

        public bool NoCompact { get { return !PieceGen.UseCompact; } }

        public int MainTrackNumber { get { return PieceGen.MasterTrackNumber; } }

        public int NbRecentsInAlbum { get { return PieceGen.NbRecentsInAlbum; } }
        public int NbDoneInAlbum { get { return PieceGen.NbDoneInAlbum; } }
        public string PlusPetitEnabled { get { return PieceGen.PlusPetitEnabled; } }

        public decimal KeepCoeff { get { return PieceGen.KeepCoeff; } }

        public IMasterPiece MasterPiece
        {
            get
            {
                return piece.MasterPiece;
            }
        }
    }
}
]]></content>
  </file>
</db>
