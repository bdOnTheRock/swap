<db path="C:\bernard\db1\db4">
  <file path="\pdb.podcast\Program.cs">
    <content><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using System.Threading;
using System.Xml;
using iTunesLib;
using pdb.iit;
using pdb.it;
using pdb.obj;
using pdb.ordo;
using pdb.podcast.Albums;
using pdb.podcast.Auto;
using pdb.podcast.Delta;
using pdb.podcast.Load;
using pdb.podcast.Report;
using pdb.podcast.Sort;
using pdb.podcast.Tuning;
using pdb.util;
using Conf = pdb.podcast.Tuning.Conf;
using PlayList = pdb.it.PlayList;
using pdb.podcast.Date0;
using pdb.podcast.Notes;

namespace pdb.podcast
{
    /// <summary>
    /// crée des listes de lecture pour les Podcasts
    /// </summary>
    class Program : IAbortTask
    {
        //const char DIR_SEP = Path.DirectorySeparatorChar; 
        static ILoader loader;
        //private Feeds feeds;
        public static Logger log;
        public static Logger logAuto;
        static int step = -1;
        static Program _instance = new Program();
        // static bool calculRoots = false;
        static List<HashSet<int>> lists = null;
        static AlbumMgr albumMgr = AlbumMgr.Instance;

        private static AsyncFileWriter asyncFw = AsyncFileWriter.Instance;
        public static Chrono chrono = new Chrono();
        private static Logger logChrono;
        private static DB.Db db;

        //public static DB.Db Db { get { return db; } }


        private static XmlWriter writer;
        //DirConf root;
        //DirConf oldRoot;

        private string _empreinte;

        static void Main(string[] args)
        {

            Logger.init(Environment.CurrentDirectory.Replace("\\", "_"));
            log = Logger.getLogger("Program");
            logChrono = Logger.getLogger("Chrono", true);
            logAuto = Logger.getLogger("Auto", true);
            logAuto.NoReset = true;

            FileRegister.init(new Dictionary<string, FileValue>());
            _instance.go(args);
        }

        void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs e)
        {
            Console.WriteLine("\nThe read operation has been interrupted.");
            Console.WriteLine("  Key pressed: {0}", e.SpecialKey);
            Console.WriteLine("  Cancel property: {0}", e.Cancel);
            if (loader == null)
                return;
            e.Cancel = true;


            if (e.SpecialKey == ConsoleSpecialKey.ControlC)
            {
                _end = true;

                loader.saveIds();
                //if (db != null)
                //    db.write();

                PlayList.AbortOpe();
                BackGroundTaskMgr.AbortSpecial();
                BackGroundTaskMgr.Reset();
                BackGroundTaskMgr.recordMsProc();
                loader.saveIds();
                Console.WriteLine("\nFin de l'opération d'enregistrement.");
                MemUtil.End();
                Logger.End();
                DisposableCounter.DisposeAll();
                Locker.releaseSingleProcess();
                AsyncFileWriter.End();
                Memory.End();
                Exporter.Abort();

                if (db != null)
                {
                    while (db.Writing)
                    {
                        log.log("waiting db writing");
                        Thread.Sleep(1000);
                    }
                }

                //if (_writeDb != null)
                //{
                //    misc.log("attente writeDb");
                //    _writeDb.Wait();
                //}
                Environment.Exit(0);
            }
            else
            {
                BackGroundTaskMgr.PlayPause();
                BackGroundTaskMgr.recordMsProc();
                loader.saveIds();
                if (db != null)
                    db.write();
            }
        }

        //private void scandir(string dir)
        //{
        //    scanFiles(new DirectoryInfo(dir));
        //}

        //private void scanFiles(DirectoryInfo dir)
        //{
        //    log.log("scan " + dir.FullName);
        //    foreach (FileInfo file in dir.GetFiles())
        //    {
        //        //if (dict.ContainsKey(file.FullName))
        //        //    continue;

        //        // log.log("try to build track from " + file.FullName);

        //        try
        //        {
        //            var t = loader.createTrack(-1, file.FullName);
        //            if (t == null)
        //                continue;
        //            TrackInfoItunes track = t as TrackInfoItunes;

        //            if (track == null)
        //                continue;
        //            //if (!track.isPodcast)
        //            //    continue;

        //            log.log("\t==>track créé:" + track);
        //            feeds.checkAll(track);

        //        }
        //        catch (Exception ex)
        //        {
        //            log.log(ex.ToString());
        //        }
        //    }

        //    foreach (DirectoryInfo sub in dir.GetDirectories())
        //        scanFiles(sub);
        //}

        #region Task


        private List<ITrackInfoItunes> loadTracks(bool firstStep, bool forceLoad)
        {
            List<ITrackInfoItunes> listTrack = new List<ITrackInfoItunes>();
            loader.loadTracks(firstStep, forceLoad, listTrack);

            return listTrack;

        }
        #endregion


        private static void SyncDb(List<TrackInfoItunes> list, bool checkInOut)
        {
            if (db == null)
                return;
            log.log("SyncDb checkInOut= " + checkInOut);
            foreach (TrackInfoItunes t in list)
            {
                if (checkInOut)
                    t.checkInOut();
                var tdb = db.get(t);
                if (tdb == null)
                {
                    log.log("impossible de trouver le track db correspondant à {0} {1} {2}", t.DbId, t.Location, t);
                    continue;
                }
                tdb.synch(t);

            }
            log.log("Fin SyncDb checkInOut= " + checkInOut);

        }

        public void go(string[] args)
        {
            TrackInfoItunes.AlbumMgr = albumMgr;
            int countArgs = args.GetLength(0);
            string confFile = "conf.xml";
            if (countArgs > 0)
                confFile = args[0];
            bool _fin = false;

            Album.logDebug = Logger.getLogger("pubDebug", false);
            Album.log = Logger.getLogger("pub2", Album.logDebug, true);
            Album.logDebug.NoReset = true;
            Album.log.NoReset = true;
            Hibernator hibernator = new Hibernator();
            DateRefBuilder dateRefBuilder = new DateRefBuilder();
            try
            {

                //BackGroundTaskMgr.Sens = - 1; 
                Thread.CurrentThread.Name = "Main";
                Console.CancelKeyPress += Console_CancelKeyPress;
                ThreadUtil.Log = false;
                misc.init(Logger.getLogger);
                MemUtil.Start(60);

                // bool firstLoad = true;


                Conf.Instance.setConfFile(confFile);
                var xelt = Conf.Instance.load(false);
                TrackInfoItunes.setDate0(Conf.Date0);
                if (Conf.Menage != menage.none)
                {
                    new Menage().go();
                    return;
                }
                BackGroundTaskMgr.Conf = Conf.Ordo;
                TrackInfoItunes.VolumeMin = Conf.VolumeMin;
                TrackInfoItunes.MaxPlayed = Conf.PlayedDates;
                TrackInfoItunes.PlayedLevel = Conf.DateLevel;
                var itConf = new pdb.it.Conf(xelt);

                // loader = new Loader(itConf, true);
                bool import = Conf.Import.enabled || Conf.Import.merge;
                db = new DB.Db();


                if (Conf.UseMock)
                    loader = new MockLoader(itConf.DefaultFolder);
                else
                    loader = new Loader(itConf, import, db,
                        () =>
                        {
                            misc.Pre = "[Load " + step + "] ";

                            PlayList.AbortOpe();
                            BackGroundTaskMgr.AbortSpecial();
                            //   Thread.Sleep(1000); 
                            //  BackGroundTaskMgr.Start(); 
                        }, Conf.OnlyEnabled, Conf.OnlyUnRead)

                   ;
                // loader.init();
                TrackInfoItunes.DefaultFolder = loader.DefaultFolder;

                db.load();
                //  db.write(); return; 

                string ziqueOrg = loader.DefaultFolder;
                loader.PlayListFilter = new PlayListFilter(Conf.RootIt);

                BackGroundTaskMgr.Start();

                List<TrackInfoItunes> listIt = new List<TrackInfoItunes>();

                // var bgClass = BackGroundTaskMgr.getMgr("Classement", 0);




                bool firstlaunched = false;
                do
                {
                    try
                    {
                        chrono.end();
                        logChrono.log(chrono.display(3, "{0}:{1:#}"));
                        chrono.reset("Program");

                        step++;
                        Logger.Pre = "[" + step + "] ";
                        Logger.CreateNullLoggers = false;
                        xelt = Conf.Instance.load(step > 0 && Conf.Simulation);
                        loader.setConf(xelt);
                        //loader.Conf = new it.Conf(xelt);
                        // AutoBuilder.Log();
                        BackGroundTaskMgr.Conf = Conf.Ordo;
                        TrackInfoItunes.VolumeMin = Conf.VolumeMin;
                        ziqueOrg = loader.DefaultFolder;

#if vendee
                        listTrack = new List<ITrackInfoItunes>();
                        loader.reset(step == 0);

                        loader.ModeXml = false;
                        loader.loadTracks(listTrack);

                        var listV = new ArrayList();
                        loader.getNatives(listV);

                        new Vendee().go(listV);

                        return;

#endif

                        chrono.bip("debut", true);
                        List<TrackInfoItunes> list = null;
                        DirConf root = null;
                        if (step == 0 || !Conf.Simulation)
                        {
                            List<ITrackInfoItunes> listTrack = new List<ITrackInfoItunes>();


                            listTrack = loadTracks(step == 0, AutoBuilder.MustUpdate);
                            BackGroundTaskMgr.recordMsProc();
                            loader.Aborted = true;

                            PlayList.AbortOpe();
                            BackGroundTaskMgr.Reset();

                            BackGroundTaskMgr.recordMsProc();
                            Logger.Reset();
                            BackGroundTaskMgr.Start();


                            misc.Pre = "[" + step + "] ";


                            // listTrack = new List<ITrackInfoItunes>();


                            xelt = Conf.Instance.load(false);
                            loader.setConf(xelt);
                            //  AutoBuilder.Log();
                            BackGroundTaskMgr.Conf = Conf.Ordo;
                            TrackInfoItunes.VolumeMin = Conf.VolumeMin;

                            //xelt = Conf.Instance.load(step > 0 && Conf.Simulation);
                            //loader.Conf = new it.Conf(xelt);
                            //BackGroundTaskMgr.Conf = Conf.Ordo;
                            //TrackInfoItunes.VolumeMin = Conf.VolumeMin;

                            if (Conf.DeleteDoublon)
                            {

                                loader.ModeXml = false;
                                loader.loadTracks(listTrack);
                                return;
                            }

                            if (Conf.GetDescription)
                            {
                                loader.ModeXml = false;
                                loader.loadTracks(listTrack);
                                return;
                            }

                            string copyAll = Conf.CopyAll;
                            if (!string.IsNullOrEmpty(copyAll))
                            {
                                // loader.loadTracks(listTrack);
                                List<TrackInfoItunes> listToCopy = new List<TrackInfoItunes>();
                                foreach (ITrackInfoItunes _track in listTrack)
                                {

                                    if (_track.isPodcast)
                                    {
                                        var t = _track as TrackInfoItunes;
                                        listToCopy.Add(t);
                                    }


                                }
                                int count = listToCopy.Count;
                                int i = 0;
                                foreach (TrackInfoItunes track in listToCopy)
                                {
                                    i++;
                                    track.copy(copyAll, string.Format("{0}/{1}", i, count));
                                }
                                return;
                            }


                            //    loader.loadTracks(listTrack);

#if menage
                // var listC = new Dict<string, FileInfo>();
                var listD = new Dict<string, FileInfo>();

                Dict<string,ITrackInfoItunes> dict = new Dict<string, ITrackInfoItunes>();
                foreach (var track in listTrack)
                    dict[track.Location] = track;

               
                listFiles(listD, new DirectoryInfo(@"D:\zique\podcasts"));

                foreach (FileInfo file in listD)
                {
                    string location = file.FullName.Replace("D:", "C:");
                    FileInfo C = new FileInfo(location);
                    if (C.Exists)
                    {
                        //TrackInfoItunes track = dict[file.FullName] as TrackInfoItunes;
                        //if (track != null)
                        //{
                        //    log.log("suppression track" + track);
                        //    track.Delete();
                        //}
                        //else
                        //{
                            log.log("suppression simple de " + file.FullName);
                            file.Delete();
                        //}
                    }

                }

                return; 

#elif build

                            list = new List<TrackInfoItunes>();

                            foreach (ITrackInfoItunes _track in listTrack)
                            {
                                if (_track.isPodcast)
                                {
                                    var t = _track as TrackInfoItunes;
                                    string location = t.Location;
                                    if (string.IsNullOrEmpty(location) || !File.Exists(location))
                                    {
                                        log.log("phase load :: tres bizarre sans localisation " + t.Album + "/" + t.Name);
                                        //t.Delete();
                                        continue;
                                    }

                                    list.Add(t);
                                }

                            }
                            int nbIntegre = 0;
                            int nbSuppr = 0;
                            scanFiles(list, new DirectoryInfo(@"C:\zique\podcasts"), ref nbIntegre, ref nbSuppr);
                            log.log("fin scan : {0} intégrés, {1} supprimmés", nbIntegre, nbSuppr);
                            BackGroundTaskMgr.End();
                            return;
                        }
                    }


                    catch (Exception ex)
                    {
                        log.log(ex.ToString());
                    }
                }
                while (true);

#else
                            listIt = new List<TrackInfoItunes>();
                            Dict<string, TrackInfoItunes> dictLoc = new Dict<string, TrackInfoItunes>();
                            // GroupStat trackStat = new GroupStat();

                            loader.saveIds();
                            foreach (ITrackInfoItunes _track in listTrack)
                            {
                                if (_track.isPodcast)
                                {
                                    var t = _track as TrackInfoItunes;
                                    string location = t.Location;
                                    if (string.IsNullOrEmpty(location)) // || !FileRegister.Exist(location)) //  File.Exists(location))
                                    {
                                        //log.log("phase load :: suppression du track sans localisation " + t.Album + "/" + t.Name);
                                        //t.Delete();
                                        continue;
                                    }
                                    FileRegister.Push(location);
                                    dictLoc[t.Location] = t;
                                    listIt.Add(t);
                                    // if (!t.Played)
                                    //    trackStat.recordTrack(t, typeState.all);
                                    //trackStat.recordTrack(t, typeState.all);
                                }
                            }

                            db.recordIt(listIt);
                            chrono.bip("loadTracks", true);


                            // ici on peut faire la verification des doublons - track hibernés et re-téléchargés par ce con d'itunes
                            var albumConsolid = new AlbumConsolid();
                            foreach (TrackAlbum album in albumMgr.List)
                            {
                                albumConsolid.consolid(album);
                            }

                            log.log("nb123={0} nb12={1} nb13={2} nb23={3} nb1={4} nb2={5} nb3={6} nb0={7}, nb3n={8}",
                                AlbumConsolid.nb123, AlbumConsolid.nb12, AlbumConsolid.nb13, AlbumConsolid.nb23,
                                AlbumConsolid.nb1, AlbumConsolid.nb2, AlbumConsolid.nb3, AlbumConsolid.nb0, AlbumConsolid.nb3n);

                            if (Conf.Import.enabled)
                            {
                                var listImport = new List<TrackInfoItunes>();
                                hibernator.select(Conf.Import, listImport, db.Tracks, true);

                                foreach (TrackInfoItunes tdb in listImport)
                                {
                                    loader.import(tdb);
                                }
                            }
                            else if (Conf.Import.merge)
                            {
                                foreach (TrackInfoItunes t in listIt)
                                    loader.merge(t);
                            }

                            root = Conf.DirConf;
                            var feeds = root.Feeds;

                            list = db.Tracks;
                            foreach (TrackInfoItunes track in list)
                            {
                                feeds.check(track);
                            }
                            chrono.bip("feeds", true);

                            var loaded = feeds.Loaded;
                            loaded.Sort(new PodCastComparer());


                            xelt = Conf.Instance.load(step > 0 && Conf.Simulation);
                            loader.setConf(xelt);

                            if (Conf.Freewheel)
                            {
                                PlayList.StartOpe();
                                Freewheel(root);
                                log.log("Freewheel : fin sans enregistrement DB");
                                return;
                            }


                            if (Conf.Sort.selectionBefore)
                            {



                                //***************** Lancement "pour de vrai" ***************************************

                                LimitItemLoader.ModeSelection = true;

                                loadCandidat(root);
                                chrono.bip("loadCandidat(root)");
                                //  AutoBuilder.test(); 
                                // standAlone(root); 
                                phase2(root);
                                Selection(root);
                                chrono.bip("Selection(root)");
                                //**********************************************************************************


                                //****************************************
                                // lancement des sorties xml et html en asynchrone
                                postReport(root, true);
                                //****************************************


                            }



                            if (Conf.Sort.checkBefore)
                            {
                                Album.Init();
                                var sorter = new Sorter(Conf.Sort, list);
                                sorter.build();
                                chrono.bip("sorter.build();", true);


                                if (Album.NbRepeches > 0)
                                {
                                    log.log("{0} éléments ne sont plus protégés par Pub2", Album.NbRepeches);
                                    _fin = true;
                                }
                            }

                            if (Conf.Import.enabled || Conf.Import.merge)
                            {
                                _fin = true;

                            }



                            if (_fin)
                            {
                                log.log("fin sans enregistrement DB");
                                //  db.write();


                                //****************************************
                                // lancement des sorties xml et html en asynchrone
                                postReport(root, false);
                                //****************************************
                                return;
                            }


                            if (Album.NbModif > 0)
                            {
                                resetLoad(root);
                                chrono.bip("SyncDb", true);
                                SyncDb(list, false);
                                chrono.bip("db.write()", true);
                                db.writeAsync();
                            }
                            bool changeDate = false;
                            if (Conf.Sort.enabled == Tuning.Sort.sortMode.once_all || !Conf.DateRef.offset)
                            {
                                changeDate = dateRefBuilder.auto(loaded);
                                TrackInfoItunes.setDate0(Conf.Date0);
                                double offsetIni = dateRefBuilder.getOffset();
                                AutoBuilder.Offset = offsetIni;
                            }
                            AutoBuilder.init(true);
                            if (Conf.Sort.stopOnOffset && changeDate)
                            {
                                log.log("fin cause stopOnOffset");
                                return;
                            }

                            if (Conf.Sort.stopOnPub2 && Album.NbModifPertinent > 0)
                            {
                                log.log("fin cause stopOnPub2");
                                return;
                            }

                            AutoBuilder.Offset = 0;
                            chrono.bip("AutoBuilder.init(true)");
                            xelt = Conf.Instance.load(step > 0 && Conf.Simulation);
                            loader.setConf(xelt);
                            dateRefBuilder.saveCurrent();
                            ContexteBuilder.Instance.init(loaded);



                            var descTrack = DescBuilder.create("Tracks");

                            LimitItem.includeDetail = true;
                            //trackStat.report(descTrack);
                            //log.log(descTrack.ToString());

                            //var sbT = new StringBuilder();

                            //using (pdb.util.TextWriter tw = new util.TextWriter(File.OpenWrite(@"..\Logs\tracks.txt")))
                            //{
                            //var trackFile = DescBuilder.create("Tracks", sbT);
                            //trackStat.report(trackFile);
                            //sbT.Flush();

                            //asyncFw.post(@"..\Logs\tracks.txt", sbT.ToString());
                            //}
                            //chrono.bip("desc tracks", true);
                            //Logger.LogConsole = false;
                            //        loader.loadLists();
                            Logger.LogConsole = true;
                            chrono.bip("load list", true);

                        }
                        list = db.Tracks;


                        while (true)
                        {

                            chrono.end();
                            logChrono.log(chrono.display(3, "{0}:{1:#}"));
                            chrono.reset("Program");
                            root = Conf.DirConf;
                            var feeds = root.Feeds;
                            foreach (TrackInfoItunes track in feeds.getSelectedTracks())
                            {
                                track.clearLists();
                            }

                            feeds.clearSelectedTracks();

                            chrono.bip("track.clearLists", true);

                            xelt = Conf.Instance.load(false);
                            loader.setConf(xelt);
                            PlayList.StartOpe();
                            loader.Aborted = false;

                            Logger.CreateNullLoggers = !Conf.LogGen;


                            BackGroundTaskMgr.Conf = Conf.Ordo;




                            Exporter.TopRecord();
                            //***************** Lancement "pour de vrai" ***************************************
                            LimitItemLoader.ModeSelection = true;
                            AutoBuilder.init(true);
                            chrono.bip("AutoBuilder.init(true)");
                            loadCandidat(root);
                            chrono.bip("loadCandidat(root)");
                            //  AutoBuilder.test(); 
                            // standAlone(root); 
                            phase2(root);
                            Selection(root);
                            chrono.bip("Selection(root)");
                            //**********************************************************************************

                            Album.Init();

                            if (Conf.Sort.enabled == Tuning.Sort.sortMode.reset ||
                                Conf.Sort.enabled == Tuning.Sort.sortMode.once ||
                                Conf.Sort.enabled == Tuning.Sort.sortMode.white ||
                                (Conf.Sort.enabled == Tuning.Sort.sortMode.once_all && !firstlaunched))
                            {
                                if (Sorter.NbLaunch == 0 || (Conf.Sort.enabled != Tuning.Sort.sortMode.white && Conf.Sort.enabled != Tuning.Sort.sortMode.once))
                                {
                                    var sorter = new Sorter(Conf.Sort, list);
                                    sorter.build();
                                }
                                _fin = Conf.Sort.enabled == Tuning.Sort.sortMode.white || Conf.Sort.enabled == Tuning.Sort.sortMode.reset;
                                if (!_fin && Album.NbModif > 0)
                                    resetLoad(root);
                            }

                            firstlaunched = true;

                            if (Album.NbRepeches > 0)
                            {
                                log.log("{0} éléments ne sont plus protégés par Pub2", Album.NbRepeches);
                                _fin = true;
                            }



                            if (!_fin) // && Album.NbModif == 0)
                            {

                                //***************** Lancement "pour de faux" ***************************************
                                AutoBuilder.Init3();
                                chrono.bip("AutoBuilder.Init3()");
                                LimitItemLoader.ModeSelection = false;
                                phase2(root);
                                Selection(root);
                                chrono.bip("Selection(root) 2");
                                LimitItemLoader.ModeSelection = true;
                                //**********************************************************************************
                            }
                            Exporter.TopCopy();
                            chrono.bip("selection");




                            // Conf.date00Consume();
                            TrackInfoItunes.setDate0(Conf.Date0);

                            int iii = 0;
                            while (!BackGroundTaskMgr.ConfirmEnd(10))
                            {
                                iii++;
                                if (iii == 60)
                                    iii = 0;
                                if (iii == 0)
                                {
                                    log.log("Attente Classement");
                                }
                                Thread.Sleep(100);
                            }






                            if (_fin || Album.NbModif > 0)
                            {
                                log.log("{0} éléments ont la Pub2 modifiée", Album.NbModif);
                                SyncDb(list, true);
                                //foreach (TrackInfoItunes t in list)
                                //{
                                //    var tdb = db.get(t);
                                //    if (tdb == null)
                                //    {
                                //        log.log("impossible de trouver le track db correspondant à {0} {1} {2}", t.DbId, t.Location, t);
                                //        continue;
                                //    }
                                //    tdb.synch(t);

                                //}

                                db.writeAsync();

                                if (_fin)
                                {
                                    log.log("fin");
                                    return;
                                }
                                // continue;
                            }




                            foreach (TrackInfoItunes s in feeds.getSelectedTracks())
                            {
                                var items = s.Providers;
                                int count = items.Count;
                                foreach (LimitItem item in items)
                                {
                                    item.recordTrackMoy(s, count);
                                    //if (count == 1)
                                    //    s.Exclu = item;
                                }
                            }
                            chrono.bip("selection exclu");

                            if (Conf.GenFeed)
                            {
                                foreach (RootItItem rootItem in Conf.RootIt)
                                {
                                    var fAuto = loader.TreePlayList.getComposite(rootItem.name);
                                    var fFeeds = fAuto.getComposite("Feed");

                                    if (fFeeds != null)
                                    {
                                        scanFeedsForRecordEmptyLists(feeds, fFeeds);
                                    }

                                }
                            }


                            //****************************************
                            // lancement des sorties xml et html en asynchrone
                            postReport(root, false);
                            //****************************************



                            //mem0.load();
                            //var listSe = feeds.getSelectedTracks(); 
                            //if (mem0.FileExists)
                            //{
                            //    foreach (TrackInfoItunes s in listSe)
                            //    {
                            //        var key = s.Location;
                            //        if (!mem0.dict.ContainsKey(key))
                            //            log.log("delta virtuel ajouté {0} ==> {1}", s, s.GetProvider());
                            //    }

                            //    foreach (string key in mem0.dict.Keys)
                            //    {
                            //        if (!feeds.existSelected(key))
                            //            log.log("delta virtuel supprimé {0}",mem0.dict[key]);
                            //    }
                            //}
                            //mem0.save(listSe); 

                            //  AutoBuilder.Log();
                            AutoBuilder.init(false);
                            chrono.bip("AutoBuilder.init(false)");
                            bool cangoAuto = AutoBuilder.Check(feeds);

                            chrono.bip("AutoBuilder");
                            AutoBuilder.Log();
                            if (!cangoAuto && Conf.AutoBlock)
                            {
                                logAuto.log("arret par auto");
                                //Thread.Sleep(1000);
                                continue;
                            }
                            else
                            {
                                string newEmpreinte = Conf.DirConf.getEmpreinte();
                                if (newEmpreinte == _empreinte && !AutoBuilder.Stable)
                                {
                                    logAuto.log("arret par empreinte");
                                    continue;
                                }

                                _empreinte = newEmpreinte;

                                Logger.LogAll("****************************************************************************************");
                                Logger.LogAll("arret");
                                Logger.LogAll("****************************************************************************************");

                                postReport(root, true);

                                // BackGroundTaskMgr.End();

                                Logger.Pre = "";

                                //   log.log(sb.ToString());
                                var sb2 = DescBuilder.create();

                                if (Conf.Simulation)
                                {
                                    Logger.LogAll("****************************************************************************************");
                                    Logger.LogAll("TEST");
                                    Logger.LogAll("****************************************************************************************");
                                }

                                var feedsRapport = new StringBuilder();
                                feeds.rapport(feedsRapport);
                                Logger.LogConsole = false;
                                log.log(feedsRapport.ToString());
                                Logger.LogConsole = true;
                                var tw = new StringBuilder();
                                //using (pdb.util.TextWriter tw = new util.TextWriter(File.OpenWrite(@"..\Logs\history.txt")))
                                //{
                                feeds.rapportSelected(tw);
                                asyncFw.post(@"..\Logs\history.txt", tw.ToString());
                                // }

                                //using (pdb.util.TextWriter tw = new util.TextWriter(File.OpenWrite(@"..\Logs\historyPre.txt")))
                                //{
                                //  tw = new StringBuilder();
                                //feeds.rapportPreSelected(tw);
                                //asyncFw.post(@"..\Logs\historyPre.txt", tw.ToString());
                                //}

                                // rapport détaillé
                                LimitItem.includeDetail = true;
                                Conf.DirConf.rapport(sb2);
                                Logger.LogConsole = false;
                                log.log(sb2.ToString());
                                Logger.LogConsole = true;


                                // rapport plus concis
                                var sb3 = DescBuilder.create();
                                LimitItem.includeDetail = false;
                                Conf.DirConf.rapport(sb3);
                                Logger.LogConsole = false;
                                log.log(sb3.ToString());
                                Logger.LogConsole = true;
                                chrono.bip("rapport", true);
                                break;
                            }
                        }

                        //mem1.load();

                        //if (mem1.FileExists)
                        //{
                        //    foreach (TrackInfoItunes s in listSe)
                        //    {
                        //        var key = s.Location;
                        //        if (!mem1.dict.ContainsKey(key))
                        //            log.log("delta reel ajouté {0} ==> {1}", s, s.GetProvider());
                        //    }

                        //    foreach (string key in mem1.dict.Keys)
                        //    {
                        //        if (!feeds.existSelected(key))
                        //            log.log("delta reel supprimé {0}", mem1.dict[key]);
                        //    }
                        //}
                        //mem1.save(listSe); 

                        SyncDb(list, true);
                        db.writeAsync();


                        Logger.CreateNullLoggers = false;


                        lists = null;
                        WritePlayList(root);




                        // Sélection du dernier podcast de chaque album
                        if (!Conf.Single)
                        {
                            var feeds = root.Feeds;
                            int prior = 2;
                            var listP = Conf.SelectParams;

                            var listS = new List<TrackInfoItunes>();
                            string[] folder = null;

                            Dictionary<string, Dictionary<int, TrackInfoItunes>> depots = new Dictionary<string, Dictionary<int, TrackInfoItunes>>();
                            foreach (SelectParam p in listP)
                            {

                                listS = new List<TrackInfoItunes>();
                                if (!string.IsNullOrEmpty(p.name))
                                {
                                    // Compatibilité anciennes listes
                                    folder = new string[] { "select", "tmp", p.name };
                                    feeds.buildFirstSelectedTrackLevel(listS, p);  //true, true, false, false);
                                    buildList("_" + p.level, listS, prior, folder);
                                }
                                else
                                {

                                    var pp = p.Clone() as SelectParam;
                                    feeds.buildFirstSelectedTrackLevel(listS, p);

                                    var l = new List<TrackInfoItunes>();

                                    pp.nb = int.MaxValue;
                                    var selector = new TrackSelector(pp);
                                    foreach (TrackInfoItunes t in listS)
                                    {
                                        if (selector.select(t))
                                            l.Add(t);
                                    }

                                    string path = p.path;
                                    if (!string.IsNullOrWhiteSpace(path))
                                        buildList(path, l, prior);

                                    string[] _depots = p.depot;
                                    if (_depots != null)
                                    {
                                        foreach (string depot in _depots)
                                        {
                                            if (!depots.ContainsKey(depot))
                                                depots.Add(depot, new Dictionary<int, TrackInfoItunes>());

                                            var dep = depots[depot];
                                            foreach (TrackInfoItunes t in l)
                                            {
                                                if (!dep.ContainsKey(t.DbId))
                                                    dep.Add(t.DbId, t);
                                            }
                                        }
                                    }
                                }
                            }

                            foreach (KeyValuePair<string, Dictionary<int, TrackInfoItunes>> kvp in depots)
                            {
                                string path = kvp.Key;

                                var l = new List<TrackInfoItunes>(kvp.Value.Values);
                                l.Sort(new PodcastComparerPubPub2());
                                buildList(path, l, prior);
                            }

                        }

                        var journal = Conf.Journal;
                        if (journal != null)
                        {
                            var feeds = root.Feeds;
                            for (int j = 1; j <= Journal.NB_JOUR_MAX; j++)
                            {
                                List<TrackInfoItunes> listJ = null;
                                if (journal.NbJour >= j)
                                {
                                    listJ = feeds.buildJournal(journal);
                                }
                                else
                                    listJ = new List<TrackInfoItunes>();

                                var name = j.ToString();
                                if (j < 10)
                                    name = "0" + name;
                                buildList(name, listJ, 3, "journal");

                            }
                        }

                        if (Conf.GenFeed)
                        {
                            var feeds = root.Feeds;
                            var prior = Conf.GenFeedPrior;
                            foreach (Feed feed in feeds.List)
                            {
                                var list0 = feed.getSelectedTracks;
                                buildList(feed.Name, list0, prior, "Feed");
                            }
                        }

                        string zique = Conf.Move.Zique;



                        BackGroundTaskMgr trackMgr = BackGroundTaskMgr.getMgr("Track", 12);
                        var trackList = BackGroundTaskMgr.getMgr("TrackList", 0);

                        var listSelected = root.Feeds.getSelectedTracks();

                        var sorterafter = new Sorter(Conf.Sort, list);
                        //    sorter.build();

                        foreach (TrackInfoItunes s in listSelected)
                        {
                            s.updateNative();
                        }






                        //if (Conf.Hibernate.enabled)
                        //{
                        //    Hibernator hibernator = new Hibernator();
                        //    var nb = hibernator.go(loader); 
                        //    if (nb >0)
                        //    {
                        //        misc.log("{0} elements hibernés", nb);
                        //        misc.log("fin ");
                        //        return; 
                        //    }

                        //}


                        int ii = 0;
                        while (!BackGroundTaskMgr.ConfirmEnd(10))
                        {
                            ii++;
                            if (ii == 60)
                                ii = 0;
                            if (ii == 0)
                            {
                                log.log("Attente Classement");
                            }
                            Thread.Sleep(100);
                        }



                        //if (Conf.Sort.enabled >= Tuning.Sort.sortMode.once_all)
                        //{
                        //    var sorter = new Sorter(Conf.Sort, list);
                        //    sorter.build();
                        //}

                        int nbH = 0;
                        _fin = false;
                        if (Conf.Hibernate.enabled)
                        {
                            nbH = hibernator.go(loader, list);
                            if (nbH > 0)
                            {
                                log.log("{0} elements hibernés", nbH);
                                _fin = true;
                            }
                        }

                        if (loader.NbTrackCreated > 0)
                        {
                            log.log("{0} éléments ont été recréés", loader.NbTrackCreated);
                            _fin = true;
                        }

                        if (Album.NbRepeches > 0)
                        {
                            log.log("{0} éléments ne sont plus protégés par Pub2", Album.NbRepeches);
                            _fin = true;
                        }



                        if (Conf.UseMock)
                            _fin = true;



                        if (_fin)
                        {


                            log.log("fin");

                            return;
                        }





                        // BackGroundTaskMgr.End();


                        misc.Pre = "[ OK " + step + "] ";
                        Logger.LogAll("*****************************************************************************************************");
                        Logger.LogAll("Pile Classement finie, attente nouvelle version");
                        Logger.LogAll("*****************************************************************************************************");



                        Logger.LogAll("****************************************************************************************");
                        Logger.LogAll("arret 2");
                        Logger.LogAll("****************************************************************************************");

                        DateTime limit = DateTime.Now.AddDays(-Conf.Move.Delta);

                        if (!string.IsNullOrEmpty(zique))
                        {
                            foreach (TrackInfoItunes track in db.Tracks)
                            {
                                track.move(ziqueOrg, zique, limit);
                            }
                            return;
                        }
                        if (!Conf.Simulation)
                        {

                            Logger.Pre = "[ OK " + step + "] ";
                            Logger.LogAll("*****************************************************************************************************");
                            Logger.LogAll("attente nouvelle version");
                            Logger.LogAll("*****************************************************************************************************");
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.LogAll(ex.ToString());
                        misc.log(ex.ToString());
                        log.log(ex.ToString());
                        Thread.Sleep(1000);
                    }


                }
                while (true);




#endif

                //while (!BackGroundTaskMgr.Finished)
                //    Thread.Sleep(30);
                //log.log("****************************************************************************************");
                //loader.SynchronizePodcast(); 
                //log.log("fin");
                //log.log("****************************************************************************************");
            }

            catch (Exception ex)
            {
                log.log(ex.ToString());
            }


        }

        #region report asynchrone

        //private DirConf _attenteWriteHtml;
        // private volatile object _lockReportHtml = new object();
        private bool _end;
        // ThreadUtil thReport;
        DateTime lastReport;

        private void postReport(DirConf dir, bool force)
        {
            if (force || lastReport.AddSeconds(10) < DateTime.Now)
            {
                try
                {
                    reportHtml(dir);
                }
                catch (Exception ex)
                {
                    misc.log(ex);
                }
                lastReport = DateTime.Now;
            }
            //if (thReport == null)
            //{
            //    lock (_lockReportHtml)
            //    {
            //        if (thReport == null)
            //        {
            //            thReport = new ThreadUtil(loopReportHtml, "ReportHtml");
            //            thReport.Start();
            //        }
            //    }
            //}

            //lock (_lockReportHtml)
            //    _attenteWriteHtml = dir;
        }

        //private void loopReportHtml()
        //{
        //    DirConf traite = null;
        //    while (!_end)
        //    {
        //        Thread.Sleep(1000);
        //        if (_attenteWriteHtml == null)
        //            continue;
        //        lock (_lockReportHtml)
        //        {
        //            if (_attenteWriteHtml == null)
        //                continue;
        //            traite = _attenteWriteHtml;
        //            _attenteWriteHtml = null;
        //        }
        //        reportHtml(traite);
        //    }
        //}


        private void reportHtml(DirConf root)
        {
            try
            {

                var settings = new XmlWriterSettings();
                settings.Indent = true;
                settings.Encoding = System.Text.Encoding.UTF8;
                var _sb = new System.Text.StringBuilder();
                using (writer = XmlWriter.Create(_sb, settings))
                {
                    LimitsLoader.Writer = new WriterXml(writer);
                    DoubleStat.ModeHtml = false;
                    writer.WriteStartElement("tracks");
                    WriteTracks(root);
                    writer.WriteEndDocument();
                    writer.Flush();
                }

                asyncFw.post(@"..\tracks.xml", _sb.ToString());
                //   chrono.bip("xml");

                string html = @"..\tracks.html";
                //if (File.Exists(html))
                //    File.Delete(html);
                var sbHtml = new StringBuilder();
                //using (pdb.util.TextWriter sbHtml = new pdb.util.TextWriter(new StreamWriter(File.OpenWrite(html), System.Text.Encoding.UTF8)))
                //{
                LimitsLoader.Writer = new WriterHtml(sbHtml);
                DoubleStat.ModeHtml = true;
                sbHtml.Append(@"<!DOCTYPE html>
<html>
<head>
	<title>"
+ Environment.CurrentDirectory + @"</title>
	
	<style type='text/css'>
		body{
			margin:10px 30px;
			font-family:verdana;
			font-size:12px;
		}
		h1{
			font-family:verdana;
			font-size:14px;
			font-weight:bold;
			text-decoration:underline;
		}
        .low {
			color: rgb(0,125,255);
		}

        .med {
			font-weight:bold;
			color: rgb(0,140,0);
		}

        .high {
			font-weight:bold;
			font-size:14px;
			color: rgb(240,155,0);
		}
        
		.big {
			font-weight:bold;
			font-size:14px;
			text-decoration:underline;
			color: rgb(255,32,0);
		}

        .album {
			color: rgb(0,125,255);
		}
        .track {
            font-weight:bold;
			color: rgb(0,40,80);
		}
		div.tree div {
			padding-left:16px;
		}
		div.tree div.parent div {
			 display:none;
			 cursor:default;
		}
		div.tree div.parent {
			 cursor:pointer !important;
			 background:transparent url(plus.gif) no-repeat top left;
		}
		div.tree div.expanded {
			background:transparent url(moins.gif) no-repeat top left;
		}
	</style>
	<link rel='stylesheet' type='text/css' href='treeview.css' media='screen' /> 
	<script type='text/javascript' src='jquery.js'></script>
	<script type='text/javascript'>
	$(function() {
		$('div.tree div:has(div)').addClass('parent');
		$('div.tree div').click(function() {
			var o = $(this);
			o.children('div').toggle();
			o.filter('.parent').toggleClass('expanded');
			return false;
		});
	});
	</script>
</head>
<body>");
                WriteTracks(root);
                sbHtml.Append(@"</body>
</html>");

                sbHtml.Flush();

                //}
                asyncFw.post(html, sbHtml.ToString());
                //  chrono.bip("html");
            }
            catch (Exception ex)
            {
                log.log(ex.ToString());
            }
        }

        #endregion


        public static void buildList(string name, List<TrackInfoItunes> list_, List<string> folders)
        {
            buildList(name, list_, int.MaxValue, folders, false);
        }

        public static void buildListPrior(string name, List<TrackInfoItunes> list_, List<string> folders, int prior)
        {
            buildList(name, list_, prior, folders, false);
        }


        /// <summary>
        /// création ou mise à jour d'une liste
        /// </summary>
        /// <param name="name"></param>
        /// <param name="list_"></param>
        /// <param name="folders"></param>
        public static void buildList(string name, List<TrackInfoItunes> list_, int prior, params string[] folders)
        {
            var lfolders = new List<string>(folders);
            buildList(name, list_, prior, lfolders, false);
        }

        public static void buildList(string path, List<TrackInfoItunes> list_, int prior)
        {
            bool absolutePath = path.StartsWith(@"\");
            var tab = path.Split('\\');
            int count = tab.GetLength(0);
            var folder = new List<string>();

            foreach (string s in tab)
            {
                if (!string.IsNullOrWhiteSpace(s))
                    folder.Add(s);
            }

            buildList(list_, prior, folder, absolutePath);
        }



        public static void buildList(List<TrackInfoItunes> list_, int prior, List<string> folders, bool absolutePath)
        {
            var newf = new List<string>(folders);
            int count = newf.Count;

            string name = newf[count - 1];
            newf.RemoveAt(count - 1);
            buildList(name, list_, prior, newf, absolutePath);
        }

        /// <summary>
        /// création ou mise à jour d'une liste
        /// </summary>
        /// <param name="name"></param>
        /// <param name="list_"></param>
        /// <param name="folders"></param>
        public static void buildList(string name, List<TrackInfoItunes> list_, int prior, List<string> folders, bool absolutePath)
        {
            try
            {
                if (Conf.Simulation)
                    return;
                if (Conf.UseMock)
                {
                    var sb = new StringBuilder();
                    foreach (string f in folders)
                    {
                        sb.Append(f); sb.Append(@"\");
                    }
                    sb.Append(name);
                    log.logNoDate("---------------------------");
                    log.log("liste {0}", sb.ToString());
                    if (list_ != null)
                    {
                        foreach (TrackInfoItunes t in list_)
                        {
                            log.logNoDate(t.ToString());
                        }
                    }
                    return;
                }

                if (list_ != null)
                {
                    foreach (TrackInfoItunes track in list_)
                    {
                        loader.reviveIfNecessary(track);
                    }
                }



                var rootIt = Conf.RootIt;
                RootItItem currentRoot = rootIt.roots[0];
                int count = rootIt.roots.Count;

                if (list_ != null)
                {
                    //   log.log("build list {0}",name);
                    //  var list = new List<IFile>(list_);
                    if (lists == null)
                    {
                        lists = new List<HashSet<int>>();
                        foreach (var item in rootIt.roots)
                        {
                            lists.Add(new HashSet<int>());
                        }
                        var list__ = new List<TrackInfoItunes>(list_);
                        list__.Sort(new PodcastComparerPubPub2());



                        int countTrack = list_.Count;

                        long size = 0;
                        int j = 0;
                        int indexRoot = 0;

                        //    HashSet<int> current = lists[0]; 

                        while (true)
                        {
                            if (j >= countTrack)
                                break;
                            TrackInfoItunes track = list__[j];
                            size += track.Size;
                            if (size <= currentRoot.size)
                            {
                                lists[indexRoot].Add(track.DbId);
                                // track.IndexRoot = indexRoot;
                            }
                            else
                            {

                                size = 0;
                                //  size += track.Size;
                                indexRoot++;
                                if (indexRoot >= count)
                                    break;
                                currentRoot = rootIt.roots[indexRoot];
                                continue;
                            }
                            j++;
                        }

                    }
                }


                for (int r = 0; r < count; r++)
                {
                    currentRoot = rootIt.roots[r];
                    folders = new List<string>(folders);
                    PlayListComposite folder = null;

                    if (absolutePath)
                    {
                        if (r > 0)
                            throw new Exception("un chemin absolu ne peut pas être géré dans une partition");
                        // folders[0] = folders[0].Substring(1);
                        folder = loader.TreePlayList;

                    }
                    else
                        folder = loader.TreePlayList.getComposite(currentRoot.name);
                    if (folder == null)
                        folder = loader.getOrCreateFolder(currentRoot.name);


                    var nname = name;
                    if (name.Contains(Path.DirectorySeparatorChar.ToString()))
                    {
                        var tab = name.Split(Path.DirectorySeparatorChar);
                        string str = null;
                        for (int i = 0; i < tab.GetLength(0); i++)
                        {
                            if (str != null)
                                folders.Add(str);
                            if (!string.IsNullOrEmpty(tab[i]))
                                str = tab[i];
                        }
                        if (!string.IsNullOrEmpty(str))
                            nname = str;
                    }
                    List<IFile> l = null;

                    if (list_ != null)
                    {
                        l = new List<IFile>();
                        foreach (TrackInfoItunes t in list_)
                        {
                            if (lists[r].Contains(t.DbId))
                                l.Add(t);
                        }
                    }


                    for (int i = 0; i < folders.Count; i++)
                    {
                        var aux = folder;
                        folder = folder.getComposite(folders[i]);
                        if (folder == null)
                            folder = loader.getOrCreateFolder(aux, folders[i], l == null ? true : l.Count > 0);
                        if (folder == null)
                            return;
                    }

                    //  var folder = loader.root.getComposite("auto").getComposite("PODUtil"); 
                    var playlist = loader.getPlayList(folder, nname, l == null ? true : l.Count > 0);
                    if (playlist != null)
                    {
                        if (prior < int.MaxValue && prior >= 0)
                            playlist.setPrior(prior);
                        //if (list.Count > 0)


                        playlist.mergeList(l, _instance, Conf.OnlyEnabled, Conf.OnlyUnRead);
                        //  loader.mergeList(playlist, l, false, _instance, null);
                        //else
                        //    loader.removeList(folder, name);
                    }



                    //log.log("clear list {0}", name); 
                    //loader.ClearList(playlist);
                    //log.log("add items {0}", name); 
                    //foreach (TrackInfoItunes track in list)
                    //    loader.addItemToList(playlist, track); 

                }
            }
            catch (Exception ex)
            {
                misc.log(ex.ToString());
            }


        }

        /// <summary>
        /// création ou mise à jour d'une liste
        /// </summary>
        /// <param name="name"></param>
        /// <param name="list_"></param>
        /// <param name="folders"></param>
        public static void buildGlobalList(string path, List<TrackInfoItunes> list_, int prior)
        {
            PlayListComposite folder = null;
            List<string> folders = new List<string>();
            string nname = "";
            if (Conf.UseMock)
                return;
            try
            {

                var tab = path.Split(Path.DirectorySeparatorChar);
                string str = null;
                for (int i = 0; i < tab.GetLength(0); i++)
                {
                    if (str != null)
                        folders.Add(str);
                    if (!string.IsNullOrEmpty(tab[i]))
                        str = tab[i];
                }
                if (!string.IsNullOrEmpty(str))
                    nname = str;

                folder = loader.TreePlayList;





                var l = new List<IFile>();
                foreach (TrackInfoItunes t in list_)
                {
                    if (t.Present)
                        l.Add(t);
                }

                for (int i = 0; i < folders.Count; i++)
                {
                    var aux = folder;
                    folder = folder.getComposite(folders[i]);
                    if (folder == null)
                        folder = loader.getOrCreateFolder(aux, folders[i], l.Count > 0);
                    if (folder == null)
                        return;
                }


                var playlist = loader.getPlayList(folder, nname, l.Count > 0);
                if (playlist != null)
                {
                    if (prior < int.MaxValue && prior >= 0)
                        playlist.setPrior(prior);


                    playlist.mergeList(l, _instance, false, false);

                }



            }

            catch (Exception ex)
            {
                misc.log(ex.ToString());
            }




        }

        delegate void actionList(DirConf dir);
        private void recursif(DirConf dir, action pre, action post)
        {
            var fLoader = dir.Loader;
            DateTime now = DateTime.Now;

            fLoader.Action(pre);
            var ts = (DateTime.Now - now).TotalMilliseconds;
            if (ts > 1 && Conf.LogDir && pre > action.none && pre < action.writeTracksPre)
            {
                log.log("{0} {1} {2} ms", pre, dir.getPath(), ts.ToString("0"));
            }

            //Construction récursive sur l'arbre
            foreach (DirConf child in dir)
            {
                // DescBuilder sub = sb.createChild(child.getPath());
                recursif(child, pre, post);
            }
            //if (post > action.none && post < action.writeTracksPre)
            //    log.log("{0} {1}", post, dir.getPath());

            now = DateTime.Now; ts = (DateTime.Now - now).TotalMilliseconds;
            fLoader.Action(post);

            if (ts > 1 && Conf.LogDir && post > action.none && post < action.writeTracksPre)
            {
                log.log("{0} {1} {2} ms", post, dir.getPath(), (DateTime.Now - now).TotalMilliseconds.ToString("0"));
            }


        }

        private void loadCandidat(DirConf dir)
        {
            recursif(dir, action.loadCandidat, action.none);
        }

        private void resetLoad(DirConf dir)
        {
            recursif(dir, action.resort, action.none);
        }


        //private void standAlone(DirConf dir)
        //{
        //    recursif(dir, action.standAlone, action.none); 
        //}

        private void phase2(DirConf dir)
        {
            recursif(dir, action.none, action.phase2);
        }



        /// <summary>
        /// Constitution d'un répertoire
        /// </summary>
        /// <param name="dir"></param>
        /// <param name="sb"></param>
        private void Selection(DirConf dir)
        {
            recursif(dir, action.selectionPre, action.selectionPost);

            // ne sert pas
            //dir.TransmissionListToParent();

        }

        private void Freewheel(DirConf dir)
        {
            dir.Loader.LimitsLoader.Freewheel();
        }

        private void WritePlayList(DirConf dir)
        {
            recursif(dir, action.writeLists, action.none);
            List<TrackInfoItunes> list = null;
            //  var list = db.Tracks.FindAll(t => t.Present);
            //var list = db.Tracks.FindAll(t => t.isConcernedBySelection); 
            if (Conf.UseMock)
                list = db.Tracks.FindAll(t => t.isConcernedBySelection);
            else
                list = db.Tracks.FindAll(t => t.Present && t.isConcernedBySelection);
            foreach (SelectParamBase listeGlobal in Conf.GlobalListes)
            {
                var selector = new TrackSelector(listeGlobal);
                var l = new List<TrackInfoItunes>();
                foreach (TrackInfoItunes t in list)
                {
                    if (selector.select(t))
                        l.Add(t);
                }

                buildGlobalList(listeGlobal.path, l, 2);

            }

            foreach (Note note in Conf.Notes)
            {
                var builder = new NoteBuilder(note);
                builder.build(list);
                foreach (ListNote listNote in builder.Depot)
                {
                    var path = string.Format(note.path, listNote.Note);
                    var _l = listNote.List;
                    _l.Sort(new PodCastComparer());
                    buildGlobalList(path, _l, 2);

                    if (!string.IsNullOrEmpty(note.single))
                    {
                        var pathSingle = string.Format(note.single, listNote.Note);
                        var hs = new HashSet<string>();
                        var ls = new List<TrackInfoItunes>();
                        foreach (TrackInfoItunes t in _l)
                        {
                            if (!t.Selected)
                                continue;
                            if (!hs.Add(t.AlbumKey))
                                continue;
                            ls.Add(t);
                        }
                        buildGlobalList(pathSingle, ls, 2);
                    }
                }
                // Sélection d'un unique item (preise encompte des niveaux précédents)
                if (!string.IsNullOrEmpty(note.unique))
                {
                    //Dictionnaire global
                    var hsGlobal = new HashSet<string>();
                    var depot = new List<ListNote>(builder.Depot);
                    int count = depot.Count;
                    for (int i = count - 1; i >= 0; i--)
                    {
                        ListNote listNote = depot[i];
                        var _l = listNote.List;
                        _l.Sort(new PodCastComparer());
                        var ls = new List<TrackInfoItunes>();
                        var hs = new HashSet<string>();
                        var pathUnique = string.Format(note.unique, listNote.Note);
                        foreach (TrackInfoItunes t in _l)
                        {
                            if (!t.Selected)
                                continue;
                            if (!hs.Add(t.AlbumKey))
                                continue;
                            if (t.Pub.Date <= ContexteBuilder.Instance.Debut)
                            {
                                if (!hsGlobal.Add(t.AlbumKey))
                                    continue;
                            }

                            ls.Add(t);
                        }

                        buildGlobalList(pathUnique, ls, 2);
                    }
                }

            }

            var contextB = ContexteBuilder.Instance;

            if (contextB.Enabled)
            {

                var selected = dir.getListe();
                selected.Sort(new PodCastComparer());

                //   contextB.init(selected); 
                var listContext = new List<TrackInfoItunes>();
                contextB.buildList(selected, listContext);

                buildList("_contexte", listContext, 2);
            }



        }

        private void WriteTracks(DirConf dir)
        {
            recursif(dir, action.writeTracksPre, action.writeTracksPost);
        }
#if build
        public void scanFiles(List<TrackInfoItunes> list, DirectoryInfo dir, ref int nbIntegre, ref int nbSuppr)
        {
            string album = dir.Name;
            var files = dir.GetFiles();
            if (files.GetLength(0) > 0)
            {
                foreach (FileInfo file in dir.GetFiles())
                {
                    string location = file.FullName.ToLower();
                    var trackByLocation = list.Find(t => t.Location != null && t.Location.ToLower().Equals(location));

                    if (trackByLocation != null)
                        continue;
                    var filePub = new FilePub(file.FullName);
                    new PubLoader(filePub).setPub();

                    TrackInfoItunes track = null;

                    foreach (TrackInfoItunes t in list)
                    {
                        if (album.Equals(t.Album))
                        {
                            if (filePub.Pub.Date == t.Pub.Date)
                            {
                                track = t;
                                break;
                            }
                        }
                    }
                    //  var track = list.Find(t => album.Equals(t) && filePub.Pub.Date.Equals(t.Pub.Date));
                    if (track == null)
                    {
                       
                        log.log("création Track à partir de " + file.FullName);
                        track = loader.createTrack(file.FullName) as TrackInfoItunes;

                        if (track == null)
                            continue;

                        // verif pub; 
                        TrackInfoItunes track2Verif = null;

                        if (track.Pub > TrackInfoItunes.MIN)
                        {
                            foreach (TrackInfoItunes t in list)
                            {
                                if (album.Equals(t.Album))
                                {
                                    if (track.Pub.Date == t.Pub.Date)
                                    {
                                        track2Verif = t;
                                        break;
                                    }
                                }
                            }
                        }

                        if (track2Verif != null)
                        {
                            log.log("Track créé {0} {1} {2} {3} MAIS doublon avec  {4} {5} {7} {8} {9} intégrés {10} supprimés", track.Name, track.Album, track.Pub, track.Location, 
                                track2Verif.Name, track2Verif.Album, track2Verif.Pub, track2Verif.Location, nbIntegre, nbSuppr);
                            track2Verif.Delete();
                            file.moveTree(file.FullName.ToLower().Replace(@"c:\zique\podcasts", @"C:\zique\poubelle"), false);
                            nbSuppr++;
                            continue; 

                        }
                        log.log("Track créé {0} {1} {2} {3} {4} intégrés {5} supprimés", track.Name, track.Album, track.Pub, track.Location,nbIntegre,nbSuppr );
                        nbIntegre++;
                        list.Add(track);
                    }
                    else
                    {
                        if (track.Pub.DayOfYear > 1)
                        {
                            nbSuppr++;
                            log.log("suppression du track sur {0} en doublon avec {1} {2} {3} {4} {5} int�gr�s {6} supprim�s", file.FullName, track.Name, track.Album, track.Pub, track.Location, nbIntegre, nbSuppr);
                            file.moveTree(file.FullName.ToLower().Replace(@"c:\zique\podcasts", @"C:\zique\poubelle"), false);
                        }
                    }

                }
                log.log("fin scan {0}: {1} intégrés, {2} supprimmés", album, nbIntegre, nbSuppr);
            }

            foreach (DirectoryInfo subDir in dir.GetDirectories())
            {
                scanFiles(list, subDir, ref nbIntegre, ref nbSuppr);
            }
        }
#endif

#if menage

        private void listFiles(Dict<string, FileInfo> dict, DirectoryInfo dir)
        {
           
            foreach (FileInfo file in dir.GetFiles())
            {
                dict[file.FullName] = file;
            }

            foreach (DirectoryInfo subDir in dir.GetDirectories())
            {
                listFiles(dict, subDir);
            }
        }
#endif

        /// <summary>
        /// A checkquer
        /// </summary>
        /// <param name="feeds"></param>
        /// <param name="current"></param>
        private void scanFeedsForRecordEmptyLists(Feeds feeds, PlayListComposite current)
        {
            foreach (PlComponent pl in current)
            {
                var plC = pl as PlayListComposite;
                if (plC == null)
                {
                    // log.log("{0} {1} pas un PlayListComposite", pl, pl.GetType());
                    continue;
                }

                if (plC.LeafsCount > 0)
                {
                    string album = plC.Name;
                    feeds.check(album);
                }

                scanFeedsForRecordEmptyLists(feeds, plC);

            }
        }




        #region IAbortTask Members

        public bool Aborted
        {
            get
            {
                return false;
            }
            set
            {

            }
        }

        #endregion


        private class Vendee
        {
            //  "Emission du 02/11/2008"
            private static Regex regex1 = new Regex(@".*(\d\d\/\d\d\/\d\d\d\d).*");
            private static Regex regex2 = new Regex(@".*(\d\d\/\d\d\/\d\d).*");
            private static Regex regex3 = new Regex(@".*(\d\d\/\d\d).*");
            private enum vendeeType
            {
                none,
                vacation,
                hebdo,
                chronique,
                ponton

            }
            public void go(ArrayList list)
            {
                var listV = new ArrayList();
                string VENDEE = "vendee ";
                foreach (IITFileOrCDTrack t in list)
                {
                    if (t.Album.Contains("Vendée Globe") || t.Album.Contains(VENDEE))
                        listV.Add(t);
                }

                // listTrack.FindAll(t => t.Album.Contains("Vendee Globe"));



                foreach (IITFileOrCDTrack track in listV)
                {
                    string name = track.Name.ToLower();
                    vendeeType _type = vendeeType.none;
                    foreach (vendeeType type in Enum.GetValues(typeof(vendeeType)))
                    {
                        if (name.Contains(type.ToString()))
                        {
                            track.Album = VENDEE + type.ToString();
                            _type = type;
                            break;
                        }
                    }

                    DateTime? dt = null;
                    dt = getDate(track.Name);

                    if (!dt.HasValue)
                        dt = getDate(track.Description);

                    if (!dt.HasValue)
                        dt = getDate(track.LongDescription);

                    if (dt.HasValue)
                    {
                        string _comment = dt.Value.ToString("yyyy/MM/dd");
                        string plus = "";
                        switch (_type)
                        {
                            case vendeeType.none:
                                break;
                            case vendeeType.vacation:
                            case vendeeType.ponton: plus = " 11:00"; break;
                            case vendeeType.hebdo: plus = " 14:00"; break;
                            case vendeeType.chronique: plus = " 12:00"; break;

                        }
                        track.Grouping = _comment + plus;
                        track.Year = dt.Value.Year;
                    }



                }
            }

            private DateTime? getDate(string input)
            {
                if (string.IsNullOrEmpty(input))
                    return null;
                string[] words = input.Split(' '); int count = words.GetLength(0);

                DateTime? ret = null;
                StringBuilder sb = null;
                int word = 0;
                for (int i = 0; i < count; i++)
                {
                    string w = words[i];
                    if (string.IsNullOrEmpty(w))
                        continue;
                    if (sb == null)
                    {
                        if (w.ToLower().Equals("du"))
                            sb = new StringBuilder();
                    }

                    else
                    {
                        sb.Append(w);
                        sb.Append(" ");
                        word++;

                        try
                        {
                            ret = Convert.ToDateTime(sb.ToString());
                        }
                        catch
                        {
                        }

                        if (ret.HasValue)
                        {
                            int month = ret.Value.Month;
                            int year = 2008;
                            if (month < 6)
                                year = 2009;
                            return new DateTime(year, month, ret.Value.Day);
                        }
                    }
                }
                try
                {
                    DateTime dt = Convert.ToDateTime(sb.ToString());
                    if (dt.Year < 2008 || dt.Year > 2009)
                        dt = new DateTime(2008, dt.Month, dt.Day);
                    return dt;
                }
                catch
                {
                    return null;
                }
                //if (regex1.IsMatch(_input))
                //    return Convert.ToDateTime(regex1.Match(_input).Groups[1].Value); 
                //else if (regex2.IsMatch(_input))
                //    return Convert.ToDateTime(regex2.Match(_input).Groups[1].Value); 
                //else if (regex3.IsMatch(_input))
                //    return Convert.ToDateTime(regex1.Match(_input).Groups[1].Value); 
                //return null; 
            }

            private string getDateString(string input)
            {
                if (string.IsNullOrEmpty(input))
                    return "";
                string[] words = input.Split(' '); int count = words.GetLength(0);


                StringBuilder sb = null;
                for (int i = 0; i < count; i++)
                {
                    string w = words[i];
                    if (string.IsNullOrEmpty(w))
                        continue;
                    if (sb == null)
                    {
                        if (w.ToLower().Equals("du"))
                            sb = new StringBuilder();
                    }

                    else
                    {
                        sb.Append(w);
                        sb.Append(" ");
                    }
                }

                if (sb == null)
                    return input;

                return sb.ToString().Replace(".", "");
            }


        }
    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Sort\Album.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using pdb.podcast.Albums;
using pdb.podcast.Tuning;
using pdb.podcast.Tuning.Sort;
using pdb.util;
using pdb.iit;
using System.Linq;
using System.Linq.Expressions;
using System.Text.RegularExpressions;
namespace pdb.podcast.Sort
{
    class Album
    {
        const string DATE_FORMAT = "dd/MM/yy HH:mm";
        const string DAY_FORMAT = "dd/MM HH:mm";
        const char SEP = '|';
        private TrackAlbum album;
        private SortItem conf;
        private List<TrackSort> list = new List<TrackSort>();
        //  private static HashSet<int> lastReads = new HashSet<int>();
        //   private int indexLastRead = -1;
        timeSpan limit;
        // private static int nbrepeches = 0;
        private static int nbModif = 0;
        private static int nbModifPertinent = 0;
        private static int nbRepecheForce = 0;
        private static DateTime dateRepeche = DateTime.MaxValue; public static DateTime DateRepeche { get { return dateRepeche; } }
        private static List<TrackSort> repeches = new List<TrackSort>();
        public static int NbRepeches { get { return repeches.Count; } }
        public static int NbModif { get { return nbModif; } }
        public static int NbModifPertinent { get { return nbModifPertinent; } }

        private bool done;

        //  bool checkSelected, apply;
        DateTime date0; //, newDate0;
        DateTime date1;
        public static void Init()
        {
            //lastReads.Clear(); 
            //nbrepeches = 0;
            repeches.Clear();
            nbModif = 0; nbModifPertinent = 0;
            nbRepecheForce = 0;
            dateRepeche = DateTime.MaxValue;
        }

        public static void Bilan()
        {
            if (dateRepeche < DateTime.MaxValue)
                log.log("*************Date minimum:" + dateRepeche);
            repeches.Sort((x, y) => x.Pub2.CompareTo(y.Pub2));
            foreach (TrackSort t in repeches)
                log.log(string.Format("date={0} {1}", t.Pub2, t));
        }
        // public static HashSet<int> LastRead { get { return lastReads; } }
        public static Logger log;
        public static Logger logDebug;

        public Album(SortItem conf, TrackAlbum album)
        {
            this.conf = conf;
            this.album = album;
            limit = timeSpan.FromMinutes(conf.dureeMin);

        }

        public override string ToString()
        {
            return album.ToString();
        }

        public void check(TrackInfoItunes track)
        {
            if (track.Duree >= limit)
                list.Add(new TrackSort(track));
        }



        public void init()
        {
            //done = false;
        }

        //public void buildAll()
        //{
        //    if (conf.enabled == sortMode.no)
        //        return;
        //    int count = list.Count;
        //    if (count == 0)
        //        return;

        //    checkSelected = false;
        //    apply = false;

        //    for (int i = 0; i < count; i++)
        //    {
        //        var track = list[i];
        //        var dt = track.Pub2.AddSeconds(1);
        //        date0 = dt;
        //        newDate0 = dt;
        //        build();
        //        if (dt >= Conf.Date0)
        //            break;
        //    }

        //    apply = true;
        //    date0 = Conf.Date0;
        //    newDate0 = Conf.NewDate0;
        //    // writeComment(track, track.Pub2, false, true, Conf.Date0, Conf.NewDate0);

        //    for (int i = 0; i < count; i++)
        //    {
        //        var track = list[i];
        //        writeComment(track, track.Pub2);
        //    }
        //}

        private void build0()
        {
            int count = list.Count;
            if (count == 0)
                return;



            TrackSort.Date0 = date0;
            int indexLastRead = -1;
            TrackSort lastRead = null;
            int indexNextSelected = -1;
            DateTime lastPlayed = DateTime.MinValue;
            TrackSort next = null;
            //  TrackSort reallyLastRead = null;
            DateTime currentPub = DateTime.MinValue;
            DateTime currentPub2 = DateTime.MinValue;
            for (int i = 0; i < count; i++)
            {
                var track = list[i];
                //if (conf.extPente > 0)
                //{
                //    if (!track.Played && track.Pub == track.Pub2)
                //        track.Pub2 = Conf.Date0; 
                //}

                if (track.Pub > currentPub && track.Pub2 <= currentPub2)
                {
                    if (track.Pub2 < track.Pub)
                        track.Pub2 = track.Pub;
                    if (track.Pub > currentPub && track.Pub2 <= currentPub2)
                    {
                        var aux = currentPub2.AddMinutes(1);
                        log.log("correction pub2 pour respect ordre {0} -> {1} {2}", track.Pub2, aux, track);
                        track.Pub2 = aux;
                    }
                }

                currentPub = track.Pub;
                currentPub2 = track.Pub2;
            }
            for (int i = 0; i < count; i++)
            {
                var track = list[i];
                if (track.Played) // && track.PlayedDate > lastPlayed)
                {
                    //// ok mais quid du cas au fil de l'histoire : date dans le futur
                    //if (track.Pub2 <= date0 || conf.extPente > 0)
                    //{
                    if (next == null)
                    {
                        indexLastRead = i;
                        lastPlayed = track.PlayedDate;
                        lastRead = track;
                    }
                    else
                        break;
                    //}
                }

                else
                {
                    if (next == null)
                    {
                        if (track.Selected || track.Pub2 >= date0)
                        {
                            next = track;
                            indexNextSelected = i;
                        }
                    }
                    else
                        break;
                }
            }


            if (indexLastRead < 0)
                return;
            if (next == null)
                return;
            var rare = album.Rare;
            var intervalleMin0 = conf.getIntervalleMin0(rare);
            var intervalle = conf.getIntervalle(rare, lastRead.DureeEnHeure, intervalleMin0);
            var intervalleMin = conf.getIntervalleMin(rare, lastRead.DureeEnHeure);

            double deltaLastRead0 = (lastRead.Pub2 - lastRead.Pub).TotalDays;
            DateTime pub2 = lastRead.Pub2;

            double delta0Corr = deltaLastRead0;

            double cumulMin = conf.getCumulMin(rare);
            double cumulMax = conf.getCumulMax(rare);

            if (pub2 > lastRead.Pub && conf.extPente == 0)
            {
                if (conf.elastique < 1)
                {
                    delta0Corr = deltaLastRead0 * conf.elastique;
                    pub2 = lastRead.Pub.AddDays(delta0Corr).truncateToMinute();
                }


                //if (cumulMin > 0 && cumulMax > 0 && delta0Corr > cumulMin)
                //{
                //    delta0Corr = borneCumul(delta0Corr, cumulMin, cumulMax);
                //    pub2 = lastRead.Pub.AddDays(delta0Corr);
                //}
            }




            var deltaLecture = (DateTime.Now - lastPlayed).TotalDays;

            int nbReads = 0;
            int nbTotals = 0;

            int nbRead = 0;
            int nbTotal = 0;

            int _nbRead = 0;
            int _nbTotal = 0;
            double delta = intervalle; // conf.getIntervalle(album.Rare);
            double delta0 = delta;
            var _histo = conf.getHisto(rare);
            if (_histo > 0)
            {
                double histo = _histo;

                DateTime histo0 = next.Pub;
                if (conf.histoMode == histoMode.fix)
                    histo0 = date0;
                DateTime limit = histo0.AddDays(-histo);

                for (int i = indexNextSelected - 1; i >= 0; i--)
                {
                    var t = list[i];
                    var dt = t.Pub;
                    if (dt < limit && nbTotals >= conf.totalMin)
                        break;

                    if (t.Played)
                        nbReads++;


                    nbTotals++;

                }



                limit = lastRead.Pub.AddDays(-histo);
                for (int i = indexLastRead; i >= 0; i--)
                {
                    var t = list[i];
                    var dt = t.Pub;
                    if (dt < limit && nbTotal >= conf.totalMin)
                        break;

                    if (t.Played)
                        nbRead++;


                    nbTotal++;

                }


                if (conf.histoMode == histoMode.read)
                {
                    _nbRead = nbRead;
                    _nbTotal = nbTotal;
                }
                else
                {
                    _nbRead = nbReads;
                    _nbTotal = nbTotals;
                }


                if (_nbRead > 0 && _nbTotal > 0)
                {
                    if (_nbTotal < conf.totalMin)
                        _nbTotal = conf.totalMin;
                    //  album.Rare ? conf.intervalleR : conf.intervalle;
                    // var ecouteMax = conf.getEcouteMax(album.Rare); // album.Rare ? conf.ecouteMaxR : conf.ecouteMax;

                    double rapport = (double)_nbRead / (double)_nbTotal;

                    var coeff = 1 / rapport;

                    if (conf.dureeCoeff)
                    {
                        coeff = conf.getCoeff(rare, coeff, lastRead.DureeEnHeure);
                    }

                    //0.1 => 10
                    //0.9 => 1.11
                    //coeff -= 1; // 9  0.11
                    //var dminmax = intervalle - intervalleMin;

                    delta = borne(coeff, intervalle, intervalleMin); // intervalle - dminmax / (1 + (intervalleMin / dminmax) * coeff);



                }

                //misc.log("{3} {4}/{5} [{0}] {1} {2} ", name, lastRead.Name, lastRead.Pub, delta.ToString("#.##"), nbRead, nbTotal, name);


            }



            if (conf.extPente > 0)
            {
                var d0 = (DateTime.Now - pub2).TotalDays;
                var dl = conf.extDelta;
                if (dl == 0)
                {
                    dl = d0;
                }

                delta0 = d0 / conf.extPente;
                delta = delta0;
                //01/01/2014 ->01/01/2017
                //04/01/2017 -> 04/01/2014
                var dateLimitEcoule = DateTime.Now.AddDays(-dl);

                var deltaLimiteEcoule = (dateLimitEcoule - pub2).TotalDays;
                log.log("{0} {1}", delta.ToString("0.##"), deltaLimiteEcoule.ToString("0.##"));

                if (deltaLimiteEcoule > delta)
                {
                    double _coeff = deltaLimiteEcoule / delta;
                    delta = borne(_coeff, intervalle, intervalleMin);
                }

                if (delta < 1)
                    delta = 1;




                //if (delta > intervalle)
                //    delta = intervalle;
            }

            if (conf.limitRead && deltaLecture > intervalle)
            {
                //13 /10 ->7
                var _old = delta;

                delta += intervalle - deltaLecture;
                log.log("limitation par lecture {0} -> {1}", _old.ToString("0.##"), delta.ToString("0.##"));
            }





            if (delta < intervalleMin)
                delta = intervalleMin;

            if (delta > intervalle)
                delta = intervalle;



            DateTime limitFuture = pub2.AddDays(delta).truncateToMinute();

            DateTime limitFutureRab = pub2.AddDays(conf.coeffRab * delta).truncateToMinute();
            //var cumul = (limitFuture - next.Pub).TotalDays;
            //var dtaux = next.Pub.AddDays(conf.coeffRab * cumul).truncateToMinute();
            //if (dtaux > limitFutureRab)
            //    limitFutureRab = dtaux; 
            DateTime nextDate = limitFuture;

            int nb = 0;
            int nblissage = 0;
            double deltaAtterrissage = intervalleMin;

            if (conf.noCollision)
                deltaAtterrissage = delta;
            if (conf.extPente > 0)
                deltaAtterrissage = delta0;


            if (conf.deltaConst || conf.extPente > 0)
            {
            }

            else
            {
                var _deltaMin = lastRead.Pub.AddDays(conf.deltaMin);
                var _deltaRab = limitFuture.AddDays(conf.deltaRab);

                DateTime dt = lastRead.Pub.AddDays(intervalleMin0);

                for (int i = indexLastRead + 2; i < count; i++)
                {
                    var t = list[i];
                    if (conf.useVirtuel)
                    {
                        // on utilise des tracks virtuels pour pallier aux absences (week end, track manquant...)
                        dt = dt.AddDays(intervalleMin0);
                    }
                    else
                        dt = t.Pub;


                    nb++;
                    if (dt > limitFuture)
                    {
                        nextDate = dt;
                        nblissage++;
                        if (dt <= _deltaMin)
                            continue;
                        if (dt <= _deltaRab)
                            continue;
                        if (nb <= conf.deltaNbMin)
                            continue;
                        if (nblissage <= conf.deltaNbRab)
                            continue;
                        if (dt <= limitFutureRab)
                            continue;

                        break;


                        //if (dt > _deltaMin && dt > _deltaRab && nb > conf.deltaNbMin && nblissage > conf.deltaNbRab && dt > limitFutureRab)
                        //    break;
                    }

                }

                if (nextDate > limitFuture && nb > 0 && conf.noCollision)
                {
                    deltaAtterrissage = (nextDate - limitFuture).TotalDays / (double)nb;
                    if (deltaAtterrissage > intervalleMin)
                        deltaAtterrissage = intervalleMin;
                }
            }

            var tsatt = timeSpan.FromDays(deltaAtterrissage);
            if (tsatt.TotalMinute < 1)
                tsatt = timeSpan.FromMinutes(1);

            string deltas = string.Format("{0} {1} {2} {3}->{4}", intervalle.ToString("0.##"), deltaLastRead0.ToString("0.##"), delta0Corr.ToString("0.##"), delta.ToString("0.##"), tsatt.TotalDay.ToString("0.##"));

            log.log("{0} {1}/{2} ({3}/{4}) [{5}] {6} {7} ({8}) lecture={9} ", deltas, nbRead, nbTotal, nbReads, nbTotals, album.Album, lastRead.track.Name, lastRead.Pub, pub2, deltaLecture.ToString("#.##"));


            //  nb = 0;
            // bool enRetard = limitFuture < date0;
            TrackSort last = next;
            DateTime lastPub2 = limitFuture;
            int indexDepart = indexLastRead + 1;



            bool erased = false;

            if (conf.vacances)
                deltaAtterrissage = delta;

            for (int i = indexDepart; i < count; i++)
            {
                var t = list[i];
                if (erased && conf.erasedDone)
                {
                    eraseSort(t, "", t.Pub);
                    continue;
                }

                DateTime dt = lastPub2;

                if (i == indexDepart && !conf.useVirtuel2)
                {
                    dt = limitFuture;
                }
                else
                {

                    //if (conf.deltaCheckSelected)
                    //{
                    //    if (!t.Selected)
                    //        continue;
                    //    if (!t.Enabled)
                    //        continue;
                    //}
                    var d = (t.Pub - last.Pub).TotalDays / intervalleMin0;


                    if (conf.useVirtuel2)
                        dt = lastPub2.AddDays(d * deltaAtterrissage).truncateToMinute();  //  (int)(tsatt.TotalMinute * nb)).truncateToMinute();
                    else
                        dt = lastPub2.AddDays(deltaAtterrissage).truncateToMinute();
                    if (conf.deltaConstLate >= 0 && t.track.Selected && dt < date1)
                    {
                        var dt2 = dt;
                        if (conf.useVirtuel2)
                            dt2 = lastPub2.AddDays(d * delta).truncateToMinute();
                        else
                            dt2 = lastPub2.AddDays(delta).truncateToMinute();
                        //if (dt2 <= date0)
                        dt = dt2;
                        //else
                        //    dt = date0.AddMinutes(1);
                    }


                }



                var _delta = (dt - lastRead.Pub2).TotalDays;
                if (t.Pub >= dt || conf.enabled == sortMode.reset || erased && conf.erasedDone)
                {
                    erased = true;
                    eraseSort(t, "", t.Pub);
                }
                else
                {
                    if (cumulMin > 0 && cumulMax > 0 && conf.extPente == 0)
                    {
                        var __delta = (dt - t.Pub).TotalDays;
                        if (__delta > cumulMin)
                        {
                            __delta = borneCumul(__delta, cumulMin, cumulMax);
                            dt = t.Pub.AddDays(__delta).truncateToMinute();
                        }
                    }


                    //if (dt > DateTime.Now)
                    //{
                    //}

                    //if ((dt - t.Pub).TotalDays > 100)
                    //{
                    //}

                    writeComment(t, dt, "", t.Pub);
                    //nb++;
                }


                last = t;
                lastPub2 = dt;


            }


            for (int i = 0; i < count; i++)
            {
                var track = list[i];
                if (track.Pub > currentPub && track.Pub2 > track.Pub && track.Pub2 <= currentPub2)
                {
                    var aux = currentPub2.AddMinutes(1);
                    log.log("correction2 pub2 pour respect ordre {0} -> {1} {2}", track.Pub2, aux, track);
                    track.Pub2 = aux;
                }

                currentPub = track.Pub;
                currentPub2 = track.Pub2;
            }

        }

        private void build()
        {

            int count = list.Count;
            if (count == 0)
                return;


            // bool rare = album.Rare;

            TrackSort.Date0 = date0;

            //  TrackSort reallyLastRead = null;
            DateTime currentPub = DateTime.MinValue;
            DateTime currentPub2 = DateTime.MinValue;

            // 1. ordre
            for (int i = 0; i < count; i++)
            {
                var track = list[i];


                if (track.Pub > currentPub && track.Pub2 <= currentPub2)
                {
                    if (track.Pub2 < track.Pub)
                        track.Pub2 = track.Pub;

                    if (track.Pub > currentPub && track.Pub2 <= currentPub2)
                    {
                        var aux = currentPub2.AddMinutes(1);
                        log.log("correction pub2 pour respect ordre {0} -> {1} {2}", track.Pub2, aux, track);
                        track.Pub2 = aux;
                    }
                }

                currentPub = track.Pub;
                currentPub2 = track.Pub2;
            }



            int index0 = 0;
            int indexCourant = 0;

            TrackSort next = null;
            int indexLastRead = -1;
            int indexPrelastRead = -1;
            TrackSort lastRead = null;
            TrackSort prelastRead = null;
            for (int i = 0; i < count; i++)
            {
                var track = list[i];
                if (track.Played)
                {
                    if (next == null)
                    {
                        indexLastRead = i;
                        lastRead = track;
                    }
                    else
                        break;

                }

                else
                {
                    if (next == null)
                    {
                        if (track.Selected || track.Pub2 >= date0)
                        {
                            next = track;
                        }
                    }
                    else
                        break;
                }
            }

            if (indexLastRead < 0)
                return;


            indexCourant = indexLastRead;

            if (conf.vacances || !conf.recheck)
                index0 = indexCourant;
            else
            {
                index0 = 0;
                indexLastRead = -1;
                lastRead = null;

            }
            bool firstSel = false;


            // DateTime lastPlayed = DateTime.MinValue;

            if (lastRead == null)
            {
                for (int i = index0; i < count; i++)
                {
                    var track = list[i];

                    if (track.Played) // && track.PlayedDate > lastPlayed)
                    {
                        indexLastRead = i;
                        indexPrelastRead = i;
                        // lastPlayed = track.PlayedDate;

                        lastRead = track;
                        prelastRead = track;
                        index0 = i;
                        break;
                    }

                }
            }

            if (lastRead == null)
                return;

            TrackSort last = lastRead;
            DateTime lastPub2 = lastRead.Pub2;
            DateTime lastPubTh = lastRead.Pub2;
            DateTime pubMoy = lastRead.Pub2;
            DateTime pubMoyForCalcul = pubMoy;

            while (true)
            {
                if (index0 >= count - 1)
                    break;



                var current = list[index0];
                bool played = current.Played;


                if (played)
                {
                    lastRead = current;
                    indexLastRead = index0;
                }

                //  int indexNextSelected = -1;

                //  TrackSort next = null;

                // 2. Détermination lastRead et next






                bool rare = album.Rare;

                var futur = conf.getFutur(rare);
                int nbFutur = 0;
                int nbRestant = 0;
                double intervalleFactMin = 1;
                double intervalleFactMoy = 1;
                double intervalleX = 0;

                // DateTime lastExists = lastRead.Pub;

                DateTime finFutur = DateTime.Now;
                DateTime debutFutur = current.Pub;
                int indexDebut = index0;
                var deltaTotal = futur;
                if (futur > 0)
                {
                    finFutur = current.Pub.AddDays(futur);
                    if (finFutur > DateTime.Now)
                    {
                        finFutur = DateTime.Now;
                        indexDebut = 0;
                        debutFutur = finFutur.AddDays(-futur);
                    }
                    // chopper l'intervalle majoritaire pour éviter le poids des erreurs. 
                    Dict<int, int> spectreDelta = new Dict<int, int>();
                    DateTime lastExists = lastRead.Pub;
                    for (int i = indexDebut; i < count; i++)
                    {
                        var t = list[i].Pub;
                        if (t < debutFutur)
                            continue;
                        nbRestant++;




                        if (t < finFutur)
                        {
                            nbFutur++;


                            var dp = (int)(System.Math.Round((t - lastExists).TotalDays, 0, MidpointRounding.AwayFromZero));
                            lastExists = t;
                            if (dp > 0)
                                spectreDelta[dp]++;
                        }
                        else if (nbRestant >= TrackAlbum.NB_MIN_POUR_FREQUENT)
                        {
                            break;
                        }
                    }

                    if (nbFutur == 0)
                        nbFutur = 1;
                    deltaTotal = (finFutur - debutFutur).TotalDays;
                    if (deltaTotal > 0)
                    {
                        intervalleFactMoy = deltaTotal / (double)nbFutur;
                        intervalleX = (intervalleFactMoy - 1) / 6;
                    }

                    var choices = spectreDelta.Keys.ToList();
                    choices.Sort((x, y) => x.CompareTo(y));

                    int max = 0;
                    int dpMaj = 1;
                    for (int i = 0; i < choices.Count; i++)
                    {
                        int k = choices[i];
                        var r = spectreDelta[k];
                        if (r > max)
                        {
                            max = r;
                            dpMaj = k;
                        }
                    }

                    intervalleFactMin = dpMaj;

                    if (nbRestant < TrackAlbum.NB_MIN_POUR_FREQUENT && !rare)
                    {
                        // this.album.RareEffect = true;
                        rare = true;
                    }
                }

                double duree = current.DureeEnHeure;
                var intervalleMin0 = conf.getIntervalleMin0(rare);
                var intervalleMin0Var = conf.getIntervalleMin0Var(intervalleX, intervalleFactMin);

                var intervalle = conf.getIntervalle(rare, duree, intervalleMin0);
                var intervalleVar = conf.getIntervalleVar(rare, intervalleX, duree, intervalleMin0Var);

                var intervalleCorrec = intervalle;
                var intervalleCorrecVar = intervalleVar;
                var intervalleMin = conf.getIntervalleMin(rare, duree);
                var intervalleMinVar = conf.getIntervalleMinVar(rare, intervalleX, duree);


                var atterissageMin = conf.getAtterrissageMin(rare);
                var atterissageMinVar = conf.getatterrissageMinVar(intervalleX, intervalleFactMin);

                double deltaLastRead0 = (prelastRead.Pub2 - prelastRead.Pub).TotalDays;
                DateTime pub2 = prelastRead.Pub2;

                double delta0Corr = deltaLastRead0;

                double cumulMin = conf.getCumulMin(rare);
                double cumulMax = conf.getCumulMax(rare);

                if (pub2 > prelastRead.Pub && conf.extPente == 0)
                {
                    if (conf.elastique < 1)
                    {
                        delta0Corr = deltaLastRead0 * conf.elastique;
                        pub2 = prelastRead.Pub.AddDays(delta0Corr).truncateToMinute();
                    }


                    //if (cumulMin > 0 && cumulMax > 0 && delta0Corr > cumulMin)
                    //{
                    //    delta0Corr = borneCumul(delta0Corr, cumulMin, cumulMax);
                    //    pub2 = lastRead.Pub.AddDays(delta0Corr);
                    //}
                }


                // var _played = played ? current : lastRead;
                var deltaLecture = (DateTime.Now - lastRead.PlayedDate).TotalDays;


                //int nbReads = 0;
                //int nbTotals = 0;

                int nbRead = 0;
                int nbTotal = 0;

                //int _nbRead = 0;
                int _nbTotal = 0;

                var histo = conf.getHisto(rare);
                var nbHisto = conf.getNbHisto(rare);
                double densite = 1;
                double rapport = 1;
                double rapportBorne = 1;
                bool borneParHorizon = false;
                double coeff = 1;
                double coeffVar = 1;

                double delta = intervalle; // conf.getIntervalle(album.Rare);
                double deltaVar = intervalleVar;
                double delta0 = delta;
                double deltaHorizon0 = delta;
                double deltaHorizon0Var = deltaVar;
                double deltaHorizon = delta;
                double deltaHorizonVar = deltaVar;

                bool useTolerance = false;

                if (histo > 0 || nbHisto > 0)
                {

                    DateTime limit = lastRead.Pub.AddDays(-histo);
                    for (int i = indexLastRead; i >= 0; i--)
                    {
                        var t = list[i];
                        var dt = t.Pub;
                        if ((dt < limit || nbTotal >= nbHisto) && nbTotal >= conf.totalMin)
                            break;

                        if (t.Played)
                            nbRead++;


                        nbTotal++;

                    }

                    _nbTotal = nbTotal;

                    if (nbRead > 0 && _nbTotal > 0)
                    {
                        if (_nbTotal < conf.totalMin)
                            _nbTotal = conf.totalMin;


                        // var futur = conf.getFutur(rare);

                        if (futur > 0)
                        {


                            double theoric = (finFutur - current.Pub).TotalDays / intervalleMin0;
                            densite = nbFutur / theoric;
                            //if (densite >= 1)
                            //    densite = 1;

                            if (densite < conf.densiteMin && !rare)
                            {
                                rare = true;


                                intervalleMin0 = conf.getIntervalleMin0(rare);
                                intervalleMin0Var = conf.getIntervalleMin0Var(intervalleX, intervalleFactMin);

                                intervalle = conf.getIntervalle(rare, duree, intervalleMin0);
                                intervalleVar = conf.getIntervalleVar(rare, intervalleX, duree, intervalleMin0Var);

                                intervalleCorrec = intervalle;
                                intervalleCorrecVar = intervalleVar;
                                intervalleMin = conf.getIntervalleMin(rare, duree);
                                intervalleMinVar = conf.getIntervalleMinVar(rare, intervalleX, duree);


                                atterissageMin = conf.getAtterrissageMin(rare);
                                atterissageMinVar = conf.getatterrissageMinVar(intervalleX, intervalleFactMin);




                                theoric = (finFutur - current.Pub).TotalDays / intervalleMin0;
                                densite = nbFutur / theoric;
                                //if (densite >= 1)
                                //    densite = 1;
                            }
                            //if (densite < 1)
                            //    rapport = rapport * densite;
                        }


                        //  album.Rare ? conf.intervalleR : conf.intervalle;
                        rapport = (double)nbRead / (double)_nbTotal;
                        coeff = 1 / rapport;

                        if (conf.dureeCoeff)
                            coeff = conf.getCoeff(rare, coeff, duree);

                        coeffVar = coeff;

                        if (conf.coeffDensite)
                        {
                            coeff /= densite;

                            coeffVar *= intervalleFactMoy;
                        }

                        if (conf.honneurAuxVieux && nbRestant < TrackAlbum.NB_MIN_POUR_FREQUENT)
                        {
                            if (nbRestant > 0)
                            {
                                var t = TrackAlbum.NB_MIN_POUR_FREQUENT / nbRestant;
                                coeff *= t;
                                coeffVar *= t;
                            }
                        }

                        var recup = intervalleMin0 - atterissageMin;
                     //   var recupVar = intervalleMin0Var - atterissageMinVar;


                        delta = intervalle; // conf.getIntervalle(album.Rare);
                        delta0 = delta;
                        deltaHorizon0 = delta;
                        deltaHorizon = delta;


                        deltaHorizon0Var = intervalleVar;
                        deltaHorizonVar = intervalleVar;

                        rapportBorne = conf.getHorizonCorrec(rapport, intervalleX);

                        if (this.album.Album == "Sur les épaules de Darwin" && index0 >= indexCourant - 10)
                        {
                        }

                        deltaHorizon0 = intervalleMin0 + recup * (1 - rapport) / rapport + (1 - densite) / (densite * rapport);
                        //deltaHorizon0Var = intervalleMin0Var + recupVar * (1 - rapport) / rapport + (1 - 1 / intervalleFactMoy) / (rapport / intervalleFactMoy); 
                        //deltaHorizon0Var = intervalleFactMoy + ((1 - rapport) / rapport) * (intervalleFactMoy - atterissageMinVar); // ça pue
                        var deltaMoy = System.Math.Min((lastPub2 - pubMoyForCalcul).TotalDays, (lastPub2 - last.Pub).TotalDays); 
                        if (deltaMoy < 0)
                            deltaMoy = 0;

                        var correcMoy = (deltaTotal - deltaMoy* rapportBorne) / nbFutur;
                        deltaHorizon0Var = (correcMoy - atterissageMinVar * (1 - rapportBorne)) / rapportBorne;
                        // im=7, rapport=0.9



                        deltaHorizon = deltaHorizon0;
                        deltaHorizonVar = deltaHorizon0Var;



                        var tolerance = conf.getTolerance(rare);
                        double tolerancePart = 0;
                        if (tolerance > 0)
                        {
                            var ecart0 = (lastRead.Pub2 - lastRead.Pub).TotalDays;
                            tolerancePart = (tolerance - ecart0) / conf.getNbTolerance(rare);
                            if (deltaHorizon < tolerancePart)
                                deltaHorizon = tolerancePart;
                            else if (conf.toleranceNegative && tolerancePart < 0)
                                deltaHorizon += tolerancePart;


                            if (deltaHorizonVar < tolerancePart)
                            {
                                deltaHorizonVar = tolerancePart;
                                useTolerance = true;
                            }
                            else if (conf.toleranceNegative && tolerancePart < 0)
                                deltaHorizonVar += tolerancePart;
                        }




                        if (deltaHorizon < intervalle)
                            intervalleCorrec = deltaHorizon;

                        if (deltaHorizonVar < intervalleVar)
                        {
                            intervalleCorrecVar = deltaHorizonVar;
                            borneParHorizon = true;
                        }

                        //if (intervalleCorrec < intervalleMin)
                        //    intervalleCorrec = intervalleMin;

                        //if (intervalleCorrecVar < intervalleMinVar)
                        //    intervalleCorrecVar = intervalleMinVar;
                        //0.1 => 10
                        //0.9 => 1.11
                        //coeff -= 1; // 9  0.11
                        //var dminmax = intervalle - intervalleMin;

                        var _delta0 = borne(coeff, intervalle, intervalleMin); // intervalle - dminmax / (1 + (intervalleMin / dminmax) * coeff);
                        var _deltaVar0 = borne(coeffVar, intervalleVar, intervalleMinVar);


                     

                        var _delta = borne(coeff, intervalleCorrec, intervalleMin); // intervalle - dminmax / (1 + (intervalleMin / dminmax) * coeff);
                        var _deltaVar = borne(coeffVar, intervalleCorrecVar, intervalleMinVar);


                        if (conf.horizonFinal)
                        {
                            if (_delta0 < delta)
                                delta = _delta0;
                            else if (_delta0 == delta)
                            { }
                            else
                            { }



                            if (_deltaVar0 < deltaVar)
                                deltaVar = _deltaVar0;
                            else if (_deltaVar0 == deltaVar)
                            { }
                            else
                            { }

                            if (delta > deltaHorizon)
                                delta = deltaHorizon;

                            //if (delta < tolerancePart)
                            //    delta = tolerancePart; 

                            if (deltaVar > deltaHorizonVar)
                                deltaVar = deltaHorizonVar;

                            //if (deltaVar < tolerancePart)
                            //    deltaVar = tolerancePart; 

                        }
                        else
                        {


                            if (_delta < delta)
                                delta = _delta;
                            else if (_delta == delta)
                            { }
                            else
                            { }


                            if (_deltaVar < deltaVar)
                                deltaVar = _deltaVar;
                            else if (_deltaVar == deltaVar)
                            { }
                            else
                            { }
                        }




                    }

                    //misc.log("{3} {4}/{5} [{0}] {1} {2} ", name, lastRead.Name, lastRead.Pub, delta.ToString("#.##"), nbRead, nbTotal, name);


                    if (conf.intervalleVar)
                    {
                        delta = deltaVar;
                        atterissageMin = atterissageMinVar;
                        intervalleMin = intervalleMinVar;
                        intervalleMin0 = intervalleMin0Var;
                        intervalle = intervalleVar;

                    }


                    if (this.album.Album == "Sur les épaules de Darwin" && index0 >= indexCourant - 10)
                    {
                    }

                    if (intervalleMin > delta)
                        intervalleMin = delta;
                    if (intervalleMin0 > intervalleMin)
                        intervalleMin0 = intervalleMin;
                    if (atterissageMin > intervalleMin)
                        atterissageMin = intervalleMin; 
                  

                   


                }



                if (conf.extPente > 0)
                {
                    var d0 = (DateTime.Now - pub2).TotalDays;
                    var dl = conf.extDelta;
                    if (dl == 0)
                    {
                        dl = d0;
                    }

                    delta0 = d0 / conf.extPente;
                    delta = delta0;
                    //01/01/2014 ->01/01/2017
                    //04/01/2017 -> 04/01/2014
                    var dateLimitEcoule = DateTime.Now.AddDays(-dl);

                    var deltaLimiteEcoule = (dateLimitEcoule - pub2).TotalDays;
                    log.log("{0} {1}", delta.ToString("0.##"), deltaLimiteEcoule.ToString("0.##"));

                    if (deltaLimiteEcoule > delta)
                    {
                        double _coeff = deltaLimiteEcoule / delta;
                        delta = borne(_coeff, intervalle, intervalleMin);
                    }

                    if (delta < 1)
                        delta = 1;




                    //if (delta > intervalle)
                    //    delta = intervalle;
                }

                if (conf.limitRead && deltaLecture > intervalle)
                {
                    //13 /10 ->7
                    var _old = delta;

                    delta += intervalle - deltaLecture;
                    log.log("limitation par lecture {0} -> {1}", _old.ToString("0.##"), delta.ToString("0.##"));
                }





                if (delta < intervalleMin)
                    delta = intervalleMin;

                if (delta > intervalle)
                    delta = intervalle;



                DateTime limitFuture = lastPubTh.AddDays(delta).truncateToMinute();
                DateTime l = pub2.AddDays(atterissageMin).truncateToMinute();
                if (limitFuture < l)
                    limitFuture = l;
                //  limitFuture = pub2.AddDays(delta).truncateToMinute();
                TrackSort _next = list[indexLastRead + 1];
                double ecart = (limitFuture - _next.Pub).TotalDays;

                DateTime limitFutureRab = pub2.AddDays(conf.coeffRab * ecart).truncateToMinute();
                //var cumul = (limitFuture - next.Pub).TotalDays;
                //var dtaux = next.Pub.AddDays(conf.coeffRab * cumul).truncateToMinute();
                //if (dtaux > limitFutureRab)
                //    limitFutureRab = dtaux; 
                DateTime nextDate = limitFuture;

                int nb = 0;
                int nblissage = 0;
                double deltaAtterrissage = intervalleMin;
                double atterrissageVacance = deltaAtterrissage;

                if (conf.noCollision)
                    deltaAtterrissage = delta;
                if (conf.extPente > 0)
                    deltaAtterrissage = delta0;
                string causes = "";

                if (conf.deltaConst || conf.extPente > 0)
                {
                }

                else
                {
                    var _deltaMin = lastRead.Pub.AddDays(conf.deltaMin);
                    var _deltaRab = limitFuture.AddDays(conf.deltaRab);

                    DateTime dt = lastRead.Pub.AddDays(intervalleMin0);

                    var sbCause = new StringBuilder();

                    for (int i = indexPrelastRead + 2; i < count; i++)
                    {
                        var t = list[i];
                        if (conf.useVirtuel)
                        {
                            // on utilise des tracks virtuels pour pallier aux absences (week end, track manquant...)
                            dt = dt.AddDays(intervalleMin0);
                        }
                        else
                            dt = t.Pub;


                        nb++;
                        if (dt > limitFuture)
                        {
                            sbCause = new StringBuilder();
                            nextDate = dt;
                            nblissage++;

                            int nbCause = 0;
                            if (dt <= _deltaMin)
                            {
                                sbCause.Append(" deltaMin");
                                nbCause++;
                            }
                            if (dt <= _deltaRab)
                            {
                                sbCause.Append(" deltaRab");
                                nbCause++;
                            }
                            if (nb <= conf.deltaNbMin)
                            {
                                sbCause.Append(" deltaNbMin");
                                nbCause++;
                            }
                            if (nblissage <= conf.deltaNbRab)
                            {
                                sbCause.Append(" deltaNbRab");
                                nbCause++;
                            }
                            if (dt <= limitFutureRab)
                            {
                                sbCause.Append(" coeffRab");
                                nbCause++;
                            }

                            if (nbCause > 0)
                            {
                                causes = sbCause.ToString();
                                continue;
                            }


                            break;


                            //if (dt > _deltaMin && dt > _deltaRab && nb > conf.deltaNbMin && nblissage > conf.deltaNbRab && dt > limitFutureRab)
                            //    break;
                        }

                    }

                    if (nb > 0 && conf.noCollision) //    (nextDate > limitFuture && nb > 0 && conf.noCollision)
                    {
                        deltaAtterrissage = (nextDate - limitFuture).TotalDays / (double)nb;
                        if (deltaAtterrissage > intervalleMin)
                            deltaAtterrissage = intervalleMin;
                    }
                }

                if (deltaAtterrissage < atterissageMin)
                {
                    causes += " corrigé atterrissageMin";
                    deltaAtterrissage = atterissageMin;

                }


                atterrissageVacance = delta * rapport + deltaAtterrissage * (1 - rapport);


                //string atter = string.Format("{0}->{1}", delta.ToString("0.##"), deltaAtterrissage.ToString("0.##"));
                //if (conf.vacances && deltaAtterrissage != atterrissageVacance)
                string atter = string.Format("{0}:{1}->{2}({3})", intervalleFactMoy.ToString("0.##"), delta.ToString("0.##"), deltaAtterrissage.ToString("0.##"), atterrissageVacance.ToString("0.##"));

                string deltas = string.Format("{0} ic={1}({2}) h={3} i={4} r={5}% ({6}%)", atter,
                   conf.intervalleVar ? intervalleCorrecVar.ToString("0.##") : intervalleCorrec.ToString("0.##"),
                   conf.intervalleVar ? intervalleCorrec.ToString("0.##") : intervalleCorrecVar.ToString("0.##"), deltaHorizon.ToString("0.##"), intervalle.ToString("0.##"),
                   (100 * rapport).ToString("0"), (100 * rapportBorne).ToString("0"));
                //    deltaLastRead0.ToString("0.##"), delta0Corr.ToString("0.##"));
                string stats = string.Format("{0}/{1}={2}% c={3} d={4}% dr={5} r={6}({7})", nbRead, nbTotal, (100 * rapport).ToString("0"), coeff.ToString("0.##"), (densite * 100).ToString("0"), (100 * densite * rapport).ToString("0"),
                    deltaLastRead0.ToString("0.##"), delta0Corr.ToString("0.##"));
                var sbAlbum = new StringBuilder();

                sbAlbum.Append(string.Format("[{0}]", album.Album));
                if (album.Rare) sbAlbum.Append(" rare ");
                else if (rare) sbAlbum.Append(" rare+ ");
                sbAlbum.Append(current.track.Duree.TotalMinute.ToString("0 m"));

                string _usetolerance = useTolerance ? "+" : " ";
                string h = borneParHorizon ? "h" : " ";
                string _rapportBorne = (rapportBorne == 1 & rapport < 1) ? "~" : " ";
                var str = string.Format("{0} {1}{2}{3}{4} lect={5} causes={6}", stats, sbAlbum.ToString(), _usetolerance, h, _rapportBorne, deltaLecture.ToString("#,#"), causes);

                if (played)
                {
                    if (index0 >= indexCourant)
                        log.logNoDate(str);
                    else
                        logDebug.logNoDate(str);
                }


                //  nb = 0;
                // bool enRetard = limitFuture < date0;

                //int indexDepart = indexLastRead + 1;
                // int indexNext = index0 + 1;

                if (current != prelastRead)
                {
                    var t = current; // list[indexNext];

                    var _deltaAtterrissage = deltaAtterrissage;
                    var _atterrissageMin = atterissageMin;
                    if (conf.vacances && firstSel)
                    {
                        _deltaAtterrissage = atterrissageVacance;
                        _atterrissageMin = delta * rapport + atterissageMin * (1 - rapport);
                    }

                    DateTime dt = lastPub2;

                    if (index0 == indexPrelastRead + 1 && !conf.useVirtuel2)
                    {
                        dt = limitFuture;
                        lastPubTh = limitFuture;
                    }
                    else
                    {


                        var d = (t.Pub - last.Pub).TotalDays / intervalleMin0;


                        if (conf.useVirtuel2)
                        {
                            dt = lastPub2.AddDays(d * _deltaAtterrissage).truncateToMinute();  //  (int)(tsatt.TotalMinute * nb)).truncateToMinute();
                            lastPubTh = lastPub2.AddDays(d * _atterrissageMin).truncateToMinute();
                        }
                        else
                        {
                            dt = lastPub2.AddDays(_deltaAtterrissage).truncateToMinute();
                            lastPubTh = lastPubTh.AddDays(_atterrissageMin).truncateToMinute();
                        }
                        if (conf.deltaConstLate >= 0 && t.track.Selected && dt < date1 && t.Pub2 < date1)
                        {
                            var dt2 = dt;
                            if (conf.useVirtuel2)
                                dt2 = lastPub2.AddDays(d * delta).truncateToMinute();
                            else
                                dt2 = lastPub2.AddDays(delta).truncateToMinute();
                            //if (dt2 <= date0)
                            dt = dt2;
                            //else
                            //    dt = date0.AddMinutes(1);
                        }


                    }

                    if (!firstSel)
                    {
                        if (dt > date0)
                            firstSel = true;
                    }

                    pubMoy = pubMoy.AddDays(intervalleFactMoy);
                    pubMoyForCalcul = pubMoyForCalcul.AddDays(intervalleFactMoy);

                    if (t.Pub >= dt || conf.enabled == sortMode.reset)
                    {

                        eraseSort(t, deltas, pubMoy);
                    }
                    else
                    {
                        var __delta = (dt - t.Pub).TotalDays;
                        if (cumulMin > 0 && cumulMax > 0 && conf.extPente == 0)
                        {
                            if (__delta > cumulMin)
                            {
                                __delta = borneCumul(__delta, cumulMin, cumulMax);
                                dt = t.Pub.AddDays(__delta).truncateToMinute();
                            }
                        }

                        if (conf.elastique2 < 1)
                        {
                            var deltacorr2 = __delta * conf.elastique2;
                            dt = t.Pub.AddDays(deltacorr2).truncateToMinute();
                        }

                        var dtMin = lastPub2.AddDays(atterissageMin);

                        if (dt < dtMin)
                            dt = dtMin;


                        if (dt > DateTime.Now)
                        {
                        }

                        if ((dt - t.Pub).TotalDays > 100)
                        {
                        }

                        if (t.Pub >= dt)
                            eraseSort(t, deltas, pubMoy);
                        else
                            writeComment(t, dt, deltas, pubMoy);
                        //nb++;
                    }


                    last = t;
                    lastPub2 = dt;
                    if (t.Pub2 < lastPub2)
                    {
                        if (t.Pub != t.Pub2)
                        {
                        }
                        lastPub2 = t.Pub2;
                    }

                    //  lastPub2 = System.Math.Min(dt, t.Pub2); // dt;  //t.Pub2; FIX BUG ??
                    if (lastPubTh > lastPub2)
                        lastPubTh = lastPub2;

                    if (pubMoyForCalcul > lastPub2)
                        pubMoyForCalcul = lastPub2;

                    if (played)
                    {
                        prelastRead = current;
                        //lastPlayed = lastRead.PlayedDate;
                        indexPrelastRead = index0;
                    }

                }


                index0++;
            }


            for (int i = 0; i < count; i++)
            {
                var track = list[i];
                if (track.Pub > currentPub && track.Pub2 > track.Pub && track.Pub2 <= currentPub2)
                {
                    var aux = currentPub2.AddMinutes(1);
                    log.log("correction2 pub2 pour respect ordre {0} -> {1} {2}", track.Pub2, aux, track);
                    track.Pub2 = aux;
                }

                currentPub = track.Pub;
                currentPub2 = track.Pub2;
            }

        }


        public void Build()
        {
            if (album.Album == "SCIENCE PUBLIQUE")
            {
            }
            if (done)
                return;
            done = true;
            if (conf.enabled == sortMode.no)
                return;
            int count = list.Count;
            if (count == 0)
                return;

            //if (conf.enabled == sortMode.histo)
            //{
            //    buildAll();
            //    return;
            //}
            //else
            //{
            //checkSelected = true;
            //apply = true;
            date0 = Conf.Date0;
            if (conf.deltaConstLate >= 0)
                date1 = date0.AddDays(conf.deltaConstLate);
            // newDate0 = Conf.NewDate0;
            if (conf.extPente > 0 || conf.oldMode)
                build0();
            else
                build();
            return;
            //  }

            #region old
            /* if (conf.enabled == sortMode.reset)
            {
                foreach (var t in list)
                {
                    eraseSort(t, true, true);
                }

                return;
            }

            int indexLastRead = -1;
            int indexNextSelected = -1;
            DateTime lastPlayed = DateTime.MinValue;
            TrackSort next = null;
            //  TrackSort reallyLastRead = null;
            DateTime currentPub = DateTime.MinValue;
            DateTime currentPub2 = DateTime.MinValue;
            for (int i = 0; i < count; i++)
            {
                var track = list[i];
                //if (conf.extPente > 0)
                //{
                //    if (!track.Played && track.Pub == track.Pub2)
                //        track.Pub2 = Conf.Date0; 
                //}

                if (track.Pub > currentPub && track.Pub2 <= currentPub2)
                {
                    var aux = currentPub2.AddMinutes(1);
                    log.log("correction pub2 pour respect ordre {0} -> {1} {2}", track.Pub2, aux, track);
                    track.Pub2 = aux;
                }

                currentPub = track.Pub;
                currentPub2 = track.Pub2;


                if (track.Played) // && track.PlayedDate > lastPlayed)
                {
                    // ok mais quid du cas au fil de l'histoire : date dans le futur
                    if (track.Pub2 <= Conf.Date0 || conf.extPente > 0)
                    {
                        if (next == null)
                        {
                            indexLastRead = i;
                            lastPlayed = track.PlayedDate;
                        }
                    }
                }

                else if (next == null)
                {
                    if (track.Selected)
                    {
                        next = track;
                        indexNextSelected = i;
                        // break;
                    }
                }
            }


            if (indexLastRead < 0)
                return;
            if (next == null)
                return;
            var intervalle = conf.getIntervalle(album.Rare);
            var intervalleMin = conf.getIntervalleMin(album.Rare);
            var lastRead = list[indexLastRead];
            double deltaLastRead0 = (lastRead.Pub2 - lastRead.Pub).TotalDays;
            DateTime pub2 = lastRead.Pub2;

            double delta0Corr = deltaLastRead0;

            double cumulMin = conf.getCumulMin(album.Rare);
            double cumulMax = conf.getCumulMax(album.Rare);

            if (pub2 > lastRead.Pub && conf.extPente == 0)
            {
                if (conf.elastique < 1)
                {
                    delta0Corr = deltaLastRead0 * conf.elastique;
                    pub2 = lastRead.Pub.AddDays(delta0Corr).truncateToMinute();
                }


                //if (cumulMin > 0 && cumulMax > 0 && delta0Corr > cumulMin)
                //{
                //    delta0Corr = borneCumul(delta0Corr, cumulMin, cumulMax);
                //    pub2 = lastRead.Pub.AddDays(delta0Corr);
                //}
            }




            var deltaLecture = (DateTime.Now - lastPlayed).TotalDays;

            int nbReads = 0;
            int nbTotals = 0;

            int nbRead = 0;
            int nbTotal = 0;

            int _nbRead = 0;
            int _nbTotal = 0;
            double delta = conf.getIntervalle(album.Rare);
            double delta0 = delta;
            var _histo = conf.getHisto(album.Rare);
            if (_histo > 0)
            {
                double histo = _histo;

                DateTime histo0 = next.Pub;
                if (conf.histoMode == histoMode.fix)
                    histo0 = Conf.Date0;
                DateTime limit = histo0.AddDays(-histo);

                for (int i = indexNextSelected - 1; i >= 0; i--)
                {
                    var t = list[i];
                    var dt = t.Pub;
                    if (dt < limit && nbTotals >= conf.totalMin)
                        break;

                    if (t.Played)
                        nbReads++;


                    nbTotals++;

                }



                limit = lastRead.Pub.AddDays(-histo);
                for (int i = indexLastRead; i >= 0; i--)
                {
                    var t = list[i];
                    var dt = t.Pub;
                    if (dt < limit && nbTotal >= conf.totalMin)
                        break;

                    if (t.Played)
                        nbRead++;


                    nbTotal++;

                }


                if (conf.histoMode == histoMode.read)
                {
                    _nbRead = nbRead;
                    _nbTotal = nbTotal;
                }
                else
                {
                    _nbRead = nbReads;
                    _nbTotal = nbTotals;
                }


                if (_nbRead > 0 && _nbTotal > 0)
                {
                    if (_nbTotal < conf.totalMin)
                        _nbTotal = conf.totalMin;
                    //  album.Rare ? conf.intervalleR : conf.intervalle;
                    var ecouteMax = conf.getEcouteMax(album.Rare); // album.Rare ? conf.ecouteMaxR : conf.ecouteMax;

                    delta = (intervalle * (double)_nbTotal) / (ecouteMax * (double)_nbRead);
                    var coeff = (double)_nbTotal / (double)_nbRead;

                    //0.1 => 10
                    //0.9 => 1.11
                    //coeff -= 1; // 9  0.11
                    //var dminmax = intervalle - intervalleMin;

                    var _delta = borne(coeff, intervalle, intervalleMin); // intervalle - dminmax / (1 + (intervalleMin / dminmax) * coeff);

                    if (_delta < delta)
                        delta = _delta;
                    else
                    {
                    }

                }

                //misc.log("{3} {4}/{5} [{0}] {1} {2} ", name, lastRead.Name, lastRead.Pub, delta.ToString("#.##"), nbRead, nbTotal, name);


            }



            if (conf.extPente > 0)
            {
                var d0 = (DateTime.Now - pub2).TotalDays;
                var dl = conf.extDelta;
                if (dl == 0)
                {
                    dl = d0;
                }

                delta0 = d0 / conf.extPente;
                delta = delta0;
                //01/01/2014 ->01/01/2017
                //04/01/2017 -> 04/01/2014
                var dateLimitEcoule = DateTime.Now.AddDays(-dl);

                var deltaLimiteEcoule = (dateLimitEcoule - pub2).TotalDays;
                log.log("{0} {1}", delta.ToString("0.##"), deltaLimiteEcoule.ToString("0.##"));

                if (deltaLimiteEcoule > delta)
                    delta = deltaLimiteEcoule;

                if (delta < 1)
                    delta = 1;

                //if (delta > intervalle)
                //    delta = intervalle;
            }

            if (conf.limitRead && deltaLecture > intervalle)
            {
                //13 /10 ->7
                var _old = delta;

                delta += intervalle - deltaLecture;
                log.log("limitation par lecture {0} -> {1}", _old.ToString("0.##"), delta.ToString("0.##"));
            }




            if (delta < intervalleMin)
                delta = intervalleMin;

            if (delta > intervalle)
                delta = intervalle;



            DateTime limitFuture = pub2.AddDays(delta).truncateToMinute();
            DateTime nextDate = limitFuture;

            int nb = 0;
            int nblissage = 0;
            double deltaAtterrissage = intervalleMin;

            if (conf.noCollision)
                deltaAtterrissage = TimeSpan.FromDays(delta).TotalDays;
            if (conf.extPente > 0)
                deltaAtterrissage = TimeSpan.FromDays(delta0).TotalDays;

            if (conf.deltaConst)
            {
            }

            else
            {
                var _deltaMin = lastRead.Pub.AddDays(conf.deltaMin);
                var _deltaRab = limitFuture.AddDays(conf.deltaRab);
                double deltaattAux = 0;
                for (int i = indexLastRead + 1; i < count; i++)
                {
                    var t = list[i];

                    if (conf.deltaCheckSelected)
                    {
                        if (!t.Selected)
                            continue;
                        if (!t.Enabled)
                            continue;
                    }

                    if (t.Pub >= limitFuture)
                    {
                        nextDate = t.Pub;
                        nblissage++;
                        if (nextDate > limitFuture && nb > 0 && conf.noCollision)
                        {
                            var _deltaAtt = (nextDate - limitFuture).TotalDays / (double)nb;
                            if (_deltaAtt < deltaAtterrissage)
                            {
                                if (_deltaAtt > deltaattAux)
                                    deltaattAux = _deltaAtt;
                            }
                        }
                        if (t.Pub >= _deltaMin && t.Pub >= _deltaRab && nb >= conf.deltaNbMin && nblissage > conf.deltaNbRab)
                            break;
                    }
                    nb++;
                }

                if (nextDate > limitFuture && nb > 0 && conf.noCollision)
                {
                    if (deltaattAux > 0)
                        deltaAtterrissage = deltaattAux;
                    else
                    {
                        var _deltaAtt = (nextDate - limitFuture).TotalDays / (double)nb;
                        if (_deltaAtt < deltaAtterrissage)
                            deltaAtterrissage = _deltaAtt;
                    }

                    if (deltaAtterrissage > intervalleMin)
                        deltaAtterrissage = intervalleMin;
                }
            }

            var tsatt = timeSpan.FromDays(deltaAtterrissage);
            if (tsatt.TotalMinute < 1)
                tsatt = timeSpan.FromMinutes(1);

            string deltas = string.Format("{0} {1} {2}->{3}", deltaLastRead0.ToString("0.##"), delta0Corr.ToString("0.##"), delta.ToString("0.##"), tsatt.TotalDay.ToString("0.##"));

            log.log("{0} {1}/{2} ({3}/{4}) [{5}] {6} {7} ({8}) lecture={9} ", deltas, nbRead, nbTotal, nbReads, nbTotals, album.Album, lastRead.track.Name, lastRead.Pub, pub2, deltaLecture.ToString("#.##"));


            nb = 0;
            for (int i = indexLastRead + 1; i < count; i++)
            {

                var t = list[i];

                if (conf.deltaCheckSelected)
                {
                    if (!t.Selected)
                        continue;
                    if (!t.Enabled)
                        continue;
                }
                var dt = limitFuture.AddMinutes((int)(tsatt.TotalMinute * nb)).truncateToMinute();


                var _delta = (dt - lastRead.Pub2).TotalDays;
                if (t.Pub >= dt || conf.enabled == sortMode.reset)
                    eraseSort(t, false, true);
                else
                {
                    if (cumulMin > 0 && cumulMax > 0 && conf.extPente == 0)
                    {
                        var __delta = (dt - t.Pub).TotalDays;
                        if (__delta > cumulMin)
                        {
                            __delta = borneCumul(__delta, cumulMin, cumulMax);
                            dt = t.Pub.AddDays(__delta).truncateToMinute();
                        }
                    }

                    writeComment(t, dt, true, true, Conf.Date0, Conf.NewDate0);
                    nb++;
                }


            }


            for (int i = 0; i < count; i++)
            {
                var track = list[i];
                if (track.Pub > currentPub && track.Pub2 > track.Pub && track.Pub2 <= currentPub2)
                {
                    var aux = currentPub2.AddMinutes(1);
                    log.log("correction2 pub2 pour respect ordre {0} -> {1} {2}", track.Pub2, aux, track);
                    track.Pub2 = aux;
                }

                currentPub = track.Pub;
                currentPub2 = track.Pub2;
            }
            */
            #endregion


        }



        private void eraseSort(TrackSort track, string desc, DateTime dateMoy)
        {
            writeComment(track, track.Pub, desc, dateMoy);
            //bool go = apply;
            //if (!go)
            //{
            //    go = true;
            //    if (!checkSelected && !track.track.Selected)
            //        go = false;
            //}
            //if (!go)
            //{
            //    track.Pub2 = track.Pub;
            //    return;
            //}

            ////if (!force && !track.Selected)
            ////    return;
            //if (conf.canGoBack || conf.enabled == sortMode.reset)
            //{
            //    if (!track.Played && track.Enabled)
            //    {
            //        DateTime pub = track.Pub;
            //        if (track.Pub2 >= date0 && pub <date0)
            //        {
            //            log.log("**********{0} pub2 erase passe en dessous de Date0 {1}->{2} ({3})", track.Name, track.Pub2, track.Pub, Conf.Date0);
            //            repeches.Add(track);
            //            // track.Pub2 = TrackInfoItunes.Date0.AddSeconds(nbrepeches);
            //            if (pub < dateRepeche)
            //                dateRepeche = pub;
            //        }
            //        else if (track.Pub2 >=newDate0 && pub < newDate0)
            //        {
            //            log.log("**********{0} pub2 erase passe en dessous de NewDate0 {1}->{2} ({3})", track.Name, track.Pub2, track.Pub, Conf.NewDate0);
            //            repeches.Add(track);
            //            // track.Pub2 = TrackInfoItunes.Date0.AddSeconds(nbrepeches);
            //            if (pub < dateRepeche)
            //                dateRepeche = pub;
            //        }
            //    }

            //    //}
            //    //else
            //    //{
            //    if (track.Pub2 != track.Pub)
            //        nbModif++;
            //    track.Pub2 = track.Pub;
            //    //}
            //    track.track.BuildComment();
            //    // writeComment(track);
            //}
        }

        //private void applyPub(TrackSort track)
        //{
        //    writeComment(track, track.Pub2, false, true, Conf.Date0, Conf.NewDate0);
        //}

        private void writeComment(TrackSort track, DateTime dt, string desc, DateTime pubMoy)
        {
            dt = dt.truncateToMinute();
            //bool go = apply;
            //if (!go)
            //{
            //    go = true;
            //    if (checkSelected && !track.track.Selected)
            //        go = false;
            //}
            //if (!go)
            //{
            //    track.Pub2 = dt;
            //    return;
            //}



            //if (checkSelected && !track.Selected)
            //    return;


            if (conf.canGoBack)
            {
                if (!track.Played && track.Enabled)
                {
                    if (track.pub20 >= date0 && dt < date0)
                    {
                        if (conf.canGoBackButForceSelected)
                        {
                            log.log("**********{0} pub2 set passe en dessous de Date0 MAIS repéché {1}->{2} ({3})", track.Name, track.pub20, dt, date0);
                            nbRepecheForce++;
                            dt = date0.AddMinutes(nbRepecheForce);
                        }
                        else
                        {
                            log.log("**********{0} pub2 set passe en dessous de Date0 {1}->{2} ({3})", track.Name, track.pub20, dt, date0);
                            repeches.Add(track);
                        }
                        if (dt < dateRepeche)
                            dateRepeche = dt;
                    }

                    //else if (track.pub20 >= newDate0 && dt < newDate0)
                    //{

                    //    if (conf.canGoBackButForceSelected)
                    //    {
                    //        log.log("**********{0} pub2 set passe en dessous de NewDate0 MAIS repéché {1}->{2} ({3})", track.Name, track.pub20, dt, date0);
                    //        nbRepecheForce++;
                    //        dt = date0.AddMinutes(nbRepecheForce);
                    //    }
                    //    else
                    //    {
                    //        log.log("**********{0} pub2 set passe en dessous de NewDate0 {1}->{2} ({3})", track.Name, track.pub20, dt, newDate0);
                    //        repeches.Add(track);
                    //    }

                    //    if (dt < dateRepeche)
                    //        dateRepeche = dt;

                    //}
                }
            }
            else
            {
                if (dt == track.pub20)
                {
                    logDebug.logNoDate("\t{0} {1} {2}\t{3}", track.Pub.ToString(DATE_FORMAT), dt.ToString(DAY_FORMAT), desc, track.Name);
                    return;
                }
                else if (dt < track.pub20)
                {
                    logDebug.logNoDate("\t{0} {1}<= {2} {3}\t{4}", track.Pub.ToString(DATE_FORMAT), track.pub20.ToString(DAY_FORMAT), dt.ToString(DAY_FORMAT), desc, track.Name);
                    return;
                }
            }
            var delta = (dt - track.Pub).TotalDays;
            var delta0 = (track.pub20 - track.Pub).TotalDays;

            var deltaMoy0 = (track.pub20 - pubMoy).TotalDays;
            var deltaMoy1 = (dt - pubMoy).TotalDays;


            var sbDelta = new StringBuilder();
            sbDelta.Append("(");
            var strD0 = delta0.ToString("#.#");
            var strD1 = delta.ToString("#.#");

            var strDM0 = deltaMoy0.ToString("#.#");
            var strDM1 = deltaMoy1.ToString("#.#");
            if (delta0 > 0 || deltaMoy0 != 0)
            {
                if (delta0 > 0)
                    sbDelta.Append(strD0);
                sbDelta.Append("|");
                //  if (deltaMoy0 > 0)
                sbDelta.Append(strDM0);
            }
            if (strD0 != strD1 || strDM1 != strDM0)
            {
                sbDelta.Append("->");
                if (delta > 0)
                    sbDelta.Append(strD1);
                sbDelta.Append("|");
                //  if (deltaMoy1 > 0)
                sbDelta.Append(strDM1);
            }
            sbDelta.Append(")");

            while (sbDelta.Length < 20)
                sbDelta.Append(" ");

            var strDelta = sbDelta.ToString();

            if (track.pub20 != dt)
            {

                if (track.pub20.truncateToMinute() != dt)
                {
                    //if (track.track.Selected)
                    //{
                    nbModif++;
                    var d = System.Math.Abs((track.pub20 - dt).TotalHours);
                    if (d > 1)
                        nbModifPertinent++;

                    var dd = System.Math.Abs((track.pub20 - dt).TotalMinutes);
                    if (dd <= 5)
                    {
                        log.log("poil de cul {0}", track);
                    }

                    // var str = string.Format("\t{0}\t{1}=>\t{2}({3})\t{4} {5}", track.Pub, track.pub20, dt, strDelta, desc, track.Name);
                    var str = string.Format("\t{0} {1}{2}\t{3}\t{4}", track.Pub.ToString(DATE_FORMAT), dt.ToString(DAY_FORMAT), strDelta, desc, track.Name); // ", track.pub20, dt, strDelta, desc, track.Name);
                    if (track.track.Selected)
                        log.logNoDate(str);
                    else
                        logDebug.logNoDate(str);
                    //}
                }
                track.Pub2 = dt;
            }
            else if (track.pub20 > track.Pub)
            {
                // if (track.track.Selected)
                var str = string.Format("\t{0} {1}{2}\t{3}\t{4}", track.Pub.ToString(DATE_FORMAT), dt.ToString(DAY_FORMAT), strDelta, desc, track.Name);
                // var str = string.Format("\t{0}\t{1}({2})\t{3} {4}", track.Pub, track.pub20, strDelta, desc, track.Name);
                if (track.track.Selected)
                    log.logNoDate(str);
                else
                    logDebug.logNoDate(str);
            }
            else
            {
                var sbBlanc = new StringBuilder();

                var str = string.Format("\t{0} {1}{2}\t{3}\t{4}", track.Pub.ToString(DATE_FORMAT), Regex.Replace(dt.ToString(DAY_FORMAT), ".", " "), strDelta, desc, track.Name);
                // var str = string.Format("\t{0} ({1})\t{2} {3}", track.Pub, strDelta, desc,track.Name);
                logDebug.logNoDate(str);
            }


            track.track.BuildComment();
            //  track.track.BuildComposer(); 
        }

        private static double borne(double coeff, double intervalle, double intervalleMin)
        {

            if (intervalle < intervalleMin)
                intervalleMin = intervalle;
            if (coeff <= 1)
                return coeff * intervalleMin;
            coeff -= 1; // 9  0.11
            var dminmax = intervalle - intervalleMin;

            var _delta = intervalle - dminmax / (1 + (intervalleMin / dminmax) * coeff);

            return _delta;
        }

        private static double borneCumul(double delta, double cumulMin, double cumulMax)
        {
            if (cumulMin < 0 || cumulMax < 0)
                return delta;
            if (delta < cumulMin)
                return delta;
            var coeff = delta / cumulMin;
            return borne(coeff, cumulMax, cumulMin);
        }

        private double _coeffLecture = -1;
        public double getCoeffLecture(TrackInfoItunes track)
        {
            if (_coeffLecture > 0)
                return _coeffLecture;
            int count = list.Count;
            int index = -1;
            for (int i = 0; i < count; i++)
            {
                if (list[i].track == track)
                {
                    index = i;
                    break;
                }
            }
            if (index < 0)
                return 0;

            var _histo = conf.getHisto(track.Rare);

            if (_histo > 0)
            {
                int nbTotal = 0;
                int nbRead = 0;
                double histo = _histo;




                DateTime limit = track.Pub.AddDays(-histo);
                for (int i = index - 1; i >= 0; i--)
                {
                    var t = list[i];
                    var dt = t.Pub;
                    if (dt < limit && nbTotal >= conf.totalMin)
                        break;

                    if (t.Played)
                        nbRead++;


                    nbTotal++;

                }

                if (nbTotal > 0)
                    _coeffLecture = nbRead / nbTotal;
                else
                    return 0;
            }
            else
                return 0;

            return _coeffLecture;



        }
    }
}]]></content>
  </file>
  <file path="\pdb.podcast\Sort\Sorter.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using pdb.util;
using pdb.podcast.Tuning.Sort;
using pdb.iit;

namespace pdb.podcast.Sort
{
    class Sorter
    {
        private List<TrackInfoItunes> tracks;
        private pdb.podcast.Tuning.Sort.Sort sort;
        private Dictionary<string, Album> dict = new Dictionary<string, Album>();
        private static int nbLaunch; 

        public Sorter(pdb.podcast.Tuning.Sort.Sort sort, IEnumerable<TrackInfoItunes> _list)
        {
            this.sort = sort;
            tracks = new List<TrackInfoItunes>();
            //   timeSpan limit = timeSpan.FromMinutes(sort.dureeMin); 
            foreach (TrackInfoItunes t in _list)
            {
                // if (t.Duree >= limit)
                tracks.Add(t);
            }
            tracks.Sort(new PodCastComparer());

            foreach (TrackInfoItunes track in tracks)
            {
                check(track);
            }
        }


        private void check(TrackInfoItunes track)
        {
            var album = track.TrackAlbum;

            string key = album.Album.ToLowerWithoutDiacritics();
            if (string.IsNullOrEmpty(key))
            {
                misc.log("pas d'album pour " + track);
                return;
            }

            if (!dict.ContainsKey(key))
            {
                SortItem item = sort;
                var _surcharge = sort.getItem(key);

                if (_surcharge != null)
                {
                    item = _surcharge;
                    Album found = null;
                    foreach (string sub in _surcharge.name)
                    {
                        if (dict.ContainsKey(sub))
                        {
                            found = dict[sub];
                            found.check(track);
                            return;
                        }
                    }
                }
                else
                {
                    var _rule = sort.getRule(album);
                    if (_rule != null)
                        item = _rule;
                }


                Album a = new Album(item, album);
                if (_surcharge != null)
                {
                    foreach (string sub in _surcharge.name)
                        dict.Add(sub, a);
                }
                else
                    dict.Add(key, a);
            }
            dict[key].check(track);
        }


        public void build()
        {
            Album.Init();


            foreach (Album a in dict.Values)
            {
                a.init();
            }

            foreach (Album a in dict.Values)
            {
                a.Build();
            }

            Album.Bilan();
            nbLaunch++; 
        }
        public static int NbLaunch { get { return nbLaunch; } }

        public void rebuild(List<TrackInfoItunes> selected)
        {
            var longs = new List<TrackInfoItunes>();
            var limit = timeSpan.FromMinutes(sort.dureeMin);
            foreach (TrackInfoItunes t in selected)
            {
                if (t.Duree >= limit)
                    longs.Add(t);
            }
            selected.Sort(new PodcastComparerPubPub2());
        }


    }
}
]]></content>
  </file>
  <file path="\pdb.podcast\Tuning\Sort.cs">
    <content><![CDATA[using System.Xml;
using pdb.util;
using System;
using System.Collections.Generic;
using pdb.podcast.Albums;

namespace pdb.podcast.Tuning.Sort
{
    public enum sortMode
    {
        no,
        reset,
        white,
        once,
        once_all,
        all,
        //  histo
    }

    public enum histoMode
    {
        /// <summary>
        /// Démarrage de l'histo sur Date0
        /// </summary>
        fix,
        /// <summary>
        /// Démarrage de l'histo sur le premier sélectionné
        /// </summary>
        selected,
        /// <summary>
        /// Démarrage de l'histo sur le dernier lu
        /// </summary>
        read

    }
    public class SortItem : SelectParamBase
    {
        /// <summary>
        /// nom de l'album ou suite d'albums
        /// </summary>
        new public List<string> name = new List<string>();

        public sortMode enabled;
        public bool checkBefore;
        public bool selectionBefore;
       
        ///// <summary>
        ///// prise en compte des longs podcasts
        ///// </summary>
        //public double dureeMin;
        /// <summary>
        /// intervalle max entre deux écoutes (une semaine)
        /// </summary>
        private double intervalle = 7;
        /// <summary>
        /// intervalle min entre deux écoutes (un jour)
        /// </summary>
        private double intervalleMin = 1;
        /// <summary>
        /// intervalle standard entre deux écoutes (un jour)
        /// </summary>
        private double intervalleMin0 = 1;
        /// <summary>
        /// intervalle max entre deux écoutes pour un rare
        /// </summary>
        private double intervalleR;
        /// <summary>
        /// intervalle min entre deux écoutes pour un rare
        /// </summary>
        private double intervalleMinR = 7;
        /// <summary>
        /// intervalle standard entre deux écoutes pour un rare
        /// </summary>
        private double intervalleMinR0 = 7;
        /// <summary>
        /// coeff intervalle par heure du dernier lu
        /// </summary>
        public double rapportDuree = 0;
        /// <summary>
        /// coeff intervalle par heure du dernier lu rare
        /// </summary>
        public double rapportDureeR = 0;
        /// <summary>
        /// On prend en compte la durée pour augmenter le coeff
        /// </summary>
        public bool dureeCoeff;
        /// <summary>
        /// On prend en compte la durée pour augmenter les bornes
        /// </summary>
        public double dureeBorne;
        /// <summary>
        /// On prend en compte la durée pour augmenter les bornes mais on n'augmente que le delta
        /// </summary>
        public double dureeBorneDelta;
        /// <summary>
        /// Densité en-dessous de laquelle l'album est considéré comme rare
        /// </summary>
        public double densiteMin = 0.1;
        /// <summary>
        /// On utilise la durée dans le calcul d'intervalleMin; 
        /// </summary>
        public bool minUseDuree = true;
        /// <summary>
        /// On utilise la durée dans le calcul d'intervalleMin pour les rares
        /// </summary>
        public bool minUseDureeR = true;
        /// <summary>
        /// On utilise la durée dans le calcul d'intervalleMax 
        /// </summary>
        public bool maxUseDuree = true;
        ///  <summary>
        /// On utilise la durée dans le calcul d'intervalleMax pour les rares
        /// </summary>
        public bool maxUseDureeR = true;
        ///// <summary>
        ///// nb d'écoutes maximum dans l'intervalle (typiquement 5)
        ///// </summary>
        //private double ecouteMax;
        ///// <summary>
        ///// nb d'écoutes maximum dans l'intervalle pour un rare
        ///// </summary>
        //private double ecouteMaxR;
        /// <summary>
        /// durée sur laquelle on fait des stats pour calculer la fréquence d'écoute
        /// </summary>
        private double histo;
        /// <summary>
        /// durée sur laquelle on fait des stats pour calculer la fréquence d'écoute pour un rare
        /// </summary>
        private double histoR;
        /// <summary>
        /// nombre d'items pris en comptepour l'historique
        /// </summary>
        private int nbHisto;
        /// <summary>
        /// nombre d'items pris en comptepour l'historique pour un rare
        /// </summary>
        private int nbHistoR;
        /// <summary>
        /// Dans le calcul de delta entre deux à suivre : nombre minimum d'éléments à prendre en compte
        /// </summary>
        public int deltaNbMin;
        /// <summary>
        /// Dans le calcul de delta entre deux à suivre : rab d'éléments à prendre en compte
        /// </summary>
        public int deltaNbRab;
        /// <summary>
        /// Dans le calcul de delta entre deux à suivre : intervalle minimum à prendre en compte en jours
        /// </summary>
        public double deltaMin;
        /// <summary>
        /// Dans le calcul de delta entre deux à suivre : rab d'intervalle à prendre en compte
        /// </summary>
        public double deltaRab;
        /// <summary>
        /// Dans le calcul de delta entre deux à suivre : rab d'intervalle à prendre en compte, en proportion de l'écart initial
        /// </summary>
        public double coeffRab;
        /// <summary>
        /// Ecart min entre deux podcasts non rares à l'atterrissage
        /// </summary>
        public double atterrissageMin = 0.5;

        /// <summary>
        /// Ecart min absolu
        /// </summary>
        private double atterrissageMin0 = 0.5;
        /// <summary>
        /// Ecart min entre deux podcasts rares à l'atterrissage
        /// </summary>
        public double atterrissageMinR = 1;

        /// <summary>
        /// Détermination de la densité à venir sur N jours
        /// </summary>
        public double futur = -1;
        /// <summary>
        /// Détermination de la densité à venir sur N jours pour les rares
        /// </summary>
        public double futurR = -1;

        /// <summary>
        /// Dans la correction du delta par rapport à la proportion de lus, une tolérance pour pouvoir par exemple laisser courir pendant une semaine
        /// </summary>
        public double tolerance = 35;

        /// <summary>
        /// Dans la correction du delta par rapport à la proportion de lus, une tolérance pour pouvoir par exemple laisser courir pendant un mois 
        /// </summary>
        public double toleranceR = 35;

        /// <summary>
        /// Dans le calcul de la tolérance, nb de morceaux à prendre en compte; 
        /// </summary>
        public int nbTolerance;

        /// <summary>
        /// Dans le calcul de la tolérance, nb de morceaux à prendre en compte pour les rares; 
        /// </summary>
        public int nbToleranceR;

        /// <summary>
        /// si dépassement on rappelle
        /// </summary>
        public bool toleranceNegative;

        /// <summary>
        /// pas d'empilage des tracks repoussés
        /// </summary>
        public bool noCollision;
        /// <summary>
        /// recalcul peut entrainer une date plus récente
        /// </summary>
        public bool canGoBack;
        /// <summary>
        /// recalcul peut entrainer une date plus récente, mais si ça le rend non séléctionné, on bricole pour qu'il soit quand même selectionné
        /// </summary>
        public bool canGoBackButForceSelected;
        /// <summary>
        /// écart constant entre les poscasts repoussés
        /// </summary>
        public bool deltaConst;

        /// <summary>
        /// Date0 lors de l'écoute du dernier podcast externe
        /// </summary>
        public DateTime extLast0;
        /// <summary>
        /// Décalage entre date du podcast supplémentaire et la date0
        /// </summary>
        public double extDelta;
        /// <summary>
        /// coefficient permettant le calcul de la prochaine date en fonction du retard entre la date0 et maintenant
        /// </summary>
        public double extPente;
        /// <summary>
        /// check de la date de dernière lecture
        /// </summary>
        public bool limitRead;
        ///// <summary>
        ///// Dans le calcul de delta ne pas inclure les non-selectionnés
        ///// </summary>
        //public bool deltaCheckSelected;
        /// <summary>
        /// handicap pour les nouveaux podcasts
        /// </summary>
        public int totalMin;
        /// <summary>
        /// Coefficient de rappel vers la valeur initiale pour les lus
        /// </summary>
        public double elastique = 1;

        /// <summary>
        /// Coefficient de rappel vers la valeur initiale pour les non lus
        /// </summary>
        public double elastique2 = 1;

        /// <summary>
        /// Cumul max de retard pour les non-rares
        /// </summary>
        public double cumulMax = -1;

        /// <summary>
        /// Cumul max de retard pour les rares
        /// </summary>
        public double cumulMaxR = -1;

        /// <summary>
        /// Cumul min de retard pour les non-rares
        /// </summary>
        public double cumulMin = -1;

        /// <summary>
        /// Cumul min de retard pour les rares
        /// </summary>
        public double cumulMinR = -1;

        /// <summary>
        /// Pas d'amortissement pour les vieux podcasts, vieux en jours par rapport à la date0
        /// </summary>
        public int deltaConstLate = -1;

        /// <summary>
        /// Utilisation de track virtuels pour éviter accidents (tracks manquants)
        /// </summary>
        public bool useVirtuel;

        /// <summary>
        /// Utilisation de track virtuels pour affectation pub2
        /// </summary>
        public bool useVirtuel2;

        /// <summary>
        /// Dès la pub2 remise à zero, les suivants aussi
        /// </summary>
        public bool erasedDone;
        /// <summary>
        /// On recalcule tout
        /// </summary>
        public bool recheck;
        /// <summary>
        /// En mode vacance on tasse moins les tracks. implique !recheck
        /// </summary>
        public bool vacances;
        /// <summary>
        /// on fait comme avant
        /// </summary>
        public bool oldMode;

        /// <summary>
        /// Dans le coeff, on prend en compte la densité
        /// </summary>
        public bool coeffDensite;


        /// <summary>
        /// On utilise des intervalles en fonction de la répartition effective ( et non pas déclarative ) des tracks. En clair les intervalles de 7j ou de 1j sont plus finement évalués
        /// </summary>
        public bool intervalleVar;
        /// <summary>
        /// Proportion entre 0 et 1 de l'atterrissage par rapport à intervalleMin
        /// </summary>
        public double atterrissageMinVar = 1;

        /// <summary>
        /// Détermination plutôt que déclaration de intervalleMin0
        /// </summary>
        private bool useintervalleFactMin;

        /// <summary>
        /// on limite aux valeurs "rare" (14j * duree) 
        /// </summary>
        private bool intervalleBorne;
        /// <summary>
        /// Un petit coup de rallonge pour les bientôt finis
        /// </summary>
        public bool honneurAuxVieux;
        /// <summary>
        /// On n'applique l'horizon qu'à la fin
        /// </summary>
        public bool horizonFinal;
        /// <summary>
        /// l'interpolation n'est pas linéaire mais au carré entre 0 et un et asymptotique vers 2 après
        /// </summary>
        public bool mixCarre;
        /// <summary>
        /// Aggrégation de la densite et de la duree positionnement du variable
        /// </summary>
        private bool mixVarDuree;

        /// <summary>
        /// Arret quand la date0 change
        /// </summary>
        public bool stopOnOffset;

        /// <summary>
        /// Arret quand une pub2 change
        /// </summary>
        public bool stopOnPub2;

        /// <summary>
        /// Coeff > 1 appliqué au rapport en vue de déterminer l'horizon. Permet de diminuer l'horiszon et nous donner un peu d'air - marre des séries à +10j
        /// </summary>
        public double rapportHorizonCoeff = 1.0;
        /// <summary>
        /// Coeff > 1 appliqué au rapport en vue de déterminer l'horizon pour les rares. Permet de diminuer l'horiszon et nous donner un peu d'air - marre des séries à +10j
        /// </summary>
        public double rapportHorizonCoeffR = 1.0; 

        public histoMode histoMode;

        private ITrackSelector selector;

        public SortItem()
        {
        }

        public SortItem(XmlElement parent, XmlElement node)
            : base(parent, node)
        {

            if (node == null)
                return;
            var str = "";
            builds("name", v => str = v);

            if (!string.IsNullOrEmpty(str))
            {
                foreach (string album in str.Split('|'))
                {
                    if (!string.IsNullOrWhiteSpace(album))
                        name.Add(album.ToLowerWithoutDiacritics());
                }
            }

            builds("enabled", v => str = v);

            if (!string.IsNullOrEmpty(str))
                enabled = (sortMode)Enum.Parse(typeof(sortMode), str);

            buildd("dureeMin", v => dureeMin = v);
            buildd("intervalle", v => intervalle = v);
            buildd("intervalleMin", v => intervalleMin = v);
            buildd("intervalleMin0", v => intervalleMin0 = v);
            buildd("intervalleR", v => intervalleR = v);
            buildd("intervalleMinR", v => intervalleMinR = v);
            buildd("intervalleMinR0", v => intervalleMinR0 = v);

            buildd("atterrissageMin", v => atterrissageMin = v);
            buildd("atterrissageMinR", v => atterrissageMinR = v);
            buildd("histo", v => histo = v);
            buildd("histoR", v => histoR = v);
            buildi("nbHisto", v => nbHisto = v);
            buildi("nbHistoR", v => nbHistoR = v);

            buildd("futur", v => futur = v);
            buildd("futurR", v => futurR = v);
            //buildd("ecouteMax", v => ecouteMax = v);
            //buildd("ecouteMaxR", v => ecouteMaxR = v);

            buildDate("extLast0", v => extLast0 = v);
            buildd("extDelta", v => extDelta = v);
            buildd("extPente", v => extPente = v);




            buildb("deltaConst", v => deltaConst = v);
            buildb("toleranceNegative", v => toleranceNegative = v);
            buildi("deltaConstLate", v => deltaConstLate = v);
            buildb("useVirtuel", v => useVirtuel = v);
            buildb("useVirtuel2", v => useVirtuel2 = v);

            buildb("noCollision", v => noCollision = v);
            buildb("checkBefore", v => checkBefore = v);
            buildb("selectionBefore", v => selectionBefore = v);
            buildb("limitRead", v => limitRead = v);
            buildb("canGoBack", v => canGoBack = v);
            // buildb("deltaCheckSelected", v => deltaCheckSelected = v);

            #region lissage
            buildi("deltaNbMin", v => deltaNbMin = v);
            buildi("deltaNbRab", v => deltaNbRab = v);

            buildd("deltaMin", v => deltaMin = v);
            buildd("deltaRab", v => deltaRab = v);

            #endregion

            builds("histoMode", v => str = v);
            histoMode = (histoMode)Enum.Parse(typeof(histoMode), str);

            buildi("totalMin", v => totalMin = v);

            buildd("elastique", v => elastique = v);
            buildd("elastique2", v => elastique2 = v);



            buildd("cumulMin", v => cumulMin = v);
            buildd("cumulMinR", v => cumulMinR = v);
            buildd("cumulMax", v => cumulMax = v);
            buildd("cumulMaxR", v => cumulMaxR = v);
            buildd("rapportDuree", v => rapportDuree = v);
            buildd("rapportDureeR", v => rapportDureeR = v);
            buildd("coeffRab", v => coeffRab = v);


            buildb("dureeCoeff", v => dureeCoeff = v);
            buildd("dureeBorne", v => dureeBorne = v);
            buildd("dureeBorneDelta", v => dureeBorneDelta = v);
            buildd("densiteMin", v => densiteMin = v);


            buildb("minUseDuree", v => minUseDuree = v);
            buildb("maxUseDuree", v => maxUseDuree = v);

            buildb("minUseDureeR", v => minUseDureeR = v);
            buildb("maxUseDureeR", v => maxUseDureeR = v);

            buildb("erasedDone", v => erasedDone = v);
            buildb("recheck", v => recheck = v);
            buildb("vacances", v => vacances = v);
            buildb("oldMode", v => oldMode = v);

            buildd("tolerance", v => tolerance = v);
            buildd("toleranceR", v => toleranceR = v);

            buildi("nbTolerance", v => nbTolerance = v);
            buildi("nbToleranceR", v => nbToleranceR = v);

            buildb("coeffDensite", v => coeffDensite = v);
            buildb("intervalleVar", v => intervalleVar = v);
            buildd("atterrissageMinVar", v => atterrissageMinVar = v);
            buildb("useintervalleFactMin", v => useintervalleFactMin = v);
            buildb("intervalleBorne", v => intervalleBorne = v);
            buildb("honneurAuxVieux", v => honneurAuxVieux = v);
            buildb("horizonFinal", v => horizonFinal = v);
            buildd("atterrissageMin0", v => atterrissageMin0 = v);
            buildb("mixCarre", v => mixCarre = v);
            buildb("mixVarDuree", v => mixVarDuree = v);
            buildb("stopOnOffset", v => stopOnOffset = v);
            buildb("stopOnPub2", v => stopOnPub2 = v);

            buildd("rapportHorizonCoeff", v => rapportHorizonCoeff = v);
            buildd("rapportHorizonCoeffR", v => rapportHorizonCoeffR = v); 

            this.selector = new TrackSelector(this);
        }
        /// <summary>
        /// donne l'intervalle plafond
        /// </summary>
        /// <param name="rare">album rare</param>
        /// <param name="duree">duree du dernier track en heures</param>
        /// <returns></returns>
        public double getIntervalle(bool rare, double duree, double intervalleMin0)
        {
            var _intervalle = rare && intervalleR > 0 ? intervalleR : intervalle;
            var _rapportDuree = rare ? rapportDureeR : rapportDuree;
            return getIntervalle(_intervalle, _rapportDuree, duree, intervalleMin0);
        }

        

        private double getIntervalle(double intervalle, double rapportDuree, double duree, double intervalleMin0)
        {
            var ret0 = intervalle;
            var ret1 = ret0;
            var ret2 = ret0;
            var coeff = duree * rapportDuree;
            if (coeff > 1)
            {
                if (dureeBorne > 0)
                {

                    // ex coeff =2
                    // avec dureeBornee = 0 => ret0
                    // avec dureeBornee = 0.1 =>0.9 +0.2    =>1.1 *ret0
                    // avec dureeBorne = 0.5 => 0.5 +1      =>1.5 *ret0
                    // avec dureeBorne = 0.9 => 0.1+1.8     =>1.9 *ret0
                    ret1 = ret0 * ((1 - dureeBorne) + coeff * dureeBorne);

                }
                if (dureeBorneDelta > 0)
                {
                    var delta = ret0 - intervalleMin0;
                    delta *= ((1 - dureeBorneDelta) + coeff * dureeBorneDelta);
                    ret2 = intervalleMin0 + delta;
                }
            }

            if (ret1 > ret2)
                return ret1;
            else
                return ret2;


        }

        private double getMix(double i, double ir, double X, double rapportDuree, double duree)
        {
            var coeff = rapportDuree * duree;
            if (coeff > 1)
                X *= coeff;
            return getMix(i, ir, X); 
        }
        /// <summary>
        /// Corrige le rapport pour determination de l'horizon 
        /// </summary>
        /// <param name="rapport"></param>
        /// <param name="X"></param>
        /// <returns></returns>
        public double getHorizonCorrec(double rapport, double X)
        {
            double r = rapportHorizonCoeffR;
            if (X < 0)
                r = rapportHorizonCoeff;
            //else if (X > 1)
            //{
            //}
            else
                r = rapportHorizonCoeff + X * (rapportHorizonCoeffR - rapportHorizonCoeff); 
            // r = getMix(rapportHorizonCoeff, rapportHorizonCoeffR, X);
            if (r < 1)
                r = 1; 
            var rapportModif = r * rapport;
            if (rapportModif > 1)
                rapportModif = 1;

            return rapportModif; 

        }

        private double getMix(double i, double ir, double X)
        {
            if (X <= 0)
                return i;
            else if (X >= 1 && intervalleBorne)
                return ir;
            if (mixCarre)
            {
                if (X <= 1)
                    return i + X * X * (ir - i); 
                // 1=> ir v = 2 *(ir-i)
                // y= ax2
                return (2 * ir) - ir / X; 
            }
            return i + X * (ir - i);
            // avec i=2 et ir =1 
            //X=0.1 => 2+ 0.01*-1=> 1.99 correct
            //X=0.9 => 2 -0.81 = 1.19
            //X=1.1=> 2- 1/1.1

        }
        public double getIntervalleVar(bool rare, double X, double duree, double intervalleMin0)
        {
            var _rapportDuree = rare ? rapportDureeR : rapportDuree;
            if (mixVarDuree)
                return getMix(intervalle, intervalleR, X, _rapportDuree, duree); 
           
            double _intervalle = getMix(intervalle, intervalleR,X);
            return getIntervalle(_intervalle, _rapportDuree, duree, intervalleMin0);
        }

        private double getCoeffDuree(double rapportDuree, double duree)
        {
            var coeff = duree * rapportDuree;
            if (coeff > 1)
                return coeff;
            return 1; 
        }

        public double getRapport(bool rare, double duree)
        {
            var rapport0 = rare ? intervalleR / intervalleMinR0 : intervalle / intervalleMin0;
            var coeff = rare ? duree * rapportDureeR : duree * rapportDuree;
            if (coeff > 1)
                return rapport0 * coeff;
            return rapport0;
        }

        public bool applyDuree(bool min, bool rare)
        {
            if (dureeCoeff)
                return false;
            bool use = rare ? (min ? minUseDureeR : maxUseDureeR) : (min ? minUseDuree : maxUseDuree);
            return use;
        }
        public double getIntervalleMin(bool rare, double duree)
        {
            var ret0 = rare && intervalleMinR > 0 ? intervalleMinR : intervalleMin;
            if (applyDuree(true, rare))
            {
                var coeff = rare ? duree * rapportDureeR : duree * rapportDuree;
                if (coeff > 1)
                    return ret0 * coeff;
            }
            return ret0;
        }

        public double getIntervalleMinVar(bool rare, double X, double duree)
        {
            if (mixVarDuree )
            {                
                if (applyDuree(true, rare))
                {
                    var _rapportDuree = rare ? rapportDureeR : rapportDuree;
                    return getMix(intervalleMin, intervalleMinR, X, rapportDuree, duree); 
                }
                else
                    return getMix(intervalleMin, intervalleMinR, X); 
                   
            }
            var ret0 = getMix(intervalleMin, intervalleMinR, X); 
            if (applyDuree(true, rare))
            {
                var coeff = rare ? duree * rapportDureeR : duree * rapportDuree;
                if (coeff > 1)
                    return ret0 * coeff;
            }
            return ret0;
        }

        public double getCoeff(bool rare, double coeff0, double duree)
        {

            var coeff = rare ? duree * rapportDureeR : duree * rapportDuree;
            if (coeff > 1)
                return coeff0 * coeff;

            return coeff0;

        }

        public double getFutur(bool rare)
        {
            return rare ? futurR : futur;
        }

        public double getTolerance(bool rare)
        {
            return rare ? toleranceR : tolerance;
        }

        public int getNbTolerance(bool rare)
        {
            return rare ? nbToleranceR : nbTolerance;
        }


        public double getIntervalleMin0(bool rare)
        {
            var ret0 = rare && intervalleMinR0 > 0 ? intervalleMinR0 : intervalleMin0;
            return ret0;
        }

        public double getIntervalleMin0Var(double X, double intervalleFactMin)
        {
            if (useintervalleFactMin)
                return intervalleFactMin;
            return getMix(intervalleMin0, intervalleMinR0, X);            
        }


        public double getatterrissageMinVar(double X, double intervalleFactMin)
        {
            if (useintervalleFactMin)
                return intervalleFactMin * atterrissageMinVar;
            var ret =  getMix(atterrissageMin, atterrissageMinR, X);
            if (ret < atterrissageMin0)
                ret = atterrissageMin0;
            return ret; 

        }
        public double getHisto(bool rare)
        {
            return rare && histoR > 0 ? histoR : histo;
        }
        public int getNbHisto(bool rare)
        {
            return rare && nbHisto > 0 ? nbHistoR : nbHisto;
        }
        //public double getEcouteMax(bool rare)
        //{
        //    return rare && ecouteMaxR > 0 ? ecouteMaxR : ecouteMax;
        //}
        ///// <summary>
        ///// Donne le recalage max par morceau pour atterissage: typiquement pour un non-rare :0.5, pour un rare, disons 1
        ///// </summary>
        ///// <param name="rare"></param>
        ///// <returns></returns>
        //public double getRecupMax(bool rare)
        //{
        //    double ini = getIntervalleMin0(rare);
        //    if (rare)
        //        return ini - atterrissageMinR;
        //    else
        //        return ini - atterrissageMin; 
        //}

        public double getAtterrissageMin(bool rare)
        {
            return rare ? atterrissageMinR : atterrissageMin;
        }

        internal bool select(ISelectable album)
        {
            return selector.select(album);
        }

        public double getCumulMax(bool rare)
        {
            return rare && cumulMaxR > 0 ? cumulMaxR : cumulMax;
        }
        public double getCumulMin(bool rare)
        {
            return rare && cumulMinR > 0 ? cumulMinR : cumulMin;
        }


    }
    public class Sort : SortItem
    {
        private List<SortItem> items = new List<SortItem>();
        private List<SortItem> rules = new List<SortItem>();

        public SortItem getItem(string key)
        {
            foreach (SortItem g in items)
            {
                if (g.name.Contains(key))
                    return g;

            }
            return null;
        }

        public SortItem getRule(TrackAlbum album)
        {
            foreach (SortItem r in rules)
            {
                if (r.select(album))
                    return r;
            }

            return null;
        }
        public Sort()
        {

        }

        public Sort(XmlElement node)
            : base(null, node)
        {
            if (node == null)
                return;
            foreach (XmlNode sub in node.ChildNodes)
            {
                if (sub is XmlElement)
                {
                    if (sub.Name == "album")
                    {
                        items.Add(new SortItem(node, sub as XmlElement));
                    }
                    else if (sub.Name == "rule")
                    {
                        rules.Add(new SortItem(node, sub as XmlElement));
                    }
                }
            }


        }




    }
}]]></content>
  </file>
</db>
