<db path="C:\bernard\db1\db4">
  <file path="\PieceDb.Consolid\CPieceComparer.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using pdb.gen.conf;
using pdb.obj;
using pdb.util;
using pdb.gen.albums;
using System.IO;
namespace pdb.gen
{
    public class CPieceComparerByGoodness : IComparer<Piece>
    {
        /// <summary>
        /// compareur de listes
        /// </summary>
        private static CPlayListComparer c_comparer = new CPlayListComparer();
        public static bool modeBatch = true;
        public int Compare(Piece x, Piece y)
        {
            return -x.RapportClassement(false).CompareTo(y.RapportClassement(false));
            //var cmp =  x.RapportClassement.CompareTo(y.RapportClassement);
            //if (cmp != 0)
            //    return -cmp;
            //cmp = x.Duration.CompareTo(y.Duration);
            //if (cmp != 0)
            //    return -cmp;
            //return x.PieceId.CompareTo(y.PieceId); 
            if (!modeBatch)
            {
                if (x.ClassPlayList == null)
                {
                    if (y.ClassPlayList == null)
                    {
                        return -(x.RatingCmp.CompareTo(y.RatingCmp));
                    }
                    else
                    {
                        return 1;
                    }
                }
                if (y.ClassPlayList == null)
                {
                    return -1;
                }
            }

            // gérer le cas ou les deux listes sont imbriquées
            // 3.4 > 33.5 et 3.2 < 33.0

            //if (x.isClassListNumeric && y.isClassListNumeric)
            //{
            String strX = x.ClassNameAndRating(false);
            String strY = y.ClassNameAndRating(false);
            var cmpnameRat = compareClassNameAndRating(strX, strY);
            if (cmpnameRat != 0) return cmpnameRat;
            //}
            if (!modeBatch)
            {

                CPlayList plX = x.ClassPlayList;
                CPlayList plY = y.ClassPlayList;

                //if( plX.isSubList(plY) || plY.isSubList(plX))
                //{
                //    string xName = plX.Name;
                //    string yName = plY.Name; 

                //}


                int l_plCmp = c_comparer.Compare(plX, plY);
                if (l_plCmp == 0)
                {
                    return -(x.RatingCmp.CompareTo(y.RatingCmp));
                }
                else
                {
                    return l_plCmp;
                }
            }
            else
                return -(x.RatingCmp.CompareTo(y.RatingCmp));


        }

        public static int compareClassNameAndRating(string strX, string strY)
        {
            int max = strX.Length > strY.Length ? strX.Length : strY.Length;
            for (int i = 0; i < max; i++)
            {
                int iX = strX.getInt(i); // CUtil.getInt(strX, i);
                int iY = strY.getInt(i);//CUtil.getInt(strY, i);
                if (iX != iY)
                    return -iX.CompareTo(iY);
            }
            return 0;
        }

    }

    public class CPieceComparerByGoodness2 : IComparer<Piece>
    {
        public int Compare(Piece x, Piece y)
        {
            return x.Rank.Quality.CompareTo(y.Rank.Quality);
        }
    }

    public class CPieceComparerByQualityAndLength : IComparer<Piece>
    {

        private static IComparer<Piece> c_comparer = new CPieceComparerByGoodness2();
        public virtual int Compare(Piece x, Piece y)
        {
            int l_cmp = c_comparer.Compare(x, y);
            if (l_cmp == 0)
                return -x.Rank.Lenght.CompareTo(y.Rank.Lenght);
            return l_cmp;
        }
    }

    public class CPieceComparerByQualityAndLength2 : IComparer<Piece>
    {
        int IComparer<Piece>.Compare(Piece x, Piece y)
        {
            return x.Rank.Twice.CompareTo(y.Rank.Twice);
        }
    }

    public class CPieceComparerByQualityAndLengthInv : IComparer<Piece>
    {

        private static IComparer<Piece> c_comparer = new CPieceComparerByGoodness2();
        public virtual int Compare(Piece x, Piece y)
        {
            int l_cmp = c_comparer.Compare(x, y);
            if (l_cmp == 0)
                return x.Rank.Lenght.CompareTo(y.Rank.Lenght);
            return l_cmp;
        }
    }

    public class CPieceComparerByQualityAndLengthInv2 : IComparer<Piece>
    {
        int IComparer<Piece>.Compare(Piece x, Piece y)
        {
            return x.Rank.TwiceInv.CompareTo(y.Rank.TwiceInv);
        }
    }

    /// <summary>
    /// tri pour la copie : En premier : les plus bas et les activés
    /// </summary>
    public class CPieceComparerByQualityLengthAndEnable : CPieceComparerByQualityAndLength
    {
        public override int Compare(Piece x, Piece y)
        {
            if (x.Enabled == y.Enabled)
            {
                return -base.Compare(x, y);
            }
            if (x.Enabled)
                return -1;
            return 1;
        }
    }


    public class CPieceComparerByLenght : IComparer<Piece>
    {

        public int Compare(Piece x, Piece y)
        {
            return x.Duration.CompareTo(y.Duration);
        }
    }

    public class CPieceComparerByLenght2 : IComparer<Piece>
    {

        public int Compare(Piece x, Piece y)
        {
            return x.Rank.Lenght.CompareTo(y.Rank.Lenght);
        }
    }

    public class CPieceInListComparer : IComparer<Piece>
    {

        //Public Function Compare(ByVal x As CPiece, ByVal y As CPiece) As Integer Implements System.Collections.Generic.IComparer(Of CPiece).Compare
        //    Dim val1 As Double = x.Rapport * Math.Pow(x.Duration, CDb.SortTimeProp)
        //    Dim val2 As Double = y.Rapport * Math.Pow(y.Duration, CDb.SortTimeProp)

        //    Dim l_cmp As Integer = val1.CompareTo(val2)
        //    If l_cmp <> 0 Then
        //        Return l_cmp
        //    Else
        //        Return x.Duration.CompareTo(y.Duration)
        //    End If
        //End Function
        /// <summary>
        /// Comparaison de deux fichiers en fonction du cumul des deux paramètre qualité et longueur
        /// 
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns></returns>
        /// <remarks>En gros on ajoute le log des classements qualité et longueur, pondérés par le coefficient sortimeProp
        /// 0 --> que la longueur prise en compte
        /// 1 --> que la qualité</remarks>
        public int Compare(Piece x, Piece y)
        {
            var val1 = CTuning.Calc(x.Rank, CConf.Sort);
            var val2 = CTuning.Calc(y.Rank, CConf.Sort);

            int l_cmp = val1.CompareTo(val2);
            if (l_cmp != 0)
            {
                return l_cmp;
            }
            else
            {
                return x.Duration.CompareTo(y.Duration);
            }

        }


    }

    public class PieceRestComparer : IComparer<Piece>
    {

        public int Compare(Piece x, Piece y)
        {
            //if ((x.Album == "A Lovaggkiraly" && x.Name == "Piste 04" && y.Album == "Only Built 4 Cuban Linx" && y.Name == "Shark Niggas (Biters)")
            //    || (y.Album == "A Lovaggkiraly" && y.Name == "Piste 04" && x.Album == "Only Built 4 Cuban Linx" && x.Name == "Shark Niggas (Biters)"))
            //{
            //    int toto = 0; 
            //}
            int cmp = x.Rank.TimeRest.CompareTo(y.Rank.TimeRest);
            if (cmp != 0)
                return cmp;

            return x.Rank.TwiceInv.CompareTo(y.Rank.TwiceInv);
            //cmp = x.QRank.CompareTo(y.QRank);
            //if (cmp != 0)
            //    return cmp; 

            //return - x.LRank.CompareTo(y.LRank);

        }
    }

    public class PieceRestComparer2 : IComparer<Piece>
    {
        public int Compare(Piece x, Piece y)
        {
            throw new NotImplementedException();
        }
    }



    public class PieceDeltaComparer : IComparer<Piece>
    {

        public int Compare(Piece x, Piece y)
        {
            int cmp = x.Rank.Delta.CompareTo(y.Rank.Delta);
            if (cmp != 0)
                return cmp;
            return x.QLRank.CompareTo(y.QLRank);

        }
    }

    public class PieceSortComparer : IComparer<Piece>
    {

        public int Compare(Piece x, Piece y)
        {
            int cmp = x.Rank.SortValue.CompareTo(y.Rank.SortValue);
            if (cmp != 0)
                return cmp;
            return -x.QLRank.CompareTo(y.QLRank);

        }
    }


    //public class PieceClassementDisplayComparer : IComparer<Piece>
    //{
    //    private static PieceTrackNumberComparer tn = new PieceTrackNumberComparer();
    //    public int Compare(Piece x, Piece y)
    //    {
    //        var xv = x.RapportClassement;
    //        var yv = y.RapportClassement;
    //        int cmp = 0;
    //        if (xv == 0m || yv == 0m)
    //            cmp = x.RapportClassement.CompareTo(y.RapportClassement);
    //        if (cmp != 0) return -cmp;
    //        cmp = x.VirtualClassement.CompareTo(y.VirtualClassement);
    //        if (cmp != 0) return -cmp;
    //        return tn.Compare(x, y);
    //        //  return -x.RapportClassement.CompareTo(y.RapportClassement);
    //    }
    //}

    public class PieceVirtualClassementComparer : IComparer<Piece>
    {
        private static PieceTrackNumberComparer tn = new PieceTrackNumberComparer();
        public int Compare(Piece x, Piece y)
        {
            int cmp = x.VirtualClassement.CompareTo(y.VirtualClassement);


            if (cmp != 0) return -cmp;
            //cmp = x.RapportClassement.CompareTo(y.RapportClassement);
            //if (cmp != 0) return -cmp;
            return tn.Compare(x, y);
            //  return -x.RapportClassement.CompareTo(y.RapportClassement);
        }
    }

    public class PieceClassementComparer : IComparer<PieceExtended>
    {
        private bool oldAsZero;
        private PieceExtended.mode mode = PieceExtended.mode.main;
        public PieceClassementComparer(bool oldAsZero)
            : this(oldAsZero, PieceExtended.mode.main)
        {

        }

        public PieceClassementComparer(bool oldAsZero, PieceExtended.mode mode)
        {
            this.oldAsZero = oldAsZero;
            this.mode = mode;
        }
        private static PieceTrackNumberComparerE tn = new PieceTrackNumberComparerE();
        public int Compare(PieceExtended x, PieceExtended y)
        {

            if (oldAsZero)
            {
                bool xRecent = x.LastClassementRecent;
                bool yRecent = y.LastClassementRecent;
                if (xRecent != yRecent)
                {
                    if (xRecent)
                        return -1;
                    return 1;
                }
            }
            int cmp = 0;


            if (mode == PieceExtended.mode.main)
                cmp = x.VirtualClassement.CompareTo(y.VirtualClassement);
            else if (mode == PieceExtended.mode.min)
                cmp = x.VirtualClassement2.CompareTo(y.VirtualClassement2);
            else
                cmp = x.Cumul.CompareTo(y.Cumul);

            if (cmp != 0) return -cmp;
            //cmp = x.RapportClassement.CompareTo(y.RapportClassement);
            //if (cmp != 0) return -cmp;
            return tn.Compare(x, y);
            //  return -x.RapportClassement.CompareTo(y.RapportClassement);
        }
    }

    public class PieceStackCmp : IComparer<Piece>
    {
        private static PieceTrackNumberComparer tn = new PieceTrackNumberComparer();
        public int Compare(Piece x, Piece y)
        {
            int cmp = x.RankAlbumSt.CompareTo(y.RankAlbumSt);
            if (cmp != 0) return -cmp;
            return tn.Compare(x, y);
        }

    }
    ///// <summary>
    ///// Donne l'ordre de copie si on s'intéresse aux morceaux les moins notés
    ///// </summary>
    //public class PieceClassementComparerInv : IComparer<Piece>
    //{
    //    public int Compare(Piece x, Piece y)
    //    {
    //        //if (x.Enabled != y.Enabled)
    //        //{
    //        //    return x.Enabled ? -1 : 1;
    //        //}

    //        if (x.IsNext != y.IsNext)
    //        {
    //            if (x.IsNext)
    //                return -1;
    //            return 1; 
    //        }
    //        var xv = x.RapportClassement;
    //        var yv = y.RapportClassement;

    //        int cmp = 0;
    //        if (xv > 0 && yv > 0)
    //        {
    //            cmp = xv.CompareTo(yv);
    //            if (cmp != 0) return cmp;
    //            cmp = x.VirtualClassement.CompareTo(y.VirtualClassement);
    //            if (cmp != 0) return cmp;
    //        }

    //        cmp = x.TrackNumber.CompareTo(y.TrackNumber);
    //        if (cmp != 0)
    //            return cmp;
    //        return x.Location.CompareTo(y.Location);
    //        //  return -x.RapportClassement.CompareTo(y.RapportClassement);
    //    }
    //}

    ///// <summary>
    ///// Donne l'ordre de copie si on s'intéresse aux morceaux les moins notés et si on veut optimiser autour du Next
    ///// </summary>
    //public class PieceClassementComparerExport : IComparer<Piece>
    //{
    //    public PieceClassementComparerExport(HashList<Piece> source)
    //    {
    //        this.source = source; 
    //    }
    //    private readonly HashList<Piece> source;
    //    public int Compare(Piece x, Piece y)
    //    {
    //        return source.IndexOf(x).CompareTo(source.IndexOf(y)); 
    //    }
    //}

    public class PieceDurationValueComparer : IComparer<Piece>
    {
        public int Compare(Piece x, Piece y)
        {
            return -x.Duration.CompareTo(y.Duration);
        }
    }

    public class PieceSortComparerList : IComparer<Piece>
    {

        public int Compare(Piece x, Piece y)
        {
            return x.Rank.Sort.CompareTo(y.Rank.Sort);
            //int cmp = x.Rank.SortValue.CompareTo(y.Rank.SortValue);
            //if (cmp != 0)
            //    return cmp;
            //return x.QLRank.CompareTo(y.QLRank);

        }
    }

    public class PieceTrackNumberComparer : IComparer<Piece>
    {
        public int Compare(Piece x, Piece y)
        {
            var cmp = x.TrackNumber.CompareTo(y.TrackNumber);
            if (cmp != 0)
                return cmp;
            var xpath = x.getLocation();
            var ypath = y.getLocation();

            try
            {
                var xf = Path.GetFileNameWithoutExtension(xpath);
                var yf = Path.GetFileNameWithoutExtension(xpath);
                cmp = xf.CompareTo(yf);
                if (cmp != 0)
                    return cmp;
            }
            catch
            {
            }
            return xpath.CompareTo(ypath);
            //  return x.TrackNumber.CompareTo(y.TrackNumber);
        }
    }

    internal class PieceTrackNumberComparerE : IComparer<PieceExtended>
    {
        public int Compare(PieceExtended x, PieceExtended y)
        {
            var xx = x.Piece;
            var yy = y.Piece;
            var cmp = xx.TrackNumber.CompareTo(yy.TrackNumber);
            if (cmp != 0)
                return cmp;

            var xpath = xx.getLocation();
            var ypath = yy.getLocation();

            try
            {
                var xf = Path.GetFileNameWithoutExtension(xpath);
                var yf = Path.GetFileNameWithoutExtension(xpath);
                cmp = xf.CompareTo(yf);
                if (cmp != 0)
                    return cmp;
            }
            catch
            {
            }
            return xpath.CompareTo(ypath);


            //  return x.TrackNumber.CompareTo(y.TrackNumber);
        }
    }

    class LastModifClassementComparer : IComparer<Piece>
    {
        PieceTrackNumberComparer trackCmp = new PieceTrackNumberComparer();
        public int Compare(Piece x, Piece y)
        {


            var dtx = x.UpdateClassement;
            var dty = y.UpdateClassement;
            int cmp = 0;
            if (dtx == null)
            {
                if (dty == null)
                {
                }
                else
                    cmp = -1;
            }
            else if (dty == null)
                cmp = 1;
            else
                cmp = dtx.Value.CompareTo(dty.Value);


            if (cmp != 0)
                return cmp;
            return trackCmp.Compare(x, y);
        }
    }

    class ClassementValueDecimal0Comparer : IComparer<Piece>
    {
        static PieceTrackNumberComparer trackCmp = new PieceTrackNumberComparer();
        public int Compare(Piece x, Piece y)
        {
            var cmp = x.ClassementValueDecimal(false).CompareTo(y.ClassementValueDecimal(false));
            if (cmp != 0)
                return cmp;
            return trackCmp.Compare(x, y);
        }
    }


}
]]></content>
  </file>
  <file path="\PieceDb.Consolid\stat\ClassStruct.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace pdb.gen.stat
{
    class ClassStruct
    {
        const int SIX = 6;
        const int NB = 11;
        private int[] tab = new int[NB];
        private int head;

        private int Level { get { return head + 4; } }

        private HashSet<decimal> occupés = new HashSet<decimal>();
        public List<int> getValues()
        {
            var list = new List<int>();
            for (int i = 0; i < Level && i < NB; i++)
                list.Add(tab[i]);
            return list;

        }
        public ClassStruct()
        {
            occupés.Add(0);
        }


        private decimal TruncateDecimal(decimal value, int precision)
        {
            decimal step = (decimal)Math.Pow(10, precision);
            decimal tmp = Math.Truncate(step * value);
            return tmp / step;
        }


        public void init(int head)
        {
            this.head = head;
        }

        public void position()
        {
            // voir si entamé
            //level 4 1.324.5 ==> level 2 1.4
            //  this.level = newLevel;
            bool hasMoved = false;
            for (int i = Level - 1; i < NB; i++)
            {
                if (tab[i] > 0)
                {
                    tab[i] = 0;
                    hasMoved = true;
                }
            }

            if (hasMoved)
            {
                //level 4 1.324.5 ==> level 2 1.4
                increment(this.Level - 1);
            }
            //else
            //    increment(newLevel); 

            //if (this.level != newLevel)
            //{
            //    int toto = 0; 
            //}


        }

        public bool isOccupe(decimal base10)
        {
            var arrondi = TruncateDecimal(base10, Level-1);
            return occupés.Contains(arrondi);
        }
        public bool isOccupe()
        {
            return occupés.Contains(getValueBase10());
        }

        // y a un loup on rentre un nombre 10 fois plus petit
        public void occupe(decimal base10)
        {
            var arrondi = TruncateDecimal(base10, Level-1);
            var added = occupés.Add(arrondi);
            if (added)
            {
            }
        }

        public void move()
        {
            increment(this.Level);
        }



        public decimal getValue()
        {
            decimal k = 1m;
            decimal ret = 0m;
            for (int i = 0; i < Level; i++)
            {
                ret += k * tab[i];
                k /= SIX;
            }
            return ret;
        }

        public decimal getValueBase10()
        {
            decimal k = 1m;
            decimal ret = 0m;
            for (int i = 0; i < Level; i++)
            {
                ret += k * tab[i];
                k /= 10;
            }
            return ret;
        }

        public decimal getNextValue(int level)
        {
            decimal k = 1;
            decimal ret = 0;
            for (int i = 0; i < level && i < NB; i++)
            {
                var v = tab[i];
                if (i == level - 1)
                    v++;
                ret += k * v;
                k /= SIX;
            }
            return ret;
        }



        private void increment(int level)
        {
            if (level < head)
                head = level;
            int index = level - 1;
            if (index < 0)
                return;



            int v = tab[index];
            v++;
            if (v < SIX)
            {
                tab[index] = v;
                //if (occupés.Contains(getValueBase10()))
                //    increment(l); 
            }
            else
            {
                tab[index] = 0;
                increment(level - 1);
            }


        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();

            for (int i = 0; i < Level && i < NB; i++)
            {

                sb.Append(tab[i]);
                if (i == Level - 2)
                    sb.Append(".");
                else if ((i + 1) % 4 == 0)
                    sb.Append(" ");
            }

            //sb.Append(" reste:");
            //for (int i = level; i < NB; i++)
            //{
            //    sb.Append(" ");
            //    sb.Append(tab[i]);
            //}


            sb.Append(" head:");
            sb.Append(head);

            return sb.ToString();

        }
    }
}
]]></content>
  </file>
  <file path="\PieceDb.Consolid\stat\Condenseur.cs">
    <content><![CDATA[using System.Collections.Generic;
using System.Text.RegularExpressions;
using System;
using pdb.util;
using System.IO;
using pdb.gen.conf;

namespace pdb.gen.stat
{
    public class Condenseur
    {
        private Regex reg = new Regex("[6789]");
        public const string FILE = @"..\compact.txt";
        public const string FILE_SOV = @"..\compact_sov.txt";
        const char SEP = ';';

        private List<NewClassement> list;
        private int total;
        const int MIN = 6;
        const int MAX = 36;
        const double PART = 6;
        const int MAX_LEVEL = 9;
        double moy;

        /// <summary>
        /// Liste candidate 1234.2  au million 1234.2 ==> 1 234 200
        /// </summary>
        ClassStruct currentListLevel = new ClassStruct();


        const int MILLION = 1000 * 1000;

        int index = 0;

        /// <summary>
        /// Fichier de dauvegarde
        /// </summary>
        System.IO.TextWriter tw;
        /// <summary>
        /// éléments enregistrés
        /// </summary>
        HashSet<int> hs = new HashSet<int>();


        /// <summary>
        /// Liste à placer
        /// </summary>
        List<NewClassement> nextList = new List<NewClassement>();





        public Condenseur(IEnumerable<Piece> list)
        {
            this.list = new List<NewClassement>();
            foreach (Piece piece in list)
            {
                if (piece.ClassementValueDecimal(false) > 0)
                    this.list.Add(new NewClassement(piece));
            }
            this.list.Sort((x, y) => x.Piece.ClassementValueDecimal(false).CompareTo(y.Piece.ClassementValueDecimal(false)));
            // this.list.Reverse();
            this.total = this.list.Count;

        }

        public List<NewClassement> NewClass { get { return list; } }

        private NewClassement lastItem;
        const decimal EPSILON = 0.001m * 0.001m * 0.001m * 0.001m;
        int headLevel = 5;
        private void affect(int level, int nb)
        {
            if (index >= total)
                return;


            if (nb <= 6)
            {
                int nbRange = 0;
                currentListLevel.position();

                while (true)
                {
                    if (nbRange >= nb)
                        break;

                    var item = list[index];
                    lastItem = item;

                    Piece piece = item.Piece;
                    bool newp = hs.Add(piece.MasterId);

                    var values = currentListLevel.getValues();
                    item.setLevel(values);

                    if (newp)
                    {

                        var newc = item.getClassement();
                        var compact = Piece.classementHash.getCache(newc);


                        if (compact.ClassementValueDecimal == 0 || currentListLevel.isOccupe(compact.ClassementValueDecimal))
                        {

                            nbRange++;
                            currentListLevel.move();
                            continue;
                        }
                    }





                    //  bool compacte = false;

                    //if (piece.Enabled && piece.ClassementACompacter)
                    //{





                    if (Piece.Compact)
                    {

                        if (piece.setClassementCompact(item.getClassement()))
                        {
                            //misc.log("fin du compactage pour {0}", piece);
                            //index = total;
                            //return;

                            //tw.Write(piece.MasterId);
                            //tw.Write(SEP);
                            //tw.WriteLine(item.getClassement());
                            //nbRange++;
                            // compacte = true;

                        }
                    }

                    else
                        piece.setClassement(item.ClassList, item.Rating);
                    currentListLevel.occupe(item.Piece.ClassementValueDecimal(true));
                    //if (newp)
                    //{
                    //    nbRange++;
                    //    currentListLevel.move();
                    //}

                    index++;
                    if (index >= total)
                        return;

                    // currentListLevel.move();



                    //}
                    //else
                    //{

                    //  }




                    //if (compacte)
                    //{
                    //    var cl = lastItem.Piece.ClassementValueDecimal(false);
                    //    var curr = currentListLevel.getValueBase10();

                    //    if (curr - EPSILON <= cl)
                    //    {
                    //        currentListLevel.move();
                    //    }
                    //}

                }


            }
            else
            {
                // répartition
                int nbRestant = nb;
                for (int idir = 0; idir < 6; idir++)
                {
                    decimal nbth = (decimal)nbRestant / ((decimal)6 - (decimal)idir);
                    int subNb = (int)System.Math.Ceiling(nbth);
                    affect(level + 1, subNb);
                    nbRestant -= subNb;
                }
            }



        }

        private void load()
        {
            var dict = new Dictionary<int, Piece>();
            foreach (NewClassement nc in list)
            {
                var p = nc.Piece;
                if (!dict.ContainsKey(p.MasterId))
                    dict.Add(p.MasterId, p);

            }
            var lines = File.ReadAllLines(FILE);

            foreach (string line in lines)
            {
                if (string.IsNullOrWhiteSpace(line))
                    continue;
                var tab = line.Split(SEP);
                if (tab.GetLength(0) < 2)
                    continue;
                int id = Convert.ToInt32(tab[0]);
                if (!dict.ContainsKey(id))
                    continue;
                var piece = dict[id];
                if (Piece.Compact)
                {
                    if (piece.Enabled && piece.ClassementACompacter)
                        piece.setClassementCompact(tab[1]);
                }

            }

        }


        public static void deleteFile()
        {
            var f = new FileInfo(FILE);
            if (f.Exists)
            {
                f.CopyTo(FILE_SOV, true);
                f.Delete();
            }

        }
        public void gener2()
        {
            if (CConf.ConfGen.AlbumSort.compactAny)
                deleteFile();
            else if (File.Exists(FILE))
            {
                load();
                return;
            }
            Piece.resetCompact();
            using (tw = new System.IO.StreamWriter(FILE))
            {

                decimal densite = 1.0m;

                //moy = total + 100;
                //for (int i = 0; i < MAX_LEVEL; i++)
                //{
                //    moy /= PART;
                //}
                currentListLevel = new ClassStruct(); // list[0].Piece.ClasssementVakdlue;
                currentListLevel.init(7);
                int phase = 0;
                while (true)
                {
                    if (index >= total)
                        break;
                    NewClassement nPiece = list[index];
                    Piece piece = nPiece.Piece;
                    var classement = piece.ClassementValueDecimal(false);
                    if (classement <= 0)
                    {
                        index++;
                        continue;
                        // moy = 90; nbPieceByLevel = 10;
                    }

                    // 
                    var v = currentListLevel.getValue();
                    var v2 = piece.RapportClassement(false);

                    if (v2 > v)
                        v = v2;

                    if (v < 1)
                    {
                        if (phase == 0)
                            densite = 6;
                        else if (phase < 3)
                            densite = 6 - phase;
                        else
                        {
                            //if (currentListLevel < 0.1 * MILLION)
                            densite = 4 - 2 * v;
                            //else
                            //    densite = 6.444444444444 - 4.44444444 * (double)currentListLevel / MILLION; 
                        }

                    }
                    else if (v < 2)
                        densite = 3 - v;
                    //else if (currentListLevel < 2 * MILLION)
                    //{
                    //    densite = 3 - (double)currentListLevel / MILLION;
                    //}
                    else
                        densite = 1;

                    //densité = 1 ==> 6t par liste pour une profondeur de 4 (1234.5)
                    // je veux une distribution correspondant à une densité de 1 (6 par liste)

                    /*
    type    ex      nb	    niveau
    d	    1	    1296	1
    d	    1,2	    216	    2
    d	    1,23	36	    3
    l	    1,234	6	    4
    i	    1,234,5	1	    5

    // pour éviter de m'emmerder, je peux simplement remplir chaque niveau 3 avec les 36 * densité éléments. en descendant plus bas si nécessaire
    // soit 36 éléments normalement, mais 216 avec une densité 6 par exemple
                     * 
                     * A chaque passe , je positionne la structure au pas suivant profondeur 3 
                     * je calcule le nb d'éléments à répartir
                     * ex densité 1.1 : 36 *1.1 = 39.6 soit 7 + 7 + 7 + 6 +6
                     * pour chaque répartition, je descend en profondeur jusqu'à obtenir une densité relative <=1
                     * Soit : 2+1+1+1+1+1
                     *        2+1+1+1+1+1
                     *        2+1+1+1+1+1
                     *        1+1+1+1+1+1
                     *        1+1+1+1+1+1
                     *        
                     * au niveau 3
                
                     * 
                     * Comment on fait ? 
                     * fonction récursive? 
                     * */

                    //var d1 = densite;
                    //var incr = 1;
                    //var depth = 4; 

                    //while (true)
                    //{
                    //    if (d1 <= 1)
                    //        break;
                    //    depth++;
                    //    d1 /= 6; 
                    //}



                    //  densite = densite * 0.5; 
                    //else if (classement < 0.1)
                    //{ moy = 36; nbPieceByLevel = 6; }
                    //else if (classement < 0.2)
                    //{ moy = 24; nbPieceByLevel = 4; }
                    //else if (classement < 1)
                    //{ moy = 18; nbPieceByLevel = 3; }
                    //else if (classement < 2)
                    //{ moy = 12; nbPieceByLevel = 2; }
                    //else { moy = 6; nbPieceByLevel = 1; }

                    // 1234.2  au million 1234.2 ==> 1 234 200
                    //cas densite 1 100
                    //cas densite 2 100
                    // cas densite 3 100

                    // valeurs possibles de l'increment 1,2,3,10,20,30,100,200
                    //// maintenant 1234.2 ==> 1 234 200
                    //int increment = 200; // par 3
                    //int depth = 4;
                    //if (densite > 1)
                    //{ increment = 100; }
                    //if (densite > 2)
                    //{ increment = 30; depth = 5; }
                    //if (densite > 3)
                    //    increment = 20;
                    //if (densite > 6)
                    //{ increment = 10; }
                    //if (densite > 12)
                    //{ increment = 3; depth = 6; }
                    //if (densite >= 24)
                    //    increment = 1;
                    //var _current0 = currentListLevel;

                    misc.log("compact phase {0} courant {1} classement={2} densite {3} ", phase, currentListLevel, piece.ClassementValueDecimal(false), densite);

                    if (index >= total)
                        break;
                    decimal nbth = densite * 1296.0m;
                    int nbARepartir = (int)System.Math.Ceiling(nbth);

                    affect(headLevel, nbARepartir);
                    //  headLevel = currentListLevel.Level; 

                    phase++;
                    //if (phase >= 35)
                    //{
                    //    int toto = 0;
                    //}

                }


                //    while (currentListLevel < _current0 + 1000)
                //    {
                //        do
                //        {
                //            currentListLevel = currentListLevel + 1;
                //        }
                //        while (reg.IsMatch(currentListLevel.ToString()));
                //        nPiece.setLevel(currentListLevel); 
                //    }


                //    if (currentListLevel >= _current0 + 1000)
                //    {
                //        _current0 = currentListLevel;
                //        doWork2();
                //        nextList.Clear();

                //    }               
                //    nextList.Add(nPiece);

                //}
                //doWork2();

                //            foreach (NewClassement np in list)
                //            {
                //                Piece piece = np.Piece;
                //#if COMPACT
                //                piece.setClassementCompact(np.getClassement());
                //#else
                //                 piece.setClassement(np.ClassList, np.Rating);
                //#endif


                //            }
            }



            //private void doWork2()
            //{
            //    //   milieuCand = nbPiece + 0.5 * nextList.Count;

            //    foreach (NewClassement _new in nextList)
            //    {
            //        _new.setLevel(currentListLevel, 5);
            //        lastItemInConstruction = _new;
            //        nbPiece++;
            //    }


            //    incrementCurrentListLevelMinus();
            //}

            //    while (true)
            //    {
            //        if (milieuCand <= _objectif)
            //        {

            //            if (lastItemInConstruction != null)
            //            {
            //                incrementCurrentListLevelMinus();
            //            }

            //            foreach (NewClassement _new in nextList)
            //            {
            //                _new.Level = currentListLevel;
            //                lastItemInConstruction = _new;
            //                nbPiece++;
            //            }

            //            nextList.Clear();

            //            break;
            //        }

            //        changeCurrentList();

            //    }
            //}

            #region OLD
            //public void gener()
            //{
            //    //1. total
            //    total = list.Count;
            //    moy = total + 100;
            //    for (int i = 0; i < MAX_LEVEL; i++)
            //    {
            //        moy /= PART;
            //    }



            //    currentClassement = list[0].Piece.ClassementValueDecimal;
            //    for (int i = 0; i < total; i++)
            //    {
            //        NewClassement nPiece = list[i];
            //        Piece piece = nPiece.Piece;
            //        var classement = piece.ClassementValueDecimal;
            //        if (classement != currentClassement)
            //        {
            //            currentClassement = classement;
            //            doWork();
            //        }

            //        nextList.Add(nPiece);

            //    }

            //    doWork();

            //    foreach (NewClassement np in list)
            //    {
            //        Piece piece = np.Piece;
            //        piece.setClassement(np.ClassList, np.Rating);

            //    }
            //}

            //private void doWork()
            //{
            //    milieuCand = nbPiece + 0.5 * nextList.Count;
            //    while (true)
            //    {
            //        if (milieuCand <= _objectif)
            //        {

            //            if (lastItemInConstruction != null)
            //            {
            //                incrementCurrentListLevelMinus();
            //            }

            //            foreach (NewClassement _new in nextList)
            //            {
            //                //  _new.setLevel(currentListLevel, 4);
            //                lastItemInConstruction = _new;
            //                nbPiece++;
            //            }

            //            nextList.Clear();

            //            break;
            //        }

            //        changeCurrentList();

            //    }
            //}

            //private void incrementCurrentListLevel()
            //{
            //    nbList++;
            //    do
            //    {
            //        //     currentListLevel = (int)(currentListLevel) + 10;
            //    }
            //    while (reg.IsMatch(currentListLevel.ToString()));
            //    calculObj();

            //}

            //private void incrementCurrentListLevelMinus()
            //{
            //    var _old = currentListLevel;
            //    do
            //    {
            //        //        currentListLevel = currentListLevel + 1;
            //    }
            //    while (reg.IsMatch(currentListLevel.ToString()));
            //    //if ((int)_old != (int)currentListLevel)
            //    //{
            //    //    nbList++;
            //    //    lastItemInConstruction = null;
            //    //}
            //    calculObj();

            //}

            //private void calculObj()
            //{
            //    _objectif = moy * nbList;
            //}

            //private void changeCurrentList()
            //{
            //    incrementCurrentListLevel();
            //    lastItemInConstruction = null;
            //}

            #endregion

        }

    }
}
]]></content>
  </file>
</db>
