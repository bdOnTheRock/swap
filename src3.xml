<db path="C:\bernard\db2\">
  <file path="buro\buroSimple\Walpaper.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using buroSimpleLib;
using System.IO;
using System.Drawing;
using System.Drawing.Imaging;
using System.Threading;
using System.Diagnostics;
using System.Windows.Forms;
using Microsoft.Win32;
using System.Drawing.Drawing2D;

namespace buroSimple
{
    class Walpaper
    {
        int HAUTEUR;
        int LARGEUR;
        const string TMP_FILE = @"C:\Temp\wp.bmp";
        const string TMP_FILE1 = @"C:\Temp\wp1.bmp";
        const string INDEX_FILE = @"C:\Temp\wp.index.txt";


        public double delay = 30;
        public bool unique = false;
        private readonly IntPtr _ScreenStateNotify;
        private bool GO;
        public void go()
        {
            GO = true;


            SystemEvents.PowerModeChanged += new PowerModeChangedEventHandler(SystemEvents_PowerModeChanged);



            HAUTEUR = 1080;
            LARGEUR = 1920;
            var list = new List<FileDto>();
            using (StreamReader sr = new StreamReader(@"C:\Temp\buro1.txt"))
            {
                string line = "";
                while ((line = sr.ReadLine()) != null)
                {
                    if (string.IsNullOrEmpty(line))
                        continue;

                    try
                    {
                        FileDto fd = FileDto.FromLine(line); //  new FileDto() { Path = tab[0], Size = Convert.ToInt64(tab[1]) };
                        if (fd != null)
                            list.Add(fd);
                    }
                    catch
                    {
                    }

                }
            }

            list.Sort((x, y) =>
            {
                int cmp = x.Pixels().CompareTo(y.Pixels());
                if (cmp != 0)
                    return cmp;
                cmp = x.Size.CompareTo(y.Size);
                if (cmp != 0)
                    return cmp;
                return x.Path.CompareTo(y.Path);
            });

            int count = list.Count;

            string path0 = "";
            int index0 = 0;
            if (File.Exists(INDEX_FILE))
            {
                path0 = File.ReadAllText(INDEX_FILE).Trim();
            }

            if (!string.IsNullOrEmpty(path0))
            {
                for (int i = 0; i < count; i++)
                {
                    if (list[i].Path == path0)
                    {
                        index0 = i;
                        break;
                    }
                }
            }

            HashSet<string> hs = new HashSet<string>();
            int pixels = -1;
            long size = -1;
            for (int i = index0 + 1; i < count; i++)
            {
                if (!GO)
                {
                    Thread.Sleep(1000);
                }
                FileDto f = list[i];
                Console.WriteLine("candidat " + f);
                if (f.Size > size || f.Pixels() > pixels)
                {
                    hs.Clear();
                    size = f.Size;
                    pixels = f.Pixels();
                }
                else
                {
                    if (unique)
                        continue;
                }

                if (!hs.Add(Path.GetFileName(f.Path)))
                    continue;
                try
                {
                    if (createFile(f))
                    {
                        WinAPI.BmpLoad(TMP_FILE);
                        File.WriteAllText(INDEX_FILE, f.Path);
                        Thread.Sleep((int)(delay * 1000.0));
                    }
                    else
                    {
                        Console.WriteLine(f + " blank");
                        continue; 
                    }

                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                }
            }
        }

        void SystemEvents_PowerModeChanged(object sender, PowerModeChangedEventArgs e)
        {
            Console.WriteLine("SystemEvents_PowerModeChanged:" + e.Mode.ToString());
            if (e.Mode == PowerModes.Resume)
                GO = true;
            else GO = false;
        }

        private bool createFile(FileDto f)
        {
            Bitmap img = new Bitmap(f.Path);

            int largeur0 = img.Width;
            int hauteur0 = img.Height;

            Console.WriteLine("{0}x{1} {2}", largeur0, hauteur0, f.HumanReadableSize);

            double r0 = (double)HAUTEUR / (double)LARGEUR;

            int largeurTrame;
            int hauteurTrame;

            double r = (double)hauteur0 / (double)largeur0;


            Bitmap trame;


            if (r > r0)
            {
                // image pas assez large --> ajout largeur

                hauteurTrame = hauteur0;
                largeurTrame = Convert.ToInt32((double)hauteur0 / (double)r0);

            }
            else
            {
                // image trop large --> bandes en haut et en bas

                largeurTrame = largeur0;
                hauteurTrame = Convert.ToInt32((double)largeur0 * (double)r0);
            }

            trame = new Bitmap(largeurTrame, hauteurTrame);
            Graphics graphics = Graphics.FromImage(trame);

            //graphics.CompositingMode = CompositingMode.SourceCopy;
            //graphics.CompositingQuality = CompositingQuality.HighQuality;
            //graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            //graphics.SmoothingMode = SmoothingMode.HighQuality;
            //graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

            int xrec = (largeurTrame - largeur0) / 2;
            int yrec = (hauteurTrame - hauteur0) / 2;
            Rectangle centré = new Rectangle(xrec, yrec, largeur0, hauteur0);
            graphics.DrawImage(img, centré, 0, 0, largeur0, hauteur0, GraphicsUnit.Pixel);


            trame.Save(TMP_FILE, ImageFormat.Bmp);
            trame.Dispose();
            img.Dispose();
            graphics.Dispose();

            // verif
            var imgVerif = ImageUtil.Scan(TMP_FILE);
            if (imgVerif != null)
            {
                imgVerif.Dispose();
                return true;
            }
            return false;

            //using (Bitmap fs = new Bitmap(LARGEUR, HAUTEUR))
            //{
            //    Image i0 = null;
            //    Image i1 = null;
            //    using (var g = Graphics.FromImage(fs))
            //    {

            //        if (File.Exists(TMP_FILE))
            //        {
            //            i0 = Image.FromFile(TMP_FILE);
            //            gr.DrawImage(i0, new Rectangle(0, 0, LARGEUR, HAUTEUR), 0, 0, LARGEUR, HAUTEUR, GraphicsUnit.Pixel);
            //        }

            //        if (File.Exists(TMP_FILE1))
            //        {
            //            i1 = Image.FromFile(TMP_FILE1);
            //            gr.DrawImage(i0, new Rectangle(0, 0, LARGEUR, HAUTEUR), 0, 0, LARGEUR, HAUTEUR, GraphicsUnit.Pixel);
            //        }
            //    }
            //    fs.Save(TMP_FILE, ImageFormat.Bmp);
            //    if (i0 != null)
            //        i0.Dispose();
            //    if (i1 != null)
            //        i1.Dispose();
            //}
        }
    }
}
]]></content>
  </file>
  <file path="buro\buroSimpleLib\ImageUtil.cs">
    <content><![CDATA[using pdb.util;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.Linq;
using System.Text;

namespace buroSimpleLib
{
    public static class ImageUtil
    {
        public static unsafe Image Scan(string file)
        {
            int LEVEL_MIN=0;
            Bitmap b = null;
            DateTime debut = DateTime.Now;
            try
            {
                b = new Bitmap(file);//note this has several overloads, including a path to an image
            }

            catch
            {
                return null;
            }
            DateTime debutScan = DateTime.Now;
            BitmapData bData = b.LockBits(new Rectangle(0, 0, b.Width, b.Height), ImageLockMode.ReadOnly, b.PixelFormat);

            var Depth = Bitmap.GetPixelFormatSize(b.PixelFormat);

            //  byte bitsPerPixel = Bitmap.GetBitsPerPixel(bData.PixelFormat);

            /*This time we convert the IntPtr to a ptr*/
            byte* scan0 = (byte*)bData.Scan0.ToPointer();
            bool ok = false;
            for (int i = 0; i < bData.Height; ++i)
            {
                if (ok)
                    break;
                for (int j = 0; j < bData.Width; ++j)
                {
                    byte* data = scan0 + i * bData.Stride + j * Depth / 8;

                    //data is a pointer to the first byte of the 3-byte color data
                    //data[0] = blueComponent;
                    //data[1] = greenComponent;
                    //data[2] = redComponent;
                    if (data[0] > LEVEL_MIN || data[1] > LEVEL_MIN || data[2] > LEVEL_MIN)
                    {
                        ok = true;
                        break;
                    }
                }
            }

            b.UnlockBits(bData);

            var ts = (DateTime.Now - debut).TotalMilliseconds.ToString("0");
            var tsLoad = (debutScan - debut).TotalMilliseconds.ToString("0");

            var tsScan = (DateTime.Now - debutScan).TotalMilliseconds.ToString("0");
            if (!ok)
            {
                ConsoleLogger.log("Blank {0} {1} ms", file, tsScan);
                b.Dispose();
                return null;
            }
            else if (ts.Length >= 3)
                ConsoleLogger.log("load:{0}ms scan:{1}ms total:{2} ms", tsLoad, tsScan, ts);
            return b;
        }
    }
}
]]></content>
  </file>
  <file path="buro\buroSimpleSearch\Program.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using pdb.util.ordo;
using buroSimpleLib;
using System.IO;
using System.Drawing;
using System.Threading;
using pdb.util;
using System.Configuration;
using System.Drawing.Imaging;

namespace buroSimpleSearch
{
    class Program
    {
        static List<FileDto> list = new List<FileDto>();
        static HashSet<string> imageType = new HashSet<string> { "bmp", "gif", "ico", "jpeg", "jpg", "jpe", "png", "svg", "tif", "tiff" };
        static HashSet<string> noImageType = new HashSet<string>();

        static listCandidat imageCandidat = new listCandidat();
        static listCandidat NoImageCandidat = new listCandidat();
        static volatile object _lock = new object();
        static int LEVEL_MIN = 0;

        static void Main(string[] args)
        {
            Console.CancelKeyPress += new ConsoleCancelEventHandler(Console_CancelKeyPress);
            new Program().go();
        }

        static Ordonnanceur ordo;
        static StreamWriter sw = new StreamWriter(FileDto.PATH);
        void go()
        {
             Scan(@"H:\spacer.gif");
              Scan(@"C:\temp\wp.bmp");
            Scan(@"H:\noir.png");
            Scan(@"H:\blanc.png");
            Scan(@"H:\bleu.png");
            Scan(@"H:\rouge.png");
            Scan(@"H:\vert.png");


            Scan(@"C:\apps\oracle\11.2.0.3\client-32\uix\cabo\images\bltdscn.gif");
            Scan(@"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\VCWizards\AppWiz\Generic\CustomWizard\Templates\1033\spacer.gif");

            var _nbProc = ConfigurationManager.AppSettings["nbProc"];
            int nbProc = 3;
            if (!string.IsNullOrEmpty(_nbProc))
                nbProc = Convert.ToInt32(_nbProc);
            ordo = new Ordonnanceur(nbProc);

            var paths = ConfigurationManager.AppSettings["paths"];
            if (string.IsNullOrEmpty(paths))
                paths = @"C:\";
            var tab = paths.Split(';');
            foreach (string path in tab)
            {
                if (string.IsNullOrEmpty(path))
                    continue;
                ordo.addTask(new TaskDir(ordo, new DirectoryInfo(path)));
            }
            //ordo.addTask(new TaskDir(ordo, new DirectoryInfo(@"C:\")));
            //ordo.addTask(new TaskDir(ordo, new DirectoryInfo(@"E:\")));
            //ordo.addTask(new TaskDir(ordo, new DirectoryInfo(@"I:\")));
            while (ordo.Busy)
                Thread.Sleep(30);
            sw.Dispose();
        }

        private class TaskDir : Task
        {
            private DirectoryInfo dir;
            public TaskDir(Ordonnanceur ordo, DirectoryInfo dir)
                : base(ordo)
            {
                this.dir = dir;
            }

            protected override void action()
            {
                //   ConsoleLogger.log(dir.FullName);
                List<FileDto> aux = null;
                foreach (FileInfo f in dir.GetFiles())
                {
                    // ConsoleLogger.log("check " + f.FullName);
                    FileDto fd = check(f);
                    if (fd != null)
                    {
                        ConsoleLogger.log(fd.ToStringSearch());
                        if (aux == null)
                            aux = new List<FileDto>();
                        aux.Add(fd);
                    }
                }
                if (aux != null)
                {
                    lock (_lock)
                    {
                        foreach (FileDto fd in aux)
                        {
                            fd.appendToDb(sw);
                        }
                    }
                }
                //ConsoleLogger.log("fin " +dir.FullName);
                done = true;

                foreach (DirectoryInfo sub in dir.GetDirectories())
                {
                    ordo.addsubTask(new TaskDir(ordo, sub));
                }
            }



            public override string ToString()
            {
                return dir.FullName;
            }
        }

        private class candidat
        {
            public candidat(String ext) { this.ext = ext; }
            private String ext;
            private int note = 0;
            public void increment()
            {
                note++;
            }
            public bool Accepted { get { return note >= 10; } }
        }
        private class listCandidat
        {
            private IDictionary<String, candidat> list = new Dictionary<String, candidat>();

            public bool record(String ext)
            {
                candidat cand;
                if (!list.ContainsKey(ext))
                {
                    cand = new candidat(ext);
                    list.Add(ext, cand);
                }
                cand = list[ext];
                cand.increment();
                return cand.Accepted;
            }
        }

        static public unsafe Image Scan(string file)
        {
           return ImageUtil.Scan(file); 
        }

        static FileDto check(FileInfo f)
        {
            var file = f.FullName;
            //  Console.WriteLine(file.FullName);
            var ext = Path.GetExtension(file).ToLower().Replace(".", "");
            if (noImageType.Contains(ext)) return null;



            Image img;
            FileDto fdto = null;
            try
            {
                img = Scan(file);
                if (img != null)
                    fdto = new FileDto() { Path = file, Size = f.Length, Height = img.Height, Width = img.Width };

                img.Dispose();
            }
            catch (Exception)
            {
                fdto = null;
            }

            if (ext != null && ext.Length > 1)
            {
                if (!imageType.Contains(ext))
                {
                    ConsoleLogger.log("TYPE:" + ext + " " + file + " " + fdto);
                    if (fdto != null)
                    {
                        lock (imageCandidat)
                        {
                            if (imageCandidat.record(ext))
                            {
                                imageType.Add(ext);
                                ConsoleLogger.log("TYPE OK!!:" + ext + " " + file);
                            }
                        }

                    }
                    else
                    {
                        lock (NoImageCandidat)
                        {
                            if (NoImageCandidat.record(ext))
                            {
                                noImageType.Add(ext);
                                ConsoleLogger.log("TYPE NOK!!:" + ext + " " + file);
                            }
                        }
                        return null;
                    }
                }

            }
            return fdto;




        }

        static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs e)
        {

            sw.Dispose();
        }

        static void write()
        {
            using (StreamWriter sw = new StreamWriter(FileDto.PATH))
            {
                foreach (FileDto f in list)
                {
                    sw.Write(f.Path);
                    sw.Write(";");
                    sw.WriteLine(f.Size);
                }
            }
        }
    }
}
]]></content>
  </file>
</db>
