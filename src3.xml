<db path="C:\bernard\db2\">
  <file path="buro\buroSimple\Walpaper.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using buroSimpleLib;
using System.IO;
using System.Drawing;
using System.Drawing.Imaging;
using System.Threading;
using System.Diagnostics;
using System.Windows.Forms;
using Microsoft.Win32;
using System.Drawing.Drawing2D;

namespace buroSimple
{
    class Walpaper
    {
        int HAUTEUR;
        int LARGEUR;
        const string TMP_FILE = @"C:\Temp\wp.bmp";
        const string TMP_FILE1 = @"C:\Temp\wp1.bmp";
        const string TMP_FILE2 = @"C:\Temp\wp2.bmp";
        const string INDEX_FILE = @"C:\Temp\wp.index.txt";
        const string TMP_LOADED = @"C:\Temp\Loaded";
        const string HISTO = @"C:\Temp\WP_HISTO\";

        /// <summary>
        /// delai en secondes entre deux refreh
        /// </summary>
        public double delay = 30;
        /// <summary>
        /// On ne prend qu'un exemplaire pour une taille donnée
        /// </summary>
        public bool unique = false;
        /// <summary>
        /// Try par taille
        /// </summary>
        public bool sortBySize = false;
        /// <summary>
        /// On considère suex fichiers de même taille et de même nom comme identiques
        /// </summary>
        public bool uniqueName = false;
        /// <summary>
        /// tri inversé
        /// </summary>
        public bool reverse = false;
        /// <summary>
        /// On tente de recreer une image à la taille de l'écran
        /// </summary>
        public bool fullscreen = false;
        /// <summary>
        /// On tente d'utiliser les valeurs &
        /// </summary>
        public bool highResolution = false;
        /// <summary>
        /// tri par pixel et taille
        /// </summary>
        public bool combine = false;

        private bool GO;
        public void go()
        {
            if (!Directory.Exists(HISTO))
                Directory.CreateDirectory(HISTO);
            GO = true;
            DirectoryInfo loaded = new DirectoryInfo(TMP_LOADED);
            if (!loaded.Exists)
                loaded.Create();


            SystemEvents.PowerModeChanged += new PowerModeChangedEventHandler(SystemEvents_PowerModeChanged);
            SystemEvents.SessionSwitch += SystemEvents_SessionSwitch;




            HAUTEUR = 1080;
            LARGEUR = 1920;
            var list = new List<FileDto>();
            using (StreamReader sr = new StreamReader(@"C:\Temp\buro1.txt"))
            {
                string line = "";
                while ((line = sr.ReadLine()) != null)
                {
                    if (string.IsNullOrEmpty(line))
                        continue;

                    try
                    {
                        FileDto fd = FileDto.FromLine(line); //  new FileDto() { Path = tab[0], Size = Convert.ToInt64(tab[1]) };
                        if (fd != null)
                            list.Add(fd);
                    }
                    catch
                    {
                    }

                }
            }

            list.Sort((x, y) =>
            {
                int cmp = 0;
                if (sortBySize)
                {
                    cmp = x.Size.CompareTo(y.Size);
                    if (cmp != 0)
                        return cmp;
                    if (combine)
                        cmp = x.Pixels().CompareTo(y.Pixels());
                    if (cmp != 0)
                        return cmp;
                    cmp = x.Width.CompareTo(y.Width);
                }
                else
                {
                    cmp = x.Pixels().CompareTo(y.Pixels());
                    if (cmp != 0)
                        return cmp;
                    cmp = x.Width.CompareTo(y.Width);
                    if (cmp != 0)
                        return cmp;
                    if (combine)
                        cmp = x.Size.CompareTo(y.Size);
                }

                if (cmp != 0)
                    return cmp;
                return x.Path.CompareTo(y.Path);
            });

            if (reverse)
                list.Reverse();

            int count = list.Count;

            string path0 = "";
            int index0 = 0;
            if (File.Exists(INDEX_FILE))
            {
                path0 = File.ReadAllText(INDEX_FILE).Trim();
            }

            if (!string.IsNullOrEmpty(path0))
            {
                for (int i = 0; i < count; i++)
                {
                    if (list[i].Path == path0)
                    {
                        index0 = i;
                        break;
                    }
                }
            }

            HashSet<string> hs = new HashSet<string>();
            int pixels = -1;
            int width = -1;
            long size = -1;
            int nbLoaded = 0;
            for (int i = index0 + 1; i < count; i++)
            {
                while (!GO)
                {
                    Thread.Sleep(1000);
                }

                while (currentSwitchSessionStatus != SessionSwitchReason.SessionLogon
                    && currentSwitchSessionStatus != SessionSwitchReason.SessionUnlock)
                {
                    Console.WriteLine("Pause reason " + currentSwitchSessionStatus);
                    Thread.Sleep(1000);
                }



                FileDto f = list[i];
                Console.WriteLine("candidat " + f);
                var fpixels = f.Pixels();
                var fwidth = f.Width;
                bool change = false;
                bool sizeChanged = f.Size > size;
                bool pixelChanged = fpixels > pixels || fwidth != width;

                if (combine)
                    change = sizeChanged || pixelChanged;
                else if (sortBySize)
                    change = sizeChanged;
                else
                    change = pixelChanged;
                if (change)
                {
                    hs.Clear();
                    size = f.Size;
                    width = f.Width;
                    if (fpixels > pixels)
                    {
                        if (pixels > 0)
                            File.Copy(INDEX_FILE, HISTO + pixels + "_wp.index.txt", true);
                        pixels = fpixels;
                    }
                    if (fwidth != width)
                        width = fwidth;
                    foreach (FileInfo fl in loaded.GetFiles())
                    {
                        fl.Delete();
                    }
                    nbLoaded = 0;
                }
                else
                {
                    if (unique)
                        continue;
                }
                string fileName = Path.GetFileName(f.Path);
                if (hs.Contains(fileName))
                    continue;
                try
                {
                    Image img = null;
                    if (fullscreen)
                        img = createFileFs(f);
                    else
                        img = createFile(f);
                    if (img != null)
                    {
                        bool ok = true;
                        foreach (FileInfo fl in loaded.GetFiles())
                        {
                            if (ImageUtil.AreIdentical(img, fl.FullName))
                            {
                                ok = false;
                                break;
                            }
                        }
                        img.Dispose();

                        if (ok)
                        {
                            WinAPI.BmpLoad(TMP_FILE);
                            nbLoaded++;
                            File.Copy(TMP_FILE, loaded.FullName + "\\" + nbLoaded + ".bmp", true);
                            File.WriteAllText(INDEX_FILE, f.Path);
                            Thread.Sleep((int)(delay * 1000.0));
                            if (uniqueName)
                                hs.Add(fileName);

                            while (ScreenUtil.isRecovered(TMP_FILE, false))
                            {
                                Console.WriteLine("Pause reason Recovered");
                                Thread.Sleep(1000);
                            }


                        }
                        else
                        {
                            Console.WriteLine("Identique " + f);
                            continue;
                        }
                    }
                    else
                    {
                        Console.WriteLine("Blank " + f);
                        continue;
                    }

                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                }
            }
        }
        private SessionSwitchReason currentSwitchSessionStatus = SessionSwitchReason.SessionLogon;
        private void SystemEvents_SessionSwitch(object sender, SessionSwitchEventArgs e)
        {
            Console.WriteLine("SystemEvents_SessionSwitch:" + e.Reason);
            currentSwitchSessionStatus = e.Reason;

        }

        void SystemEvents_PowerModeChanged(object sender, PowerModeChangedEventArgs e)
        {
            Console.WriteLine("SystemEvents_PowerModeChanged:" + e.Mode.ToString());
            if (e.Mode == PowerModes.Resume)
                GO = true;
            else GO = false;
        }

        private void paramGr(Graphics graphics)
        {
            graphics.CompositingMode = CompositingMode.SourceCopy;
            graphics.CompositingQuality = CompositingQuality.AssumeLinear;
            graphics.InterpolationMode = InterpolationMode.NearestNeighbor;
            graphics.SmoothingMode = SmoothingMode.None;
            graphics.PixelOffsetMode = PixelOffsetMode.None;
        }

        private Image createFileFs(FileDto f)
        {
            Image img = Image.FromFile(f.Path);

            int largeur0 = img.Width;
            int hauteur0 = img.Height;

            Console.WriteLine("{0}={1}x{2} {3} {4}", largeur0 * hauteur0, largeur0, hauteur0, f.HumanReadableSize, img.PixelFormat);

            double r0 = (double)HAUTEUR / (double)LARGEUR;
            double r = (double)hauteur0 / (double)largeur0;

            //facteur d'augmentation
            int scale = 1;

            //1. on teste blank
            int largeurTrame;
            int hauteurTrame;

            Bitmap trame;
            img.Save(TMP_FILE1, ImageFormat.Bmp);
            var imgVerif = ImageUtil.Scan(TMP_FILE1);
            if (imgVerif == null)
            {
                img.Dispose();
                return null;
            }

            imgVerif.Dispose();

            int l = largeur0;
            int h = hauteur0;
            //int l0 = l;
            //int h0 = h;
            ////Image currentImage = img;
            //while (true)
            //{
            //    l *= 2;
            //    if (l > LARGEUR)
            //        break;
            //    h *= 2;
            //    if (h > HAUTEUR)
            //        break;
            //    l0 = l;
            //    h0 = h;
            //}

            if (r > r0)
                scale = HAUTEUR / hauteur0;
            else
                scale = LARGEUR / largeur0;

            l *= scale;
            h *= scale;

            //l=l0; 
            //h=h0; 

            //var trameInter = new Bitmap(l, h, img.PixelFormat);
            //using (Graphics g = Graphics.FromImage(trameInter))
            //{
            //    paramGr(g);
            //    //int _xrec = (int)((LARGEUR - l) / 2.0);
            //    //int _yrec = (int)((HAUTEUR - h) / 2.0);
            //    //Rectangle _centré = new Rectangle(_xrec, _yrec, l, h);
            //    Rectangle rect = new Rectangle(0, 0, l, h);
            //    // g.DrawImageUnscaledAndClipped(img, _centré);
            //   // g.DrawImageUnscaledAndClipped(img, rect);
            // g.DrawImage(img, rect, 0,0, l,h, GraphicsUnit.Pixel); 
            // //    g.DrawImage(img, rect); 

            //  //  trameInter.Dispose();
            //    // img.Dispose();


            //   // return Image.FromFile(TMP_FILE);
            //}
            var trameInter = img;
            if (scale > 1)
            {
                trameInter = ImageUtil.Scale(img, scale);
            }

            trameInter.Save(TMP_FILE2, ImageFormat.Bmp);

            imgVerif = ImageUtil.Scan(TMP_FILE2);
            if (imgVerif == null)
            {
                img.Dispose();
                return null;
            }


            if (r > r0)
            {
                // image pas assez large --> ajout largeur



                hauteurTrame = HAUTEUR;
                largeurTrame = Convert.ToInt32(LARGEUR * r0 / r); //   Convert.ToInt32((double)hauteur0 / (double)r0);

            }
            else
            {
                // image trop large --> bandes en haut et en bas

                largeurTrame = LARGEUR;
                hauteurTrame = Convert.ToInt32(HAUTEUR * r / r0);
            }

            trame = new Bitmap(LARGEUR, HAUTEUR);
            Graphics graphics = Graphics.FromImage(trame);
            paramGr(graphics);
            int xrec = (int)((LARGEUR - largeurTrame) / 2.0);
            int yrec = (int)((HAUTEUR - hauteurTrame) / 2.0);



            // var abort = new Image.GetThumbnailImageAbort(ThumbnailCallback);
            //var thumbnail = img.GetThumbnailImage(largeurTrame , hauteurTrame, abort, IntPtr.Zero);

            Rectangle centré = new Rectangle(xrec, yrec, largeurTrame, hauteurTrame);
            // graphics.DrawImage(img, centré, 0, 0, largeur0, hauteur0, GraphicsUnit.Pixel);
            // Rectangle all = new Rectangle(0,0,LARGEUR, HAUTEUR); 
            //graphics.DrawImage(img, centré);
            graphics.DrawImageUnscaledAndClipped(trameInter, centré);
            trameInter.Dispose();
            //thumbnail.Save(TMP_FILE, ImageFormat.Bmp);

            //thumbnail.Dispose();
            // image.Dispose();

            trame.Save(TMP_FILE, ImageFormat.Bmp);


            trame.Dispose();
            // img.Dispose();
            graphics.Dispose();

            return Image.FromFile(TMP_FILE);

        }

        public bool ThumbnailCallback()
        {
            return false;
        }

        private Image createFile(FileDto f)
        {
            Image img = Image.FromFile(f.Path);

            int largeur0 = img.Width;
            int hauteur0 = img.Height;

            Console.WriteLine("{0}={1}x{2} {3}", largeur0 * hauteur0, largeur0, hauteur0, f.HumanReadableSize);

            double r0 = (double)HAUTEUR / (double)LARGEUR;

            int largeurTrame;
            int hauteurTrame;

            double r = (double)hauteur0 / (double)largeur0;





            if (r > r0)
            {
                // image pas assez large --> ajout largeur

                hauteurTrame = hauteur0;
                largeurTrame = Convert.ToInt32((double)hauteur0 / (double)r0);

            }
            else
            {
                // image trop large --> bandes en haut et en bas

                largeurTrame = largeur0;
                hauteurTrame = Convert.ToInt32((double)largeur0 * (double)r0);
            }
            Graphics graphics = null;
            Bitmap trame = null;
            if (highResolution)
                try
                {
                    trame = new Bitmap(largeurTrame, hauteurTrame, img.PixelFormat);
                    graphics = Graphics.FromImage(trame);
                }
                catch
                {
                    if (trame != null)
                        trame.Dispose();
                }
            if (graphics == null)
            {
                trame = new Bitmap(largeurTrame, hauteurTrame);
                graphics = Graphics.FromImage(trame);
            }

            paramGr(graphics);


            int xrec = (largeurTrame - largeur0) / 2;
            int yrec = (hauteurTrame - hauteur0) / 2;
            Rectangle centré = new Rectangle(xrec, yrec, largeur0, hauteur0);
            graphics.DrawImage(img, centré, 0, 0, largeur0, hauteur0, GraphicsUnit.Pixel);


            trame.Save(TMP_FILE, ImageFormat.Bmp);
            trame.Dispose();
            img.Dispose();
            graphics.Dispose();

            // verif
            var imgVerif = ImageUtil.Scan(TMP_FILE);
            return imgVerif;

            //using (Bitmap fs = new Bitmap(LARGEUR, HAUTEUR))
            //{
            //    Image i0 = null;
            //    Image i1 = null;
            //    using (var g = Graphics.FromImage(fs))
            //    {

            //        if (File.Exists(TMP_FILE))
            //        {
            //            i0 = Image.FromFile(TMP_FILE);
            //            gr.DrawImage(i0, new Rectangle(0, 0, LARGEUR, HAUTEUR), 0, 0, LARGEUR, HAUTEUR, GraphicsUnit.Pixel);
            //        }

            //        if (File.Exists(TMP_FILE1))
            //        {
            //            i1 = Image.FromFile(TMP_FILE1);
            //            gr.DrawImage(i0, new Rectangle(0, 0, LARGEUR, HAUTEUR), 0, 0, LARGEUR, HAUTEUR, GraphicsUnit.Pixel);
            //        }
            //    }
            //    fs.Save(TMP_FILE, ImageFormat.Bmp);
            //    if (i0 != null)
            //        i0.Dispose();
            //    if (i1 != null)
            //        i1.Dispose();
            //}
        }
    }
}
]]></content>
  </file>
  <file path="buro\buroSimpleLib\DirectBitmap.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;

namespace buroSimpleLib
{
    public class DirectBitmap : IDisposable
    {
        public Bitmap Bitmap { get; private set; }
        public Int32[] Bits { get; private set; }
        public bool Disposed { get; private set; }
        public int Height { get; private set; }
        public int Width { get; private set; }

        protected GCHandle BitsHandle { get; private set; }

        public DirectBitmap(int width, int height)
        {
            Width = width;
            Height = height;
            Bits = new Int32[width * height];
            BitsHandle = GCHandle.Alloc(Bits, GCHandleType.Pinned);
            Bitmap = new Bitmap(width, height, width * 4, PixelFormat.Format32bppPArgb, BitsHandle.AddrOfPinnedObject());
        }

        public DirectBitmap(Bitmap bitmap)
        {
            Width = bitmap.Width;
            Height = bitmap.Height;
            Bits = new Int32[Width * Height];
            BitsHandle = GCHandle.Alloc(Bits, GCHandleType.Pinned);
            Bitmap = bitmap;
        }
        public void SetPixel(int x, int y, Color colour)
        {
            int index = x + (y * Width);
            int col = colour.ToArgb();

            Bits[index] = col;
        }

        public Color GetPixel(int x, int y)
        {
            int index = x + (y * Width);
            int col = Bits[index];
            Color result = Color.FromArgb(col);

            return result;
        }

        public void Dispose()
        {
            if (Disposed) return;
            Disposed = true;
            Bitmap.Dispose();
            BitsHandle.Free();
        }
    }
}
]]></content>
  </file>
  <file path="buro\buroSimpleLib\ImageUtil.cs">
    <content><![CDATA[using pdb.util;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace buroSimpleLib
{
    public static class ImageUtil
    {
        /// <summary>
        /// Scan d'une image pour déterminer si elle est vide
        /// </summary>
        /// <param name="file"></param>
        /// <returns>null=> image noire</returns>
        public static unsafe Image Scan(string file)
        {
            int LEVEL_MIN = 0;
            Bitmap b = null;
            DateTime debut = DateTime.Now;
            try
            {
                b = new Bitmap(file);//note this has several overloads, including a path to an image
            }

            catch
            {
                ConsoleLogger.log("Impossible de créer un Bitmap {0}", file);
                try
                {
                    Image i = Image.FromFile(file);
                    return i;
                }
                catch
                {
                    return null;
                }
            }
            DateTime debutScan = DateTime.Now;
            BitmapData bData = b.LockBits(new Rectangle(0, 0, b.Width, b.Height), ImageLockMode.ReadOnly, b.PixelFormat);

            var Depth = Bitmap.GetPixelFormatSize(b.PixelFormat);

            //  byte bitsPerPixel = Bitmap.GetBitsPerPixel(bData.PixelFormat);

            /*This time we convert the IntPtr to a ptr*/
            byte* scan0 = (byte*)bData.Scan0.ToPointer();
            bool ok = false;
            for (int i = 0; i < bData.Height; ++i)
            {
                if (ok)
                    break;
                for (int j = 0; j < bData.Width; ++j)
                {
                    byte* data = scan0 + i * bData.Stride + j * Depth / 8;

                    //data is a pointer to the first byte of the 3-byte color data
                    //data[0] = blueComponent;
                    //data[1] = greenComponent;
                    //data[2] = redComponent;
                    if (data[0] > LEVEL_MIN || data[1] > LEVEL_MIN || data[2] > LEVEL_MIN)
                    {
                        //if (data[3] > 0)
                        ok = true;
                        break;
                    }
                }
            }

            b.UnlockBits(bData);

            var ts = (DateTime.Now - debut).TotalMilliseconds.ToString("0");
            var tsLoad = (debutScan - debut).TotalMilliseconds.ToString("0");

            var tsScan = (DateTime.Now - debutScan).TotalMilliseconds.ToString("0");
            if (!ok)
            {
                ConsoleLogger.log("Blank {0} {1} ms", file, tsScan);
                b.Dispose();
                return null;
            }
            else if (ts.Length >= 3)
                ConsoleLogger.log("load:{0}ms scan:{1}ms total:{2} ms", tsLoad, tsScan, ts);
            return b;
        }

        public static bool AreIdentical(Image b1, string file2)
        {
            return !AreDifferent(b1, file2);
        }

        /// <summary>
        /// Détermine si deux images sont différentes ( au moins un pixel différent ) 
        /// </summary>
        /// <param name="img"></param>
        /// <param name="file2"></param>
        /// <returns></returns>
        public static unsafe bool AreDifferent(Image img, string file2)
        {


            Bitmap b2 = null;
            Bitmap b1 = null;


            DateTime debut = DateTime.Now;
            DateTime debutScan = DateTime.Now;
            bool dif = false;
            try
            {
                try
                {
                    //b1 = new Bitmap(file1);//note this has several overloads, including a path to an image
                    b2 = new Bitmap(file2);
                    if (img is Bitmap)
                        b1 = img as Bitmap;
                    else
                        b1 = new Bitmap(img);
                    if (b1.Width != b2.Width)
                        dif = true;
                    else if (b1.Height != b2.Height)
                        dif = true;
                }

                catch
                {
                    dif = true;
                }
                if (!dif)
                {
                    debutScan = DateTime.Now;
                    BitmapData bData1 = b1.LockBits(new Rectangle(0, 0, b1.Width, b1.Height), ImageLockMode.ReadOnly, b1.PixelFormat);
                    BitmapData bData2 = b2.LockBits(new Rectangle(0, 0, b2.Width, b2.Height), ImageLockMode.ReadOnly, b2.PixelFormat);

                    var Depth = Bitmap.GetPixelFormatSize(b1.PixelFormat);

                    //  byte bitsPerPixel = Bitmap.GetBitsPerPixel(bData.PixelFormat);

                    /*This time we convert the IntPtr to a ptr*/
                    byte* scan01 = (byte*)bData1.Scan0.ToPointer();
                    byte* scan02 = (byte*)bData2.Scan0.ToPointer();

                    for (int i = 0; i < bData1.Height; ++i)
                    {
                        if (dif)
                            break;
                        for (int j = 0; j < bData1.Width; ++j)
                        {
                            if (dif)
                                break;
                            byte* data1 = scan01 + i * bData1.Stride + j * Depth / 8;
                            byte* data2 = scan02 + i * bData2.Stride + j * Depth / 8;

                            //data is a pointer to the first byte of the 3-byte color data
                            //data[0] = blueComponent;
                            //data[1] = greenComponent;
                            //data[2] = redComponent;

                            for (int c = 0; c < 3; c++)
                            {
                                if (data1[c] != data2[c])
                                {
                                    dif = true;
                                    break;
                                }
                            }

                        }
                    }

                    b1.UnlockBits(bData1);
                    b2.UnlockBits(bData2);
                }
            }
            finally
            {
                if (b2 != null)
                    b2.Dispose();
            }

            var ts = (DateTime.Now - debut).TotalMilliseconds.ToString("0");
            var tsLoad = (debutScan - debut).TotalMilliseconds.ToString("0");

            var tsScan = (DateTime.Now - debutScan).TotalMilliseconds.ToString("0");
            if (!dif)
            {
                ConsoleLogger.log("equal {0} {1} ms", file2, tsScan);
            }
            else if (ts.Length >= 3)
                ConsoleLogger.log("load:{0}ms scan:{1}ms total:{2} ms", tsLoad, tsScan, ts);


            return dif;
        }

        public static Image Scale(string source, int scale)
        {
            return Scale(Image.FromFile(source), scale);
        }

        public static Image Scale2(Image source, int scale)
        {


            scale = 1;

            Bitmap src = null;
            if (source is Bitmap)
                src = source as Bitmap;
            else
                src = new Bitmap(source);

            var scaled = new DirectBitmap(source.Width * scale, source.Height * scale);

            var srcb = new DirectBitmap(src);


            int width = source.Width;
            int height = source.Height;

            for (int i = 0; i < width; i++)
            {
                for (int j = 0; j < height; j++)
                {
                    Color c = srcb.GetPixel(i, j);
                    int x0 = scale * i;
                    int x1 = x0 + scale;
                    int y0 = scale * j;
                    int y1 = y0 + scale;
                    for (int x = x0; x < x1; x++)
                    {
                        for (int y = y0; y < y1; y++)
                        {
                            scaled.SetPixel(x, y, c);
                        }
                    }
                }
            }
            return scaled.Bitmap;

        }

        public static unsafe Image Scale1(Image source, int scale)
        {


            if (scale == 1)
                return source;

            Bitmap scaled = new Bitmap(source.Width * scale, source.Height * scale);
            Bitmap src = null;
            if (source is Bitmap)
                src = source as Bitmap;
            else
                src = new Bitmap(source);

            DateTime debut = DateTime.Now;
            DateTime debutScan = DateTime.Now;
            bool dif = false;
            try
            {

                BitmapData bData1 = src.LockBits(new Rectangle(0, 0, src.Width, src.Height), ImageLockMode.ReadOnly, src.PixelFormat);
                BitmapData bData2 = scaled.LockBits(new Rectangle(0, 0, scaled.Width, scaled.Height), ImageLockMode.ReadOnly, scaled.PixelFormat);

                var Depth = Bitmap.GetPixelFormatSize(src.PixelFormat);

                //  byte bitsPerPixel = Bitmap.GetBitsPerPixel(bData.PixelFormat);

                /*This time we convert the IntPtr to a ptr*/
                byte* scan01 = (byte*)bData1.Scan0.ToPointer();
                byte* scan02 = (byte*)bData2.Scan0.ToPointer();

                for (int i = 0; i < bData1.Height; ++i)
                {
                    if (dif)
                        break;
                    for (int j = 0; j < bData1.Width; ++j)
                    {
                        if (dif)
                            break;
                        byte* data1 = scan01 + i * bData1.Stride + j * Depth / 8;
                        byte* data2 = scan02 + i * bData2.Stride + j * Depth / 8;

                        //data is a pointer to the first byte of the 3-byte color data
                        //data[0] = blueComponent;
                        //data[1] = greenComponent;
                        //data[2] = redComponent;


                        int x0 = scale * i;
                        int x1 = x0 + scale;
                        int y0 = scale * j;
                        int y1 = y0 + scale;
                        for (int x = x0; x < x1; x++)
                        {
                            for (int y = y0; y < y1; y++)
                            {
                                data2 = scan02 + x * bData2.Stride + y * Depth / 8;
                                for (int c = 0; c < 3; c++)
                                {
                                    data2[c] = data1[c];
                                }
                                data2[3] = 255;
                            }
                        }
                    }
                }


                src.UnlockBits(bData1);
                scaled.UnlockBits(bData2);

            }
            finally
            {

            }

            var ts = (DateTime.Now - debut).TotalMilliseconds.ToString("0");
            if (ts.Length >= 3)
                ConsoleLogger.log("copie:{0} ms  ms", ts);
            return scaled;
        }


        public static Image Scale(Image source, int scale)
        {
            //    if (scale == 1)
            //        return source;

            Bitmap scaled = new Bitmap(source.Width * scale, source.Height * scale);
            Bitmap src = null;
            //if (source is Bitmap)
            //    src = source as Bitmap;
            //else
            src = new Bitmap(source);
            LockBitmap org = new LockBitmap(src);
            LockBitmap modif = new LockBitmap(scaled);
            org.LockBits(ImageLockMode.ReadOnly);
            modif.LockBits(ImageLockMode.WriteOnly);

            int width = org.Width;
            int height = org.Height;

            for (int i = 0; i < width; i++)
            {
                for (int j = 0; j < height; j++)
                {
                    Color c = org.GetPixel(i, j);
                    int x0 = scale * i;
                    int x1 = x0 + scale;
                    int y0 = scale * j;
                    int y1 = y0 + scale;
                    for (int x = x0; x < x1; x++)
                    {
                        for (int y = y0; y < y1; y++)
                        {
                            modif.SetPixel(x, y, c);
                        }
                    }
                }
            }
            org.UnlockBits();
            modif.UnlockBits();
            return scaled;
        }

      

       
    }


}
]]></content>
  </file>
  <file path="buro\buroSimpleLib\ScreenUtil.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace buroSimpleLib
{
    public class ScreenUtil
    {
        public static Bitmap getScreenShot(Screen screen)
        {
            var bounds = screen.Bounds;
            Bitmap screenshot = new Bitmap(bounds.Width,
                                   bounds.Height);
            using (Graphics screenGraph = Graphics.FromImage(screenshot))
            {
                screenGraph.CopyFromScreen(bounds.X,
                                           bounds.Y,
                                           0,
                                           0,
                                         bounds.Size,
                                           CopyPixelOperation.SourceCopy);
            }
            return screenshot;
        }

        public static bool isRecovered(string wpf, bool firstScreen)
        {
            Screen sc = Screen.PrimaryScreen;
            if (!firstScreen)
            {
                foreach (Screen s in Screen.AllScreens)
                {
                    if (s == sc)
                        continue;
                    sc = s;
                    break;
                }
            }
            var bound = sc.Bounds;
            int x = 523;
            int y = 907;


            Bitmap wp = new Bitmap(wpf);
            Color c = wp.GetPixel(x, y);


            Bitmap screenShot = getScreenShot(sc);
            screenShot.Save(@"C:\temp\sc.bmp");
            screenShot.Dispose();
            screenShot = new Bitmap(@"C:\temp\sc.bmp");
            Color cs = screenShot.GetPixel(x, y);
            screenShot.Dispose();
            wp.Dispose();
            int dif = 0;
            dif += Math.Abs(c.B - cs.B);
            dif += Math.Abs(c.G - cs.G);
            dif += Math.Abs(c.R - cs.R);
            if (dif < 16)
                return false;
            return true;
        }
    }
}
]]></content>
  </file>
</db>
