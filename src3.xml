<db path="C:\bernard\db2\">
  <file path="buro\buroSimple\Program.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;

namespace buroSimple
{
    class Program
    {
        static List<string> getList(string arg)
        {
            List<string> l = new List<string>();

            var tab = arg.Split(';');
            foreach (string s in tab)
            {
                if (!string.IsNullOrEmpty(s))
                    l.Add(s.ToLower());
            }
            return l;
        }

        static void Main(string[] args)
        {
            int countArgs = args.GetLength(0);
            double delay = 20.0;
            bool unique = false;
            bool sortBySize = false;
            bool uniqueName = false;
            bool reverse = false;
            bool fullscreen = false;
            bool highResolution = false;
            bool combine = false;
            bool oneScreen = false;
            bool checkScreen = false;

            List<string> include = null;
            List<string> exclude = null;

            for (int i = 0; i < countArgs; i++)
            {
                if (args[i] == "-t")
                {
                    if (i + 1 < countArgs)
                    {
                        delay = Convert.ToDouble(args[i + 1]);
                    }

                }

                else if (args[i] == "-i")
                {
                    if (i + 1 < countArgs)
                    {
                        include = getList(args[i + 1]);
                    }
                }

                else if (args[i] == "-e")
                {
                    if (i + 1 < countArgs)
                    {
                        exclude = getList(args[i + 1]);
                    }
                }
                else if (args[i] == "/u")
                    unique = true;
                else if (args[i] == "/s")
                    sortBySize = true;
                else if (args[i] == "/c")
                    combine = true;
                else if (args[i] == "/un")
                    uniqueName = true;
                else if (args[i] == "/r")
                    reverse = true;
                else if (args[i] == "/fs")
                    fullscreen = true;
                else if (args[i] == "/hr")
                    highResolution = true;
                else if (args[i] == "/os")
                    oneScreen = true;
                else if (args[i] == "/cs")
                    checkScreen = true;
            }

            //var test = buroSimpleLib.ImageUtil.Scale(@"C:\temp\pochette.jpg", 2); 
            //test.Save(@"C:\temp\pochetteScaled.bmp", System.Drawing.Imaging.ImageFormat.Bmp); 
            var wp = new Walpaper()
            {
                delay = delay,
                unique = unique,
                sortBySize = sortBySize,
                uniqueName = uniqueName,
                reverse = reverse,
                fullscreen = fullscreen,
                highResolution = highResolution,
                combine = combine,
                oneScreen = oneScreen,
                checkScreen = checkScreen,
                include = include,
                exclude = exclude
            };
            wp.go();
        }
    }
}
]]></content>
  </file>
  <file path="buro\buroSimple\Walpaper.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using buroSimpleLib;
using System.IO;
using System.Drawing;
using System.Drawing.Imaging;
using System.Threading;
using System.Diagnostics;
using System.Windows.Forms;
using Microsoft.Win32;
using System.Drawing.Drawing2D;

namespace buroSimple
{
    class Walpaper
    {
        int HAUTEUR;
        int LARGEUR;
        const string TMP_FILE = @"C:\Temp\wp.bmp";
        const string TMP_FILE1 = @"C:\Temp\wp1.bmp";
        const string TMP_FILE2 = @"C:\Temp\wp2.bmp";
        const string TMP_PREPAR = @"C:\Temp\wpp.bmp";
        const string INDEX_FILE = @"C:\Temp\wp.index.txt";
        const string TMP_LOADED = @"C:\Temp\Loaded";
        const string HISTO = @"C:\Temp\WP_HISTO\";

        /// <summary>
        /// delai en secondes entre deux refreh
        /// </summary>
        public double delay = 30;
        /// <summary>
        /// On ne prend qu'un exemplaire pour une taille donnée
        /// </summary>
        public bool unique = false;
        /// <summary>
        /// Try par taille
        /// </summary>
        public bool sortBySize = false;
        /// <summary>
        /// On considère suex fichiers de même taille et de même nom comme identiques
        /// </summary>
        public bool uniqueName = false;
        /// <summary>
        /// tri inversé
        /// </summary>
        public bool reverse = false;
        /// <summary>
        /// On tente de recreer une image à la taille de l'écran
        /// </summary>
        public bool fullscreen = false;
        /// <summary>
        /// On tente d'utiliser les valeurs &
        /// </summary>
        public bool highResolution = false;
        /// <summary>
        /// tri par pixel et taille
        /// </summary>
        public bool combine = false;
        /// <summary>
        /// Un seul grand écran 
        /// </summary>
        public bool oneScreen = false;
        /// <summary>
        /// Vérification recouvrement 
        /// </summary>
        public bool checkScreen = false;

        public List<string> include;

        public List<string> exclude;

        private bool GO;
        public void go()
        {
            if (!Directory.Exists(HISTO))
                Directory.CreateDirectory(HISTO);
            GO = true;
            DirectoryInfo loaded = new DirectoryInfo(TMP_LOADED);
            if (!loaded.Exists)
                loaded.Create();


            SystemEvents.PowerModeChanged += new PowerModeChangedEventHandler(SystemEvents_PowerModeChanged);
            SystemEvents.SessionSwitch += SystemEvents_SessionSwitch;


            DateTime nextFlash = DateTime.Now;

            HAUTEUR = 1080;
            LARGEUR = 1920;
            var list = new List<FileDto>();
            using (StreamReader sr = new StreamReader(@"C:\Temp\buro1.txt"))
            {
                string line = "";
                while ((line = sr.ReadLine()) != null)
                {
                    if (string.IsNullOrEmpty(line))
                        continue;

                    try
                    {
                        FileDto fd = FileDto.FromLine(line); //  new FileDto() { Path = tab[0], Size = Convert.ToInt64(tab[1]) };
                        if (fd != null)
                        {
                            bool go = true;
                            string path = fd.Path.ToLower();
                            if (exclude != null)
                            {
                                foreach (string ex in exclude)
                                {
                                    if (path.StartsWith(ex))
                                    {
                                        go = false;
                                        break;
                                    }
                                }
                            }
                            if (!go)
                                continue;
                            if (include != null)
                            {
                                go = false;
                                foreach (string str in include)
                                {
                                    if (path.StartsWith(str))
                                    {
                                        go = true;
                                        break;
                                    };
                                }
                            }
                            if (!go)
                                continue;
                            list.Add(fd);
                        }
                    }
                    catch
                    {
                    }

                }
            }

            list.Sort((x, y) =>
            {
                int cmp = 0;
                if (sortBySize)
                {
                    cmp = x.Size.CompareTo(y.Size);
                    if (cmp != 0)
                        return cmp;
                    if (combine)
                        cmp = x.Pixels().CompareTo(y.Pixels());
                    if (cmp != 0)
                        return cmp;
                    cmp = x.Width.CompareTo(y.Width);
                }
                else
                {
                    cmp = x.Pixels().CompareTo(y.Pixels());
                    if (cmp != 0)
                        return cmp;
                    cmp = x.Width.CompareTo(y.Width);
                    if (cmp != 0)
                        return cmp;
                    if (combine)
                        cmp = x.Size.CompareTo(y.Size);
                }

                if (cmp != 0)
                    return cmp;
                return x.Path.CompareTo(y.Path);
            });

            if (reverse)
                list.Reverse();

            int count = list.Count;

            string path0 = "";
            int index0 = 0;
            if (File.Exists(INDEX_FILE))
            {
                path0 = File.ReadAllText(INDEX_FILE).Trim();
            }

            if (!string.IsNullOrEmpty(path0))
            {
                for (int i = 0; i < count; i++)
                {
                    if (list[i].Path == path0)
                    {
                        index0 = i;
                        break;
                    }
                }
            }

            HashSet<string> hs = new HashSet<string>();
            int pixels = -1;
            int width = -1;
            long size = -1;
            int nbLoaded = 0;
            bool checkScreen = this.checkScreen;
            DateTime last = DateTime.Now;
            FileDto lastF = null;
            for (int i = index0 + 1; i < count; i++)
            {
                while (!GO)
                {
                    Thread.Sleep(1000);
                }

                while (currentSwitchSessionStatus != SessionSwitchReason.SessionLogon
                    && currentSwitchSessionStatus != SessionSwitchReason.SessionUnlock)
                {
                    Console.WriteLine("Pause reason " + currentSwitchSessionStatus);
                    Thread.Sleep(1000);
                }



                FileDto f = list[i];
                Console.WriteLine("candidat " + f);
                var fpixels = f.Pixels();
                var fwidth = f.Width;
                bool change = false;
                bool sizeChanged = f.Size > size;
                bool pixelChanged = fpixels > pixels || fwidth != width;

                if (combine)
                    change = sizeChanged || pixelChanged;
                else if (sortBySize)
                    change = sizeChanged;
                else
                    change = pixelChanged;
                if (change)
                {
                    hs.Clear();
                    size = f.Size;
                    width = f.Width;
                    if (fpixels > pixels)
                    {
                        if (pixels > 0)
                            File.Copy(INDEX_FILE, HISTO + pixels + "_wp.index.txt", true);
                        pixels = fpixels;
                    }
                    if (fwidth != width)
                        width = fwidth;
                    foreach (FileInfo fl in loaded.GetFiles())
                    {
                        fl.Delete();
                    }
                    nbLoaded = 0;
                }
                else
                {
                    if (unique)
                        continue;
                }
                string fileName = Path.GetFileName(f.Path);
                if (hs.Contains(fileName))
                    continue;
                bool errorFs = false;
                try
                {
                    Image img = null;
                    if (fullscreen)
                    {
                        try
                        {
                            img = createFileFs(f);
                        }
                        catch (Exception ex)
                        {
                            errorFs = true;
                            Console.WriteLine(ex.Message);
                        }
                    }
                    if (errorFs || !fullscreen)
                        img = createFile(f);
                    if (img != null)
                    {
                        bool ok = true;
                        foreach (FileInfo fl in loaded.GetFiles())
                        {
                            if (ImageUtil.AreIdentical(img, fl.FullName))
                            {
                                ok = false;
                                break;
                            }
                        }
                        img.Dispose();

                        if (ok)
                        {
                            Console.WriteLine();
                            Console.WriteLine("----------------------------------------------------------");
                            if (lastF != null)
                                Console.WriteLine("courant:{0}", lastF);
                            Console.WriteLine("à venir:{0}", f);
                            Console.WriteLine("Attente:{0:0} ms Traitement:{1:0} ms", (nextFlash - DateTime.Now).TotalMilliseconds, (DateTime.Now - last).TotalMilliseconds);
                            while (DateTime.Now < nextFlash)
                                Thread.Sleep(30);
                            Console.WriteLine("----------------------------------------------------------");
                            if (checkScreen)
                            {
                                while (ScreenUtil.isRecovered(TMP_FILE, oneScreen))
                                {
                                    Console.WriteLine("Pause reason Recovered");
                                    Thread.Sleep((int)(1000 * Math.Max(1, delay)));
                                }
                            }
                            last = DateTime.Now;
                            File.Copy(TMP_PREPAR, TMP_FILE, true);
                            WinAPI.BmpLoad(TMP_FILE);
                            lastF = f;
                            nbLoaded++;
                            File.Copy(TMP_FILE, loaded.FullName + "\\" + Path.GetFileName(f.Path) + "_" + nbLoaded + ".bmp", true);
                            File.WriteAllText(INDEX_FILE, f.Path);
                            double delta = errorFs ? Math.Min(1, delay) : delay;
                            nextFlash = DateTime.Now.AddSeconds(delta);

                            if (uniqueName)
                                hs.Add(fileName);

                            checkScreen = this.checkScreen && !errorFs;

                        }
                        else
                        {
                            Console.WriteLine("Identique " + f);
                            continue;
                        }
                    }
                    else
                    {
                        Console.WriteLine("Blank " + f);
                        continue;
                    }

                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                }
            }
        }
        private SessionSwitchReason currentSwitchSessionStatus = SessionSwitchReason.SessionLogon;
        private void SystemEvents_SessionSwitch(object sender, SessionSwitchEventArgs e)
        {
            Console.WriteLine("SystemEvents_SessionSwitch:" + e.Reason);
            currentSwitchSessionStatus = e.Reason;

        }

        void SystemEvents_PowerModeChanged(object sender, PowerModeChangedEventArgs e)
        {
            Console.WriteLine("SystemEvents_PowerModeChanged:" + e.Mode.ToString());
            if (e.Mode == PowerModes.Resume)
                GO = true;
            else GO = false;
        }

        private void paramGr(Graphics graphics)
        {
            graphics.CompositingMode = CompositingMode.SourceCopy;
            graphics.CompositingQuality = CompositingQuality.AssumeLinear;
            graphics.InterpolationMode = InterpolationMode.NearestNeighbor;
            graphics.SmoothingMode = SmoothingMode.None;
            graphics.PixelOffsetMode = PixelOffsetMode.None;
        }

        private Image createFileFs(FileDto f)
        {
            Image img = Image.FromFile(f.Path);
            Bitmap bmp = new Bitmap(img.Width, img.Height);
            using (Graphics g = Graphics.FromImage(bmp))
            {
                g.DrawImage(img, 0, 0);
            }

            img.Dispose();
            img = bmp;

            int largeur0 = img.Width;
            int hauteur0 = img.Height;

            Console.WriteLine("{0}={1}x{2} {3} {4}", largeur0 * hauteur0, largeur0, hauteur0, f.HumanReadableSize, img.PixelFormat);

            double r0 = (double)HAUTEUR / (double)LARGEUR;
            double r = (double)hauteur0 / (double)largeur0;

            //facteur d'augmentation
            int scale = 1;

            //1. on teste blank
            int largeurTrame;
            int hauteurTrame;

            Bitmap trame;
            img.Save(TMP_FILE1, ImageFormat.Bmp);
            var imgVerif = ImageUtil.Scan(TMP_FILE1);
            if (imgVerif == null)
            {
                img.Dispose();
                return null;
            }

            imgVerif.Dispose();

            int l = largeur0;
            int h = hauteur0;
            //int l0 = l;
            //int h0 = h;
            ////Image currentImage = img;
            //while (true)
            //{
            //    l *= 2;
            //    if (l > LARGEUR)
            //        break;
            //    h *= 2;
            //    if (h > HAUTEUR)
            //        break;
            //    l0 = l;
            //    h0 = h;
            //}

            if (r > r0)
                scale = HAUTEUR / hauteur0;
            else
                scale = LARGEUR / largeur0;

            l *= scale;
            h *= scale;

            //l=l0; 
            //h=h0; 

            //var trameInter = new Bitmap(l, h, img.PixelFormat);
            //using (Graphics g = Graphics.FromImage(trameInter))
            //{
            //    paramGr(g);
            //    //int _xrec = (int)((LARGEUR - l) / 2.0);
            //    //int _yrec = (int)((HAUTEUR - h) / 2.0);
            //    //Rectangle _centré = new Rectangle(_xrec, _yrec, l, h);
            //    Rectangle rect = new Rectangle(0, 0, l, h);
            //    // g.DrawImageUnscaledAndClipped(img, _centré);
            //   // g.DrawImageUnscaledAndClipped(img, rect);
            // g.DrawImage(img, rect, 0,0, l,h, GraphicsUnit.Pixel); 
            // //    g.DrawImage(img, rect); 

            //  //  trameInter.Dispose();
            //    // img.Dispose();


            //   // return Image.FromFile(TMP_FILE);
            //}
            var trameInter = img;
            if (scale > 1)
            {
                trameInter = ImageUtil.Scale(img, scale);
            }

            trameInter.Save(TMP_FILE2, ImageFormat.Bmp);

            imgVerif = ImageUtil.Scan(TMP_FILE2);
            if (imgVerif == null)
            {
                img.Dispose();
                return null;
            }


            if (r > r0)
            {
                // image pas assez large --> ajout largeur



                hauteurTrame = HAUTEUR;
                largeurTrame = Convert.ToInt32(LARGEUR * r0 / r); //   Convert.ToInt32((double)hauteur0 / (double)r0);

            }
            else
            {
                // image trop large --> bandes en haut et en bas

                largeurTrame = LARGEUR;
                hauteurTrame = Convert.ToInt32(HAUTEUR * r / r0);
            }

            trame = new Bitmap(LARGEUR, HAUTEUR);
            Graphics graphics = Graphics.FromImage(trame);
            paramGr(graphics);
            int xrec = (int)((LARGEUR - largeurTrame) / 2.0);
            int yrec = (int)((HAUTEUR - hauteurTrame) / 2.0);



            // var abort = new Image.GetThumbnailImageAbort(ThumbnailCallback);
            //var thumbnail = img.GetThumbnailImage(largeurTrame , hauteurTrame, abort, IntPtr.Zero);

            Rectangle centré = new Rectangle(xrec, yrec, largeurTrame, hauteurTrame);
            // graphics.DrawImage(img, centré, 0, 0, largeur0, hauteur0, GraphicsUnit.Pixel);
            // Rectangle all = new Rectangle(0,0,LARGEUR, HAUTEUR); 
            //graphics.DrawImage(img, centré);
            graphics.DrawImageUnscaledAndClipped(trameInter, centré);
            trameInter.Dispose();
            //thumbnail.Save(TMP_FILE, ImageFormat.Bmp);

            //thumbnail.Dispose();
            // image.Dispose();

            trame.Save(TMP_PREPAR, ImageFormat.Bmp);


            trame.Dispose();
            // img.Dispose();
            graphics.Dispose();

            return Image.FromFile(TMP_PREPAR);

        }

        public bool ThumbnailCallback()
        {
            return false;
        }

        private Image createFile(FileDto f)
        {
            Image img = Image.FromFile(f.Path);

            int largeur0 = img.Width;
            int hauteur0 = img.Height;

            Console.WriteLine("{0}={1}x{2} {3}", largeur0 * hauteur0, largeur0, hauteur0, f.HumanReadableSize);

            double r0 = (double)HAUTEUR / (double)LARGEUR;

            int largeurTrame;
            int hauteurTrame;

            double r = (double)hauteur0 / (double)largeur0;





            if (r > r0)
            {
                // image pas assez large --> ajout largeur

                hauteurTrame = hauteur0;
                largeurTrame = Convert.ToInt32((double)hauteur0 / (double)r0);

            }
            else
            {
                // image trop large --> bandes en haut et en bas

                largeurTrame = largeur0;
                hauteurTrame = Convert.ToInt32((double)largeur0 * (double)r0);
            }
            Graphics graphics = null;
            Bitmap trame = null;
            if (highResolution)
                try
                {
                    trame = new Bitmap(largeurTrame, hauteurTrame, img.PixelFormat);
                    graphics = Graphics.FromImage(trame);
                }
                catch
                {
                    if (trame != null)
                        trame.Dispose();
                }
            if (graphics == null)
            {
                trame = new Bitmap(largeurTrame, hauteurTrame);
                graphics = Graphics.FromImage(trame);
            }

            paramGr(graphics);


            int xrec = (largeurTrame - largeur0) / 2;
            int yrec = (hauteurTrame - hauteur0) / 2;
            Rectangle centré = new Rectangle(xrec, yrec, largeur0, hauteur0);
            graphics.DrawImage(img, centré, 0, 0, largeur0, hauteur0, GraphicsUnit.Pixel);


            trame.Save(TMP_PREPAR, ImageFormat.Bmp);
            trame.Dispose();
            img.Dispose();
            graphics.Dispose();

            // verif
            var imgVerif = ImageUtil.Scan(TMP_PREPAR);
            return imgVerif;

            //using (Bitmap fs = new Bitmap(LARGEUR, HAUTEUR))
            //{
            //    Image i0 = null;
            //    Image i1 = null;
            //    using (var g = Graphics.FromImage(fs))
            //    {

            //        if (File.Exists(TMP_FILE))
            //        {
            //            i0 = Image.FromFile(TMP_FILE);
            //            gr.DrawImage(i0, new Rectangle(0, 0, LARGEUR, HAUTEUR), 0, 0, LARGEUR, HAUTEUR, GraphicsUnit.Pixel);
            //        }

            //        if (File.Exists(TMP_FILE1))
            //        {
            //            i1 = Image.FromFile(TMP_FILE1);
            //            gr.DrawImage(i0, new Rectangle(0, 0, LARGEUR, HAUTEUR), 0, 0, LARGEUR, HAUTEUR, GraphicsUnit.Pixel);
            //        }
            //    }
            //    fs.Save(TMP_FILE, ImageFormat.Bmp);
            //    if (i0 != null)
            //        i0.Dispose();
            //    if (i1 != null)
            //        i1.Dispose();
            //}
        }
    }
}
]]></content>
  </file>
  <file path="buro\buroSimpleSearch\Program.cs">
    <content><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using pdb.util.ordo;
using buroSimpleLib;
using System.IO;
using System.Drawing;
using System.Threading;
using pdb.util;
using System.Configuration;
using System.Drawing.Imaging;

namespace buroSimpleSearch
{
    class Program
    {
        static List<FileDto> list = new List<FileDto>();
        static HashSet<string> imageType = new HashSet<string> { "bmp", "gif", "ico", "jpeg", "jpg", "jpe", "png", "svg", "tif", "tiff" };
        static HashSet<string> noImageType = new HashSet<string>();

        static listCandidat imageCandidat = new listCandidat();
        static listCandidat NoImageCandidat = new listCandidat();
        static volatile object _lock = new object();
        static int LEVEL_MIN = 0;

        static void Main(string[] args)
        {
            Console.CancelKeyPress += new ConsoleCancelEventHandler(Console_CancelKeyPress);
            new Program().go();
        }

        static Ordonnanceur ordo;
        static StreamWriter sw = new StreamWriter(FileDto.PATH);
        void go()
        {
            // Scan(@"H:\spacer.gif");
            //  Scan(@"C:\temp\wp.bmp");
            //Scan(@"H:\noir.png");
            //Scan(@"H:\blanc.png");
            //Scan(@"H:\bleu.png");
            //Scan(@"H:\rouge.png");
            //Scan(@"H:\vert.png");


            //Scan(@"C:\apps\oracle\11.2.0.3\client-32\uix\cabo\images\bltdscn.gif");
            //Scan(@"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\VCWizards\AppWiz\Generic\CustomWizard\Templates\1033\spacer.gif");

            var _nbProc = ConfigurationManager.AppSettings["nbProc"];
            int nbProc = 3;
            if (!string.IsNullOrEmpty(_nbProc))
                nbProc = Convert.ToInt32(_nbProc);
            ordo = new Ordonnanceur(nbProc);

            var dirs = new List<string>();

            var paths = ConfigurationManager.AppSettings["paths"];
            if (string.IsNullOrEmpty(paths))
            {
                foreach (var drive in Environment.GetLogicalDrives())
                {
                    dirs.Add(drive);
                }
            }
            else
            {
                var tab = paths.Split(';');
                foreach (string path in tab)
                {
                    if (string.IsNullOrEmpty(path))
                        continue;
                    dirs.Add(paths);
                }
            }

            foreach (string dir in dirs)
            {
                ordo.addTask(new TaskDir(ordo, new DirectoryInfo(dir)));
            }
            //ordo.addTask(new TaskDir(ordo, new DirectoryInfo(@"C:\")));
            //ordo.addTask(new TaskDir(ordo, new DirectoryInfo(@"E:\")));
            //ordo.addTask(new TaskDir(ordo, new DirectoryInfo(@"I:\")));
            while (ordo.Busy)
                Thread.Sleep(30);
            sw.Flush();
            sw.Dispose();

            Console.WriteLine("fin");
            Console.Read();
        }

        private class TaskDir : Task
        {
            private DirectoryInfo dir;
            public TaskDir(Ordonnanceur ordo, DirectoryInfo dir)
                : base(ordo)
            {
                this.dir = dir;
            }

            protected override void action()
            {
                //   ConsoleLogger.log(dir.FullName);
                List<FileDto> aux = null;
                foreach (FileInfo f in dir.GetFiles())
                {
                    // ConsoleLogger.log("check " + f.FullName);
                    FileDto fd = check(f);
                    if (fd != null)
                    {
                        ConsoleLogger.log(fd.ToStringSearch());
                        if (aux == null)
                            aux = new List<FileDto>();
                        aux.Add(fd);
                    }
                }
                if (aux != null)
                {
                    lock (_lock)
                    {
                        foreach (FileDto fd in aux)
                        {
                            fd.appendToDb(sw);
                        }
                        sw.Flush();
                    }
                }
                //ConsoleLogger.log("fin " +dir.FullName);
                done = true;

                foreach (DirectoryInfo sub in dir.GetDirectories())
                {
                    ordo.addsubTask(new TaskDir(ordo, sub));
                }
            }



            public override string ToString()
            {
                return dir.FullName;
            }
        }

        private class candidat
        {
            public candidat(String ext) { this.ext = ext; }
            private String ext;
            private int note = 0;
            public void increment()
            {
                note++;
            }
            public bool Accepted { get { return note >= 10; } }
        }
        private class listCandidat
        {
            private IDictionary<String, candidat> list = new Dictionary<String, candidat>();

            public bool record(String ext)
            {
                candidat cand;
                if (!list.ContainsKey(ext))
                {
                    cand = new candidat(ext);
                    list.Add(ext, cand);
                }
                cand = list[ext];
                cand.increment();
                return cand.Accepted;
            }
        }

        //static public Image Scan(string file)
        //{
        //   return ImageUtil.Scan(file); 
        //}

        static FileDto check(FileInfo f)
        {
            var file = f.FullName;
            //  Console.WriteLine(file.FullName);
            var ext = Path.GetExtension(file).ToLower().Replace(".", "");
            if (noImageType.Contains(ext)) return null;



            Image img;
            FileDto fdto = null;
            try
            {
                img = Image.FromFile(file);
                if (img != null)
                    fdto = new FileDto() { Path = file, Size = f.Length, Height = img.Height, Width = img.Width };

                img.Dispose();
            }
            catch (Exception)
            {
                fdto = null;
            }

            if (ext != null && ext.Length > 1)
            {
                if (!imageType.Contains(ext))
                {
                    ConsoleLogger.log("TYPE:" + ext + " " + file + " " + fdto);
                    if (fdto != null)
                    {
                        lock (imageCandidat)
                        {
                            if (imageCandidat.record(ext))
                            {
                                imageType.Add(ext);
                                ConsoleLogger.log("TYPE OK!!:" + ext + " " + file);
                            }
                        }

                    }
                    else
                    {
                        lock (NoImageCandidat)
                        {
                            if (NoImageCandidat.record(ext))
                            {
                                noImageType.Add(ext);
                                ConsoleLogger.log("TYPE NOK!!:" + ext + " " + file);
                            }
                        }
                        return null;
                    }
                }

            }
            return fdto;




        }

        static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs e)
        {

            sw.Dispose();
        }

        static void write()
        {
            using (StreamWriter sw = new StreamWriter(FileDto.PATH))
            {
                foreach (FileDto f in list)
                {
                    sw.Write(f.Path);
                    sw.Write(";");
                    sw.WriteLine(f.Size);
                }
            }
        }
    }
}
]]></content>
  </file>
  </db>
